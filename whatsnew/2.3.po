# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2021-09-25 10:30+0100\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: Claudia Millan <clmilneb@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"

#: ../Doc/whatsnew/2.3.rst:3
msgid "What's New in Python 2.3"
msgstr "Qué hay de nuevo en Python 2.3"

#: ../Doc/whatsnew/2.3.rst:0
msgid "Author"
msgstr "Autor"

#: ../Doc/whatsnew/2.3.rst:5
msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

#: ../Doc/whatsnew/2.3.rst:11
msgid ""
"This article explains the new features in Python 2.3.  Python 2.3 was "
"released on July 29, 2003."
msgstr ""
"Este artículo explica las nuevas características de Python 2.3.  Python 2.3 "
"se publicó el 29 de julio de 2003."

#: ../Doc/whatsnew/2.3.rst:14
msgid ""
"The main themes for Python 2.3 are polishing some of the features added in "
"2.2, adding various small but useful enhancements to the core language, and "
"expanding the standard library.  The new object model introduced in the "
"previous version has benefited from 18 months of bugfixes and from "
"optimization efforts that have improved the performance of new-style "
"classes.  A few new built-in functions have been added such as :func:`sum` "
"and :func:`enumerate`.  The :keyword:`in` operator can now be used for "
"substring searches (e.g. ``\"ab\" in \"abc\"`` returns :const:`True`)."
msgstr ""
"Los temas principales de Python 2.3 son el pulido de algunas de las "
"características añadidas en la 2.2, la adición de varias mejoras pequeñas "
"pero útiles al núcleo del lenguaje y la ampliación de la biblioteca "
"estándar.  El nuevo modelo de objetos introducido en la versión anterior se "
"ha beneficiado de 18 meses de correcciones de errores y de esfuerzos de "
"optimización que han mejorado el rendimiento de las clases de nuevo estilo.  "
"Se han añadido algunas funciones incorporadas, como :func:`sum` y :func:"
"`enumerate`.  El operador :keyword:`in` puede utilizarse ahora para "
"búsquedas de subcadenas (por ejemplo, ``\"ab\" en \"abc\"`` retorna :const:"
"`True`)."

#: ../Doc/whatsnew/2.3.rst:23
msgid ""
"Some of the many new library features include Boolean, set, heap, and date/"
"time data types, the ability to import modules from ZIP-format archives, "
"metadata support for the long-awaited Python catalog, an updated version of "
"IDLE, and modules for logging messages, wrapping text, parsing CSV files, "
"processing command-line options, using BerkeleyDB databases...  the list of "
"new and enhanced modules is lengthy."
msgstr ""
"Algunas de las nuevas características de la biblioteca son los tipos de "
"datos booleanos, de conjunto, de montón y de fecha/hora, la posibilidad de "
"importar módulos desde archivos con formato ZIP, el soporte de metadatos "
"para el tan esperado catálogo de Python, una versión actualizada de IDLE y "
"módulos para registrar mensajes, envolver texto, analizar archivos CSV, "
"procesar opciones de línea de comandos, utilizar bases de datos "
"BerkeleyDB... la lista de módulos nuevos y mejorados es larga."

#: ../Doc/whatsnew/2.3.rst:30
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.3, such as the Python Library "
"Reference and the Python Reference Manual.  If you want to understand the "
"complete implementation and design rationale, refer to the PEP for a "
"particular new feature."
msgstr ""
"Este artículo no pretende proporcionar una especificación completa de las "
"nuevas características, sino que proporciona una visión general "
"conveniente.  Para obtener todos los detalles, debes consultar la "
"documentación de Python 2.3, como la Referencia de la Biblioteca de Python y "
"el Manual de Referencia de Python.  Si quieres entender la implementación "
"completa y los fundamentos del diseño, consulta el PEP de una nueva "
"característica en particular."

#: ../Doc/whatsnew/2.3.rst:41
msgid "PEP 218: A Standard Set Datatype"
msgstr "PEP 218: Un tipo de datos de conjunto estándar"

#: ../Doc/whatsnew/2.3.rst:43
msgid ""
"The new :mod:`sets` module contains an implementation of a set datatype.  "
"The :class:`Set` class is for mutable sets, sets that can have members added "
"and removed.  The :class:`ImmutableSet` class is for sets that can't be "
"modified, and instances of :class:`ImmutableSet` can therefore be used as "
"dictionary keys. Sets are built on top of dictionaries, so the elements "
"within a set must be hashable."
msgstr ""
"El nuevo módulo :mod:`sets` contiene una implementación de un tipo de datos "
"de conjuntos.  La clase :class:`Set` es para conjuntos mutables, conjuntos a "
"los que se les pueden añadir y eliminar miembros.  La clase :class:"
"`ImmutableSet` es para los conjuntos que no pueden ser modificados, y las "
"instancias de :class:`ImmutableSet` pueden por lo tanto ser utilizadas como "
"claves de diccionario. Los conjuntos se construyen sobre diccionarios, por "
"lo que los elementos de un conjunto deben ser hashables."

#: ../Doc/whatsnew/2.3.rst:50
msgid "Here's a simple example::"
msgstr "Aquí hay un ejemplo simple::"

#: ../Doc/whatsnew/2.3.rst:66
msgid ""
"The union and intersection of sets can be computed with the :meth:`union` "
"and :meth:`intersection` methods; an alternative notation uses the bitwise "
"operators ``&`` and ``|``. Mutable sets also have in-place versions of these "
"methods, :meth:`union_update` and :meth:`intersection_update`. ::"
msgstr ""
"La unión y la intersección de los conjuntos pueden calcularse con los "
"métodos :meth:`union` y :meth:`intersection`; una notación alternativa "
"utiliza los operadores bitácora ``&`` y ``|``. Los conjuntos mutables "
"también tienen versiones in situ de estos métodos, :meth:`union_update` y :"
"meth:`intersection_update`. ::"

#: ../Doc/whatsnew/2.3.rst:86
msgid ""
"It's also possible to take the symmetric difference of two sets.  This is "
"the set of all elements in the union that aren't in the intersection.  "
"Another way of putting it is that the symmetric difference contains all "
"elements that are in exactly one set.  Again, there's an alternative "
"notation (``^``), and an in-place version with the ungainly name :meth:"
"`symmetric_difference_update`. ::"
msgstr ""
"También es posible tomar la diferencia simétrica de dos conjuntos.  Este es "
"el conjunto de todos los elementos de la unión que no están en la "
"intersección.  Otra forma de decirlo es que la diferencia simétrica contiene "
"todos los elementos que están exactamente en un conjunto.  De nuevo, existe "
"una notación alternativa (``^``), y una versión in-place con el poco "
"agraciado nombre :meth:`symmetric_difference_update`. ::"

#: ../Doc/whatsnew/2.3.rst:100
msgid ""
"There are also :meth:`issubset` and :meth:`issuperset` methods for checking "
"whether one set is a subset or superset of another::"
msgstr ""
"También hay métodos :meth:`issubset` y :meth:`issuperset` para comprobar si "
"un conjunto es subconjunto o superconjunto de otro::"

#: ../Doc/whatsnew/2.3.rst:117
msgid ":pep:`218` - Adding a Built-In Set Object Type"
msgstr ":pep:`218` - Añadiendo un tipo de objeto de conjunto incorporado"

#: ../Doc/whatsnew/2.3.rst:117
msgid ""
"PEP written by Greg V. Wilson. Implemented by Greg V. Wilson, Alex Martelli, "
"and GvR."
msgstr ""
"PEP escrito por Greg V. Wilson. Implementado por Greg V. Wilson, Alex "
"Martelli y GvR."

#: ../Doc/whatsnew/2.3.rst:126
msgid "PEP 255: Simple Generators"
msgstr "PEP 255: Generadores simples"

#: ../Doc/whatsnew/2.3.rst:128
msgid ""
"In Python 2.2, generators were added as an optional feature, to be enabled "
"by a ``from __future__ import generators`` directive.  In 2.3 generators no "
"longer need to be specially enabled, and are now always present; this means "
"that :keyword:`yield` is now always a keyword.  The rest of this section is "
"a copy of the description of generators from the \"What's New in Python "
"2.2\" document; if you read it back when Python 2.2 came out, you can skip "
"the rest of this section."
msgstr ""
"En Python 2.2, los generadores se añadieron como una característica "
"opcional, que se activaba mediante una directiva ``from __future__ import "
"generators``.  En 2.3 los generadores ya no necesitan ser habilitados "
"especialmente, y ahora están siempre presentes; esto significa que :keyword:"
"`yield` es ahora siempre una palabra clave.  El resto de esta sección es una "
"copia de la descripción de los generadores del documento \"What's New in "
"Python 2.2\"; si lo leíste cuando salió Python 2.2, puedes saltarte el resto "
"de esta sección."

#: ../Doc/whatsnew/2.3.rst:136
msgid ""
"You're doubtless familiar with how function calls work in Python or C. When "
"you call a function, it gets a private namespace where its local variables "
"are created.  When the function reaches a :keyword:`return` statement, the "
"local variables are destroyed and the resulting value is returned to the "
"caller.  A later call to the same function will get a fresh new set of local "
"variables. But, what if the local variables weren't thrown away on exiting a "
"function? What if you could later resume the function where it left off?  "
"This is what generators provide; they can be thought of as resumable "
"functions."
msgstr ""
"Sin duda estás familiarizado con cómo funcionan las llamadas a funciones en "
"Python o C. Cuando llamas a una función, ésta obtiene un espacio de nombres "
"privado donde se crean sus variables locales.  Cuando la función llega a una "
"declaración :keyword:`return`, las variables locales se destruyen y el valor "
"resultante se retorna a quien la llamó.  Una llamada posterior a la misma "
"función obtendrá un nuevo conjunto de variables locales. Pero, ¿qué pasaría "
"si las variables locales no se tiraran al salir de una función? ¿Qué pasaría "
"si pudieras reanudar la función donde la dejaste?  Esto es lo que "
"proporcionan los generadores; se puede pensar en ellos como funciones "
"reanudables."

#: ../Doc/whatsnew/2.3.rst:145
msgid "Here's the simplest example of a generator function::"
msgstr "Este es el ejemplo más sencillo de una función generadora::"

#: ../Doc/whatsnew/2.3.rst:151
msgid ""
"A new keyword, :keyword:`yield`, was introduced for generators.  Any "
"function containing a :keyword:`!yield` statement is a generator function; "
"this is detected by Python's bytecode compiler which compiles the function "
"specially as a result."
msgstr ""
"Se ha introducido una nueva palabra clave, :keyword:`yield`, para los "
"generadores.  Cualquier función que contenga una declaración :keyword:`!"
"yield` es una función generadora; esto es detectado por el compilador de "
"código de bits de Python que compila la función especialmente como resultado."

#: ../Doc/whatsnew/2.3.rst:156
msgid ""
"When you call a generator function, it doesn't return a single value; "
"instead it returns a generator object that supports the iterator protocol.  "
"On executing the :keyword:`yield` statement, the generator outputs the value "
"of ``i``, similar to a :keyword:`return` statement.  The big difference "
"between :keyword:`!yield` and a :keyword:`!return` statement is that on "
"reaching a :keyword:`!yield` the generator's state of execution is suspended "
"and local variables are preserved.  On the next call to the generator's ``."
"next()`` method, the function will resume executing immediately after the :"
"keyword:`!yield` statement.  (For complicated reasons, the :keyword:`!yield` "
"statement isn't allowed inside the :keyword:`try` block of a :keyword:`!"
"try`...\\ :keyword:`!finally` statement; read :pep:`255` for a full "
"explanation of the interaction between :keyword:`!yield` and exceptions.)"
msgstr ""
"Cuando se llama a una función generadora, ésta no retorna un único valor, "
"sino que retorna un objeto generador que soporta el protocolo de los "
"iteradores.  Al ejecutar la sentencia :keyword:`yield`, el generador retorna "
"el valor de ``i``, de forma similar a una sentencia :keyword:`return`.  La "
"gran diferencia entre :keyword:`!yield` y una sentencia :keyword:`!return` "
"es que al llegar a una sentencia :keyword:`!yield` se suspende el estado de "
"ejecución del generador y se conservan las variables locales.  En la "
"siguiente llamada al método ``.next()`` del generador, la función se "
"reanudará la ejecución inmediatamente después de la sentencia :keyword:`!"
"yield`.  (Por razones complicadas, la sentencia :keyword:`!yield` no está "
"permitida dentro del bloque :keyword:`try` de una sentencia :keyword:`!"
"try`...`; lea :pep:`255` para una explicación completa de la interacción "
"entre :keyword:`!yield` y las excepciones)"

#: ../Doc/whatsnew/2.3.rst:169
msgid "Here's a sample usage of the :func:`generate_ints` generator::"
msgstr "Este es un ejemplo de uso del generador :func:`generate_ints`::"

#: ../Doc/whatsnew/2.3.rst:186
msgid ""
"You could equally write ``for i in generate_ints(5)``, or ``a,b,c = "
"generate_ints(3)``."
msgstr ""
"También podrías escribir ``for i in generate_ints(5)``, o ``a,b,c = "
"generate_ints(3)``."

#: ../Doc/whatsnew/2.3.rst:189
msgid ""
"Inside a generator function, the :keyword:`return` statement can only be "
"used without a value, and signals the end of the procession of values; "
"afterwards the generator cannot return any further values. :keyword:`!"
"return` with a value, such as ``return 5``, is a syntax error inside a "
"generator function.  The end of the generator's results can also be "
"indicated by raising :exc:`StopIteration` manually, or by just letting the "
"flow of execution fall off the bottom of the function."
msgstr ""
"Dentro de una función generadora, la expresión :keyword:`return` sólo puede "
"usarse sin un valor, y señala el final de la procesión de valores; después "
"el generador no puede retornar más valores. :keyword:`!return` con un valor, "
"como ``return 5``, es un error de sintaxis dentro de una función "
"generadora.  El final de los resultados del generador también puede "
"indicarse levantando manualmente :exc:`StopIteration`, o simplemente dejando "
"que el flujo de ejecución caiga en el fondo de la función."

#: ../Doc/whatsnew/2.3.rst:197
msgid ""
"You could achieve the effect of generators manually by writing your own "
"class and storing all the local variables of the generator as instance "
"variables.  For example, returning a list of integers could be done by "
"setting ``self.count`` to 0, and having the :meth:`next` method increment "
"``self.count`` and return it. However, for a moderately complicated "
"generator, writing a corresponding class would be much messier. :file:`Lib/"
"test/test_generators.py` contains a number of more interesting examples.  "
"The simplest one implements an in-order traversal of a tree using generators "
"recursively. ::"
msgstr ""
"Puedes conseguir el efecto de los generadores manualmente escribiendo tu "
"propia clase y almacenando todas las variables locales del generador como "
"variables de instancia.  Por ejemplo, la devolución de una lista de enteros "
"podría hacerse estableciendo ``self.count`` a 0, y haciendo que el método :"
"meth:`next` incremente ``self.count`` y lo retorne. Sin embargo, para un "
"generador medianamente complicado, escribir la clase correspondiente sería "
"mucho más complicado. :file:`Lib/test/test_generators.py` contiene varios "
"ejemplos más interesantes.  El más sencillo implementa un recorrido en orden "
"de un árbol utilizando generadores de forma recursiva ::"

#: ../Doc/whatsnew/2.3.rst:215
msgid ""
"Two other examples in :file:`Lib/test/test_generators.py` produce solutions "
"for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so that "
"no queen threatens another) and the Knight's Tour (a route that takes a "
"knight to every square of an $NxN$ chessboard without visiting any square "
"twice)."
msgstr ""
"Otros dos ejemplos en :file:`Lib/test/test_generators.py` producen "
"soluciones para el problema de las N reinas (colocar $N$ reinas en un "
"tablero de ajedrez $NxN$ de forma que ninguna reina amenace a otra) y el "
"recorrido del caballero (una ruta que lleva a un caballo a cada casilla de "
"un tablero de ajedrez $NxN$ sin visitar ninguna casilla dos veces)."

#: ../Doc/whatsnew/2.3.rst:220
msgid ""
"The idea of generators comes from other programming languages, especially "
"Icon (https://www.cs.arizona.edu/icon/), where the idea of generators is "
"central.  In Icon, every expression and function call behaves like a "
"generator.  One example from \"An Overview of the Icon Programming Language"
"\" at https://www.cs.arizona.edu/icon/docs/ipd266.htm gives an idea of what "
"this looks like::"
msgstr ""
"La idea de los generadores proviene de otros lenguajes de programación, "
"especialmente de Icon (https://www.cs.arizona.edu/icon/), donde la idea de "
"los generadores es fundamental.  En Icon, cada expresión y llamada a una "
"función se comporta como un generador.  Un ejemplo de \"*An Overview of the "
"Icon Programming Language*\" en https://www.cs.arizona.edu/icon/docs/ipd266."
"htm da una idea de cómo es esto::"

#: ../Doc/whatsnew/2.3.rst:230
msgid ""
"In Icon the :func:`find` function returns the indexes at which the substring "
"\"or\" is found: 3, 23, 33.  In the :keyword:`if` statement, ``i`` is first "
"assigned a value of 3, but 3 is less than 5, so the comparison fails, and "
"Icon retries it with the second value of 23.  23 is greater than 5, so the "
"comparison now succeeds, and the code prints the value 23 to the screen."
msgstr ""
"En Icon la función :func:`find` retorna los índices en los que se encuentra "
"la subcadena \"o\": 3, 23, 33.  En la expresión :keyword:`if`, a ``i`` se le "
"asigna primero un valor de 3, pero 3 es menor que 5, por lo que la "
"comparación falla, e Icon la reintenta con el segundo valor de 23. 23 es "
"mayor que 5, por lo que la comparación ahora tiene éxito, y el código "
"imprime el valor 23 en la pantalla."

#: ../Doc/whatsnew/2.3.rst:236
msgid ""
"Python doesn't go nearly as far as Icon in adopting generators as a central "
"concept.  Generators are considered part of the core Python language, but "
"learning or using them isn't compulsory; if they don't solve any problems "
"that you have, feel free to ignore them. One novel feature of Python's "
"interface as compared to Icon's is that a generator's state is represented "
"as a concrete object (the iterator) that can be passed around to other "
"functions or stored in a data structure."
msgstr ""
"Python no va tan lejos como Icon en la adopción de generadores como concepto "
"central.  Los generadores se consideran parte del núcleo del lenguaje "
"Python, pero aprenderlos o utilizarlos no es obligatorio; si no resuelven "
"ningún problema que tengas, siéntete libre de ignorarlos. Una característica "
"novedosa de la interfaz de Python en comparación con la de Icon es que el "
"estado de un generador se representa como un objeto concreto (el iterador) "
"que puede pasarse a otras funciones o almacenarse en una estructura de datos."

#: ../Doc/whatsnew/2.3.rst:248
msgid ":pep:`255` - Simple Generators"
msgstr ":pep:`255` - Generadores simples"

#: ../Doc/whatsnew/2.3.rst:248
msgid ""
"Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implemented "
"mostly by Neil Schemenauer and Tim Peters, with other fixes from the Python "
"Labs crew."
msgstr ""
"Escrito por Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implementado "
"principalmente por Neil Schemenauer y Tim Peters, con otras correcciones del "
"equipo de Python Labs."

#: ../Doc/whatsnew/2.3.rst:257
msgid "PEP 263: Source Code Encodings"
msgstr "PEP 263: Codificación del código fuente"

#: ../Doc/whatsnew/2.3.rst:259
msgid ""
"Python source files can now be declared as being in different character set "
"encodings.  Encodings are declared by including a specially formatted "
"comment in the first or second line of the source file.  For example, a "
"UTF-8 file can be declared with::"
msgstr ""
"Los archivos fuente de Python ahora pueden declararse con diferentes "
"codificaciones de conjuntos de caracteres.  Las codificaciones se declaran "
"incluyendo un comentario con formato especial en la primera o segunda línea "
"del archivo fuente.  Por ejemplo, un archivo UTF-8 puede declararse con::"

#: ../Doc/whatsnew/2.3.rst:267
msgid ""
"Without such an encoding declaration, the default encoding used is 7-bit "
"ASCII. Executing or importing modules that contain string literals with 8-"
"bit characters and have no encoding declaration will result in a :exc:"
"`DeprecationWarning` being signalled by Python 2.3; in 2.4 this will be a "
"syntax error."
msgstr ""
"Sin esta declaración de codificación, la codificación por defecto utilizada "
"es ASCII de 7 bits. Ejecutar o importar módulos que contengan literales de "
"cadena con caracteres de 8 bits y que no tengan una declaración de "
"codificación dará lugar a un :exc:`DeprecationWarning` señalado por Python "
"2.3; en 2.4 será un error de sintaxis."

#: ../Doc/whatsnew/2.3.rst:273
msgid ""
"The encoding declaration only affects Unicode string literals, which will be "
"converted to Unicode using the specified encoding.  Note that Python "
"identifiers are still restricted to ASCII characters, so you can't have "
"variable names that use characters outside of the usual alphanumerics."
msgstr ""
"La declaración de codificación sólo afecta a los literales de cadena "
"Unicode, que se convertirán a Unicode utilizando la codificación "
"especificada.  Ten en cuenta que los identificadores de Python siguen "
"restringidos a caracteres ASCII, por lo que no puedes tener nombres de "
"variables que utilicen caracteres fuera de los alfanuméricos habituales."

#: ../Doc/whatsnew/2.3.rst:282
msgid ":pep:`263` - Defining Python Source Code Encodings"
msgstr ""
":pep:`263` - Definición de las codificaciones del código fuente de Python"

#: ../Doc/whatsnew/2.3.rst:282
msgid ""
"Written by Marc-André Lemburg and Martin von Löwis; implemented by Suzuki "
"Hisao and Martin von Löwis."
msgstr ""
"Escrito por Marc-André Lemburg y Martin von Löwis; realizado por Suzuki "
"Hisao y Martin von Löwis."

#: ../Doc/whatsnew/2.3.rst:289
msgid "PEP 273: Importing Modules from ZIP Archives"
msgstr "PEP 273: Importar módulos desde archivos ZIP"

#: ../Doc/whatsnew/2.3.rst:291
msgid ""
"The new :mod:`zipimport` module adds support for importing modules from a "
"ZIP-format archive.  You don't need to import the module explicitly; it will "
"be automatically imported if a ZIP archive's filename is added to ``sys."
"path``. For example:"
msgstr ""
"El nuevo módulo :mod:`zipimport` añade soporte para importar módulos desde "
"un archivo en formato ZIP.  No es necesario importar el módulo "
"explícitamente; se importará automáticamente si se añade el nombre de un "
"archivo ZIP a ``sys.path``. Por ejemplo:"

#: ../Doc/whatsnew/2.3.rst:314
msgid ""
"An entry in ``sys.path`` can now be the filename of a ZIP archive. The ZIP "
"archive can contain any kind of files, but only files named :file:`\\*.py`, :"
"file:`\\*.pyc`, or :file:`\\*.pyo` can be imported.  If an archive only "
"contains :file:`\\*.py` files, Python will not attempt to modify the archive "
"by adding the corresponding :file:`\\*.pyc` file, meaning that if a ZIP "
"archive doesn't contain :file:`\\*.pyc` files, importing may be rather slow."
msgstr ""
"Una entrada en ``sys.path`` puede ser ahora el nombre de un archivo ZIP. El "
"archivo ZIP puede contener cualquier tipo de ficheros, pero sólo se pueden "
"importar los ficheros llamados :file:`\\*.py`, :file:`\\*.pyc`, o :file:`\\*."
"pyo`.  Si un archivo sólo contiene ficheros :file:`\\*.py`, Python no "
"intentará modificar el archivo añadiendo el correspondiente fichero :file:`"
"\\*.pyc`, lo que significa que si un archivo ZIP no contiene ficheros :file:`"
"\\*.pyc`, la importación puede ser bastante lenta."

#: ../Doc/whatsnew/2.3.rst:321
msgid ""
"A path within the archive can also be specified to only import from a "
"subdirectory; for example, the path :file:`/tmp/example.zip/lib/` would only "
"import from the :file:`lib/` subdirectory within the archive."
msgstr ""
"También se puede especificar una ruta dentro del archivo para importar sólo "
"de un subdirectorio; por ejemplo, la ruta :file:`/tmp/example.zip/lib/` sólo "
"importaría del subdirectorio :file:`lib/` dentro del archivo."

#: ../Doc/whatsnew/2.3.rst:331
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - Importación de módulos desde archivos Zip"

#: ../Doc/whatsnew/2.3.rst:329
msgid ""
"Written by James C. Ahlstrom,  who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`,  but uses an implementation "
"written by Just van Rossum  that uses the import hooks described in :pep:"
"`302`. See section :ref:`section-pep302` for a description of the new import "
"hooks."
msgstr ""
"Escrito por James C. Ahlstrom, que también proporcionó una implementación. "
"Python 2.3 sigue la especificación en :pep:`273`, pero utiliza una "
"implementación escrita por Just van Rossum que utiliza los ganchos de "
"importación descritos en :pep:`302`. Vea la sección :ref:`section-pep302` "
"para una descripción de los nuevos ganchos de importación."

#: ../Doc/whatsnew/2.3.rst:338
msgid "PEP 277: Unicode file name support for Windows NT"
msgstr "PEP 277: Soporte de nombres de archivo Unicode para Windows NT"

#: ../Doc/whatsnew/2.3.rst:340
msgid ""
"On Windows NT, 2000, and XP, the system stores file names as Unicode "
"strings. Traditionally, Python has represented file names as byte strings, "
"which is inadequate because it renders some file names inaccessible."
msgstr ""
"En Windows NT, 2000 y XP, el sistema almacena los nombres de archivo como "
"cadenas Unicode. Tradicionalmente, Python ha representado los nombres de "
"archivo como cadenas de bytes, lo cual es inadecuado porque hace que algunos "
"nombres de archivo sean inaccesibles."

#: ../Doc/whatsnew/2.3.rst:344
msgid ""
"Python now allows using arbitrary Unicode strings (within the limitations of "
"the file system) for all functions that expect file names, most notably the :"
"func:`open` built-in function. If a Unicode string is passed to :func:`os."
"listdir`, Python now returns a list of Unicode strings.  A new function, :"
"func:`os.getcwdu`, returns the current directory as a Unicode string."
msgstr ""
"Python permite ahora utilizar cadenas Unicode arbitrarias (dentro de las "
"limitaciones del sistema de archivos) para todas las funciones que esperan "
"nombres de archivos, sobre todo la función incorporada :func:`open`. Si se "
"pasa una cadena Unicode a :func:`os.listdir`, Python retorna ahora una lista "
"de cadenas Unicode.  Una nueva función, :func:`os.getcwdu`, retorna el "
"directorio actual como una cadena Unicode."

#: ../Doc/whatsnew/2.3.rst:350
msgid ""
"Byte strings still work as file names, and on Windows Python will "
"transparently convert them to Unicode using the ``mbcs`` encoding."
msgstr ""
"Las cadenas de bytes siguen funcionando como nombres de archivo, y en "
"Windows Python las convertirá de forma transparente a Unicode utilizando la "
"codificación ``mbcs``."

#: ../Doc/whatsnew/2.3.rst:353
msgid ""
"Other systems also allow Unicode strings as file names but convert them to "
"byte strings before passing them to the system, which can cause a :exc:"
"`UnicodeError` to be raised. Applications can test whether arbitrary Unicode "
"strings are supported as file names by checking :attr:`os.path."
"supports_unicode_filenames`, a Boolean value."
msgstr ""
"Otros sistemas también permiten cadenas Unicode como nombres de archivo, "
"pero las convierten en cadenas de bytes antes de pasarlas al sistema, lo que "
"puede provocar un :exc:`UnicodeError`. Las aplicaciones pueden comprobar si "
"se admiten cadenas Unicode arbitrarias como nombres de archivo comprobando :"
"attr:`os.path.supports_unicode_filenames`, un valor booleano."

#: ../Doc/whatsnew/2.3.rst:359
msgid "Under MacOS, :func:`os.listdir` may now return Unicode filenames."
msgstr ""
"En MacOS, :func:`os.listdir` ahora puede retornar nombres de archivo Unicode."

#: ../Doc/whatsnew/2.3.rst:365
msgid ":pep:`277` - Unicode file name support for Windows NT"
msgstr ":pep:`277` - Soporte de nombres de archivo Unicode para Windows NT"

#: ../Doc/whatsnew/2.3.rst:365
msgid ""
"Written by Neil Hodgson; implemented by Neil Hodgson, Martin von Löwis, and "
"Mark Hammond."
msgstr ""
"Escrito por Neil Hodgson; realizado por Neil Hodgson, Martin von Löwis y "
"Mark Hammond."

#: ../Doc/whatsnew/2.3.rst:375
msgid "PEP 278: Universal Newline Support"
msgstr "PEP 278: Soporte universal de nuevas líneas"

#: ../Doc/whatsnew/2.3.rst:377
msgid ""
"The three major operating systems used today are Microsoft Windows, Apple's "
"Macintosh OS, and the various Unix derivatives.  A minor irritation of cross-"
"platform work  is that these three platforms all use different characters to "
"mark the ends of lines in text files.  Unix uses the linefeed (ASCII "
"character 10), MacOS uses the carriage return (ASCII character 13), and "
"Windows uses a two-character sequence of a carriage return plus a newline."
msgstr ""
"Los tres principales sistemas operativos que se utilizan hoy en día son "
"Microsoft Windows, el sistema operativo Macintosh de Apple y los diversos "
"derivados de Unix.  Una pequeña molestia del trabajo entre plataformas es "
"que estas tres plataformas utilizan diferentes caracteres para marcar el "
"final de las líneas en los archivos de texto.  Unix utiliza el salto de "
"línea (carácter ASCII 10), MacOS utiliza el retorno de carro (carácter ASCII "
"13), y Windows utiliza una secuencia de dos caracteres de un retorno de "
"carro más una nueva línea."

#: ../Doc/whatsnew/2.3.rst:384
msgid ""
"Python's file objects can now support end of line conventions other than the "
"one followed by the platform on which Python is running. Opening a file with "
"the mode ``'U'`` or ``'rU'`` will open a file for reading in :term:"
"`universal newlines` mode.  All three line ending conventions will be "
"translated to a ``'\\n'`` in the strings returned by the various file "
"methods such as :meth:`read` and :meth:`readline`."
msgstr ""
"Los objetos de archivo de Python pueden ahora soportar convenciones de fin "
"de línea distintas de la que sigue la plataforma en la que se ejecuta "
"Python. Al abrir un archivo con el modo ``'U`` o ``'rU`` se abrirá un "
"archivo para su lectura en modo :term:`universal newlines`.  Las tres "
"convenciones de final de línea se traducirán a un ``'\\n'`` en las cadenas "
"retornadas por los distintos métodos de archivo como :meth:`read` y :meth:"
"`readline`."

#: ../Doc/whatsnew/2.3.rst:391
msgid ""
"Universal newline support is also used when importing modules and when "
"executing a file with the :func:`execfile` function.  This means that Python "
"modules can be shared between all three operating systems without needing to "
"convert the line-endings."
msgstr ""
"El soporte universal de nuevas líneas también se utiliza al importar módulos "
"y al ejecutar un archivo con la función :func:`execfile`.  Esto significa "
"que los módulos de Python pueden ser compartidos entre los tres sistemas "
"operativos sin necesidad de convertir los finales de línea."

#: ../Doc/whatsnew/2.3.rst:396
msgid ""
"This feature can be disabled when compiling Python by specifying the :option:"
"`!--without-universal-newlines` switch when running Python's :program:"
"`configure` script."
msgstr ""
"Esta función puede desactivarse al compilar Python especificando la opción :"
"option:`!--without-universal-newlines` al ejecutar el script :program:"
"`configure` de Python."

#: ../Doc/whatsnew/2.3.rst:403
msgid ":pep:`278` - Universal Newline Support"
msgstr ":pep:`278` - Soporte universal de nuevas líneas"

#: ../Doc/whatsnew/2.3.rst:404
msgid "Written and implemented by Jack Jansen."
msgstr "Escrito y ejecutado por Jack Jansen."

#: ../Doc/whatsnew/2.3.rst:412
msgid "PEP 279: enumerate()"
msgstr "PEP 279: enumerate()"

#: ../Doc/whatsnew/2.3.rst:414
msgid ""
"A new built-in function, :func:`enumerate`, will make certain loops a bit "
"clearer.  ``enumerate(thing)``, where *thing* is either an iterator or a "
"sequence, returns an iterator that will return ``(0, thing[0])``, ``(1, "
"thing[1])``, ``(2, thing[2])``, and so forth."
msgstr ""
"Una nueva función incorporada, :func:`enumerate`, hará que ciertos bucles "
"sean un poco más claros.  ``enumerate(cosa)``, donde *cosa* es un iterador o "
"una secuencia, retorna un iterador que retornará ``(0, cosa[0])``, ``(1, "
"cosa[1])``, ``(2, cosa[2])``, y así sucesivamente."

#: ../Doc/whatsnew/2.3.rst:419
msgid "A common idiom to change every element of a list looks like this::"
msgstr ""
"Un modismo común para cambiar cada elemento de una lista tiene el siguiente "
"aspecto::"

#: ../Doc/whatsnew/2.3.rst:426
msgid "This can be rewritten using :func:`enumerate` as::"
msgstr "Esto se puede reescribir usando :func:`enumerate` como::"

#: ../Doc/whatsnew/2.3.rst:435
msgid ":pep:`279` - The enumerate() built-in function"
msgstr ":pep:`279` - La función incorporada enumerate()"

#: ../Doc/whatsnew/2.3.rst:436
msgid "Written and implemented by Raymond D. Hettinger."
msgstr "Escrito y ejecutado por Raymond D. Hettinger."

#: ../Doc/whatsnew/2.3.rst:442
msgid "PEP 282: The logging Package"
msgstr "PEP 282: El paquete de registro"

#: ../Doc/whatsnew/2.3.rst:444
msgid ""
"A standard package for writing logs, :mod:`logging`, has been added to "
"Python 2.3.  It provides a powerful and flexible mechanism for generating "
"logging output which can then be filtered and processed in various ways.  A "
"configuration file written in a standard format can be used to control the "
"logging behavior of a program.  Python includes handlers that will write log "
"records to standard error or to a file or socket, send them to the system "
"log, or even e-mail them to a particular address; of course, it's also "
"possible to write your own handler classes."
msgstr ""
"Se ha añadido a Python 2.3 un paquete estándar para escribir registros, :mod:"
"`logging`.  Proporciona un mecanismo potente y flexible para generar salidas "
"de registro que pueden ser filtradas y procesadas de varias maneras.  Se "
"puede utilizar un archivo de configuración escrito en un formato estándar "
"para controlar el comportamiento de registro de un programa.  Python incluye "
"manejadores que escribirán los registros en el error estándar o en un "
"archivo o socket, los enviarán al registro del sistema, o incluso los "
"enviarán por correo electrónico a una dirección particular; por supuesto, "
"también es posible escribir tus propias clases de manejadores."

#: ../Doc/whatsnew/2.3.rst:453
msgid ""
"The :class:`Logger` class is the primary class. Most application code will "
"deal with one or more :class:`Logger` objects, each one used by a particular "
"subsystem of the application. Each :class:`Logger` is identified by a name, "
"and names are organized into a hierarchy using ``.``  as the component "
"separator. For example, you might have :class:`Logger` instances named "
"``server``, ``server.auth`` and ``server.network``.  The latter two "
"instances are below ``server`` in the hierarchy.  This means that if you "
"turn up the verbosity for ``server`` or direct ``server`` messages to a "
"different handler, the changes will also apply to records logged to ``server."
"auth`` and ``server.network``. There's also a root :class:`Logger` that's "
"the parent of all other loggers."
msgstr ""
"La clase :class:`Logger` es la clase principal. La mayoría del código de la "
"aplicación tratará con uno o más objetos :class:`Logger`, cada uno utilizado "
"por un subsistema particular de la aplicación. Cada :class:`Logger` se "
"identifica con un nombre, y los nombres se organizan en una jerarquía "
"utilizando ``.`` como separador de componentes. Por ejemplo, puedes tener "
"instancias de :class:`Logger` llamadas ``servidor``, ``servidor.auth`` y "
"``servidor.network``.  Estas dos últimas instancias están por debajo de "
"``servidor`` en la jerarquía.  Esto significa que si aumentas la verbosidad "
"de ``servidor`` o diriges los mensajes de ``servidor`` a un gestor "
"diferente, los cambios también se aplicarán a los registros de ``servidor."
"auth`` y ``servidor.network``. También hay un :class:`Logger` raíz que es el "
"padre de todos los demás loggers."

#: ../Doc/whatsnew/2.3.rst:464
msgid ""
"For simple uses, the :mod:`logging` package contains some convenience "
"functions that always use the root log::"
msgstr ""
"Para usos sencillos, el paquete :mod:`logging` contiene algunas funciones de "
"conveniencia que siempre utilizan la raíz log::"

#: ../Doc/whatsnew/2.3.rst:475 ../Doc/whatsnew/2.3.rst:500
msgid "This produces the following output::"
msgstr "Esto produce la siguiente salida::"

#: ../Doc/whatsnew/2.3.rst:481
msgid ""
"In the default configuration, informational and debugging messages are "
"suppressed and the output is sent to standard error.  You can enable the "
"display of informational and debugging messages by calling the :meth:"
"`setLevel` method on the root logger."
msgstr ""
"En la configuración por defecto, los mensajes informativos y de depuración "
"se suprimen y la salida se envía al error estándar.  Puede habilitar la "
"visualización de mensajes informativos y de depuración llamando al método :"
"meth:`setLevel` del registrador raíz."

#: ../Doc/whatsnew/2.3.rst:486
msgid ""
"Notice the :func:`warning` call's use of string formatting operators; all of "
"the functions for logging messages take the arguments ``(msg, arg1, "
"arg2, ...)`` and log the string resulting from ``msg % (arg1, arg2, ...)``."
msgstr ""
"Observe que la llamada :func:`warning` utiliza operadores de formato de "
"cadena; todas las funciones para el registro de mensajes toman los "
"argumentos ``(msg, arg1, arg2, ...)`` y registran la cadena resultante de "
"``msg % (arg1, arg2, ...)``."

#: ../Doc/whatsnew/2.3.rst:490
msgid ""
"There's also an :func:`exception` function that records the most recent "
"traceback.  Any of the other functions will also record the traceback if you "
"specify a true value for the keyword argument *exc_info*. ::"
msgstr ""
"También hay una función :func:`exception` que registra el rastro más "
"reciente.  Cualquiera de las otras funciones también registrará el rastro si "
"se especifica un valor verdadero para el argumento de la palabra clave "
"*exc_info*. ::"

#: ../Doc/whatsnew/2.3.rst:508
msgid ""
"Slightly more advanced programs will use a logger other than the root "
"logger. The ``getLogger(name)`` function is used to get a particular log, "
"creating it if it doesn't exist yet. ``getLogger(None)`` returns the root "
"logger. ::"
msgstr ""
"Los programas un poco más avanzados utilizarán un logger distinto del logger "
"raíz. La función ``getLogger(nombre)`` se utiliza para obtener un registro "
"en particular, creándolo si aún no existe. ``getLogger(None)`` retorna el "
"logger raíz. ::"

#: ../Doc/whatsnew/2.3.rst:519
msgid ""
"Log records are usually propagated up the hierarchy, so a message logged to "
"``server.auth`` is also seen by ``server`` and ``root``, but a :class:"
"`Logger` can prevent this by setting its :attr:`propagate` attribute to :"
"const:`False`."
msgstr ""
"Los registros se suelen propagar hacia arriba en la jerarquía, por lo que un "
"mensaje registrado en ``servidor.auth`` también es visto por ``servidor`` y "
"``root``, pero un :class:`Logger` puede evitar esto estableciendo su "
"atributo :attr:`propagate` a :const:`False`."

#: ../Doc/whatsnew/2.3.rst:523
msgid ""
"There are more classes provided by the :mod:`logging` package that can be "
"customized.  When a :class:`Logger` instance is told to log a message, it "
"creates a :class:`LogRecord` instance that is sent to any number of "
"different :class:`Handler` instances.  Loggers and handlers can also have an "
"attached list of filters, and each filter can cause the :class:`LogRecord` "
"to be ignored or can modify the record before passing it along.  When "
"they're finally output, :class:`LogRecord` instances are converted to text "
"by a :class:`Formatter` class.  All of these classes can be replaced by your "
"own specially-written classes."
msgstr ""
"Hay más clases proporcionadas por el paquete :mod:`logging` que pueden ser "
"personalizadas.  Cuando una instancia de :class:`Logger` recibe la orden de "
"registrar un mensaje, crea una instancia de :class:`LogRecord` que se envía "
"a cualquier número de instancias de :class:`Handler` diferentes.  Los "
"loggers y handlers también pueden tener una lista adjunta de filtros, y cada "
"filtro puede hacer que el :class:`LogRecord` sea ignorado o puede modificar "
"el registro antes de pasarlo.  Cuando finalmente se emiten, las instancias "
"de :class:`LogRecord` se convierten en texto mediante una clase :class:"
"`Formatter`.  Todas estas clases pueden ser reemplazadas por tus propias "
"clases especialmente escritas."

#: ../Doc/whatsnew/2.3.rst:533
msgid ""
"With all of these features the :mod:`logging` package should provide enough "
"flexibility for even the most complicated applications.  This is only an "
"incomplete overview of its features, so please see the package's reference "
"documentation for all of the details.  Reading :pep:`282` will also be "
"helpful."
msgstr ""
"Con todas estas características, el paquete :mod:`logging` debería "
"proporcionar suficiente flexibilidad incluso para las aplicaciones más "
"complicadas.  Esto es sólo un resumen incompleto de sus características, así "
"que por favor consulte la documentación de referencia del paquete para todos "
"los detalles.  La lectura de :pep:`282` también será útil."

#: ../Doc/whatsnew/2.3.rst:541
msgid ":pep:`282` - A Logging System"
msgstr ":pep:`282` - Un sistema de registro"

#: ../Doc/whatsnew/2.3.rst:542
msgid "Written by Vinay Sajip and Trent Mick; implemented by Vinay Sajip."
msgstr "Escrito por Vinay Sajip y Trent Mick; implementado por Vinay Sajip."

#: ../Doc/whatsnew/2.3.rst:550
msgid "PEP 285: A Boolean Type"
msgstr "PEP 285: Un tipo booleano"

#: ../Doc/whatsnew/2.3.rst:552
msgid ""
"A Boolean type was added to Python 2.3.  Two new constants were added to "
"the :mod:`__builtin__` module, :const:`True` and :const:`False`.  (:const:"
"`True` and :const:`False` constants were added to the built-ins in Python "
"2.2.1, but the 2.2.1 versions are simply set to integer values of 1 and 0 "
"and aren't a different type.)"
msgstr ""
"Se ha añadido un tipo booleano a Python 2.3.  Se añadieron dos nuevas "
"constantes al módulo :mod:`__builtin__`, :const:`True` y :const:`False`.  "
"(Las constantes :const:`True` y :const:`False` se añadieron a los módulos "
"incorporados en Python 2.2.1, pero las versiones de 2.2.1 se ajustan "
"simplemente a valores enteros de 1 y 0 y no son un tipo diferente)"

#: ../Doc/whatsnew/2.3.rst:558
msgid ""
"The type object for this new type is named :class:`bool`; the constructor "
"for it takes any Python value and converts it to :const:`True` or :const:"
"`False`. ::"
msgstr ""
"El objeto de tipo para este nuevo tipo se denomina :class:`bool`; su "
"constructor toma cualquier valor de Python y lo convierte en :const:`True` "
"o :const:`False`. ::"

#: ../Doc/whatsnew/2.3.rst:570
msgid ""
"Most of the standard library modules and built-in functions have been "
"changed to return Booleans. ::"
msgstr ""
"La mayoría de los módulos de la biblioteca estándar y las funciones "
"incorporadas se han modificado para retornar booleanos. ::"

#: ../Doc/whatsnew/2.3.rst:581
msgid ""
"Python's Booleans were added with the primary goal of making code clearer.  "
"For example, if you're reading a function and encounter the statement "
"``return 1``, you might wonder whether the ``1`` represents a Boolean truth "
"value, an index, or a coefficient that multiplies some other quantity.  If "
"the statement is ``return True``, however, the meaning of the return value "
"is quite clear."
msgstr ""
"Los booleanos de Python se añadieron con el objetivo principal de hacer el "
"código más claro.  Por ejemplo, si estás leyendo una función y te encuentras "
"con la sentencia ``return 1``, podrías preguntarte si el ``1`` representa un "
"valor de verdad booleano, un índice o un coeficiente que multiplica alguna "
"otra cantidad.  Sin embargo, si la sentencia es ``return True``, el "
"significado del valor de retorno es bastante claro."

#: ../Doc/whatsnew/2.3.rst:587
msgid ""
"Python's Booleans were *not* added for the sake of strict type-checking.  A "
"very strict language such as Pascal would also prevent you performing "
"arithmetic with Booleans, and would require that the expression in an :"
"keyword:`if` statement always evaluate to a Boolean result.  Python is not "
"this strict and never will be, as :pep:`285` explicitly says.  This means "
"you can still use any expression in an :keyword:`!if` statement, even ones "
"that evaluate to a list or tuple or some random object.  The Boolean type is "
"a subclass of the :class:`int` class so that arithmetic using a Boolean "
"still works. ::"
msgstr ""
"Los booleanos de Python *no* se añadieron en aras de una comprobación de "
"tipos estricta.  Un lenguaje muy estricto como Pascal también le impediría "
"realizar aritmética con booleanos, y requeriría que la expresión en una "
"declaración :keyword:`if` siempre se evaluara a un resultado booleano.  "
"Python no es tan estricto y nunca lo será, como dice explícitamente :pep:"
"`285`.  Esto significa que puede utilizar cualquier expresión en una "
"sentencia :keyword:`!if`, incluso las que se evalúan a una lista o tupla o "
"algún objeto aleatorio.  El tipo Booleano es una subclase de la clase :class:"
"`int` por lo que la aritmética que utiliza un Booleano sigue funcionando. ::"

#: ../Doc/whatsnew/2.3.rst:605
msgid ""
"To sum up :const:`True` and :const:`False` in a sentence: they're "
"alternative ways to spell the integer values 1 and 0, with the single "
"difference that :func:`str` and :func:`repr` return the strings ``'True'`` "
"and ``'False'`` instead of ``'1'`` and ``'0'``."
msgstr ""
"Para resumir :const:`True` and :const:`False`  en una frase: son formas "
"alternativas de deletrear los valores enteros 1 y 0, con la única diferencia "
"de que :func:`str` y :func:`repr` retornan las cadenas ``Verdadero`` y "
"``Falso`` en lugar de ``1`` y ``0``."

#: ../Doc/whatsnew/2.3.rst:613
msgid ":pep:`285` - Adding a bool type"
msgstr ":pep:`285` - Añadir un tipo booleano"

#: ../Doc/whatsnew/2.3.rst:614
msgid "Written and implemented by GvR."
msgstr "Escrito y ejecutado por GvR."

#: ../Doc/whatsnew/2.3.rst:620
msgid "PEP 293: Codec Error Handling Callbacks"
msgstr "PEP 293: Llamadas de retorno para el manejo de errores del códec"

#: ../Doc/whatsnew/2.3.rst:622
msgid ""
"When encoding a Unicode string into a byte string, unencodable characters "
"may be encountered.  So far, Python has allowed specifying the error "
"processing as either \"strict\" (raising :exc:`UnicodeError`), \"ignore"
"\" (skipping the character), or \"replace\" (using a question mark in the "
"output string), with \"strict\" being the default behavior. It may be "
"desirable to specify alternative processing of such errors, such as "
"inserting an XML character reference or HTML entity reference into the "
"converted string."
msgstr ""
"Al codificar una cadena Unicode en una cadena de bytes, pueden encontrarse "
"caracteres no codificables.  Hasta ahora, Python ha permitido especificar el "
"procesamiento del error como \"estricto\" (lanzando :exc:`UnicodeError`), "
"\"ignorar\" (saltando el carácter), o \"reemplazar\" (usando un signo de "
"interrogación en la cadena de salida), siendo \"estricto\" el comportamiento "
"por defecto. Puede ser deseable especificar un procesamiento alternativo de "
"tales errores, como insertar una referencia de carácter XML o una referencia "
"de entidad HTML en la cadena convertida."

#: ../Doc/whatsnew/2.3.rst:630
msgid ""
"Python now has a flexible framework to add different processing strategies.  "
"New error handlers can be added with :func:`codecs.register_error`, and "
"codecs then can access the error handler with :func:`codecs.lookup_error`. "
"An equivalent C API has been added for codecs written in C. The error "
"handler gets the necessary state information such as the string being "
"converted, the position in the string where the error was detected, and the "
"target encoding.  The handler can then either raise an exception or return a "
"replacement string."
msgstr ""
"Python tiene ahora un marco flexible para añadir diferentes estrategias de "
"procesamiento.  Se pueden añadir nuevos manejadores de errores con :func:"
"`codecs.register_error`, y los códecs pueden acceder al manejador de errores "
"con :func:`codecs.lookup_error`. Se ha añadido una API en C equivalente para "
"los códecs escritos en C. El gestor de errores obtiene la información de "
"estado necesaria, como la cadena que se está convirtiendo, la posición en la "
"cadena donde se ha detectado el error y la codificación de destino.  El "
"controlador puede entonces lanzar una excepción o retornar una cadena de "
"reemplazo."

#: ../Doc/whatsnew/2.3.rst:638
msgid ""
"Two additional error handlers have been implemented using this framework: "
"\"backslashreplace\" uses Python backslash quoting to represent unencodable "
"characters and \"xmlcharrefreplace\" emits XML character references."
msgstr ""
"Se han implementado dos manejadores de error adicionales utilizando este "
"marco: \"backslashreplace\" utiliza las comillas de barra invertida de "
"Python para representar los caracteres no codificables y \"xmlcharrefreplace"
"\" emite referencias de caracteres XML."

#: ../Doc/whatsnew/2.3.rst:645
msgid ":pep:`293` - Codec Error Handling Callbacks"
msgstr ":pep:`293` - Retrollamadas de manejo de errores del códec"

#: ../Doc/whatsnew/2.3.rst:646
msgid "Written and implemented by Walter Dörwald."
msgstr "Escrito y ejecutado por Walter Dörwald."

#: ../Doc/whatsnew/2.3.rst:654
msgid "PEP 301: Package Index and Metadata for Distutils"
msgstr "PEP 301: Índice de paquetes y metadatos para Distutils"

#: ../Doc/whatsnew/2.3.rst:656
msgid ""
"Support for the long-requested Python catalog makes its first appearance in "
"2.3."
msgstr ""
"La compatibilidad con el catálogo de Python, largamente solicitada, hace su "
"primera aparición en 2.3."

#: ../Doc/whatsnew/2.3.rst:658
msgid ""
"The heart of the catalog is the new Distutils :command:`register` command. "
"Running ``python setup.py register`` will collect the metadata describing a "
"package, such as its name, version, maintainer, description, &c., and send "
"it to a central catalog server.  The resulting catalog is available from "
"https://pypi.org."
msgstr ""
"El corazón del catálogo es el nuevo comando :command:`register` de "
"Distutils. Ejecutando ``python setup.py register`` se recogen los metadatos "
"que describen un paquete, como su nombre, versión, mantenedor, descripción, "
"etc., y se envían a un servidor de catálogo central.  El catálogo resultante "
"está disponible en https://pypi.org."

#: ../Doc/whatsnew/2.3.rst:664
msgid ""
"To make the catalog a bit more useful, a new optional *classifiers* keyword "
"argument has been added to the Distutils :func:`setup` function.  A list of "
"`Trove <http://catb.org/~esr/trove/>`_-style strings can be supplied to help "
"classify the software."
msgstr ""
"Para hacer el catálogo un poco más útil, se ha añadido un nuevo argumento "
"opcional de palabra clave *clasificadores* a la función Distutils :func:"
"`setup`.  Se puede suministrar una lista de cadenas de estilo `Trove <http://"
"catb.org/~esr/trove/>`_ para ayudar a clasificar el software."

#: ../Doc/whatsnew/2.3.rst:669
msgid ""
"Here's an example :file:`setup.py` with classifiers, written to be "
"compatible with older versions of the Distutils::"
msgstr ""
"Aquí hay un ejemplo :file:`setup.py` con clasificadores, escrito para que "
"sea compatible con las versiones más antiguas de Distutils::"

#: ../Doc/whatsnew/2.3.rst:688
msgid ""
"The full list of classifiers can be obtained by running  ``python setup.py "
"register --list-classifiers``."
msgstr ""
"La lista completa de clasificadores se puede obtener ejecutando ``python "
"setup.py register --list-classifiers``."

#: ../Doc/whatsnew/2.3.rst:694
msgid ":pep:`301` - Package Index and Metadata for Distutils"
msgstr ":pep:`301` - Índice de paquetes y metadatos para Distutils"

#: ../Doc/whatsnew/2.3.rst:695
msgid "Written and implemented by Richard Jones."
msgstr "Escrito y ejecutado por Richard Jones."

#: ../Doc/whatsnew/2.3.rst:703
msgid "PEP 302: New Import Hooks"
msgstr "PEP 302: Nuevos ganchos de importación"

#: ../Doc/whatsnew/2.3.rst:705
msgid ""
"While it's been possible to write custom import hooks ever since the :mod:"
"`ihooks` module was introduced in Python 1.3, no one has ever been really "
"happy with it because writing new import hooks is difficult and messy.  "
"There have been various proposed alternatives such as the :mod:`imputil` "
"and :mod:`iu` modules, but none of them has ever gained much acceptance, and "
"none of them were easily usable from C code."
msgstr ""
"Aunque ha sido posible escribir ganchos de importación personalizados desde "
"que se introdujo el módulo :mod:`ihooks` en Python 1.3, nadie ha estado "
"nunca realmente contento con él porque escribir nuevos ganchos de "
"importación es difícil y complicado.  Se han propuesto varias alternativas, "
"como los módulos :mod:`imputil` y :mod:`iu`, pero ninguno de ellos ha tenido "
"mucha aceptación, y ninguno era fácilmente utilizable desde el código C."

#: ../Doc/whatsnew/2.3.rst:712
msgid ""
":pep:`302` borrows ideas from its predecessors, especially from Gordon "
"McMillan's :mod:`iu` module.  Three new items  are added to the :mod:`sys` "
"module:"
msgstr ""
":pep:`302` toma prestadas ideas de sus predecesores, especialmente del "
"módulo :mod:`iu` de Gordon McMillan.  Se añaden tres nuevos elementos al "
"módulo :mod:`sys`:"

#: ../Doc/whatsnew/2.3.rst:716
msgid ""
"``sys.path_hooks`` is a list of callable objects; most  often they'll be "
"classes.  Each callable takes a string containing a path and either returns "
"an importer object that will handle imports from this path or raises an :exc:"
"`ImportError` exception if it can't handle this path."
msgstr ""
"``sys.path_hooks`` es una lista de objetos invocables; la mayoría de las "
"veces serán clases.  Cada llamada toma una cadena que contiene una ruta y "
"retorna un objeto importador que manejará las importaciones desde esta ruta "
"o lanza una excepción :exc:`ImportError` si no puede manejar esta ruta."

#: ../Doc/whatsnew/2.3.rst:721
msgid ""
"``sys.path_importer_cache`` caches importer objects for each path, so ``sys."
"path_hooks`` will only need to be traversed once for each path."
msgstr ""
"``sys.path_importer_cache`` almacena en caché los objetos del importador "
"para cada ruta, por lo que ``sys.path_hooks`` sólo tendrá que ser recorrido "
"una vez para cada ruta."

#: ../Doc/whatsnew/2.3.rst:724
msgid ""
"``sys.meta_path`` is a list of importer objects that will be traversed "
"before ``sys.path`` is checked.  This list is initially empty, but user code "
"can add objects to it.  Additional built-in and frozen modules can be "
"imported by an object added to this list."
msgstr ""
"``sys.meta_path`` es una lista de objetos importadores que se recorrerán "
"antes de comprobar ``sys.path``.  Esta lista está inicialmente vacía, pero "
"el código de usuario puede añadir objetos a ella.  Los módulos adicionales "
"incorporados y congelados pueden ser importados por un objeto añadido a esta "
"lista."

#: ../Doc/whatsnew/2.3.rst:729
msgid ""
"Importer objects must have a single method, ``find_module(fullname, "
"path=None)``.  *fullname* will be a module or package name, e.g. ``string`` "
"or ``distutils.core``.  :meth:`find_module` must return a loader object that "
"has a single method, ``load_module(fullname)``, that creates and returns the "
"corresponding module object."
msgstr ""
"Los objetos importadores deben tener un único método, "
"``find_module(fullname, path=None)``.  *fullname* será un nombre de módulo o "
"paquete, por ejemplo ``string`` o ``distutils.core``. :meth:`find_module` "
"debe retornar un objeto cargador que tenga un único método, "
"``load_module(fullname)``, que cree y retorne el objeto módulo "
"correspondiente."

#: ../Doc/whatsnew/2.3.rst:735
msgid ""
"Pseudo-code for Python's new import logic, therefore, looks something like "
"this (simplified a bit; see :pep:`302` for the full details)::"
msgstr ""
"Por lo tanto, el pseudocódigo de la nueva lógica de importación de Python es "
"algo así (simplificado un poco; véase :pep:`302` para los detalles "
"completos)::"

#: ../Doc/whatsnew/2.3.rst:760
msgid ":pep:`302` - New Import Hooks"
msgstr ":pep:`302` - Nuevos ganchos de importación"

#: ../Doc/whatsnew/2.3.rst:761
msgid ""
"Written by Just van Rossum and Paul Moore. Implemented by Just van Rossum."
msgstr ""
"Escrito por Just van Rossum y Paul Moore. Implementado por Just van Rossum."

#: ../Doc/whatsnew/2.3.rst:769
msgid "PEP 305: Comma-separated Files"
msgstr "PEP 305: Archivos separados por comas"

#: ../Doc/whatsnew/2.3.rst:771
msgid ""
"Comma-separated files are a format frequently used for exporting data from "
"databases and spreadsheets.  Python 2.3 adds a parser for comma-separated "
"files."
msgstr ""
"Los archivos separados por comas son un formato frecuentemente utilizado "
"para exportar datos de bases de datos y hojas de cálculo.  Python 2.3 añade "
"un analizador de archivos separados por comas."

#: ../Doc/whatsnew/2.3.rst:774
msgid "Comma-separated format is deceptively simple at first glance::"
msgstr ""
"El formato separado por comas es engañosamente sencillo a primera vista::"

#: ../Doc/whatsnew/2.3.rst:778
msgid ""
"Read a line and call ``line.split(',')``: what could be simpler? But toss in "
"string data that can contain commas, and things get more complicated::"
msgstr ""
"Leer una línea y llamar a ``line.split(',')``: ¿qué puede ser más sencillo? "
"Pero si se añaden datos de cadena que pueden contener comas, las cosas se "
"complican::"

#: ../Doc/whatsnew/2.3.rst:783
msgid ""
"A big ugly regular expression can parse this, but using the new  :mod:`csv` "
"package is much simpler::"
msgstr ""
"Una expresión regular grande y fea puede analizar esto, pero usar el nuevo "
"paquete :mod:`csv` es mucho más sencillo::"

#: ../Doc/whatsnew/2.3.rst:793
msgid ""
"The :func:`reader` function takes a number of different options. The field "
"separator isn't limited to the comma and can be changed to any character, "
"and so can the quoting and line-ending characters."
msgstr ""
"La función :func:`reader` admite varias opciones. El separador de campos no "
"se limita a la coma y puede cambiarse por cualquier carácter, al igual que "
"las comillas y el final de línea."

#: ../Doc/whatsnew/2.3.rst:797
msgid ""
"Different dialects of comma-separated files can be defined and registered; "
"currently there are two dialects, both used by Microsoft Excel. A separate :"
"class:`csv.writer` class will generate comma-separated files from a "
"succession of tuples or lists, quoting strings that contain the delimiter."
msgstr ""
"Se pueden definir y registrar diferentes dialectos de archivos separados por "
"comas; actualmente hay dos dialectos, ambos utilizados por Microsoft Excel. "
"Una clase :class:`csv.writer` independiente generará archivos separados por "
"comas a partir de una sucesión de tuplas o listas, citando cadenas que "
"contengan el delimitador."

#: ../Doc/whatsnew/2.3.rst:806
msgid ":pep:`305` - CSV File API"
msgstr ":pep:`305` - API de archivos CSV"

#: ../Doc/whatsnew/2.3.rst:806
msgid ""
"Written and implemented  by Kevin Altis, Dave Cole, Andrew McNamara, Skip "
"Montanaro, Cliff Wells."
msgstr ""
"Escrito y realizado por Kevin Altis, Dave Cole, Andrew McNamara, Skip "
"Montanaro, Cliff Wells."

#: ../Doc/whatsnew/2.3.rst:815
msgid "PEP 307: Pickle Enhancements"
msgstr "PEP 307: Mejoras en Pickle"

#: ../Doc/whatsnew/2.3.rst:817
msgid ""
"The :mod:`pickle` and :mod:`cPickle` modules received some attention during "
"the 2.3 development cycle.  In 2.2, new-style classes could be pickled "
"without difficulty, but they weren't pickled very compactly; :pep:`307` "
"quotes a trivial example where a new-style class results in a pickled string "
"three times longer than that for a classic class."
msgstr ""
"Los módulos :mod:`pickle` y :mod:`cPickle` recibieron cierta atención "
"durante el ciclo de desarrollo de la 2.3.  En 2.2, las clases de estilo "
"nuevo podían ser desempaquetadas sin dificultad, pero no se desempaquetaba "
"de forma muy compacta; :pep:`307` cita un ejemplo trivial en el que una "
"clase de estilo nuevo da lugar a una cadena desempaquetada tres veces más "
"larga que la de una clase clásica."

#: ../Doc/whatsnew/2.3.rst:823
msgid ""
"The solution was to invent a new pickle protocol.  The :func:`pickle.dumps` "
"function has supported a text-or-binary flag  for a long time.  In 2.3, this "
"flag is redefined from a Boolean to an integer: 0 is the old text-mode "
"pickle format, 1 is the old binary format, and now 2 is a new 2.3-specific "
"format.  A new constant, :const:`pickle.HIGHEST_PROTOCOL`, can be used to "
"select the fanciest protocol available."
msgstr ""
"La solución fue inventar un nuevo protocolo pickle.  La función :func:"
"`pickle.dumps` soporta desde hace tiempo una bandera de texto o binario.  En "
"la versión 2.3, esta bandera se ha redefinido, pasando de ser un booleano a "
"un entero: 0 es el antiguo formato pickle en modo texto, 1 es el antiguo "
"formato binario, y ahora 2 es un nuevo formato específico de 2.3.  Una nueva "
"constante, :const:`pickle.HIGHEST_PROTOCOL`, puede utilizarse para "
"seleccionar el protocolo más elegante disponible."

#: ../Doc/whatsnew/2.3.rst:830
msgid ""
"Unpickling is no longer considered a safe operation.  2.2's :mod:`pickle` "
"provided hooks for trying to prevent unsafe classes from being unpickled "
"(specifically, a :attr:`__safe_for_unpickling__` attribute), but none of "
"this code was ever audited and therefore it's all been ripped out in 2.3.  "
"You should not unpickle untrusted data in any version of Python."
msgstr ""
"El unpickling ya no se considera una operación segura. El :mod:`pickle` de "
"la versión 2.2 proporcionaba ganchos para tratar de evitar que las clases no "
"seguras fueran deserializadas (específicamente, un atributo :attr:"
"`__safe_for_unpickling__`), pero nada de este código fue nunca auditado y "
"por lo tanto todo ha sido eliminado en la versión 2.3.  No se debe "
"deserializar datos no confiables en ninguna versión de Python."

#: ../Doc/whatsnew/2.3.rst:836
msgid ""
"To reduce the pickling overhead for new-style classes, a new interface for "
"customizing pickling was added using three special methods: :meth:"
"`__getstate__`, :meth:`__setstate__`, and :meth:`__getnewargs__`.  Consult :"
"pep:`307` for the full semantics  of these methods."
msgstr ""
"Para reducir la sobrecarga de pickling de las clases de estilo nuevo, se ha "
"añadido una nueva interfaz para personalizar el pickling mediante tres "
"métodos especiales: :meth:`__getstate__`, :meth:`__setstate__`, y :meth:"
"`__getnewargs__`.  Consulte :pep:`307` para conocer la semántica completa de "
"estos métodos."

#: ../Doc/whatsnew/2.3.rst:841
msgid ""
"As a way to compress pickles yet further, it's now possible to use integer "
"codes instead of long strings to identify pickled classes. The Python "
"Software Foundation will maintain a list of standardized codes; there's also "
"a range of codes for private use.  Currently no codes have been specified."
msgstr ""
"Como forma de comprimir aún más los pickles, ahora es posible utilizar "
"códigos enteros en lugar de cadenas largas para identificar las clases "
"serializadas. La Python Software Foundation mantendrá una lista de códigos "
"estandarizados; también hay una gama de códigos para uso privado.  "
"Actualmente no se ha especificado ningún código."

#: ../Doc/whatsnew/2.3.rst:849
msgid ":pep:`307` - Extensions to the pickle protocol"
msgstr ":pep:`307` - Extensiones del protocolo pickle"

#: ../Doc/whatsnew/2.3.rst:850
msgid "Written and implemented  by Guido van Rossum and Tim Peters."
msgstr "Escrito y ejecutado por Guido van Rossum y Tim Peters."

#: ../Doc/whatsnew/2.3.rst:858
msgid "Extended Slices"
msgstr "Rebanadas ampliadas"

#: ../Doc/whatsnew/2.3.rst:860
msgid ""
"Ever since Python 1.4, the slicing syntax has supported an optional third "
"\"step\" or \"stride\" argument.  For example, these are all legal Python "
"syntax: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``.  This was added to Python "
"at the request of the developers of Numerical Python, which uses the third "
"argument extensively.  However, Python's built-in list, tuple, and string "
"sequence types have never supported this feature, raising a :exc:`TypeError` "
"if you tried it. Michael Hudson contributed a patch to fix this shortcoming."
msgstr ""
"Desde la versión 1.4 de Python, la sintaxis de corte admite un tercer "
"argumento opcional \"paso\" o \"zancada\".  Por ejemplo, estas son todas las "
"sintaxis legales de Python: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``.  Esto "
"se añadió a Python a petición de los desarrolladores de Numerical Python, "
"que utiliza ampliamente el tercer argumento.  Sin embargo, los tipos de "
"secuencias de listas, tuplas y cadenas incorporados en Python nunca han "
"soportado esta característica, y lanzan un :exc:`TypeError` si lo intentas. "
"Michael Hudson ha contribuido con un parche para solucionar este problema."

#: ../Doc/whatsnew/2.3.rst:868
msgid ""
"For example, you can now easily extract the elements of a list that have "
"even indexes::"
msgstr ""
"Por ejemplo, ahora puede extraer fácilmente los elementos de una lista que "
"tengan índices pares::"

#: ../Doc/whatsnew/2.3.rst:875
msgid ""
"Negative values also work to make a copy of the same list in reverse order::"
msgstr ""
"Los valores negativos también sirven para hacer una copia de la misma lista "
"en orden inverso::"

#: ../Doc/whatsnew/2.3.rst:880
msgid "This also works for tuples, arrays, and strings::"
msgstr "Esto también funciona para tuplas, arrays y cadenas::"

#: ../Doc/whatsnew/2.3.rst:888
msgid ""
"If you have a mutable sequence such as a list or an array you can assign to "
"or delete an extended slice, but there are some differences between "
"assignment to extended and regular slices.  Assignment to a regular slice "
"can be used to change the length of the sequence::"
msgstr ""
"Si tienes una secuencia mutable, como una lista o un array, puedes asignar o "
"eliminar una rebanada extendida, pero hay algunas diferencias entre la "
"asignación a rebanadas extendidas y regulares.  La asignación a una rebanada "
"regular se puede utilizar para cambiar la longitud de la secuencia::"

#: ../Doc/whatsnew/2.3.rst:900
msgid ""
"Extended slices aren't this flexible.  When assigning to an extended slice, "
"the list on the right hand side of the statement must contain the same "
"number of items as the slice it is replacing::"
msgstr ""
"Las rebanadas extendidas no son tan flexibles.  Cuando se asigna a una "
"rebanada extendida, la lista a la derecha de la declaración debe contener el "
"mismo número de elementos que la rebanada que está reemplazando::"

#: ../Doc/whatsnew/2.3.rst:917
msgid "Deletion is more straightforward::"
msgstr "La eliminación es más sencilla::"

#: ../Doc/whatsnew/2.3.rst:928
msgid ""
"One can also now pass slice objects to the :meth:`__getitem__` methods of "
"the built-in sequences::"
msgstr ""
"Ahora también se pueden pasar objetos slice a los métodos :meth:"
"`__getitem__` de las secuencias incorporadas::"

#: ../Doc/whatsnew/2.3.rst:934
msgid "Or use slice objects directly in subscripts::"
msgstr "O utilizar los objetos de corte directamente en los subíndices::"

#: ../Doc/whatsnew/2.3.rst:939
msgid ""
"To simplify implementing sequences that support extended slicing, slice "
"objects now have a method ``indices(length)`` which, given the length of a "
"sequence, returns a ``(start, stop, step)`` tuple that can be passed "
"directly to :func:`range`. :meth:`indices` handles omitted and out-of-bounds "
"indices in a manner consistent with regular slices (and this innocuous "
"phrase hides a welter of confusing details!).  The method is intended to be "
"used like this::"
msgstr ""
"Para simplificar la implementación de secuencias que soportan el corte "
"extendido, los objetos slice tienen ahora un método ``indices(length)`` que, "
"dada la longitud de una secuencia, retorna una tupla ``(start, stop, step)`` "
"que puede pasarse directamente a :func:`range`. :meth:`indices` maneja los "
"índices omitidos y los que están fuera de los límites de una manera "
"consistente con los slices regulares (¡y esta frase inocua esconde un montón "
"de detalles confusos!).  El método está pensado para ser utilizado así::"

#: ../Doc/whatsnew/2.3.rst:957
msgid ""
"From this example you can also see that the built-in :class:`slice` object "
"is now the type object for the slice type, and is no longer a function.  "
"This is consistent with Python 2.2, where :class:`int`, :class:`str`, etc., "
"underwent the same change."
msgstr ""
"En este ejemplo también se puede ver que el objeto incorporado :class:"
"`slice` es ahora el objeto tipo para el tipo slice, y ya no es una función.  "
"Esto es consistente con Python 2.2, donde :class:`int`, :class:`str`, etc., "
"sufrieron el mismo cambio."

#: ../Doc/whatsnew/2.3.rst:966
msgid "Other Language Changes"
msgstr "Otros cambios en el lenguaje"

#: ../Doc/whatsnew/2.3.rst:968
msgid ""
"Here are all of the changes that Python 2.3 makes to the core Python "
"language."
msgstr ""
"Estos son todos los cambios que Python 2.3 introduce en el núcleo del "
"lenguaje Python."

#: ../Doc/whatsnew/2.3.rst:970
msgid ""
"The :keyword:`yield` statement is now always a keyword, as described in "
"section :ref:`section-generators` of this document."
msgstr ""
"La expresión :keyword:`yield` es ahora siempre una palabra clave, como se "
"describe en la sección :ref:`section-generators` de este documento."

#: ../Doc/whatsnew/2.3.rst:973
msgid ""
"A new built-in function :func:`enumerate` was added, as described in "
"section :ref:`section-enumerate` of this document."
msgstr ""
"Se ha añadido una nueva función incorporada :func:`enumerate`, como se "
"describe en la sección :ref:`section-enumerate` de este documento."

#: ../Doc/whatsnew/2.3.rst:976
msgid ""
"Two new constants, :const:`True` and :const:`False` were added along with "
"the built-in :class:`bool` type, as described in section :ref:`section-bool` "
"of this document."
msgstr ""
"Se han añadido dos nuevas constantes, :const:`True` y :const:`False` junto "
"con el tipo incorporado :class:`bool`, como se describe en la sección :ref:"
"`section-bool` de este documento."

#: ../Doc/whatsnew/2.3.rst:980
msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer.  This can lead to the paradoxical result "
"that ``isinstance(int(expression), int)`` is false, but that seems unlikely "
"to cause problems in practice."
msgstr ""
"El constructor de tipo :func:`int` ahora retornará un entero largo en lugar "
"de lanzar un :exc:`OverflowError` cuando una cadena o un número de punto "
"flotante es demasiado grande para caber en un entero.  Esto puede llevar al "
"resultado paradójico de que ``isinstance(int(expresión), int)`` sea falso, "
"pero parece poco probable que cause problemas en la práctica."

#: ../Doc/whatsnew/2.3.rst:986
msgid ""
"Built-in types now support the extended slicing syntax, as described in "
"section :ref:`section-slices` of this document."
msgstr ""
"Los tipos incorporados ahora soportan la sintaxis de rebanado extendida, "
"como se describe en la sección :ref:`section-slices` de este documento."

#: ../Doc/whatsnew/2.3.rst:989
msgid ""
"A new built-in function, ``sum(iterable, start=0)``,  adds up the numeric "
"items in the iterable object and returns their sum.  :func:`sum` only "
"accepts numbers, meaning that you can't use it to concatenate a bunch of "
"strings. (Contributed by Alex Martelli.)"
msgstr ""
"Una nueva función incorporada, ``suma(iterable, start=0)``, suma los "
"elementos numéricos en el objeto iterable y retorna su suma. :func:`suma` "
"sólo acepta números, lo que significa que no se puede utilizar para "
"concatenar un montón de cadenas. (Contribución de Alex Martelli)"

#: ../Doc/whatsnew/2.3.rst:994
msgid ""
"``list.insert(pos, value)`` used to  insert *value* at the front of the list "
"when *pos* was negative.  The behaviour has now been changed to be "
"consistent with slice indexing, so when *pos* is -1 the value will be "
"inserted before the last element, and so forth."
msgstr ""
"``list.insert(pos, valor)`` solía insertar *valor* al principio de la lista "
"cuando *pos* era negativo.  El comportamiento ha sido cambiado para ser "
"consistente con la indexación de las rebanadas, así que cuando *pos* es -1 "
"el valor será insertado antes del último elemento, y así sucesivamente."

#: ../Doc/whatsnew/2.3.rst:999
msgid ""
"``list.index(value)``, which searches for *value*  within the list and "
"returns its index, now takes optional  *start* and *stop* arguments to limit "
"the search to  only part of the list."
msgstr ""
"``list.index(value)``, que busca *valor* dentro de la lista y retorna su "
"índice, ahora toma los argumentos opcionales *start* y *stop* para limitar "
"la búsqueda sólo a una parte de la lista."

#: ../Doc/whatsnew/2.3.rst:1003
msgid ""
"Dictionaries have a new method, ``pop(key[, *default*])``, that returns the "
"value corresponding to *key* and removes that key/value pair from the "
"dictionary.  If the requested key isn't present in the dictionary, *default* "
"is returned if it's specified and :exc:`KeyError` raised if it isn't. ::"
msgstr ""
"Los diccionarios tienen un nuevo método, ``pop(key[, *default*])``, que "
"retorna el valor correspondiente a *key* y elimina ese par clave/valor del "
"diccionario.  Si la clave solicitada no está presente en el diccionario, se "
"retorna *default* si está especificada y se lanza :exc:`KeyError` si no lo "
"está:"

#: ../Doc/whatsnew/2.3.rst:1025
msgid ""
"There's also a new class method,  ``dict.fromkeys(iterable, value)``, that "
"creates a dictionary with keys taken from the supplied iterator *iterable* "
"and all values set to *value*, defaulting to ``None``."
msgstr ""
"También hay un nuevo método de clase, ``dict.fromkeys(iterable, value)``, "
"que crea un diccionario con claves tomadas del iterador *iterable* "
"suministrado y todos los valores establecidos a *value*, por defecto a "
"``None``."

#: ../Doc/whatsnew/2.3.rst:1029
msgid "(Patches contributed by Raymond Hettinger.)"
msgstr "(Parches aportados por Raymond Hettinger)"

#: ../Doc/whatsnew/2.3.rst:1031
msgid ""
"Also, the :func:`dict` constructor now accepts keyword arguments to simplify "
"creating small dictionaries::"
msgstr ""
"Además, el constructor :func:`dict` ahora acepta argumentos de palabras "
"clave para simplificar la creación de pequeños diccionarios::"

#: ../Doc/whatsnew/2.3.rst:1037
msgid "(Contributed by Just van Rossum.)"
msgstr "(Contribución de Just van Rossum.)"

#: ../Doc/whatsnew/2.3.rst:1039
msgid ""
"The :keyword:`assert` statement no longer checks the ``__debug__`` flag, so "
"you can no longer disable assertions by assigning to ``__debug__``. Running "
"Python with the :option:`-O` switch will still generate code that doesn't "
"execute any assertions."
msgstr ""
"La expresión :keyword:`assert` ya no comprueba la bandera ``debug__``, por "
"lo que ya no se pueden desactivar las aserciones asignando a ``__debug__``. "
"Ejecutar Python con la opción :option:`-O` seguirá generando código que no "
"ejecute ninguna aserción."

#: ../Doc/whatsnew/2.3.rst:1044
msgid ""
"Most type objects are now callable, so you can use them to create new "
"objects such as functions, classes, and modules.  (This means that the :mod:"
"`new` module can be deprecated in a future Python version, because you can "
"now use the type objects available in the :mod:`types` module.) For example, "
"you can create a new module object with the following code:"
msgstr ""
"La mayoría de los objetos de tipo son ahora invocables, por lo que puedes "
"usarlos para crear nuevos objetos como funciones, clases y módulos.  (Esto "
"significa que el módulo :mod:`new` puede quedar obsoleto en una futura "
"versión de Python, porque ahora puedes utilizar los objetos de tipo "
"disponibles en el módulo :mod:`types`) Por ejemplo, puede crear un nuevo "
"objeto de módulo con el siguiente código:"

#: ../Doc/whatsnew/2.3.rst:1059
msgid ""
"A new warning, :exc:`PendingDeprecationWarning` was added to indicate "
"features which are in the process of being deprecated.  The warning will "
"*not* be printed by default.  To check for use of features that will be "
"deprecated in the future, supply :option:`-Walways::"
"PendingDeprecationWarning:: <-W>` on the command line or use :func:`warnings."
"filterwarnings`."
msgstr ""
"Se ha añadido una nueva advertencia, :exc:`PendingDeprecationWarning` para "
"indicar las características que están en proceso de ser obsoletas.  La "
"advertencia no se imprimirá por defecto.  Para comprobar el uso de funciones "
"que quedarán obsoletas en el futuro, proporcione :option:`-Walways::"
"PendingDeprecationWarning:: <-W>` en la línea de comandos o utilice :func:"
"`warnings.filterwarnings`."

#: ../Doc/whatsnew/2.3.rst:1065
msgid ""
"The process of deprecating string-based exceptions, as in ``raise \"Error "
"occurred\"``, has begun.  Raising a string will now trigger :exc:"
"`PendingDeprecationWarning`."
msgstr ""
"Ha comenzado el proceso de desaprobación de las excepciones basadas en "
"cadenas, como en ``lanzamiento de \"Error ocurred”``.  Al lanzar una cadena, "
"ahora se activará :exc:`PendingDeprecationWarning`."

#: ../Doc/whatsnew/2.3.rst:1069
msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning.  In a future version of Python, ``None`` may finally become a "
"keyword."
msgstr ""
"El uso de ``None`` como nombre de una variable ahora resultará en una "
"advertencia :exc:`SyntaxWarning`.  En una futura versión de Python, ``None`` "
"podría convertirse en una palabra clave."

#: ../Doc/whatsnew/2.3.rst:1072
msgid ""
"The :meth:`xreadlines` method of file objects, introduced in Python 2.1, is "
"no longer necessary because files now behave as their own iterator. :meth:"
"`xreadlines` was originally introduced as a faster way to loop over all the "
"lines in a file, but now you can simply write ``for line in file_obj``. File "
"objects also have a new read-only :attr:`encoding` attribute that gives the "
"encoding used by the file; Unicode strings written to the file will be "
"automatically  converted to bytes using the given encoding."
msgstr ""
"El método :meth:`xreadlines` de los objetos archivo, introducido en Python "
"2.1, ya no es necesario porque los archivos se comportan ahora como su "
"propio iterador. :meth:`xreadlines` se introdujo originalmente como una "
"forma más rápida de recorrer todas las líneas de un archivo, pero ahora se "
"puede escribir simplemente ``for line in file_obj``. Los objetos archivo "
"también tienen un nuevo atributo :attr:`encoding` de sólo lectura que "
"proporciona la codificación utilizada por el archivo; las cadenas Unicode "
"escritas en el archivo se convertirán automáticamente a bytes utilizando la "
"codificación dada."

#: ../Doc/whatsnew/2.3.rst:1080
msgid ""
"The method resolution order used by new-style classes has changed, though "
"you'll only notice the difference if you have a really complicated "
"inheritance hierarchy.  Classic classes are unaffected by this change.  "
"Python 2.2 originally used a topological sort of a class's ancestors, but "
"2.3 now uses the C3 algorithm as described in the paper `\"A Monotonic "
"Superclass Linearization for Dylan\" <http://citeseerx.ist.psu.edu/viewdoc/"
"summary?doi=10.1.1.19.3910>`_. To understand the motivation for this "
"change,  read Michele Simionato's article `\"Python 2.3 Method Resolution "
"Order\" <http://www.phyast.pitt.edu/~micheles/mro.html>`_, or read the "
"thread on python-dev starting with the message at https://mail.python.org/"
"pipermail/python-dev/2002-October/029035.html. Samuele Pedroni first pointed "
"out the problem and also implemented the fix by coding the C3 algorithm."
msgstr ""
"El orden de resolución de los métodos utilizados por las clases del nuevo "
"estilo ha cambiado, aunque sólo notarás la diferencia si tienes una "
"jerarquía de herencia realmente complicada.  Las clases clásicas no se ven "
"afectadas por este cambio.  Python 2.2 originalmente utilizaba una "
"ordenación topológica de los ancestros de una clase, pero 2.3 ahora utiliza "
"el algoritmo C3 como se describe en el artículo `\"A Monotonic Superclass "
"Linearization for Dylan\" <http://citeseerx.ist.psu.edu/viewdoc/summary?"
"doi=10.1.1.19.3910>`_. Para entender la motivación de este cambio, lea el "
"artículo de Michele Simionato `\"Python 2.3 Method Resolution Order\" "
"<http://www.phyast.pitt.edu/~micheles/mro.html>`_, o lea el hilo en python-"
"dev que comienza con el mensaje en https://mail.python.org/pipermail/python-"
"dev/2002-October/029035.html. Samuele Pedroni fue el primero en señalar el "
"problema y también implementó la solución codificando el algoritmo C3."

#: ../Doc/whatsnew/2.3.rst:1093
msgid ""
"Python runs multithreaded programs by switching between threads after "
"executing N bytecodes.  The default value for N has been increased from 10 "
"to 100 bytecodes, speeding up single-threaded applications by reducing the "
"switching overhead.  Some multithreaded applications may suffer slower "
"response time, but that's easily fixed by setting the limit back to a lower "
"number using ``sys.setcheckinterval(N)``. The limit can be retrieved with "
"the new :func:`sys.getcheckinterval` function."
msgstr ""
"Python ejecuta programas multihilo cambiando entre hilos después de ejecutar "
"N bytecodes.  El valor por defecto de N se ha incrementado de 10 a 100 "
"bytecodes, acelerando las aplicaciones de un solo hilo al reducir la "
"sobrecarga de cambio.  Algunas aplicaciones multihilo pueden sufrir un "
"tiempo de respuesta más lento, pero eso se arregla fácilmente estableciendo "
"el límite a un número menor usando ``sys.setcheckinterval(N)``. El límite "
"puede recuperarse con la nueva función :func:`sys.getcheckinterval`."

#: ../Doc/whatsnew/2.3.rst:1101
msgid ""
"One minor but far-reaching change is that the names of extension types "
"defined by the modules included with Python now contain the module and a "
"``'.'`` in front of the type name.  For example, in Python 2.2, if you "
"created a socket and printed its :attr:`__class__`, you'd get this output::"
msgstr ""
"Un cambio menor pero de gran alcance es que los nombres de los tipos de "
"extensión definidos por los módulos incluidos con Python ahora contienen el "
"módulo y un ``.'`` delante del nombre del tipo.  Por ejemplo, en Python 2.2, "
"si creabas un socket e imprimías su :attr:`__class__`, obtendrías esta "
"salida::"

#: ../Doc/whatsnew/2.3.rst:1110
msgid "In 2.3, you get this::"
msgstr "En 2.3, se obtiene esto::"

#: ../Doc/whatsnew/2.3.rst:1115
msgid ""
"One of the noted incompatibilities between old- and new-style classes has "
"been removed: you can now assign to the :attr:`~definition.__name__` and :"
"attr:`~class.__bases__` attributes of new-style classes.  There are some "
"restrictions on what can be assigned to :attr:`~class.__bases__` along the "
"lines of those relating to assigning to an instance's :attr:`~instance."
"__class__` attribute."
msgstr ""
"Se ha eliminado una de las incompatibilidades señaladas entre las clases de "
"estilo antiguo y las de estilo nuevo: ahora se pueden asignar a los "
"atributos :attr:`~definición.__name__` y :attr:`~clase.__bases__` de las "
"clases de estilo nuevo.  Hay algunas restricciones sobre lo que se puede "
"asignar a :attr:`~class.__bases__` en la línea de las relacionadas con la "
"asignación al atributo :attr:`~instance.__class__` de una instancia."

#: ../Doc/whatsnew/2.3.rst:1125
msgid "String Changes"
msgstr "Cambios en las cadenas de texto"

#: ../Doc/whatsnew/2.3.rst:1127
msgid ""
"The :keyword:`in` operator now works differently for strings. Previously, "
"when evaluating ``X in Y`` where *X* and *Y* are strings, *X* could only be "
"a single character. That's now changed; *X* can be a string of any length, "
"and ``X in Y`` will return :const:`True` if *X* is a substring of *Y*.  If "
"*X* is the empty string, the result is always :const:`True`. ::"
msgstr ""
"El operador :keyword:`in` ahora funciona de forma diferente para las "
"cadenas. Antes, cuando se evaluaba ``X en Y`` donde *X* y *Y* eran cadenas, "
"*X* sólo podía ser un único carácter. Esto ha cambiado; *X* puede ser una "
"cadena de cualquier longitud, y ``X en Y`` retornará :const:`True` si *X* es "
"una subcadena de *Y*.  Si *X* es una cadena vacía, el resultado es siempre :"
"const:`True`. ::"

#: ../Doc/whatsnew/2.3.rst:1140
msgid ""
"Note that this doesn't tell you where the substring starts; if you need that "
"information, use the :meth:`find` string method."
msgstr ""
"Tenga en cuenta que esto no le dice dónde empieza la subcadena; si necesita "
"esa información, utilice el método :meth:`find` string."

#: ../Doc/whatsnew/2.3.rst:1143
msgid ""
"The :meth:`strip`, :meth:`lstrip`, and :meth:`rstrip` string methods now "
"have an optional argument for specifying the characters to strip.  The "
"default is still to remove all whitespace characters::"
msgstr ""
"Los métodos de cadena :meth:`strip`, :meth:`lstrip` y :meth:`rstrip` tienen "
"ahora un argumento opcional para especificar los caracteres a eliminar.  El "
"valor por defecto sigue siendo eliminar todos los caracteres de espacio en "
"blanco::"

#: ../Doc/whatsnew/2.3.rst:1157
msgid "(Suggested by Simon Brunning and implemented by Walter Dörwald.)"
msgstr "(Sugerido por Simon Brunning y aplicado por Walter Dörwald)"

#: ../Doc/whatsnew/2.3.rst:1159
msgid ""
"The :meth:`startswith` and :meth:`endswith` string methods now accept "
"negative numbers for the *start* and *end* parameters."
msgstr ""
"Los métodos de cadena :meth:`startswith` y :meth:`endswith` ahora aceptan "
"números negativos para los parámetros *start* y *end*."

#: ../Doc/whatsnew/2.3.rst:1162
msgid ""
"Another new string method is :meth:`zfill`, originally a function in the :"
"mod:`string` module.  :meth:`zfill` pads a numeric string with zeros on the "
"left until it's the specified width. Note that the ``%`` operator is still "
"more flexible and powerful than :meth:`zfill`. ::"
msgstr ""
"Otro nuevo método de cadena es :meth:`zfill`, originalmente una función del "
"módulo :mod:`string`. :meth:`zfill` rellena una cadena numérica con ceros a "
"la izquierda hasta que tenga el ancho especificado. Tenga en cuenta que el "
"operador ``%`` sigue siendo más flexible y potente que :meth:`zfill`. ::"

#: ../Doc/whatsnew/2.3.rst:1174
msgid "(Contributed by Walter Dörwald.)"
msgstr "(Contribución de Walter Dörwald.)"

#: ../Doc/whatsnew/2.3.rst:1176
msgid ""
"A new type object, :class:`basestring`, has been added. Both 8-bit strings "
"and Unicode strings inherit from this type, so ``isinstance(obj, "
"basestring)`` will return :const:`True` for either kind of string.  It's a "
"completely abstract type, so you can't create :class:`basestring` instances."
msgstr ""
"Se ha añadido un nuevo tipo de objeto, :class:`basestring`. Tanto las "
"cadenas de 8 bits como las cadenas Unicode heredan de este tipo, por lo que "
"``isinstance(obj, basestring)`` retornará :const:`True` para cualquier tipo "
"de cadena.  Es un tipo completamente abstracto, por lo que no se pueden "
"crear instancias de :class:`basestring`."

#: ../Doc/whatsnew/2.3.rst:1181
msgid ""
"Interned strings are no longer immortal and will now be garbage-collected in "
"the usual way when the only reference to them is from the internal "
"dictionary of interned strings.  (Implemented by Oren Tirosh.)"
msgstr ""
"Las cadenas internas ya no son inmortales y ahora serán recolectadas de la "
"forma habitual cuando la única referencia a ellas sea desde el diccionario "
"interno de cadenas internas.  (Implementado por Oren Tirosh)"

#: ../Doc/whatsnew/2.3.rst:1189
msgid "Optimizations"
msgstr "Optimizaciones"

#: ../Doc/whatsnew/2.3.rst:1191
msgid ""
"The creation of new-style class instances has been made much faster; they're "
"now faster than classic classes!"
msgstr ""
"La creación de instancias de clases de estilo nuevo se ha hecho mucho más "
"rápida; ¡ahora son más rápidas que las clases clásicas!"

#: ../Doc/whatsnew/2.3.rst:1194
msgid ""
"The :meth:`sort` method of list objects has been extensively rewritten by "
"Tim Peters, and the implementation is significantly faster."
msgstr ""
"El método :meth:`sort` de los objetos de la lista ha sido ampliamente "
"reescrito por Tim Peters, y la implementación es significativamente más "
"rápida."

#: ../Doc/whatsnew/2.3.rst:1197
msgid ""
"Multiplication of large long integers is now much faster thanks to an "
"implementation of Karatsuba multiplication, an algorithm that scales better "
"than the O(n\\*n) required for the grade-school multiplication algorithm.  "
"(Original patch by Christopher A. Craig, and significantly reworked by Tim "
"Peters.)"
msgstr ""
"La multiplicación de enteros largos es ahora mucho más rápida gracias a una "
"implementación de la multiplicación Karatsuba, un algoritmo que escala mejor "
"que el O(n\\*n) requerido para el algoritmo de multiplicación de la escuela "
"primaria.  (Parche original de Christopher A. Craig, y reelaborado "
"significativamente por Tim Peters)"

#: ../Doc/whatsnew/2.3.rst:1202
msgid ""
"The ``SET_LINENO`` opcode is now gone.  This may provide a small speed "
"increase, depending on your compiler's idiosyncrasies. See section :ref:"
"`23section-other` for a longer explanation. (Removed by Michael Hudson.)"
msgstr ""
"El opcode ``SET_LINENO`` ha desaparecido.  Esto puede proporcionar un "
"pequeño aumento de velocidad, dependiendo de la idiosincrasia de su "
"compilador. Vea la sección :ref:`23section-other` para una explicación más "
"larga. (Eliminado por Michael Hudson)"

#: ../Doc/whatsnew/2.3.rst:1206
msgid ""
":func:`xrange` objects now have their own iterator, making ``for i in "
"xrange(n)`` slightly faster than ``for i in range(n)``.  (Patch by Raymond "
"Hettinger.)"
msgstr ""
"Los objetos :func:`xrange` tienen ahora su propio iterador, haciendo que "
"``for i in xrange(n)`` sea ligeramente más rápido que ``for i in "
"range(n)``.  (Parche de Raymond Hettinger)"

#: ../Doc/whatsnew/2.3.rst:1210
msgid ""
"A number of small rearrangements have been made in various hotspots to "
"improve performance, such as inlining a function or removing some code.  "
"(Implemented mostly by GvR, but lots of people have contributed single "
"changes.)"
msgstr ""
"Se han realizado una serie de pequeños reajustes en varios puntos "
"conflictivos para mejorar el rendimiento, como por ejemplo alinear una "
"función o eliminar algo de código.  (Implementado principalmente por GvR, "
"pero mucha gente ha contribuido con cambios individuales)"

#: ../Doc/whatsnew/2.3.rst:1214
msgid ""
"The net result of the 2.3 optimizations is that Python 2.3 runs the  pystone "
"benchmark around 25% faster than Python 2.2."
msgstr ""
"El resultado neto de las optimizaciones de la versión 2.3 es que Python 2.3 "
"ejecuta el benchmark pystone alrededor de un 25% f más rápido que Python 2.2."

#: ../Doc/whatsnew/2.3.rst:1221
msgid "New, Improved, and Deprecated Modules"
msgstr "Módulos nuevos, mejorados y obsoletos"

#: ../Doc/whatsnew/2.3.rst:1223
msgid ""
"As usual, Python's standard library received a number of enhancements and "
"bug fixes.  Here's a partial list of the most notable changes, sorted "
"alphabetically by module name. Consult the :file:`Misc/NEWS` file in the "
"source tree for a more complete list of changes, or look through the CVS "
"logs for all the details."
msgstr ""
"Como es habitual, la biblioteca estándar de Python ha recibido una serie de "
"mejoras y correcciones de errores.  Aquí hay una lista parcial de los "
"cambios más notables, ordenados alfabéticamente por nombre de módulo. "
"Consulte el archivo :file:`Misc/NEWS` en el árbol de fuentes para obtener "
"una lista más completa de los cambios, o busque en los registros de CVS para "
"obtener todos los detalles."

#: ../Doc/whatsnew/2.3.rst:1228
msgid ""
"The :mod:`array` module now supports arrays of Unicode characters using the "
"``'u'`` format character.  Arrays also now support using the ``+=`` "
"assignment operator to add another array's contents, and the ``*=`` "
"assignment operator to repeat an array. (Contributed by Jason Orendorff.)"
msgstr ""
"El módulo :mod:`array` soporta ahora matrices de caracteres Unicode que "
"utilizan el carácter de formato ``'u``.  Las matrices también soportan ahora "
"el uso del operador de asignación ``+=`` para añadir el contenido de otra "
"matriz, y el operador de asignación ``*=`` para repetir una matriz. "
"(Contribución de Jason Orendorff)"

#: ../Doc/whatsnew/2.3.rst:1233
msgid ""
"The :mod:`bsddb` module has been replaced by version 4.1.6 of the `PyBSDDB "
"<http://pybsddb.sourceforge.net>`_ package, providing a more complete "
"interface to the transactional features of the BerkeleyDB library."
msgstr ""
"El módulo :mod:`bsddb` ha sido reemplazado por la versión 4.1.6 del paquete "
"`PyBSDDB <http://pybsddb.sourceforge.net>`_, proporcionando una interfaz más "
"completa para las características transaccionales de la biblioteca "
"BerkeleyDB."

#: ../Doc/whatsnew/2.3.rst:1237
msgid ""
"The old version of the module has been renamed to  :mod:`bsddb185` and is no "
"longer built automatically; you'll  have to edit :file:`Modules/Setup` to "
"enable it.  Note that the new :mod:`bsddb` package is intended to be "
"compatible with the  old module, so be sure to file bugs if you discover any "
"incompatibilities. When upgrading to Python 2.3, if the new interpreter is "
"compiled with a new version of  the underlying BerkeleyDB library, you will "
"almost certainly have to convert your database files to the new version.  "
"You can do this fairly easily with the new scripts :file:`db2pickle.py` and :"
"file:`pickle2db.py` which you will find in the distribution's :file:`Tools/"
"scripts` directory.  If you've already been using the PyBSDDB package and "
"importing it as :mod:`bsddb3`, you will have to change your ``import`` "
"statements to import it as :mod:`bsddb`."
msgstr ""
"La antigua versión del módulo ha sido renombrada como :mod:`bsddb185` y ya "
"no se construye automáticamente; tendrás que editar :file:`Modules/Setup` "
"para activarlo.  Ten en cuenta que el nuevo paquete :mod:`bsddb` está "
"pensado para ser compatible con el módulo antiguo, así que asegúrate de "
"enviar errores si descubres alguna incompatibilidad. Al actualizar a Python "
"2.3, si el nuevo intérprete se compila con una nueva versión de la "
"biblioteca BerkeleyDB subyacente, es casi seguro que tendrá que convertir "
"sus archivos de base de datos a la nueva versión.  Puede hacerlo fácilmente "
"con los nuevos scripts :file:`db2pickle.py` y :file:`pickle2db.py` que "
"encontrará en el directorio :file:`Tools/scripts` de la distribución.  Si ya "
"ha estado utilizando el paquete PyBSDDB e importándolo como :mod:`bsddb3`, "
"tendrá que cambiar sus sentencias ``import`` para importarlo como :mod:"
"`bsddb`."

#: ../Doc/whatsnew/2.3.rst:1249
msgid ""
"The new :mod:`bz2` module is an interface to the bz2 data compression "
"library. bz2-compressed data is usually smaller than  corresponding :mod:"
"`zlib`\\ -compressed data. (Contributed by Gustavo Niemeyer.)"
msgstr ""
"El nuevo módulo :mod:`bz2` es una interfaz para la biblioteca de compresión "
"de datos bz2. Los datos comprimidos con bz2 suelen ser más pequeños que los "
"correspondientes datos comprimidos con :mod:`zlib`. (Contribución de Gustavo "
"Niemeyer)"

#: ../Doc/whatsnew/2.3.rst:1253
msgid ""
"A set of standard date/time types has been added in the new :mod:`datetime` "
"module.  See the following section for more details."
msgstr ""
"Se ha añadido un conjunto de tipos de fecha/hora estándar en el nuevo "
"módulo :mod:`datetime`.  Consulte la siguiente sección para obtener más "
"detalles."

#: ../Doc/whatsnew/2.3.rst:1256
msgid ""
"The Distutils :class:`Extension` class now supports an extra constructor "
"argument named *depends* for listing additional source files that an "
"extension depends on.  This lets Distutils recompile the module if any of "
"the dependency files are modified.  For example, if :file:`sampmodule.c` "
"includes the header file :file:`sample.h`, you would create the :class:"
"`Extension` object like this::"
msgstr ""
"La clase Distutils :class:`Extension` soporta ahora un argumento constructor "
"extra llamado *depends* para listar archivos fuente adicionales de los que "
"depende una extensión.  Esto permite a Distutils recompilar el módulo si se "
"modifica alguno de los archivos de dependencia.  Por ejemplo, si :file:"
"`sampmodule.c` incluye el fichero de cabecera :file:`sample.h`, se crearía "
"el objeto :class:`Extension` así::"

#: ../Doc/whatsnew/2.3.rst:1267
msgid ""
"Modifying :file:`sample.h` would then cause the module to be recompiled. "
"(Contributed by Jeremy Hylton.)"
msgstr ""
"La modificación de :file:`sample.h` haría que el módulo se recompilara. "
"(Contribución de Jeremy Hylton)"

#: ../Doc/whatsnew/2.3.rst:1270
msgid ""
"Other minor changes to Distutils: it now checks for the :envvar:`CC`, :"
"envvar:`CFLAGS`, :envvar:`CPP`, :envvar:`LDFLAGS`, and :envvar:`CPPFLAGS` "
"environment variables, using them to override the settings in Python's "
"configuration (contributed by Robert Weber)."
msgstr ""
"Otros cambios menores en Distutils: ahora comprueba las variables de "
"entorno :envvar:`CC`, :envvar:`CFLAGS`, :envvar:`CPP`, :envvar:`LDFLAGS` y :"
"envvar:`CPPFLAGS`, utilizándolas para anular los ajustes de la configuración "
"de Python (contribución de Robert Weber)."

#: ../Doc/whatsnew/2.3.rst:1275
msgid ""
"Previously the :mod:`doctest` module would only search the docstrings of "
"public methods and functions for test cases, but it now also examines "
"private ones as well.  The :func:`DocTestSuite` function creates a :class:"
"`unittest.TestSuite` object from a set of :mod:`doctest` tests."
msgstr ""
"Anteriormente el módulo :mod:`doctest` sólo buscaba casos de prueba en los "
"docstrings de los métodos y funciones públicos, pero ahora también examina "
"los privados.  La función :func:`DocTestSuite` crea un objeto :class:"
"`unittest.TestSuite` a partir de un conjunto de pruebas :mod:`doctest`."

#: ../Doc/whatsnew/2.3.rst:1280
msgid ""
"The new ``gc.get_referents(object)`` function returns a list of all the "
"objects referenced by *object*."
msgstr ""
"La nueva función ``gc.get_referents(object)`` retorna una lista de todos los "
"objetos referenciados por *object*."

#: ../Doc/whatsnew/2.3.rst:1283
msgid ""
"The :mod:`getopt` module gained a new function, :func:`gnu_getopt`, that "
"supports the same arguments as the existing :func:`getopt` function but uses "
"GNU-style scanning mode. The existing :func:`getopt` stops processing "
"options as soon as a non-option argument is encountered, but in GNU-style "
"mode processing continues, meaning that options and arguments can be mixed.  "
"For example::"
msgstr ""
"El módulo :mod:`getopt` ha ganado una nueva función, :func:`gnu_getopt`, que "
"admite los mismos argumentos que la función :func:`getopt` existente, pero "
"utiliza el modo de exploración al estilo GNU. La función :func:`getopt` "
"existente deja de procesar las opciones tan pronto como se encuentra un "
"argumento que no es una opción, pero en el modo GNU el procesamiento "
"continúa, lo que significa que las opciones y los argumentos pueden "
"mezclarse.  Por ejemplo::"

#: ../Doc/whatsnew/2.3.rst:1294
msgid "(Contributed by Peter Åstrand.)"
msgstr "(Contribución de Peter Åstrand.)"

#: ../Doc/whatsnew/2.3.rst:1296
msgid ""
"The :mod:`grp`, :mod:`pwd`, and :mod:`resource` modules now return enhanced "
"tuples::"
msgstr ""
"Los módulos :mod:`grp`, :mod:`pwd` y :mod:`resource` retornan ahora tuplas "
"mejoradas::"

#: ../Doc/whatsnew/2.3.rst:1304
msgid "The :mod:`gzip` module can now handle files exceeding 2 GiB."
msgstr "El módulo :mod:`gzip` ahora puede manejar archivos de más de 2 GiB."

#: ../Doc/whatsnew/2.3.rst:1306
msgid ""
"The new :mod:`heapq` module contains an implementation of a heap queue "
"algorithm.  A heap is an array-like data structure that keeps items in a "
"partially sorted order such that, for every index *k*, ``heap[k] <= heap[2*k"
"+1]`` and ``heap[k] <= heap[2*k+2]``.  This makes it quick to remove the "
"smallest item, and inserting a new item while maintaining the heap property "
"is O(lg n).  (See https://xlinux.nist.gov/dads//HTML/priorityque.html for "
"more information about the priority queue data structure.)"
msgstr ""
"El nuevo módulo :mod:`heapq` contiene una implementación de un algoritmo de "
"colas de montón.  Un montón es una estructura de datos similar a un array "
"que mantiene los elementos en un orden parcialmente ordenado de forma que, "
"para cada índice *k*, ``heap[k] <= heap[2*k+1]`` y ``heap[k] <= heap[2*k"
"+2]``.  Esto hace que sea rápido eliminar el elemento más pequeño, y la "
"inserción de un nuevo elemento manteniendo la propiedad del montón es *O(lg "
"n)*.  (Véase https://xlinux.nist.gov/dads//HTML/priorityque.html para más "
"información sobre la estructura de datos de la cola de prioridad)"

#: ../Doc/whatsnew/2.3.rst:1314
msgid ""
"The :mod:`heapq` module provides :func:`heappush` and :func:`heappop` "
"functions for adding and removing items while maintaining the heap property "
"on top of some other mutable Python sequence type.  Here's an example that "
"uses a Python list::"
msgstr ""
"El módulo :mod:`heapq` proporciona las funciones :func:`heappush` y :func:"
"`heappop` para añadir y eliminar elementos manteniendo la propiedad del "
"montón sobre algún otro tipo de secuencia mutable de Python.  Aquí hay un "
"ejemplo que utiliza una lista de Python::"

#: ../Doc/whatsnew/2.3.rst:1332
msgid "(Contributed by Kevin O'Connor.)"
msgstr "(Contribución de Kevin O'Connor.)"

#: ../Doc/whatsnew/2.3.rst:1334
msgid ""
"The IDLE integrated development environment has been updated using the code "
"from the IDLEfork project (http://idlefork.sourceforge.net).  The most "
"notable feature is that the code being developed is now executed in a "
"subprocess, meaning that there's no longer any need for manual ``reload()`` "
"operations. IDLE's core code has been incorporated into the standard library "
"as the :mod:`idlelib` package."
msgstr ""
"El entorno de desarrollo integrado IDLE ha sido actualizado utilizando el "
"código del proyecto IDLEfork (http://idlefork.sourceforge.net).  La "
"característica más notable es que el código que se está desarrollando se "
"ejecuta ahora en un subproceso, lo que significa que ya no es necesario "
"realizar operaciones manuales de ``reload()``. El código central de IDLE ha "
"sido incorporado a la biblioteca estándar como el paquete :mod:`idlelib`."
