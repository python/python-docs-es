# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-25 19:47+0200\n"
"PO-Revision-Date: 2022-10-28 00:38+0200\n"
"Last-Translator: Jaime Resano <resano.138736@e.unavarra.es>\n"
"Language-Team: python-doc-es\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.10.3\n"
"X-Generator: Poedit 3.2\n"

#: ../Doc/whatsnew/2.1.rst:3
msgid "What's New in Python 2.1"
msgstr "Qué hay de nuevo en Python 2.1"

#: ../Doc/whatsnew/2.1.rst
msgid "Author"
msgstr "Autor"

#: ../Doc/whatsnew/2.1.rst:5
msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

#: ../Doc/whatsnew/2.1.rst:13
msgid "Introduction"
msgstr "Introducción"

#: ../Doc/whatsnew/2.1.rst:15
msgid ""
"This article explains the new features in Python 2.1.  While there aren't as "
"many changes in 2.1 as there were in Python 2.0, there are still some "
"pleasant surprises in store.  2.1 is the first release to be steered through "
"the use of Python Enhancement Proposals, or PEPs, so most of the sizable "
"changes have accompanying PEPs that provide more complete documentation and "
"a design rationale for the change.  This article doesn't attempt to document "
"the new features completely, but simply provides an overview of the new "
"features for Python programmers. Refer to the Python 2.1 documentation, or "
"to the specific PEP, for more details about any new feature that "
"particularly interests you."
msgstr ""
"Este artículo explica las nuevas características de Python 2.1. Aunque no "
"hay tantos cambios en 2.1 como en Python 2.0, todavía hay algunas sorpresas "
"agradables. La versión 2.1 es la primera que se dirige mediante el uso de "
"Propuestas de Mejora de Python, o PEPs, por lo que la mayoría de los cambios "
"importantes tienen PEPs adjuntos que proporcionan una documentación más "
"completa y una justificación de diseño para el cambio. Este artículo no "
"intenta documentar las nuevas características por completo, sino que "
"simplemente proporciona una visión general de las nuevas características "
"para los programadores de Python. Consulta la documentación de Python 2.1, o "
"el PEP específico, para obtener más detalles sobre cualquier nueva "
"característica que te interese particularmente."

#: ../Doc/whatsnew/2.1.rst:25
msgid ""
"One recent goal of the Python development team has been to accelerate the "
"pace of new releases, with a new release coming every 6 to 9 months. 2.1 is "
"the first release to come out at this faster pace, with the first alpha "
"appearing in January, 3 months after the final version of 2.0 was released."
msgstr ""
"Un objetivo reciente del equipo de desarrollo de Python ha sido acelerar el "
"ritmo de las nuevas versiones, con una nueva versión cada 6 a 9 meses. La "
"versión 2.1 es la primera que sale a este ritmo más rápido, con la primera "
"alfa que apareció en enero, 3 meses después de que se publicara la versión "
"final de la 2.0."

#: ../Doc/whatsnew/2.1.rst:30
msgid "The final release of Python 2.1 was made on April 17, 2001."
msgstr "La versión final de Python 2.1 se realizó el 17 de abril de 2001."

#: ../Doc/whatsnew/2.1.rst:36
msgid "PEP 227: Nested Scopes"
msgstr "PEP 227: Ámbitos anidados"

#: ../Doc/whatsnew/2.1.rst:38
msgid ""
"The largest change in Python 2.1 is to Python's scoping rules.  In Python "
"2.0, at any given time there are at most three namespaces used to look up "
"variable names: local, module-level, and the built-in namespace.  This often "
"surprised people because it didn't match their intuitive expectations.  For "
"example, a nested recursive function definition doesn't work::"
msgstr ""
"El mayor cambio en Python 2.1 es el de las reglas de alcance de Python. En "
"Python 2.0, en cualquier momento hay como máximo tres espacios de nombres "
"utilizados para buscar nombres de variables: local, a nivel de módulo y el "
"espacio de nombres incorporado. Esto a menudo sorprendía a la gente porque "
"no coincidía con sus expectativas intuitivas. Por ejemplo, una definición de "
"función recursiva anidada no funciona::"

#: ../Doc/whatsnew/2.1.rst:51
msgid ""
"The function :func:`g` will always raise a :exc:`NameError` exception, "
"because the binding of the name ``g`` isn't in either its local namespace or "
"in the module-level namespace.  This isn't much of a problem in practice "
"(how often do you recursively define interior functions like this?), but "
"this also made using the :keyword:`lambda` expression clumsier, and this was "
"a problem in practice. In code which uses :keyword:`lambda` you can often "
"find local variables being copied by passing them as the default values of "
"arguments. ::"
msgstr ""
"La función :func:`g` siempre lanzará una excepción :exc:`NameError`, porque "
"el enlace del nombre ``g`` no está ni en su espacio de nombres local ni en "
"el espacio de nombres a nivel de módulo. Esto no es un gran problema en la "
"práctica (¿con qué frecuencia se definen recursivamente funciones interiores "
"como ésta?), pero esto también hacía más torpe el uso de la expresión :"
"keyword:`lambda`, y esto era un problema en la práctica. En el código que "
"utiliza :keyword:`lambda` a menudo se pueden encontrar variables locales que "
"se copian al pasarlas como valores por defecto de los argumentos. ::"

#: ../Doc/whatsnew/2.1.rst:65
msgid ""
"The readability of Python code written in a strongly functional style "
"suffers greatly as a result."
msgstr ""
"La legibilidad del código Python escrito en un estilo fuertemente funcional "
"sufre mucho como resultado."

#: ../Doc/whatsnew/2.1.rst:68
msgid ""
"The most significant change to Python 2.1 is that static scoping has been "
"added to the language to fix this problem.  As a first effect, the "
"``name=name`` default argument is now unnecessary in the above example.  Put "
"simply, when a given variable name is not assigned a value within a function "
"(by an assignment, or the :keyword:`def`, :keyword:`class`, or :keyword:"
"`import` statements), references to the variable will be looked up in the "
"local namespace of the enclosing scope.  A more detailed explanation of the "
"rules, and a dissection of the implementation, can be found in the PEP."
msgstr ""
"El cambio más significativo de Python 2.1 es que se ha añadido al lenguaje "
"el ámbito estático para solucionar este problema. Como primer efecto, el "
"argumento por defecto ``name=name`` es ahora innecesario en el ejemplo "
"anterior. En pocas palabras, cuando a un nombre de variable dado no se le "
"asigna un valor dentro de una función (mediante una asignación, o las "
"sentencias :keyword:`def`, :keyword:`class`, o :keyword:`import`), las "
"referencias a la variable se buscarán en el espacio de nombres local del "
"ámbito que la rodea. Puede encontrar una explicación más detallada de las "
"reglas y una disección de la implementación en el PEP."

#: ../Doc/whatsnew/2.1.rst:77
msgid ""
"This change may cause some compatibility problems for code where the same "
"variable name is used both at the module level and as a local variable "
"within a function that contains further function definitions. This seems "
"rather unlikely though, since such code would have been pretty confusing to "
"read in the first place."
msgstr ""
"Este cambio puede causar algunos problemas de compatibilidad para el código "
"en el que el mismo nombre de variable se utiliza tanto a nivel de módulo "
"como de variable local dentro de una función que contiene otras definiciones "
"de función. Sin embargo, esto parece bastante improbable, ya que dicho "
"código habría sido bastante confuso de leer en primer lugar."

#: ../Doc/whatsnew/2.1.rst:83
msgid ""
"One side effect of the change is that the ``from module import *`` and "
"``exec`` statements have been made illegal inside a function scope under "
"certain conditions.  The Python reference manual has said all along that "
"``from module import *`` is only legal at the top level of a module, but the "
"CPython interpreter has never enforced this before.  As part of the "
"implementation of nested scopes, the compiler which turns Python source into "
"bytecodes has to generate different code to access variables in a containing "
"scope.  ``from module import *`` and ``exec`` make it impossible for the "
"compiler to figure this out, because they add names to the local namespace "
"that are unknowable at compile time. Therefore, if a function contains "
"function definitions or :keyword:`lambda` expressions with free variables, "
"the compiler will flag this by raising a :exc:`SyntaxError` exception."
msgstr ""
"Un efecto secundario del cambio es que las sentencias ``from module import "
"*`` y ``exec`` se han hecho ilegales dentro del ámbito de una función bajo "
"ciertas condiciones. El manual de referencia de Python ha dicho todo el "
"tiempo que ``from module import *`` sólo es legal en el nivel superior de un "
"módulo, pero el intérprete de CPython nunca ha aplicado esto antes. Como "
"parte de la implementación de los ámbitos anidados, el compilador que "
"convierte el código fuente de Python en bytecodes tiene que generar un "
"código diferente para acceder a las variables de un ámbito contenedor. Los "
"códigos ``from module import *`` y ``exec`` hacen que el compilador no pueda "
"averiguar esto, porque añaden nombres al espacio de nombres local que son "
"desconocidos en tiempo de compilación. Por lo tanto, si una función contiene "
"definiciones de funciones o expresiones :keyword:`lambda` con variables "
"libres, el compilador lo señalará lanzando una excepción :exc:`SyntaxError`."

#: ../Doc/whatsnew/2.1.rst:96
msgid "To make the preceding explanation a bit clearer, here's an example::"
msgstr ""
"Para que la explicación anterior quede un poco más clara, he aquí un "
"ejemplo::"

#: ../Doc/whatsnew/2.1.rst:105
msgid ""
"Line 4 containing the ``exec`` statement is a syntax error, since ``exec`` "
"would define a new local variable named ``x`` whose value should be accessed "
"by :func:`g`."
msgstr ""
"La línea 4 que contiene la sentencia ``exec`` es un error de sintaxis, ya "
"que ``exec`` definiría una nueva variable local llamada ``x`` cuyo valor "
"debería ser accedido por :func:`g`."

#: ../Doc/whatsnew/2.1.rst:109
msgid ""
"This shouldn't be much of a limitation, since ``exec`` is rarely used in "
"most Python code (and when it is used, it's often a sign of a poor design "
"anyway)."
msgstr ""
"Esto no debería ser una gran limitación, ya que ``exec`` rara vez se utiliza "
"en la mayoría del código de Python (y cuando se utiliza, a menudo es un "
"signo de un mal diseño de todos modos)."

#: ../Doc/whatsnew/2.1.rst:113
msgid ""
"Compatibility concerns have led to nested scopes being introduced gradually; "
"in Python 2.1, they aren't enabled by default, but can be turned on within a "
"module by using a future statement as described in :pep:`236`.  (See the "
"following section for further discussion of :pep:`236`.)  In Python 2.2, "
"nested scopes will become the default and there will be no way to turn them "
"off, but users will have had all of 2.1's lifetime to fix any breakage "
"resulting from their introduction."
msgstr ""
"Los problemas de compatibilidad han llevado a que los ámbitos anidados se "
"introduzcan gradualmente; en Python 2.1, no están habilitados por defecto, "
"pero pueden activarse dentro de un módulo utilizando una sentencia future "
"como se describe en :pep:`236`. (En Python 2.2, los ámbitos anidados se "
"convertirán en el valor por defecto y no habrá forma de desactivarlos, pero "
"los usuarios habrán tenido toda la vida de la versión 2.1 para arreglar "
"cualquier rotura resultante de su introducción."

#: ../Doc/whatsnew/2.1.rst:123
msgid ":pep:`227` - Statically Nested Scopes"
msgstr ":pep:`227` - Ámbitos anidados estáticamente"

#: ../Doc/whatsnew/2.1.rst:124
msgid "Written and implemented by Jeremy Hylton."
msgstr "Escrito e implementado por Jeremy Hylton."

#: ../Doc/whatsnew/2.1.rst:130
msgid "PEP 236: __future__ Directives"
msgstr "PEP 236: Directivas __future__"

#: ../Doc/whatsnew/2.1.rst:132
msgid ""
"The reaction to nested scopes was widespread concern about the dangers of "
"breaking code with the 2.1 release, and it was strong enough to make the "
"Pythoneers take a more conservative approach.  This approach consists of "
"introducing a convention for enabling optional functionality in release N "
"that will become compulsory in release N+1."
msgstr ""
"La reacción a los ámbitos anidados fue una preocupación generalizada sobre "
"los peligros de romper el código con la versión 2.1, y fue lo "
"suficientemente fuerte como para que los Pythonistas adoptaran un enfoque "
"más conservador. Este enfoque consiste en introducir una convención para "
"habilitar una funcionalidad opcional en la versión N que se convertirá en "
"obligatoria en la versión N+1."

#: ../Doc/whatsnew/2.1.rst:138
msgid ""
"The syntax uses a ``from...import`` statement using the reserved module "
"name :mod:`__future__`.  Nested scopes can be enabled by the following "
"statement::"
msgstr ""
"La sintaxis utiliza una sentencia ``from...import`` utilizando el nombre de "
"módulo reservado :mod:`__future__`. Los ámbitos anidados pueden habilitarse "
"mediante la siguiente sentencia::"

#: ../Doc/whatsnew/2.1.rst:143
msgid ""
"While it looks like a normal :keyword:`import` statement, it's not; there "
"are strict rules on where such a future statement can be put. They can only "
"be at the top of a module, and must precede any Python code or regular :"
"keyword:`!import` statements.  This is because such statements can affect "
"how the Python bytecode compiler parses code and generates bytecode, so they "
"must precede any statement that will result in bytecodes being produced."
msgstr ""
"Aunque parece una sentencia :keyword:`import` normal, no lo es; hay reglas "
"estrictas sobre dónde se puede poner una sentencia future. Sólo pueden estar "
"en la parte superior de un módulo, y deben preceder a cualquier código "
"Python o a las sentencias :keyword:`!import` normales. Esto se debe a que "
"tales declaraciones pueden afectar a la forma en que el compilador de código "
"de bytes de Python analiza el código y genera el código de bytes, por lo que "
"deben preceder a cualquier declaración que dé lugar a la producción de "
"códigos de bytes."

#: ../Doc/whatsnew/2.1.rst:153
msgid ":pep:`236` - Back to the :mod:`__future__`"
msgstr ":pep:`236` - De vuelta al :mod:`__future__`"

#: ../Doc/whatsnew/2.1.rst:154
msgid "Written by Tim Peters, and primarily implemented by Jeremy Hylton."
msgstr "Escrito por Tim Peters, y ejecutado principalmente por Jeremy Hylton."

#: ../Doc/whatsnew/2.1.rst:160
msgid "PEP 207: Rich Comparisons"
msgstr "PEP 207: Comparaciones Enriquecidas"

#: ../Doc/whatsnew/2.1.rst:162
msgid ""
"In earlier versions, Python's support for implementing comparisons on user-"
"defined classes and extension types was quite simple. Classes could "
"implement a :meth:`__cmp__` method that was given two instances of a class, "
"and could only return 0 if they were equal or +1 or -1 if they weren't; the "
"method couldn't raise an exception or return anything other than a Boolean "
"value.  Users of Numeric Python often found this model too weak and "
"restrictive, because in the number-crunching programs that numeric Python is "
"used for, it would be more useful to be able to perform elementwise "
"comparisons of two matrices, returning a matrix containing the results of a "
"given comparison for each element.  If the two matrices are of different "
"sizes, then the compare has to be able to raise an exception to signal the "
"error."
msgstr ""
"En versiones anteriores, el soporte de Python para implementar comparaciones "
"en clases definidas por el usuario y tipos de extensión era bastante simple. "
"Las clases podían implementar un método :meth:`__cmp__` al que se le daban "
"dos instancias de una clase, y sólo podía retornar 0 si eran iguales o +1 o "
"-1 si no lo eran; el método no podía lanzar una excepción ni retornar nada "
"más que un valor booleano. Los usuarios de Python Numérico a menudo "
"encontraban este modelo demasiado débil y restrictivo, porque en los "
"programas de cálculo de números para los que se utiliza Numeric Python, "
"sería más útil poder realizar comparaciones por elementos de dos matrices, "
"retornando una matriz que contenga los resultados de una comparación dada "
"para cada elemento. Si las dos matrices son de diferente tamaño, entonces el "
"comparador tiene que ser capaz de lanzar una excepción para señalar el error."

#: ../Doc/whatsnew/2.1.rst:174
msgid ""
"In Python 2.1, rich comparisons were added in order to support this need. "
"Python classes can now individually overload each of the ``<``, ``<=``, "
"``>``, ``>=``, ``==``, and ``!=`` operations.  The new magic method names "
"are:"
msgstr ""
"En Python 2.1, se añadieron comparaciones enriquecidas para dar soporte a "
"esta necesidad. Las clases de Python pueden ahora sobrecargar "
"individualmente cada una de las operaciones ``<``, ``<=``, ``>``, ``>=``, "
"``==`` y ``!=``. Los nuevos nombres de métodos mágicos son:"

#: ../Doc/whatsnew/2.1.rst:179
msgid "Operation"
msgstr "Operación"

#: ../Doc/whatsnew/2.1.rst:179
msgid "Method name"
msgstr "Nombre del método"

#: ../Doc/whatsnew/2.1.rst:181
msgid "``<``"
msgstr "``<``"

#: ../Doc/whatsnew/2.1.rst:181
msgid ":meth:`__lt__`"
msgstr ":meth:`__lt__`"

#: ../Doc/whatsnew/2.1.rst:183
msgid "``<=``"
msgstr "``<=``"

#: ../Doc/whatsnew/2.1.rst:183
msgid ":meth:`__le__`"
msgstr ":meth:`__le__`"

#: ../Doc/whatsnew/2.1.rst:185
msgid "``>``"
msgstr "``>``"

#: ../Doc/whatsnew/2.1.rst:185
msgid ":meth:`__gt__`"
msgstr ":meth:`__gt__`"

#: ../Doc/whatsnew/2.1.rst:187
msgid "``>=``"
msgstr "``>=``"

#: ../Doc/whatsnew/2.1.rst:187
msgid ":meth:`__ge__`"
msgstr ":meth:`__ge__`"

#: ../Doc/whatsnew/2.1.rst:189
msgid "``==``"
msgstr "``==``"

#: ../Doc/whatsnew/2.1.rst:189
msgid ":meth:`__eq__`"
msgstr ":meth:`__eq__`"

#: ../Doc/whatsnew/2.1.rst:191
msgid "``!=``"
msgstr "``!=``"

#: ../Doc/whatsnew/2.1.rst:191
msgid ":meth:`__ne__`"
msgstr ":meth:`__ne__`"

#: ../Doc/whatsnew/2.1.rst:194
msgid ""
"(The magic methods are named after the corresponding Fortran operators ``.LT."
"``. ``.LE.``, &c.  Numeric programmers are almost certainly quite familiar "
"with these names and will find them easy to remember.)"
msgstr ""
"(Los métodos mágicos se denominan como los correspondientes operadores de "
"Fortran ``.LT.``. ``.LE.``, &c. Los programadores numéricos están casi "
"seguramente bastante familiarizados con estos nombres y los encontrarán "
"fáciles de recordar.)"

#: ../Doc/whatsnew/2.1.rst:198
msgid ""
"Each of these magic methods is of the form ``method(self, other)``, where "
"``self`` will be the object on the left-hand side of the operator, while "
"``other`` will be the object on the right-hand side.  For example, the "
"expression ``A < B`` will cause ``A.__lt__(B)`` to be called."
msgstr ""
"Cada uno de estos métodos mágicos tiene la forma ``method(self, other)``, "
"donde ``self`` será el objeto que se encuentre en el lado izquierdo del "
"operador, mientras que ``other`` será el objeto que se encuentre en el lado "
"derecho. Por ejemplo, la expresión ``A < B`` hará que se llame a ``A."
"__lt__(B)``."

#: ../Doc/whatsnew/2.1.rst:203
msgid ""
"Each of these magic methods can return anything at all: a Boolean, a matrix, "
"a list, or any other Python object.  Alternatively they can raise an "
"exception if the comparison is impossible, inconsistent, or otherwise "
"meaningless."
msgstr ""
"Cada uno de estos métodos mágicos puede retornar cualquier cosa: un "
"booleano, una matriz, una lista o cualquier otro objeto de Python. También "
"pueden lanzar una excepción si la comparación es imposible, inconsistente o "
"no tiene sentido."

#: ../Doc/whatsnew/2.1.rst:207
msgid ""
"The built-in ``cmp(A,B)`` function can use the rich comparison machinery, "
"and now accepts an optional argument specifying which comparison operation "
"to use; this is given as one of the strings ``\"<\"``, ``\"<=\"``, "
"``\">\"``, ``\">=\"``, ``\"==\"``, or ``\"!=\"``.  If called without the "
"optional third argument, :func:`cmp` will only return -1, 0, or +1 as in "
"previous versions of Python; otherwise it will call the appropriate method "
"and can return any Python object."
msgstr ""
"La función incorporada ``cmp(A,B)`` puede utilizar la comparación "
"enriquecida, y ahora acepta un argumento opcional que especifica la "
"operación de comparación a utilizar; esto se da como una de las cadenas "
"``\"<\"``, ``\"<=\"``, ``\">\"``, ``\">=\"``, ``\"==\"``, o ``\"!=\"``. Si "
"se llama sin el tercer argumento opcional, :func:`cmp` sólo retornará -1, 0 "
"o +1 como en versiones anteriores de Python; en caso contrario, llamará al "
"método apropiado y puede retornar cualquier objeto de Python."

#: ../Doc/whatsnew/2.1.rst:214
msgid ""
"There are also corresponding changes of interest to C programmers; there's a "
"new slot ``tp_richcmp`` in type objects and an API for performing a given "
"rich comparison.  I won't cover the C API here, but will refer you to :pep:"
"`207`, or to 2.1's C API documentation, for the full list of related "
"functions."
msgstr ""
"También hay cambios correspondientes de interés para los programadores de C; "
"hay una nueva ranura ``tp_richcmp`` en los objetos de tipo y una API para "
"realizar una comparación rica determinada. No cubrirá la API de C aquí, sino "
"que le remitiré a :pep:`207`, o a la documentación de la API de C de 2.1, "
"para la lista completa de funciones relacionadas."

#: ../Doc/whatsnew/2.1.rst:223
msgid ":pep:`207` - Rich Comparisons"
msgstr ":pep:`207` - Comparaciones enriquecidas"

#: ../Doc/whatsnew/2.1.rst:223
msgid ""
"Written by Guido van Rossum, heavily based on earlier work by David Ascher, "
"and implemented by Guido van Rossum."
msgstr ""
"Escrito por Guido van Rossum, basado en gran medida en un trabajo anterior "
"de David Ascher, e implementado por Guido van Rossum."

#: ../Doc/whatsnew/2.1.rst:230
msgid "PEP 230: Warning Framework"
msgstr "PEP 230: Marco de advertencia"

#: ../Doc/whatsnew/2.1.rst:232
msgid ""
"Over its 10 years of existence, Python has accumulated a certain number of "
"obsolete modules and features along the way.  It's difficult to know when a "
"feature is safe to remove, since there's no way of knowing how much code "
"uses it --- perhaps no programs depend on the feature, or perhaps many do.  "
"To enable removing old features in a more structured way, a warning "
"framework was added. When the Python developers want to get rid of a "
"feature, it will first trigger a warning in the next version of Python.  The "
"following Python version can then drop the feature, and users will have had "
"a full release cycle to remove uses of the old feature."
msgstr ""
"A lo largo de sus 10 años de existencia, Python ha acumulado un cierto "
"número de módulos y características obsoletas en el camino. Es difícil saber "
"cuándo es seguro eliminar una característica, ya que no hay manera de saber "
"cuánto código la utiliza --- tal vez ningún programa depende de la "
"característica, o tal vez muchos lo hacen. Para permitir la eliminación de "
"características antiguas de una manera más estructurada, se añadió un marco "
"de advertencia. Cuando los desarrolladores de Python quieran deshacerse de "
"una característica, primero se activará una advertencia en la siguiente "
"versión de Python. La siguiente versión de Python puede entonces eliminar la "
"característica, y los usuarios habrán tenido un ciclo de lanzamiento "
"completo para eliminar los usos de la antigua característica."

#: ../Doc/whatsnew/2.1.rst:242
msgid ""
"Python 2.1 adds the warning framework to be used in this scheme.  It adds a :"
"mod:`warnings` module that provide functions to issue warnings, and to "
"filter out warnings that you don't want to be displayed. Third-party modules "
"can also use this framework to deprecate old features that they no longer "
"wish to support."
msgstr ""
"Python 2.1 añade el marco de trabajo de las advertencias para ser utilizado "
"en este esquema. Añade un módulo :mod:`warnings` que proporciona funciones "
"para emitir advertencias, y para filtrar las advertencias que no se quieren "
"mostrar. Los módulos de terceros también pueden utilizar este marco de "
"trabajo para dejar de lado funciones antiguas que ya no desean soportar."

#: ../Doc/whatsnew/2.1.rst:248
msgid ""
"For example, in Python 2.1 the :mod:`regex` module is deprecated, so "
"importing it causes a warning to be printed::"
msgstr ""
"Por ejemplo, en Python 2.1 el módulo :mod:`regex` está obsoleto, por lo que "
"al importarlo se imprime una advertencia::"

#: ../Doc/whatsnew/2.1.rst:256
msgid "Warnings can be issued by calling the :func:`warnings.warn` function::"
msgstr ""
"Las advertencias se pueden emitir llamando a la función :func:`warnings."
"warn`::"

#: ../Doc/whatsnew/2.1.rst:260
msgid ""
"The first parameter is the warning message; an additional optional "
"parameters can be used to specify a particular warning category."
msgstr ""
"El primer parámetro es el mensaje de advertencia; se pueden utilizar otros "
"parámetros opcionales para especificar una categoría de advertencia concreta."

#: ../Doc/whatsnew/2.1.rst:263
msgid ""
"Filters can be added to disable certain warnings; a regular expression "
"pattern can be applied to the message or to the module name in order to "
"suppress a warning.  For example, you may have a program that uses the :mod:"
"`regex` module and not want to spare the time to convert it to use the :mod:"
"`re` module right now.  The warning can be suppressed by calling ::"
msgstr ""
"Se pueden añadir filtros para desactivar ciertas advertencias; se puede "
"aplicar un patrón de expresión regular al mensaje o al nombre del módulo "
"para suprimir una advertencia. Por ejemplo, puede tener un programa que "
"utilice el módulo :mod:`regex` y no querer dedicar tiempo a convertirlo para "
"que utilice el módulo :mod:`re` en este momento. La advertencia puede "
"suprimirse llamando a ::"

#: ../Doc/whatsnew/2.1.rst:275
msgid ""
"This adds a filter that will apply only to warnings of the class :class:"
"`DeprecationWarning` triggered in the :mod:`__main__` module, and applies a "
"regular expression to only match the message about the :mod:`regex` module "
"being deprecated, and will cause such warnings to be ignored.  Warnings can "
"also be printed only once, printed every time the offending code is "
"executed, or turned into exceptions that will cause the program to stop "
"(unless the exceptions are caught in the usual way, of course)."
msgstr ""
"Esto añade un filtro que se aplicará sólo a las advertencias de la clase :"
"class:`DeprecationWarning` lanzadas en el módulo :mod:`__main__`, y aplica "
"una expresión regular para que sólo coincida con el mensaje sobre el módulo :"
"mod:`regex` que está obsoleto, y hará que tales advertencias sean ignoradas. "
"Las advertencias también pueden imprimirse sólo una vez, imprimirse cada vez "
"que se ejecute el código infractor, o convertirse en excepciones que harán "
"que el programa se detenga (a menos que las excepciones se atrapen de la "
"forma habitual, por supuesto)."

#: ../Doc/whatsnew/2.1.rst:283
msgid ""
"Functions were also added to Python's C API for issuing warnings; refer to "
"PEP 230 or to Python's API documentation for the details."
msgstr ""
"También se agregaron funciones a la API de C de Python para emitir "
"advertencias; consulte el PEP 230 o la documentación de la API de Python "
"para conocer los detalles."

#: ../Doc/whatsnew/2.1.rst:293
msgid ":pep:`5` - Guidelines for Language Evolution"
msgstr ":pep:`5` - Directrices para la evolución del lenguaje"

#: ../Doc/whatsnew/2.1.rst:290
msgid ""
"Written by Paul Prescod, to specify procedures to be followed when removing "
"old features from Python.  The policy described in this PEP hasn't been "
"officially adopted, but the eventual policy probably won't be too different "
"from Prescod's proposal."
msgstr ""
"Escrito por Paul Prescod, para especificar los procedimientos a seguir "
"cuando se eliminan características antiguas de PythonLa política descrita en "
"este PEP no ha sido adoptada oficialmente, pero la política final "
"probablemente no será muy diferente de la propuesta de Prescod."

#: ../Doc/whatsnew/2.1.rst:295
msgid ":pep:`230` - Warning Framework"
msgstr ":pep:`230` - Marco de advertencia"

#: ../Doc/whatsnew/2.1.rst:296
msgid "Written and implemented by Guido van Rossum."
msgstr "Escrito y ejecutado por Guido van Rossum."

#: ../Doc/whatsnew/2.1.rst:302
msgid "PEP 229: New Build System"
msgstr "PEP 229: Sistema de construcción nuevo"

#: ../Doc/whatsnew/2.1.rst:304
msgid ""
"When compiling Python, the user had to go in and edit the :file:`Modules/"
"Setup` file in order to enable various additional modules; the default set "
"is relatively small and limited to modules that compile on most Unix "
"platforms. This means that on Unix platforms with many more features, most "
"notably Linux, Python installations often don't contain all useful modules "
"they could."
msgstr ""
"Al compilar Python, el usuario tenía que entrar y editar el archivo :file:"
"`Modules/Setup` para habilitar varios módulos adicionales; el conjunto por "
"defecto es relativamente pequeño y se limita a los módulos que se compilan "
"en la mayoría de las plataformas Unix. Esto significa que en plataformas "
"Unix con muchas más características, sobre todo Linux, las instalaciones de "
"Python no suelen contener todos los módulos útiles que podrían."

#: ../Doc/whatsnew/2.1.rst:310
msgid ""
"Python 2.0 added the Distutils, a set of modules for distributing and "
"installing extensions.  In Python 2.1, the Distutils are used to compile "
"much of the standard library of extension modules, autodetecting which ones "
"are supported on the current machine.  It's hoped that this will make Python "
"installations easier and more featureful."
msgstr ""
"Python 2.0 añadió los Distutils, un conjunto de módulos para distribuir e "
"instalar extensiones. En Python 2.1, los Distutils se utilizan para compilar "
"gran parte de la biblioteca estándar de módulos de extensión, autodetectando "
"cuáles son compatibles con la máquina actual Se espera que esto haga que las "
"instalaciones de Python sean más fáciles y tengan más funciones."

#: ../Doc/whatsnew/2.1.rst:316
msgid ""
"Instead of having to edit the :file:`Modules/Setup` file in order to enable "
"modules, a :file:`setup.py` script in the top directory of the Python source "
"distribution is run at build time, and attempts to discover which modules "
"can be enabled by examining the modules and header files on the system.  If "
"a module is configured in :file:`Modules/Setup`, the :file:`setup.py` script "
"won't attempt to compile that module and will defer to the :file:`Modules/"
"Setup` file's contents.  This provides a way to specific any strange command-"
"line flags or libraries that are required for a specific platform."
msgstr ""
"En lugar de tener que editar el archivo :file:`Modules/Setup` para habilitar "
"los módulos, un script :file:`setup.py` en el directorio superior de la "
"distribución de fuentes de Python se ejecuta en el momento de la "
"compilación, e intenta descubrir qué módulos pueden ser habilitados "
"examinando los módulos y archivos de cabecera en el sistema. Si un módulo "
"está configurado en :file:`Modules/Setup`, el script :file:`setup.py` no "
"intentará compilar ese módulo y se remitirá al contenido del archivo :file:"
"`Modules/Setup`. Esto proporciona una manera de especificar cualquier flag "
"de línea de comandos extraña o bibliotecas que se requieren para una "
"plataforma específica."

#: ../Doc/whatsnew/2.1.rst:325
msgid ""
"In another far-reaching change to the build mechanism, Neil Schemenauer "
"restructured things so Python now uses a single makefile that isn't "
"recursive, instead of makefiles in the top directory and in each of the :"
"file:`Python/`, :file:`Parser/`, :file:`Objects/`, and :file:`Modules/` "
"subdirectories.  This makes building Python faster and also makes hacking "
"the Makefiles clearer and simpler."
msgstr ""
"En otro cambio de gran alcance en el mecanismo de construcción, Neil "
"Schemenauer reestructuró las cosas para que Python ahora utilice un único "
"makefile que no es recursivo, en lugar de makefiles en el directorio "
"superior y en cada uno de los subdirectorios :file:`Python/`, :file:`Parser/"
"`, :file:`Objects/`, y :file:`Modules/`. Esto hace que la construcción de "
"Python sea más rápida y también hace que el hackeo de los Makefiles sea más "
"claro y sencillo."

#: ../Doc/whatsnew/2.1.rst:335
msgid ":pep:`229` - Using Distutils to Build Python"
msgstr ":pep:`229` - Uso de Distutils para construir Python"

#: ../Doc/whatsnew/2.1.rst:336 ../Doc/whatsnew/2.1.rst:574
msgid "Written and implemented by A.M. Kuchling."
msgstr "Escrito y ejecutado por A.M. Kuchling."

#: ../Doc/whatsnew/2.1.rst:342
msgid "PEP 205: Weak References"
msgstr "PEP 205: Referencias débiles"

#: ../Doc/whatsnew/2.1.rst:344
msgid ""
"Weak references, available through the :mod:`weakref` module, are a minor "
"but useful new data type in the Python programmer's toolbox."
msgstr ""
"Las referencias débiles, disponibles a través del módulo :mod:`weakref`, son "
"un nuevo tipo de datos menor pero útil en la caja de herramientas del "
"programador de Python."

#: ../Doc/whatsnew/2.1.rst:347
msgid ""
"Storing a reference to an object (say, in a dictionary or a list) has the "
"side effect of keeping that object alive forever.  There are a few specific "
"cases where this behaviour is undesirable, object caches being the most "
"common one, and another being circular references in data structures such as "
"trees."
msgstr ""
"Almacenar una referencia a un objeto (por ejemplo, en un diccionario o una "
"lista) tiene el efecto secundario de mantener ese objeto vivo para siempre. "
"Hay algunos casos específicos en los que este comportamiento es indeseable, "
"siendo las cachés de objetos el más común, y otro son las referencias "
"circulares en estructuras de datos como los árboles."

#: ../Doc/whatsnew/2.1.rst:352
msgid ""
"For example, consider a memoizing function that caches the results of "
"another function ``f(x)`` by storing the function's argument and its result "
"in a dictionary::"
msgstr ""
"Por ejemplo, considere una función de memoización que almacena en caché los "
"resultados de otra función ``f(x)`` almacenando el argumento de la función y "
"su resultado en un diccionario::"

#: ../Doc/whatsnew/2.1.rst:368
msgid ""
"This version works for simple things such as integers, but it has a side "
"effect; the ``_cache`` dictionary holds a reference to the return values, so "
"they'll never be deallocated until the Python process exits and cleans up. "
"This isn't very noticeable for integers, but if :func:`f` returns an object, "
"or a data structure that takes up a lot of memory, this can be a problem."
msgstr ""
"Esta versión funciona para cosas simples como los enteros, pero tiene un "
"efecto secundario; el diccionario ``_cache`` mantiene una referencia a los "
"valores retornados, por lo que nunca serán desocupados hasta que el proceso "
"de Python salga y se limpie. Esto no es muy notable para los enteros, pero "
"si :func:`f` retorna un objeto, o una estructura de datos que ocupa mucha "
"memoria, esto puede ser un problema."

#: ../Doc/whatsnew/2.1.rst:374
msgid ""
"Weak references provide a way to implement a cache that won't keep objects "
"alive beyond their time.  If an object is only accessible through weak "
"references, the object will be deallocated and the weak references will now "
"indicate that the object it referred to no longer exists.  A weak reference "
"to an object *obj* is created by calling ``wr = weakref.ref(obj)``.  The "
"object being referred to is returned by calling the weak reference as if it "
"were a function: ``wr()``.  It will return the referenced object, or "
"``None`` if the object no longer exists."
msgstr ""
"Las referencias débiles proporcionan una forma de implementar una caché que "
"no mantendrá los objetos vivos más allá de su tiempo. Si un objeto sólo es "
"accesible a través de referencias débiles, el objeto será desasignado y las "
"referencias débiles indicarán ahora que el objeto al que se refería ya no "
"existe. Una referencia débil a un objeto *obj* se crea llamando ``wr = "
"weakref.ref(obj)``. El objeto al que se hace referencia se retorna llamando "
"a la referencia débil como si fuera una función: ``wr()`` retornará el "
"objeto referenciado, o ``None`` si el objeto ya no existe."

#: ../Doc/whatsnew/2.1.rst:382
msgid ""
"This makes it possible to write a :func:`memoize` function whose cache "
"doesn't keep objects alive, by storing weak references in the cache. ::"
msgstr ""
"Esto hace posible escribir una función :func:`memoize` cuya caché no "
"mantenga objetos vivos, almacenando referencias débiles en la caché. ::"

#: ../Doc/whatsnew/2.1.rst:400
msgid ""
"The :mod:`weakref` module also allows creating proxy objects which behave "
"like weak references --- an object referenced only by proxy objects is "
"deallocated -- but instead of requiring an explicit call to retrieve the "
"object, the proxy transparently forwards all operations to the object as "
"long as the object still exists.  If the object is deallocated, attempting "
"to use a proxy will cause a :exc:`weakref.ReferenceError` exception to be "
"raised. ::"
msgstr ""
"El módulo :mod:`weakref` también permite crear objetos proxy que se "
"comportan como referencias débiles --- un objeto referenciado sólo por "
"objetos proxy es desasignado - pero en lugar de requerir una llamada "
"explícita para recuperar el objeto, el proxy reenvía de forma transparente "
"todas las operaciones al objeto mientras éste siga existiendo. Si el objeto "
"es desocupado, el intento de usar un proxy causará una excepción :exc:"
"`weakref.ReferenceError`. ::"

#: ../Doc/whatsnew/2.1.rst:416
msgid ":pep:`205` - Weak References"
msgstr ":pep:`205` - Referencias débiles"

#: ../Doc/whatsnew/2.1.rst:417
msgid "Written and implemented by Fred L. Drake, Jr."
msgstr "Escrito e implementado por Fred L. Drake, Jr."

#: ../Doc/whatsnew/2.1.rst:423
msgid "PEP 232: Function Attributes"
msgstr "PEP 232: Atributos de la función"

#: ../Doc/whatsnew/2.1.rst:425
msgid ""
"In Python 2.1, functions can now have arbitrary information attached to "
"them. People were often using docstrings to hold information about functions "
"and methods, because the ``__doc__`` attribute was the only way of attaching "
"any information to a function.  For example, in the Zope web application "
"server, functions are marked as safe for public access by having a "
"docstring, and in John Aycock's SPARK parsing framework, docstrings hold "
"parts of the BNF grammar to be parsed.  This overloading is unfortunate, "
"since docstrings are really intended to hold a function's documentation; for "
"example, it means you can't properly document functions intended for private "
"use in Zope."
msgstr ""
"En Python 2.1, las funciones ahora pueden tener información arbitraria "
"adjunta a ellas. La gente solía utilizar docstrings para mantener la "
"información sobre las funciones y los métodos, porque el atributo "
"``__doc__`` era la única manera de adjuntar cualquier información a una "
"función. Por ejemplo, en el servidor de aplicaciones web Zope, las funciones "
"se marcan como seguras para el acceso público teniendo un docstring, y en el "
"marco de análisis SPARK de John Aycock, los docstrings contienen partes de "
"la gramática BNF para ser analizada. Esta sobrecarga es desafortunada, ya "
"que los docstrings están realmente pensados para contener la documentación "
"de una función; por ejemplo, significa que no puedes documentar "
"adecuadamente las funciones destinadas al uso privado en Zope."

#: ../Doc/whatsnew/2.1.rst:435
msgid ""
"Arbitrary attributes can now be set and retrieved on functions using the "
"regular Python syntax::"
msgstr ""
"Ahora se pueden establecer y recuperar atributos arbitrarios en las "
"funciones utilizando la sintaxis normal de Python::"

#: ../Doc/whatsnew/2.1.rst:444
msgid ""
"The dictionary containing attributes can be accessed as the function's :attr:"
"`~object.__dict__`. Unlike the :attr:`~object.__dict__` attribute of class "
"instances, in functions you can actually assign a new dictionary to :attr:"
"`~object.__dict__`, though the new value is restricted to a regular Python "
"dictionary; you *can't* be tricky and set it to a :class:`UserDict` "
"instance, or any other random object that behaves like a mapping."
msgstr ""
"Se puede acceder al diccionario que contiene los atributos como :attr:"
"`~objeto.__dict__` de la función. A diferencia del atributo :attr:`~objeto."
"__dict__` de las instancias de clase, en las funciones se puede asignar un "
"nuevo diccionario a :attr:`~objeto.__dict__`, aunque el nuevo valor está "
"restringido a un diccionario normal de Python; no se puede ser complicado y "
"establecerlo como una instancia de :class:`UserDict`, o cualquier otro "
"objeto aleatorio que se comporte como un mapeo."

#: ../Doc/whatsnew/2.1.rst:454
msgid ":pep:`232` - Function Attributes"
msgstr ":pep:`232` - Atributos de la función"

#: ../Doc/whatsnew/2.1.rst:455
msgid "Written and implemented by Barry Warsaw."
msgstr "Escrito y ejecutado por Barry Warsaw."

#: ../Doc/whatsnew/2.1.rst:461
msgid "PEP 235: Importing Modules on Case-Insensitive Platforms"
msgstr ""
"PEP 235: Importación de módulos en plataformas que no distinguen entre "
"mayúsculas y minúsculas"

#: ../Doc/whatsnew/2.1.rst:463
msgid ""
"Some operating systems have filesystems that are case-insensitive, MacOS and "
"Windows being the primary examples; on these systems, it's impossible to "
"distinguish the filenames ``FILE.PY`` and ``file.py``, even though they do "
"store the file's name  in its original case (they're case-preserving, too)."
msgstr ""
"Algunos sistemas operativos tienen sistemas de archivos que no distinguen "
"entre mayúsculas y minúsculas, siendo MacOS y Windows los principales "
"ejemplos; en estos sistemas, es imposible distinguir los nombres de archivo "
"``FILE.PY`` y ``file.py``, aunque almacenan el nombre del archivo en su caso "
"original (también preservan las mayúsculas)."

#: ../Doc/whatsnew/2.1.rst:468
msgid ""
"In Python 2.1, the :keyword:`import` statement will work to simulate case-"
"sensitivity on case-insensitive platforms.  Python will now search for the "
"first case-sensitive match by default, raising an :exc:`ImportError` if no "
"such file is found, so ``import file`` will not import a module named ``FILE."
"PY``. Case-insensitive matching can be requested by setting the :envvar:"
"`PYTHONCASEOK` environment variable before starting the Python interpreter."
msgstr ""
"En Python 2.1, la sentencia :keyword:`import` funcionará para simular la "
"distinción entre mayúsculas y minúsculas en plataformas que no las "
"distinguen. Python buscará ahora la primera coincidencia entre mayúsculas y "
"minúsculas por defecto, lanzando un :exc:`ImportError` si no se encuentra "
"dicho fichero, por lo que ``import file`` no importará un módulo llamado "
"``FILE.PY``. La coincidencia insensible a mayúsculas y minúsculas puede "
"solicitarse estableciendo la variable de entorno :envvar:`PYTHONCASEOK` "
"antes de iniciar el intérprete de Python."

#: ../Doc/whatsnew/2.1.rst:479
msgid "PEP 217: Interactive Display Hook"
msgstr "PEP 217: Gancho de pantalla interactivo"

#: ../Doc/whatsnew/2.1.rst:481
msgid ""
"When using the Python interpreter interactively, the output of commands is "
"displayed using the built-in :func:`repr` function. In Python 2.1, the "
"variable :func:`sys.displayhook` can be set to a callable object which will "
"be called instead of :func:`repr`. For example, you can set it to a special "
"pretty-printing function::"
msgstr ""
"Cuando se utiliza el intérprete de Python de forma interactiva, la salida de "
"los comandos se muestra utilizando la función incorporada :func:`repr`. En "
"Python 2.1, la variable :func:`sys.displayhook` puede establecerse a un "
"objeto invocable que será llamado en lugar de :func:`repr`. Por ejemplo, "
"puede establecerla a una función especial de impresión bonita::"

#: ../Doc/whatsnew/2.1.rst:502
msgid ":pep:`217` - Display Hook for Interactive Use"
msgstr ":pep:`217` - Gancho de visualización para uso interactivo"

#: ../Doc/whatsnew/2.1.rst:503
msgid "Written and implemented by Moshe Zadka."
msgstr "Escrito y ejecutado por Moshe Zadka."

#: ../Doc/whatsnew/2.1.rst:509
msgid "PEP 208: New Coercion Model"
msgstr "PEP 208: Nuevo modelo de coerción"

#: ../Doc/whatsnew/2.1.rst:511
msgid ""
"How numeric coercion is done at the C level was significantly modified.  "
"This will only affect the authors of C extensions to Python, allowing them "
"more flexibility in writing extension types that support numeric operations."
msgstr ""
"Se ha modificado significativamente la forma en que se realiza la coerción "
"numérica a nivel de C. Esto sólo afectará a los autores de las extensiones "
"de C a Python, permitiéndoles más flexibilidad a la hora de escribir tipos "
"de extensión que soporten operaciones numéricas."

#: ../Doc/whatsnew/2.1.rst:515
msgid ""
"Extension types can now set the type flag ``Py_TPFLAGS_CHECKTYPES`` in their "
"``PyTypeObject`` structure to indicate that they support the new coercion "
"model. In such extension types, the numeric slot functions can no longer "
"assume that they'll be passed two arguments of the same type; instead they "
"may be passed two arguments of differing types, and can then perform their "
"own internal coercion. If the slot function is passed a type it can't "
"handle, it can indicate the failure by returning a reference to the "
"``Py_NotImplemented`` singleton value. The numeric functions of the other "
"type will then be tried, and perhaps they can handle the operation; if the "
"other type also returns ``Py_NotImplemented``, then a :exc:`TypeError` will "
"be raised.  Numeric methods written in Python can also return "
"``Py_NotImplemented``, causing the interpreter to act as if the method did "
"not exist (perhaps raising a :exc:`TypeError`, perhaps trying another "
"object's numeric methods)."
msgstr ""
"Los tipos de extensión pueden ahora establecer el indicador de tipo "
"``Py_TPFLAGS_CHECKTYPES`` en su estructura ``PyTypeObject`` para indicar que "
"soportan el nuevo modelo de coerción. En tales tipos de extensión, las "
"funciones numéricas de ranura ya no pueden asumir que se les pasarán dos "
"argumentos del mismo tipo; en su lugar, se les pueden pasar dos argumentos "
"de tipos diferentes, y entonces pueden realizar su propia coerción interna. "
"Si a la función de ranura se le pasa un tipo que no puede manejar, puede "
"indicar el fallo retornando una referencia al valor singleton "
"``Py_NotImplemented``. Las funciones numéricas del otro tipo serán entonces "
"probadas, y quizás puedan manejar la operación; si el otro tipo también "
"retorna ``Py_NotImplemented``, entonces se levantará un :exc:`TypeError`Los "
"métodos numéricos escritos en Python también pueden retornar "
"``Py_NotImplemented``, haciendo que el intérprete actúe como si el método no "
"existiera (tal vez lanzando un :exc:`TypeError`, tal vez probando los "
"métodos numéricos de otro objeto)."

#: ../Doc/whatsnew/2.1.rst:534
msgid ":pep:`208` - Reworking the Coercion Model"
msgstr ":pep:`208` - Reformulación del modelo de coerción"

#: ../Doc/whatsnew/2.1.rst:533
msgid ""
"Written and implemented by Neil Schemenauer, heavily based upon earlier work "
"by Marc-André Lemburg.  Read this to understand the fine points of how "
"numeric operations will now be processed at the C level."
msgstr ""
"Escrito e implementado por Neil Schemenauer, basado en gran medida en el "
"trabajo anterior de Marc-André Lemburg. Léalo para entender los puntos finos "
"de cómo las operaciones numéricas serán ahora procesadas en el nivel C."

#: ../Doc/whatsnew/2.1.rst:541
msgid "PEP 241: Metadata in Python Packages"
msgstr "PEP 241: Metadatos en paquetes de Python"

#: ../Doc/whatsnew/2.1.rst:543
msgid ""
"A common complaint from Python users is that there's no single catalog of "
"all the Python modules in existence.  T. Middleton's Vaults of Parnassus at "
"``www.vex.net/parnassus/`` (retired in February 2009, `available in the "
"Internet Archive Wayback Machine <https://web.archive.org/web/20090130140102/"
"http://www.vex.net/parnassus/>`_) was the largest catalog of Python modules, "
"but registering software at the Vaults is optional, and many people did not "
"bother."
msgstr ""
"Una queja común de los usuarios de Python es que no existe un solo catálogo "
"de todos los módulos de Python existentes.  T. Middleton's Vault of "
"Parnassus en ``www.vex.net/parnassus/`` (borrado en febrero de 2009, "
"`disponible en Internet Archive Wayback Machine <https://web.archive.org/"
"web/20090130140102/http://www.vex.net/parnassus/>`_) fue uno de los mayores "
"catálogos de módulos de Python, pero registrar software en los archivos es "
"opcional, y a mucha gente no le importó."

#: ../Doc/whatsnew/2.1.rst:551
msgid ""
"As a first small step toward fixing the problem, Python software packaged "
"using the Distutils :command:`sdist` command will include a file named :file:"
"`PKG-INFO` containing information about the package such as its name, "
"version, and author (metadata, in cataloguing terminology).  :pep:`241` "
"contains the full list of fields that can be present in the :file:`PKG-INFO` "
"file.  As people began to package their software using Python 2.1, more and "
"more packages will include metadata, making it possible to build automated "
"cataloguing systems and experiment with them.  With the result experience, "
"perhaps it'll be possible to design a really good catalog and then build "
"support for it into Python 2.2. For example, the Distutils :command:`sdist` "
"and :command:`bdist_\\*` commands could support an ``upload`` option that "
"would automatically upload your package to a catalog server."
msgstr ""
"Como primer pequeño paso para solucionar el problema, el software de Python "
"empaquetado con el comando :command:`sdist` de Distutils incluirá un archivo "
"llamado :file:`PKG-INFO` que contiene información sobre el paquete, como su "
"nombre, versión y autor (metadatos, en terminología de catalogación). :pep:"
"`241` contiene la lista completa de campos que pueden estar presentes en el "
"archivo :file:`PKG-INFO`A medida que la gente empiece a empaquetar su "
"software usando Python 2.1, más y más paquetes incluirán metadatos, haciendo "
"posible construir sistemas de catalogación automatizados y experimentar con "
"ellosCon la experiencia resultante, tal vez sea posible diseñar un catálogo "
"realmente bueno y luego construir soporte para él en Python 2.2. Por "
"ejemplo, los comandos Distutils :command:`sdist` y :command:`bdist_\\*` "
"podrían soportar una opción ``upload`` que subiera automáticamente tu "
"paquete a un servidor de catálogos."

#: ../Doc/whatsnew/2.1.rst:564
msgid ""
"You can start creating packages containing :file:`PKG-INFO` even if you're "
"not using Python 2.1, since a new release of the Distutils will be made for "
"users of earlier Python versions.  Version 1.0.2 of the Distutils includes "
"the changes described in :pep:`241`, as well as various bugfixes and "
"enhancements.  It will be available from the Distutils SIG at https://www."
"python.org/community/sigs/current/distutils-sig/."
msgstr ""
"Puedes empezar a crear paquetes que contengan :file:`PKG-INFO` incluso si no "
"estás usando Python 2.1, ya que se hará una nueva versión de las Distutils "
"para los usuarios de versiones anteriores de PythonLa versión 1.0.2 de las "
"Distutils incluye los cambios descritos en :pep:`241`, así como varias "
"correcciones de errores y mejoras. Estará disponible en el SIG de Distutils "
"en https://www.python.org/community/sigs/current/distutils-sig/."

#: ../Doc/whatsnew/2.1.rst:574
msgid ":pep:`241` - Metadata for Python Software Packages"
msgstr ":pep:`241` - Metadatos para paquetes de software de Python"

#: ../Doc/whatsnew/2.1.rst:577
msgid ":pep:`243` - Module Repository Upload Mechanism"
msgstr ":pep:`243` - Mecanismo de carga del repositorio de módulos"

#: ../Doc/whatsnew/2.1.rst:577
msgid ""
"Written by Sean Reifschneider, this draft PEP describes a proposed mechanism "
"for uploading  Python packages to a central server."
msgstr ""
"Escrito por Sean Reifschneider, este borrador de PEP describe un mecanismo "
"propuesto para subir paquetes de Python a un servidor central."

#: ../Doc/whatsnew/2.1.rst:584
msgid "New and Improved Modules"
msgstr "Módulos nuevos y mejorados"

#: ../Doc/whatsnew/2.1.rst:586
msgid ""
"Ka-Ping Yee contributed two new modules: :mod:`inspect.py`, a module for "
"getting information about live Python code, and :mod:`pydoc.py`, a module "
"for interactively converting docstrings to HTML or text.  As a bonus, :file:"
"`Tools/scripts/pydoc`, which is now automatically installed, uses :mod:"
"`pydoc.py` to display documentation given a Python module, package, or class "
"name.  For example, ``pydoc xml.dom`` displays the following::"
msgstr ""
"Ka-Ping Yee ha contribuido con dos nuevos módulos: :mod:`inspect.py`, un "
"módulo para obtener información sobre código Python en vivo, y :mod:`pydoc."
"py`, un módulo para convertir interactivamente docstrings a HTML o texto. "
"Además, :file:`Tools/scripts/pydoc`, que se instala automáticamente, "
"utiliza :mod:`pydoc.py` para mostrar la documentación de un módulo, paquete "
"o clase de Python. Por ejemplo, ``pydoc xml.dom`` muestra lo siguiente::"

#: ../Doc/whatsnew/2.1.rst:608
msgid ""
":file:`pydoc` also includes a Tk-based interactive help browser.   :file:"
"`pydoc` quickly becomes addictive; try it out!"
msgstr ""
":file:`pydoc` también incluye un navegador de ayuda interactiva basado en "
"Tk. :file:`pydoc` se vuelve rápidamente adictivo; ¡pruébalo!"

#: ../Doc/whatsnew/2.1.rst:611
msgid ""
"Two different modules for unit testing were added to the standard library. "
"The :mod:`doctest` module, contributed by Tim Peters, provides a testing "
"framework based on running embedded examples in docstrings and comparing the "
"results against the expected output.  PyUnit, contributed by Steve Purcell, "
"is a unit testing framework inspired by JUnit, which was in turn an "
"adaptation of Kent Beck's Smalltalk testing framework.  See http://pyunit."
"sourceforge.net/ for more information about PyUnit."
msgstr ""
"Se han añadido a la biblioteca estándar dos módulos diferentes para realizar "
"pruebas unitarias. El módulo :mod:`doctest`, aportado por Tim Peters, "
"proporciona un marco de pruebas basado en la ejecución de ejemplos "
"incrustados en docstrings y la comparación de los resultados con la salida "
"esperadaPyUnit, contribuido por Steve Purcell, es un marco de pruebas "
"unitarias inspirado en JUnit, que a su vez fue una adaptación del marco de "
"pruebas Smalltalk de Kent BeckConsulte http://pyunit.sourceforge.net/ para "
"obtener más información sobre PyUnit."

#: ../Doc/whatsnew/2.1.rst:619
msgid ""
"The :mod:`difflib` module contains a class, :class:`SequenceMatcher`, which "
"compares two sequences and computes the changes required to transform one "
"sequence into the other.  For example, this module can be used to write a "
"tool similar to the Unix :program:`diff` program, and in fact the sample "
"program :file:`Tools/scripts/ndiff.py` demonstrates how to write such a "
"script."
msgstr ""
"El módulo :mod:`difflib` contiene una clase, :class:`SequenceMatcher`, que "
"compara dos secuencias y calcula los cambios necesarios para transformar una "
"secuencia en la otra. Por ejemplo, este módulo puede utilizarse para "
"escribir una herramienta similar al programa :program:`diff` de Unix, y de "
"hecho el programa de ejemplo :file:`Tools/scripts/ndiff.py` demuestra cómo "
"escribir un script de este tipo."

#: ../Doc/whatsnew/2.1.rst:625
msgid ""
":mod:`curses.panel`, a wrapper for the panel library, part of ncurses and of "
"SYSV curses, was contributed by Thomas Gellekum.  The panel library provides "
"windows with the additional feature of depth. Windows can be moved higher or "
"lower in the depth ordering, and the panel library figures out where panels "
"overlap and which sections are visible."
msgstr ""
":mod:`curses.panel`, una envoltura para la biblioteca de paneles, parte de "
"ncurses y de curses SYSV, fue contribuida por Thomas Gellekum. La biblioteca "
"de paneles proporciona ventanas con la característica adicional de la "
"profundidad. Las ventanas pueden ser movidas más arriba o más abajo en el "
"ordenamiento de la profundidad, y la librería de paneles calcula dónde se "
"superponen los paneles y qué secciones son visibles."

#: ../Doc/whatsnew/2.1.rst:631
msgid ""
"The PyXML package has gone through a few releases since Python 2.0, and "
"Python 2.1 includes an updated version of the :mod:`xml` package.  Some of "
"the noteworthy changes include support for Expat 1.2 and later versions, the "
"ability for Expat parsers to handle files in any encoding supported by "
"Python, and various bugfixes for SAX, DOM, and the :mod:`minidom` module."
msgstr ""
"El paquete PyXML ha pasado por varias versiones desde Python 2.0, y Python "
"2.1 incluye una versión actualizada del paquete :mod:`xml`. Algunos de los "
"cambios notables incluyen soporte para Expat 1.2 y versiones posteriores, la "
"capacidad de los analizadores Expat para manejar archivos en cualquier "
"codificación soportada por Python, y varias correcciones de errores para "
"SAX, DOM, y el módulo :mod:`minidom`."

#: ../Doc/whatsnew/2.1.rst:637
msgid ""
"Ping also contributed another hook for handling uncaught exceptions. :func:"
"`sys.excepthook` can be set to a callable object.  When an exception isn't "
"caught by any :keyword:`try`...\\ :keyword:`except` blocks, the exception "
"will be passed to :func:`sys.excepthook`, which can then do whatever it "
"likes.  At the Ninth Python Conference, Ping demonstrated an application for "
"this hook: printing an extended traceback that not only lists the stack "
"frames, but also lists the function arguments and the local variables for "
"each frame."
msgstr ""
"Ping también contribuyó con otro gancho para manejar excepciones no "
"detectadas. :func:`sys.excepthook` se puede configurar como un objeto "
"invocable. Cuando una excepción no es detectada por ningún bloque :keyword:"
"`try`...\\ :keyword:`except`, la excepción se pasará a :func:`sys."
"excepthook`, que puede hacer lo que quiera. En la Novena Conferencia de "
"Python, Ping demostró una aplicación para este gancho: imprimir un rastreo "
"extendido que no solo enumera los marcos de la pila, sino que también "
"enumera los argumentos de la función y las variables locales para cada marco."

#: ../Doc/whatsnew/2.1.rst:645
msgid ""
"Various functions in the :mod:`time` module, such as :func:`asctime` and :"
"func:`localtime`, require a floating point argument containing the time in "
"seconds since the epoch.  The most common use of these functions is to work "
"with the current time, so the floating point argument has been made "
"optional; when a value isn't provided, the current time will be used.  For "
"example, log file entries usually need a string containing the current time; "
"in Python 2.1, ``time.asctime()`` can be used, instead of the lengthier "
"``time.asctime(time.localtime(time.time()))`` that was previously required."
msgstr ""
"Varias funciones del módulo :mod:`time`, como :func:`asctime` y :func:"
"`localtime`, requieren un argumento de punto flotante que contiene el tiempo "
"en segundos desde la época. El uso más común de estas funciones es trabajar "
"con la hora actual, por lo que el argumento de punto flotante se ha hecho "
"opcional; cuando no se proporciona un valor, se utilizará la hora actual. "
"Por ejemplo, las entradas de archivos de registro suelen necesitar una "
"cadena que contenga la hora actual; en Python 2.1, se puede utilizar ``time."
"asctime()``, en lugar del más largo ``time.asctime(time.localtime(time."
"time()))`` que se requería anteriormente."

#: ../Doc/whatsnew/2.1.rst:654
msgid "This change was proposed and implemented by Thomas Wouters."
msgstr "Este cambio fue propuesto y aplicado por Thomas Wouters."

#: ../Doc/whatsnew/2.1.rst:656
msgid ""
"The :mod:`ftplib` module now defaults to retrieving files in passive mode, "
"because passive mode is more likely to work from behind a firewall.  This "
"request came from the Debian bug tracking system, since other Debian "
"packages use :mod:`ftplib` to retrieve files and then don't work from behind "
"a firewall. It's deemed unlikely that this will cause problems for anyone, "
"because Netscape defaults to passive mode and few people complain, but if "
"passive mode is unsuitable for your application or network setup, call "
"``set_pasv(0)`` on FTP objects to disable passive mode."
msgstr ""
"El módulo :mod:`ftplib` ahora recupera por defecto los ficheros en modo "
"pasivo, porque es más probable que el modo pasivo funcione desde detrás de "
"un cortafuegos. Esta petición vino del sistema de seguimiento de errores de "
"Debian, ya que otros paquetes de Debian utilizan :mod:`ftplib` para "
"recuperar archivos y entonces no funcionan desde detrás de un cortafuegos. "
"Se considera poco probable que esto cause problemas a nadie, porque Netscape "
"utiliza por defecto el modo pasivo y poca gente se queja, pero si el modo "
"pasivo no es adecuado para su aplicación o configuración de red, llame a "
"``set_pasv(0)`` en los objetos FTP para desactivar el modo pasivo."

#: ../Doc/whatsnew/2.1.rst:665
msgid ""
"Support for raw socket access has been added to the :mod:`socket` module, "
"contributed by Grant Edwards."
msgstr ""
"Se ha añadido soporte para el acceso a sockets sin procesar en el módulo :"
"mod:`socket`, aportado por Grant Edwards."

#: ../Doc/whatsnew/2.1.rst:668
msgid ""
"The :mod:`pstats` module now contains a simple interactive statistics "
"browser for displaying timing profiles for Python programs, invoked when the "
"module is run as a script.  Contributed by  Eric S. Raymond."
msgstr ""
"El módulo :mod:`pstats` contiene ahora un sencillo navegador de estadísticas "
"interactivo para mostrar los perfiles de tiempo de los programas de Python, "
"invocado cuando el módulo se ejecuta como un script. Contribuido por Eric S. "
"Raymond."

#: ../Doc/whatsnew/2.1.rst:672
msgid ""
"A new implementation-dependent function, ``sys._getframe([depth])``, has "
"been added to return a given frame object from the current call stack. :func:"
"`sys._getframe` returns the frame at the top of the call stack;  if the "
"optional integer argument *depth* is supplied, the function returns the "
"frame that is *depth* calls below the top of the stack.  For example, ``sys."
"_getframe(1)`` returns the caller's frame object."
msgstr ""
"Se ha agregado una nueva función dependiente de la implementación, ``sys."
"_getframe([depth])``, para devolver un objeto de marco determinado de la "
"pila de llamadas actual. :func:`sys._getframe` devuelve el marco en la parte "
"superior de la pila de llamadas; si el argumento de entero opcional *depth* "
"is supplied, the function returns the frame that is *depth* llama debajo de "
"la parte superior de la pila. Por ejemplo, ``sys._getframe(1)`` devuelve el "
"objeto de trama de la persona que llama."

#: ../Doc/whatsnew/2.1.rst:679
msgid ""
"This function is only present in CPython, not in Jython or the .NET "
"implementation.  Use it for debugging, and resist the temptation to put it "
"into production code."
msgstr ""
"Esta función sólo está presente en CPython, no en Jython ni en la "
"implementación de .NET. Utilízala para depurar, y resiste la tentación de "
"ponerla en el código de producción."

#: ../Doc/whatsnew/2.1.rst:687
msgid "Other Changes and Fixes"
msgstr "Otros cambios y correcciones"

#: ../Doc/whatsnew/2.1.rst:689
msgid ""
"There were relatively few smaller changes made in Python 2.1 due to the "
"shorter release cycle.  A search through the CVS change logs turns up 117 "
"patches applied, and 136 bugs fixed; both figures are likely to be "
"underestimates.  Some of the more notable changes are:"
msgstr ""
"En Python 2.1 se hicieron relativamente pocos cambios pequeños debido al "
"ciclo de publicación más corto. Una búsqueda en los registros de cambios de "
"CVS muestra 117 parches aplicados y 136 errores corregidos; es probable que "
"ambas cifras estén subestimadas. Algunos de los cambios más notables son:"

#: ../Doc/whatsnew/2.1.rst:694
msgid ""
"A specialized object allocator is now optionally available, that should be "
"faster than the system :func:`malloc` and have less memory overhead.  The "
"allocator uses C's :func:`malloc` function to get large pools of memory, and "
"then fulfills smaller memory requests from these pools.  It can be enabled "
"by providing the :option:`!--with-pymalloc` option to the :program:"
"`configure` script; see :file:`Objects/obmalloc.c` for the implementation "
"details."
msgstr ""
"Ahora está disponible opcionalmente un asignador de objetos especializado, "
"que debería ser más rápido que el sistema :func:`malloc` y tener menos "
"sobrecarga de memoria. El asignador utiliza la función :func:`malloc` de C "
"para obtener grandes reservas de memoria, y luego satisface las peticiones "
"de memoria más pequeñas de estas reservas. Puede activarse proporcionando la "
"opción :option:`!--with-pymalloc` al script :program:`configure`; véase :"
"file:`Objects/obmalloc.c` para los detalles de la implementación."

#: ../Doc/whatsnew/2.1.rst:701
msgid ""
"Authors of C extension modules should test their code with the object "
"allocator enabled, because some incorrect code may break, causing core dumps "
"at runtime. There are a bunch of memory allocation functions in Python's C "
"API that have previously been just aliases for the C library's :func:"
"`malloc` and :func:`free`, meaning that if you accidentally called "
"mismatched functions, the error wouldn't be noticeable.  When the object "
"allocator is enabled, these functions aren't aliases of :func:`malloc` and :"
"func:`free` any more, and calling the wrong function to free memory will get "
"you a core dump.  For example, if memory was allocated using :func:"
"`PyMem_New`, it has to be freed using :func:`PyMem_Del`, not :func:`free`.  "
"A few modules included with Python fell afoul of this and had to be fixed; "
"doubtless there are more third-party modules that will have the same problem."
msgstr ""
"Los autores de los módulos de extensión de C deberían probar su código con "
"el asignador de objetos activado, porque algún código incorrecto puede "
"romperse, causando volcados del núcleo en tiempo de ejecución. Hay un montón "
"de funciones de asignación de memoria en la API de C de Python que "
"anteriormente eran sólo alias de :func:`malloc` y :func:`free` de la "
"biblioteca de C, lo que significa que si accidentalmente llamabas a "
"funciones que no coincidían, el error no se notaba. Cuando el asignador de "
"objetos está habilitado, estas funciones ya no son alias de :func:`malloc` "
"y :func:`free`, y llamar a la función incorrecta para liberar memoria te "
"hará un volcado del núcleo. Por ejemplo, si la memoria fue asignada usando :"
"func:`PyMem_New`, tiene que ser liberada usando :func:`PyMem_Del`, no :func:"
"`free`. Unos cuantos módulos incluidos en Python han caído en la trampa y "
"han tenido que ser corregidos; sin duda hay más módulos de terceros que "
"tendrán el mismo problema."

#: ../Doc/whatsnew/2.1.rst:714
msgid "The object allocator was contributed by Vladimir Marangozov."
msgstr "El asignador de objetos fue aportado por Vladimir Marangozov."

#: ../Doc/whatsnew/2.1.rst:716
msgid ""
"The speed of line-oriented file I/O has been improved because people often "
"complain about its lack of speed, and because it's often been used as a "
"naïve benchmark.  The :meth:`readline` method of file objects has therefore "
"been rewritten to be much faster.  The exact amount of the speedup will vary "
"from platform to platform depending on how slow the C library's :func:`getc` "
"was, but is around 66%, and potentially much faster on some particular "
"operating systems. Tim Peters did much of the benchmarking and coding for "
"this change, motivated by a discussion in comp.lang.python."
msgstr ""
"La velocidad de la E/S de archivos orientada a líneas se ha mejorado porque "
"la gente suele quejarse de su falta de velocidad, y porque a menudo se ha "
"utilizado como referencia ingenua. El método :meth:`readline` de los objetos "
"de archivo ha sido reescrito para ser mucho más rápido. La cantidad exacta "
"de la aceleración variará de una plataforma a otra dependiendo de la "
"lentitud del método :func:`getc` de la biblioteca C, pero es alrededor del "
"66%, y potencialmente mucho más rápido en algunos sistemas operativos "
"concretos. Tim Peters hizo gran parte de la evaluación comparativa y la "
"codificación de este cambio, motivado por una discusión en comp.lang.python."

#: ../Doc/whatsnew/2.1.rst:725
msgid ""
"A new module and method for file objects was also added, contributed by Jeff "
"Epler. The new method, :meth:`xreadlines`, is similar to the existing :func:"
"`xrange` built-in.  :func:`xreadlines` returns an opaque sequence object "
"that only supports being iterated over, reading a line on every iteration "
"but not reading the entire file into memory as the existing :meth:"
"`readlines` method does. You'd use it like this::"
msgstr ""
"También se ha añadido un nuevo módulo y método para objetos de archivo, "
"aportado por Jeff Epler. El nuevo método, :meth:`xreadlines`, es similar al "
"ya existente :func:`xrange` incorporado. :func:`xreadlines` retorna un "
"objeto de secuencia opaco que sólo admite ser iterado, leyendo una línea en "
"cada iteración pero no leyendo todo el archivo en memoria como hace el "
"método :meth:`readlines` existente. Se usaría así::"

#: ../Doc/whatsnew/2.1.rst:736
msgid ""
"For a fuller discussion of the line I/O changes, see the python-dev summary "
"for January 1--15, 2001 at https://mail.python.org/pipermail/python-dev/2001-"
"January/."
msgstr ""
"Para una discusión más completa de los cambios en la línea de E/S, véase el "
"resumen de python-dev del 1 al 15 de enero de 2001 en https://mail.python."
"org/pipermail/python-dev/2001-January/."

#: ../Doc/whatsnew/2.1.rst:739
msgid ""
"A new method, :meth:`popitem`, was added to dictionaries to enable "
"destructively iterating through the contents of a dictionary; this can be "
"faster for large dictionaries because there's no need to construct a list "
"containing all the keys or values. ``D.popitem()`` removes a random ``(key, "
"value)`` pair from the dictionary ``D`` and returns it as a 2-tuple.  This "
"was implemented mostly by Tim Peters and Guido van Rossum, after a "
"suggestion and preliminary patch by Moshe Zadka."
msgstr ""
"Se ha añadido un nuevo método, :meth:`popitem`, a los diccionarios para "
"permitir la iteración destructiva a través del contenido de un diccionario; "
"esto puede ser más rápido para diccionarios grandes porque no hay necesidad "
"de construir una lista que contenga todas las claves o valores. ``D."
"popitem()`` elimina un par aleatorio ``(key, value)`` del diccionario ``D`` "
"y lo retorna como una 2-tupla. Esto fue implementado principalmente por Tim "
"Peters y Guido van Rossum, después de una sugerencia y un parche preliminar "
"de Moshe Zadka."

#: ../Doc/whatsnew/2.1.rst:747
msgid ""
"Modules can now control which names are imported when ``from module import "
"*`` is used, by defining an ``__all__`` attribute containing a list of names "
"that will be imported.  One common complaint is that if the module imports "
"other modules such as :mod:`sys` or :mod:`string`, ``from module import *`` "
"will add them to the importing module's namespace.  To fix this, simply list "
"the public names in ``__all__``::"
msgstr ""
"Ahora los módulos pueden controlar qué nombres se importan cuando se utiliza "
"``from module import *``, definiendo un atributo ``__all__`` que contiene "
"una lista de nombres que se importarán. Una queja común es que si el módulo "
"importa otros módulos como :mod:`sys` o :mod:`string`, ``from module import "
"*`` los añadirá al espacio de nombres del módulo importador. Para arreglar "
"esto, simplemente liste los nombres públicos en ``__all__``:"

#: ../Doc/whatsnew/2.1.rst:757
msgid ""
"A stricter version of this patch was first suggested and implemented by Ben "
"Wolfson, but after some python-dev discussion, a weaker final version was "
"checked in."
msgstr ""
"Una versión más estricta de este parche fue primero sugerida e implementada "
"por Ben Wolfson, pero después de algunas discusiones de python-dev, una "
"versión final más débil fue revisada."

#: ../Doc/whatsnew/2.1.rst:761
msgid ""
"Applying :func:`repr` to strings previously used octal escapes for non-"
"printable characters; for example, a newline was ``'\\012'``.  This was a "
"vestigial trace of Python's C ancestry, but today octal is of very little "
"practical use.  Ka-Ping Yee suggested using hex escapes instead of octal "
"ones, and using the ``\\n``, ``\\t``, ``\\r`` escapes for the appropriate "
"characters, and implemented this new formatting."
msgstr ""
"Al aplicar :func:`repr` a las cadenas, antes se utilizaban escapes octales "
"para los caracteres no imprimibles; por ejemplo, una nueva línea era "
"``'\\012'``. Esto era un vestigio de la ascendencia de Python en C, pero hoy "
"en día el octal tiene muy poco uso práctico. Ka-Ping Yee sugirió usar "
"escapes hexadecimales en lugar de octales, y usar los escapes ``\\n``, "
"``\\t``, ``\\r`` para los caracteres apropiados, e implementó este nuevo "
"formato."

#: ../Doc/whatsnew/2.1.rst:768
msgid ""
"Syntax errors detected at compile-time can now raise exceptions containing "
"the filename and line number of the error, a pleasant side effect of the "
"compiler reorganization done by Jeremy Hylton."
msgstr ""
"Los errores de sintaxis detectados en tiempo de compilación pueden ahora "
"lanzar excepciones que contienen el nombre del archivo y el número de línea "
"del error, un agradable efecto secundario de la reorganización del "
"compilador realizada por Jeremy Hylton."

#: ../Doc/whatsnew/2.1.rst:772
msgid ""
"C extensions which import other modules have been changed to use :func:"
"`PyImport_ImportModule`, which means that they will use any import hooks "
"that have been installed.  This is also encouraged for third-party "
"extensions that need to import some other module from C code."
msgstr ""
"Las extensiones C que importan otros módulos han sido cambiadas para usar :"
"func:`PyImport_ImportModule`, lo que significa que usarán cualquier gancho "
"de importación que haya sido instalado. Esto también se fomenta para las "
"extensiones de terceros que necesitan importar algún otro módulo desde el "
"código C."

#: ../Doc/whatsnew/2.1.rst:777
msgid ""
"The size of the Unicode character database was shrunk by another 340K thanks "
"to Fredrik Lundh."
msgstr ""
"El tamaño de la base de datos de caracteres Unicode se redujo en otros 340K "
"gracias a Fredrik Lundh."

#: ../Doc/whatsnew/2.1.rst:780
msgid ""
"Some new ports were contributed: MacOS X (by Steven Majewski), Cygwin (by "
"Jason Tishler); RISCOS (by Dietmar Schwertberger); Unixware 7  (by Billy G. "
"Allie)."
msgstr ""
"Se han aportado algunos puertos nuevos: MacOS X (por Steven Majewski), "
"Cygwin (por Jason Tishler); RISCOS (por Dietmar Schwertberger); Unixware 7 "
"(por Billy G. Allie)."

#: ../Doc/whatsnew/2.1.rst:784
msgid ""
"And there's the usual list of minor bugfixes, minor memory leaks, docstring "
"edits, and other tweaks, too lengthy to be worth itemizing; see the CVS logs "
"for the full details if you want them."
msgstr ""
"Y hay la lista habitual de correcciones de errores menores, fugas de memoria "
"menores, ediciones de docstrings, y otros ajustes, demasiado largos para que "
"valga la pena detallarlos; vea los registros de CVS para los detalles "
"completos si los quiere."

#: ../Doc/whatsnew/2.1.rst:792
msgid "Acknowledgements"
msgstr "Agradecimientos"

#: ../Doc/whatsnew/2.1.rst:794
msgid ""
"The author would like to thank the following people for offering suggestions "
"on various drafts of this article: Graeme Cross, David Goodger, Jay Graves, "
"Michael Hudson, Marc-André Lemburg, Fredrik Lundh, Neil Schemenauer, Thomas "
"Wouters."
msgstr ""
"El autor desea agradecer a las siguientes personas sus sugerencias sobre "
"varios borradores de este artículo: Graeme Cross, David Goodger, Jay Graves, "
"Michael Hudson, Marc-André Lemburg, Fredrik Lundh, Neil Schemenauer, Thomas "
"Wouters."

#~ msgid ""
#~ "A common complaint from Python users is that there's no single catalog of "
#~ "all the Python modules in existence.  T. Middleton's Vaults of Parnassus "
#~ "at http://www.vex.net/parnassus/ are the largest catalog of Python "
#~ "modules, but registering software at the Vaults is optional, and many "
#~ "people don't bother."
#~ msgstr ""
#~ "Una queja común de los usuarios de Python es que no hay un catálogo único "
#~ "de todos los módulos de Python existentes. Las Bóvedas de Parnaso de T. "
#~ "Middleton en http://www.vex.net/parnassus/ son el mayor catálogo de "
#~ "módulos de Python, pero registrar el software en las Bóvedas es opcional, "
#~ "y mucha gente no se molesta."
