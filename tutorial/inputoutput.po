# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-03-12 15:36+0100\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: Adrian Santos <martinezsantosadrian@gmail.com>\n"
"Language-Team: \n"
"Language: es_ES\n"
"X-Generator: Poedit 2.3\n"

#: ../Doc/tutorial/inputoutput.rst:5
msgid "Input and Output"
msgstr "Entrada y Salida"

#: ../Doc/tutorial/inputoutput.rst:7
msgid ""
"There are several ways to present the output of a program; data can be "
"printed in a human-readable form, or written to a file for future use. This "
"chapter will discuss some of the possibilities."
msgstr ""
"Hay varias maneras de presentar la salida de un programa; los datos pueden "
"imprimirse en una forma legible por el ser humano, o escribirse en un "
"archivo para su uso futuro. En este capítulo se analizarán algunas de las "
"posibilidades."

#: ../Doc/tutorial/inputoutput.rst:15
msgid "Fancier Output Formatting"
msgstr "Formato de Salida Más Elegante"

#: ../Doc/tutorial/inputoutput.rst:17
msgid ""
"So far we've encountered two ways of writing values: *expression statements* "
"and the :func:`print` function.  (A third way is using the :meth:`write` "
"method of file objects; the standard output file can be referenced as ``sys."
"stdout``. See the Library Reference for more information on this.)"
msgstr ""
"Hasta ahora hemos encontrado dos formas de escribir valores: *expression "
"statements* y la función :func:`print`.  (Una tercera forma es utilizar el "
"método :meth:`write` de objetos de archivo; se puede hacer referencia al "
"archivo de salida estándar como ``sys.stdout``. Consulte la Referencia de la "
"biblioteca para obtener más información al respecto.)"

#: ../Doc/tutorial/inputoutput.rst:22
msgid ""
"Often you'll want more control over the formatting of your output than "
"simply printing space-separated values. There are several ways to format "
"output."
msgstr ""
"A menudo querrá tener más control sobre el formato de la salida que "
"simplemente imprimir valores separados por espacios. Hay varias maneras de "
"dar formato a la salida."

#: ../Doc/tutorial/inputoutput.rst:25
msgid ""
"To use :ref:`formatted string literals <tut-f-strings>`, begin a string with "
"``f`` or ``F`` before the opening quotation mark or triple quotation mark. "
"Inside this string, you can write a Python expression between ``{`` and ``}"
"`` characters that can refer to variables or literal values."
msgstr ""
"Para usar :ref:`formatted string literals <tut-f-strings>', comience una "
"cadena con ``f`` o ``F`` antes de la comilla de apertura o comillas triples. "
"Dentro de esta cadena, puede escribir una expresión de Python entre los "
"caracteres ``{`` y ``}`` que puede hacer referencia a variables o valores "
"literales."

#: ../Doc/tutorial/inputoutput.rst:37
msgid ""
"The :meth:`str.format` method of strings requires more manual effort.  "
"You'll still use ``{`` and ``}`` to mark where a variable will be "
"substituted and can provide detailed formatting directives, but you'll also "
"need to provide the information to be formatted."
msgstr ""
"El método de cadenas :meth:`str.format` requiere más esfuerzo manual.  "
"Seguirá usando ``{`` y ``}`` para marcar dónde se sustituirá una variable y "
"puede proporcionar directivas de formato detalladas, pero también tendrá que "
"proporcionar la información que se va a formatear."

#: ../Doc/tutorial/inputoutput.rst:50
msgid ""
"Finally, you can do all the string handling yourself by using string slicing "
"and concatenation operations to create any layout you can imagine.  The "
"string type has some methods that perform useful operations for padding "
"strings to a given column width."
msgstr ""
"Por último, puede realizar todo el control de cadenas usted mismo mediante "
"operaciones de concatenación y segmentación de cadenas para crear cualquier "
"diseño que pueda imaginar.  El tipo de cadena tiene algunos métodos que "
"realizan operaciones útiles para rellenar cadenas a un ancho de columna "
"determinado."

#: ../Doc/tutorial/inputoutput.rst:55
msgid ""
"When you don't need fancy output but just want a quick display of some "
"variables for debugging purposes, you can convert any value to a string with "
"the :func:`repr` or :func:`str` functions."
msgstr ""
"Cuando no necesita una salida elegante, pero solo desea una visualización "
"rápida de algunas variables con fines de depuración, puede convertir "
"cualquier valor en una cadena con las funciones :func:`repr` o :func:`str`."

#: ../Doc/tutorial/inputoutput.rst:59
msgid ""
"The :func:`str` function is meant to return representations of values which "
"are fairly human-readable, while :func:`repr` is meant to generate "
"representations which can be read by the interpreter (or will force a :exc:"
"`SyntaxError` if there is no equivalent syntax).  For objects which don't "
"have a particular representation for human consumption, :func:`str` will "
"return the same value as :func:`repr`.  Many values, such as numbers or "
"structures like lists and dictionaries, have the same representation using "
"either function.  Strings, in particular, have two distinct representations."
msgstr ""
"La función :func:`str` está destinada a devolver representaciones de valores "
"que son bastante legibles por el usuario, mientras que :func:`repr` está "
"destinado a generar representaciones que pueden ser leídas por el intérprete "
"(o forzará un :exc:`SyntaxError` si no hay equivalente sintaxis).  Para los "
"objetos que no tienen una representación particular para el consumo humano, :"
"func:`str` devolverá el mismo valor que :func:`repr`.  Muchos valores, como "
"números o estructuras como listas y diccionarios, tienen la misma "
"representación mediante cualquiera de las funciones.  Las cadenas, en "
"particular, tienen dos representaciones distintas."

#: ../Doc/tutorial/inputoutput.rst:68
msgid "Some examples::"
msgstr "Algunos ejemplos::"

#: ../Doc/tutorial/inputoutput.rst:91
msgid ""
"The :mod:`string` module contains a :class:`~string.Template` class that "
"offers yet another way to substitute values into strings, using placeholders "
"like ``$x`` and replacing them with values from a dictionary, but offers "
"much less control of the formatting."
msgstr ""
"El módulo :mod:`string` contiene una cadena :class:`~string.Template` clase "
"que ofrece otra forma de sustituir valores en cadenas, utilizando marcadores "
"de posición como ``$x`` y reemplazarlos con valores de un diccionario, pero "
"ofrece mucho menos control del formato."

#: ../Doc/tutorial/inputoutput.rst:100
msgid "Formatted String Literals"
msgstr "Cadenas con Formato Literales"

#: ../Doc/tutorial/inputoutput.rst:102
msgid ""
":ref:`Formatted string literals <f-strings>` (also called f-strings for "
"short) let you include the value of Python expressions inside a string by "
"prefixing the string with ``f`` or ``F`` and writing expressions as "
"``{expression}``."
msgstr ""
":ref:`Formatted string literals <f-strings>` (también llamados f-strings "
"para abreviar) le permiten incluir el valor de las expresiones de Python "
"dentro de una cadena prefijando la cadena con ``f`` o ``F`` y escribiendo "
"expresiones como ``{expresion}``."

#: ../Doc/tutorial/inputoutput.rst:107
msgid ""
"An optional format specifier can follow the expression. This allows greater "
"control over how the value is formatted. The following example rounds pi to "
"three places after the decimal::"
msgstr ""
"Un especificador de formato opcional puede seguir la expresión. Esto permite "
"un mayor control sobre cómo se formatea el valor. En el ejemplo siguiente se "
"redondea pi a tres lugares después del decimal::"

#: ../Doc/tutorial/inputoutput.rst:115
msgid ""
"Passing an integer after the ``':'`` will cause that field to be a minimum "
"number of characters wide.  This is useful for making columns line up. ::"
msgstr ""
"Pasar un entero después de ``':'`` hará que ese campo sea un número mínimo "
"de caracteres de ancho.  Esto es útil para hacer que las columnas se "
"alineen. ::"

#: ../Doc/tutorial/inputoutput.rst:126
msgid ""
"Other modifiers can be used to convert the value before it is formatted. ``'!"
"a'`` applies :func:`ascii`, ``'!s'`` applies :func:`str`, and ``'!r'`` "
"applies :func:`repr`::"
msgstr ""
"Otros modificadores se pueden utilizar para convertir el valor antes de "
"formatearlo. ``'!a'`` se aplica :func:`ascii`, ``'!s'`` se aplica :func:"
"`str`, y ``'!r'`` se aplica :func:`repr`::"

#: ../Doc/tutorial/inputoutput.rst:136
msgid ""
"For a reference on these format specifications, see the reference guide for "
"the :ref:`formatspec`."
msgstr ""
"Para obtener una referencia sobre estas especificaciones de formato, "
"consulte la guía de referencia para :ref:`formatspec`."

#: ../Doc/tutorial/inputoutput.rst:142
msgid "The String format() Method"
msgstr "El Método String format()"

#: ../Doc/tutorial/inputoutput.rst:144
msgid "Basic usage of the :meth:`str.format` method looks like this::"
msgstr "El uso básico del método :meth:`str.format` tiene este aspecto:"

#: ../Doc/tutorial/inputoutput.rst:149
msgid ""
"The brackets and characters within them (called format fields) are replaced "
"with the objects passed into the :meth:`str.format` method.  A number in the "
"brackets can be used to refer to the position of the object passed into the :"
"meth:`str.format` method. ::"
msgstr ""
"Los corchetes y caracteres dentro de ellos (llamados campos de formato) se "
"reemplazan por los objetos pasados al método :meth:`str.format`.  Un número "
"entre corchetes se puede utilizar para hacer referencia a la posición del "
"objeto pasado al método :meth:`str.format`. ::"

#: ../Doc/tutorial/inputoutput.rst:159
msgid ""
"If keyword arguments are used in the :meth:`str.format` method, their values "
"are referred to by using the name of the argument. ::"
msgstr ""
"Si se utilizan argumentos de palabra clave en el método :meth:`str.format`, "
"se hace referencia a sus valores mediante el nombre del argumento. ::"

#: ../Doc/tutorial/inputoutput.rst:166
msgid "Positional and keyword arguments can be arbitrarily combined::"
msgstr ""
"Los argumentos posicionales y de palabras clave se pueden combinar "
"arbitrariamente::"

#: ../Doc/tutorial/inputoutput.rst:172
msgid ""
"If you have a really long format string that you don't want to split up, it "
"would be nice if you could reference the variables to be formatted by name "
"instead of by position.  This can be done by simply passing the dict and "
"using square brackets ``'[]'`` to access the keys ::"
msgstr ""
"Si tiene una cadena de formato muy larga que no desea dividir, sería bueno "
"si pudiera hacer referencia a las variables a formatear por nombre en lugar "
"de por posición.  Esto se puede hacer simplemente pasando el dictado y "
"usando corchetes ``'[]'`` para acceder a las teclas ::"

#: ../Doc/tutorial/inputoutput.rst:182
msgid ""
"This could also be done by passing the table as keyword arguments with the "
"'**' notation. ::"
msgstr ""
"Esto también podría hacerse pasando la tabla como argumentos de palabra "
"clave con la notación '**'. ::"

#: ../Doc/tutorial/inputoutput.rst:189
msgid ""
"This is particularly useful in combination with the built-in function :func:"
"`vars`, which returns a dictionary containing all local variables."
msgstr ""
"Esto es especialmente útil en combinación con la función integrada :func:"
"`vars`, que devuelve un diccionario que contiene todas las variables locales."

#: ../Doc/tutorial/inputoutput.rst:192
msgid ""
"As an example, the following lines produce a tidily-aligned set of columns "
"giving integers and their squares and cubes::"
msgstr ""
"Por ejemplo, las siguientes líneas producen un conjunto de columnas alineada "
"ordenadamente que da enteros y sus cuadrados y cubos::"

#: ../Doc/tutorial/inputoutput.rst:209
msgid ""
"For a complete overview of string formatting with :meth:`str.format`, see :"
"ref:`formatstrings`."
msgstr ""
"Para obtener una visión general completa del formato de cadena con :meth:"
"`str.format`, consulte :ref:`formatstrings`."

#: ../Doc/tutorial/inputoutput.rst:214
msgid "Manual String Formatting"
msgstr "Formato manual de 'Strings'"

#: ../Doc/tutorial/inputoutput.rst:216
msgid "Here's the same table of squares and cubes, formatted manually::"
msgstr ""
"Aquí está la misma tabla de cuadrados y cubos, formateada manualmente::"

#: ../Doc/tutorial/inputoutput.rst:234
msgid ""
"(Note that the one space between each column was added by the way :func:"
"`print` works: it always adds spaces between its arguments.)"
msgstr ""
"(Tenga en cuenta que el espacio entre cada columna se agregó por la forma :"
"func:`print` funciona: siempre agrega espacios entre sus argumentos.)"

#: ../Doc/tutorial/inputoutput.rst:237
msgid ""
"The :meth:`str.rjust` method of string objects right-justifies a string in a "
"field of a given width by padding it with spaces on the left. There are "
"similar methods :meth:`str.ljust` and :meth:`str.center`. These methods do "
"not write anything, they just return a new string. If the input string is "
"too long, they don't truncate it, but return it unchanged; this will mess up "
"your column lay-out but that's usually better than the alternative, which "
"would be lying about a value. (If you really want truncation you can always "
"add a slice operation, as in ``x.ljust(n)[:n]``.)"
msgstr ""
"El método :meth:`str.rjust` de objetos de cadena justifica a la derecha una "
"cadena en un campo de un ancho determinado asociándola con espacios a la "
"izquierda. Hay métodos similares :meth:`str.ljust` y :meth:`str.center`. "
"Estos métodos no escriben nada, simplemente devuelven una nueva cadena. Si "
"la cadena de entrada es demasiado larga, no la truncan, pero la devuelven "
"sin cambios; esto arruinará su columna, pero eso es generalmente mejor que "
"la alternativa, que sería mentir sobre un valor. (Si realmente desea "
"truncamiento siempre puede agregar una operación de sector, como en ``x."
"ljust(n)[:n]``.)"

#: ../Doc/tutorial/inputoutput.rst:246
msgid ""
"There is another method, :meth:`str.zfill`, which pads a numeric string on "
"the left with zeros.  It understands about plus and minus signs::"
msgstr ""
"Hay otro método, :meth:`str.zfill`, que rellena una cadena numérica a la "
"izquierda con ceros.  Entiende acerca de los signos más y menos::"

#: ../Doc/tutorial/inputoutput.rst:258
msgid "Old string formatting"
msgstr "Formato de cadena antigua"

#: ../Doc/tutorial/inputoutput.rst:260
msgid ""
"The ``%`` operator can also be used for string formatting. It interprets the "
"left argument much like a :c:func:`sprintf`\\ -style format string to be "
"applied to the right argument, and returns the string resulting from this "
"formatting operation. For example::"
msgstr ""
"El operador ``%`` también se puede utilizar para el formato de cadena. "
"Interpreta el argumento izquierdo de forma muy similar a una cadena :c:func:"
"`sprintf`\\ -style que se aplicará al argumento derecho y devuelve la cadena "
"resultante de esta operación de formato. Por ejemplo::"

#: ../Doc/tutorial/inputoutput.rst:269
msgid ""
"More information can be found in the :ref:`old-string-formatting` section."
msgstr ""
"Puede encontrar más información en la sección :ref:`old-string-formatting`."

#: ../Doc/tutorial/inputoutput.rst:275
msgid "Reading and Writing Files"
msgstr "Lectura y Escritura de Archivos"

#: ../Doc/tutorial/inputoutput.rst:281
msgid ""
":func:`open` returns a :term:`file object`, and is most commonly used with "
"two arguments: ``open(filename, mode)``."
msgstr ""
":func:`open` devuelve un :term:`file object`, y se utiliza más comúnmente "
"con dos argumentos: ``open(filename, mode)``."

#: ../Doc/tutorial/inputoutput.rst:293
msgid ""
"The first argument is a string containing the filename.  The second argument "
"is another string containing a few characters describing the way in which "
"the file will be used.  *mode* can be ``'r'`` when the file will only be "
"read, ``'w'`` for only writing (an existing file with the same name will be "
"erased), and ``'a'`` opens the file for appending; any data written to the "
"file is automatically added to the end.  ``'r+'`` opens the file for both "
"reading and writing. The *mode* argument is optional; ``'r'`` will be "
"assumed if it's omitted."
msgstr ""
"El primer argumento es una cadena que contiene el nombre de archivo.  El "
"segundo argumento es otra cadena que contiene algunos caracteres que "
"describen la forma en que se utilizará el archivo.  *mode* puede ser ``'r'`` "
"cuando el archivo sólo se leerá, ``'w'`` para escribir sólo (se borrará un "
"archivo existente con el mismo nombre), y ``'a'`` abre el archivo para "
"anexar; los datos escritos en el archivo se añaden automáticamente al "
"final.  ``'r+'`` abre el archivo para la lectura y la escritura. El "
"argumento *mode* es opcional; ``'r'`` se asumirá si se omite."

#: ../Doc/tutorial/inputoutput.rst:302
msgid ""
"Normally, files are opened in :dfn:`text mode`, that means, you read and "
"write strings from and to the file, which are encoded in a specific "
"encoding. If encoding is not specified, the default is platform dependent "
"(see :func:`open`). ``'b'`` appended to the mode opens the file in :dfn:"
"`binary mode`: now the data is read and written in the form of bytes "
"objects.  This mode should be used for all files that don't contain text."
msgstr ""
"Normalmente, los archivos se abren en :dfn:`text mode`, es decir, se leen y "
"escriben cadenas desde y hacia el archivo, que se codifican en una "
"codificación específica. Si no se especifica la codificación, el valor "
"predeterminado depende de la plataforma (consulte :func:`open`). ``'b'`` "
"anexado al modo abre el archivo en :dfn:`binary mode`: ahora los datos se "
"leen y escriben en forma de bytes objetos.  Este modo se debe utilizar para "
"todos los archivos que no contienen texto."

#: ../Doc/tutorial/inputoutput.rst:309
msgid ""
"In text mode, the default when reading is to convert platform-specific line "
"endings (``\\n`` on Unix, ``\\r\\n`` on Windows) to just ``\\n``.  When "
"writing in text mode, the default is to convert occurrences of ``\\n`` back "
"to platform-specific line endings.  This behind-the-scenes modification to "
"file data is fine for text files, but will corrupt binary data like that in :"
"file:`JPEG` or :file:`EXE` files.  Be very careful to use binary mode when "
"reading and writing such files."
msgstr ""
"En el modo de texto, el valor predeterminado cuando se lee es convertir los "
"finales de línea específicos de la plataforma (``\\n`` en Unix, ``\\r\\n`` "
"en Windows) a sólo ``\\n``.  Al escribir en modo de texto, el valor "
"predeterminado es convertir las apariciones de ``\\n`` de nuevo a "
"terminaciones de línea específicas de la plataforma.  Esta modificación "
"entre bastidores de los datos de archivo está bien para los archivos de "
"texto, pero corrompe los datos binarios como los de los archivos :file:"
"`JPEG` o :file:`EXE`.  Tenga mucho cuidado de usar el modo binario al leer y "
"escribir estos archivos."

#: ../Doc/tutorial/inputoutput.rst:317
msgid ""
"It is good practice to use the :keyword:`with` keyword when dealing with "
"file objects.  The advantage is that the file is properly closed after its "
"suite finishes, even if an exception is raised at some point.  Using :"
"keyword:`!with` is also much shorter than writing equivalent :keyword:`try`"
"\\ -\\ :keyword:`finally` blocks::"
msgstr ""
"Se recomienda utilizar la palabra clave :keyword:`with` cuando se trata de "
"objetos de archivo.  La ventaja es que el archivo se cierra correctamente "
"después de que finalice su suite, incluso si se genera una excepción en "
"algún momento.  El uso de :keyword:'!with' también es mucho más corto que "
"escribir equivalente :keyword:`try`\\ -\\ :keyword:`finally` blocks::"

#: ../Doc/tutorial/inputoutput.rst:328
msgid ""
"If you're not using the :keyword:`with` keyword, then you should call ``f."
"close()`` to close the file and immediately free up any system resources "
"used by it. If you don't explicitly close a file, Python's garbage collector "
"will eventually destroy the object and close the open file for you, but the "
"file may stay open for a while.  Another risk is that different Python "
"implementations will do this clean-up at different times."
msgstr ""
"Si no está utilizando la palabra clave :keyword:`with`, debe llamar a ``f."
"close()`` para cerrar el archivo e inmediatamente liberar los recursos del "
"sistema utilizados por él. Si no cierra explícitamente un archivo, el "
"recolector de elementos no utilizados de Python finalmente destruirá el "
"objeto y cerrará el archivo abierto por usted, pero el archivo puede "
"permanecer abierto durante un tiempo.  Otro riesgo es que diferentes "
"implementaciones de Python harán esta limpieza en diferentes momentos."

#: ../Doc/tutorial/inputoutput.rst:336
msgid ""
"After a file object is closed, either by a :keyword:`with` statement or by "
"calling ``f.close()``, attempts to use the file object will automatically "
"fail. ::"
msgstr ""
"Después de cerrar un objeto de archivo, ya sea mediante una instrucción :"
"keyword:`with` o llamando a ``f.close()``, se producirá un error "
"automáticamente al intentar utilizar el objeto de archivo. ::"

#: ../Doc/tutorial/inputoutput.rst:350
msgid "Methods of File Objects"
msgstr "Métodos de Objetos de Archivo"

#: ../Doc/tutorial/inputoutput.rst:352
msgid ""
"The rest of the examples in this section will assume that a file object "
"called ``f`` has already been created."
msgstr ""
"El resto de los ejemplos de esta sección asumirán que ya se ha creado un "
"objeto de archivo denominado ``f``."

#: ../Doc/tutorial/inputoutput.rst:355
msgid ""
"To read a file's contents, call ``f.read(size)``, which reads some quantity "
"of data and returns it as a string (in text mode) or bytes object (in binary "
"mode). *size* is an optional numeric argument.  When *size* is omitted or "
"negative, the entire contents of the file will be read and returned; it's "
"your problem if the file is twice as large as your machine's memory. "
"Otherwise, at most *size* bytes are read and returned. If the end of the "
"file has been reached, ``f.read()`` will return an empty string (``''``).  ::"
msgstr ""
"Para leer el contenido de un archivo, llame a ``f.read(size)``, que lee "
"cierta cantidad de datos y lo devuelve como una cadena (en modo de texto) o "
"bytes de objeto (en modo binario). *size* es un argumento numérico "
"opcional.  Cuando *size* se omite o es negativo, se leerá y devolverá todo "
"el contenido del archivo; es su problema si el archivo es dos veces más "
"grande que la memoria de su máquina. De lo contrario, como máximo se leen y "
"devuelven bytes *size*. Si se ha alcanzado el final del archivo, ``f."
"read()`` devolverá una cadena vacía (``''``).  ::"

#: ../Doc/tutorial/inputoutput.rst:369
msgid ""
"``f.readline()`` reads a single line from the file; a newline character (``"
"\\n``) is left at the end of the string, and is only omitted on the last "
"line of the file if the file doesn't end in a newline.  This makes the "
"return value unambiguous; if ``f.readline()`` returns an empty string, the "
"end of the file has been reached, while a blank line is represented by "
"``'\\n'``, a string containing only a single newline.  ::"
msgstr ""
"``f.readline()`` lee una sola línea del archivo; un carácter de nueva línea "
"(``\\n``) se deja al final de la cadena y solo se omite en la última línea "
"del archivo si el archivo no termina en una nueva línea.  Esto hace que el "
"valor devuelto sea inequívoco; si ''f.readline()'' devuelve una cadena "
"vacía, se ha alcanzado el final del archivo, mientras que una línea en "
"blanco está representada por ``'\\n'``, una cadena que contiene solo una "
"nueva línea.  ::"

#: ../Doc/tutorial/inputoutput.rst:383
msgid ""
"For reading lines from a file, you can loop over the file object. This is "
"memory efficient, fast, and leads to simple code::"
msgstr ""
"Para leer líneas de un archivo, puede recorrer en bucle el objeto de "
"archivo. Esto es eficiente en memoria, rápido y conduce a código simple::"

#: ../Doc/tutorial/inputoutput.rst:392
msgid ""
"If you want to read all the lines of a file in a list you can also use "
"``list(f)`` or ``f.readlines()``."
msgstr ""
"Si desea leer todas las líneas de un archivo en una lista también puede "
"utilizar ``list(f)`` o ``f.readlines()``."

#: ../Doc/tutorial/inputoutput.rst:395
msgid ""
"``f.write(string)`` writes the contents of *string* to the file, returning "
"the number of characters written. ::"
msgstr ""
"``f.write(string)`` escribe el contenido de *string* en el archivo, "
"devolviendo el número de caracteres escritos. ::"

#: ../Doc/tutorial/inputoutput.rst:401
msgid ""
"Other types of objects need to be converted -- either to a string (in text "
"mode) or a bytes object (in binary mode) -- before writing them::"
msgstr ""
"Otros tipos de objetos deben convertirse -- ya sea en una cadena (en modo de "
"texto) o en un objeto bytes (en modo binario) antes de escribirlos::"

#: ../Doc/tutorial/inputoutput.rst:409
msgid ""
"``f.tell()`` returns an integer giving the file object's current position in "
"the file represented as number of bytes from the beginning of the file when "
"in binary mode and an opaque number when in text mode."
msgstr ""
"``f.tell()`` devuelve un entero que indica la posición actual del objeto de "
"archivo en el archivo representado como número de bytes desde el principio "
"del archivo cuando está en modo binario y un número opaco cuando está en "
"modo de texto."

#: ../Doc/tutorial/inputoutput.rst:413
msgid ""
"To change the file object's position, use ``f.seek(offset, from_what)``.  "
"The position is computed from adding *offset* to a reference point; the "
"reference point is selected by the *from_what* argument.  A *from_what* "
"value of 0 measures from the beginning of the file, 1 uses the current file "
"position, and 2 uses the end of the file as the reference point.  "
"*from_what* can be omitted and defaults to 0, using the beginning of the "
"file as the reference point. ::"
msgstr ""
"Para cambiar la posición del objeto de archivo, utilice ``f.seek(offset, "
"from_what)``.  La posición se calcula añadiendo *offset* a un punto de "
"referencia; el punto de referencia se selecciona mediante el argumento "
"*from_what*.  Un valor *from_what* de 0 mide desde el principio del archivo, "
"1 utiliza la posición actual del archivo y 2 utiliza el final del archivo "
"como punto de referencia.  *from_what* se puede omitir y el valor "
"predeterminado es 0, utilizando el principio del archivo como punto de "
"referencia. ::"

#: ../Doc/tutorial/inputoutput.rst:432
msgid ""
"In text files (those opened without a ``b`` in the mode string), only seeks "
"relative to the beginning of the file are allowed (the exception being "
"seeking to the very file end with ``seek(0, 2)``) and the only valid "
"*offset* values are those returned from the ``f.tell()``, or zero. Any other "
"*offset* value produces undefined behaviour."
msgstr ""
"En los archivos de texto (los abiertos sin una ``b`` en la cadena de modo), "
"sólo se permiten las búsquedas relativas al principio del archivo (la "
"excepción que busca el mismo final del archivo con ``seek(0, 2)``) y los "
"únicos valores *offset* válidos son los devueltos por el ``f.tell()``, o "
"cero. Cualquier otro valor *offset* produce un comportamiento indefinido."

#: ../Doc/tutorial/inputoutput.rst:438
msgid ""
"File objects have some additional methods, such as :meth:`~file.isatty` and :"
"meth:`~file.truncate` which are less frequently used; consult the Library "
"Reference for a complete guide to file objects."
msgstr ""
"Los objetos de archivo tienen algunos métodos adicionales, como por ejemplo :"
"meth:`~file.isatty' y :meth:`-file.truncate' que se utilizan con menos "
"frecuencia; consulte la Referencia de la biblioteca para obtener una guía "
"completa de los objetos de archivo."

#: ../Doc/tutorial/inputoutput.rst:446
msgid "Saving structured data with :mod:`json`"
msgstr "Guardar datos estructurados con :mod:`json`"

#: ../Doc/tutorial/inputoutput.rst:450
msgid ""
"Strings can easily be written to and read from a file.  Numbers take a bit "
"more effort, since the :meth:`read` method only returns strings, which will "
"have to be passed to a function like :func:`int`, which takes a string like "
"``'123'`` and returns its numeric value 123.  When you want to save more "
"complex data types like nested lists and dictionaries, parsing and "
"serializing by hand becomes complicated."
msgstr ""
"Las cadenas se pueden escribir y leer fácilmente desde un archivo.  Los "
"números requieren un poco más de esfuerzo, ya que el método :meth:`read` "
"solo devuelve cadenas, que tendrán que pasarse a una función como :func:"
"`int`, que toma una cadena como ``'123'`` y devuelve su valor numérico 123.  "
"Cuando desea guardar tipos de datos más complejos como listas anidadas y "
"diccionarios, el análisis y la serialización a mano se vuelve complicado."

#: ../Doc/tutorial/inputoutput.rst:457
msgid ""
"Rather than having users constantly writing and debugging code to save "
"complicated data types to files, Python allows you to use the popular data "
"interchange format called `JSON (JavaScript Object Notation) <http://json."
"org>`_.  The standard module called :mod:`json` can take Python data "
"hierarchies, and convert them to string representations; this process is "
"called :dfn:`serializing`.  Reconstructing the data from the string "
"representation is called :dfn:`deserializing`.  Between serializing and "
"deserializing, the string representing the object may have been stored in a "
"file or data, or sent over a network connection to some distant machine."
msgstr ""
"En lugar de tener a los usuarios constantemente escribiendo y depurando "
"código para guardar tipos de datos complicados en archivos, Python le "
"permite utilizar el popular formato de intercambio de datos llamado `JSON "
"(JavaScript Object Notation) <http://json.org>`_.  El módulo estándar "
"llamado :mod:`json` puede tomar jerarquías de datos de Python y convertirlas "
"en representaciones de cadena; este proceso se llama :dfn:`deserializing`.  "
"Reconstruir los datos de la representación de cadena se denomina :dfn:"
"`deserializing`.  Entre la serialización y la deserialización, la cadena que "
"representa el objeto puede haberse almacenado en un archivo o datos, o "
"enviado a través de una conexión de red a alguna máquina distante."

#: ../Doc/tutorial/inputoutput.rst:468
msgid ""
"The JSON format is commonly used by modern applications to allow for data "
"exchange.  Many programmers are already familiar with it, which makes it a "
"good choice for interoperability."
msgstr ""
"El formato JSON es comúnmente utilizado por las aplicaciones modernas para "
"permitir el intercambio de datos.  Muchos programadores ya están "
"familiarizados con él, lo que lo convierte en una buena opción para la "
"interoperabilidad."

#: ../Doc/tutorial/inputoutput.rst:472
msgid ""
"If you have an object ``x``, you can view its JSON string representation "
"with a simple line of code::"
msgstr ""
"Si tiene un objeto ``x``, puede ver su representación de cadena JSON con una "
"línea de código simple::"

#: ../Doc/tutorial/inputoutput.rst:479
msgid ""
"Another variant of the :func:`~json.dumps` function, called :func:`~json."
"dump`, simply serializes the object to a :term:`text file`.  So if ``f`` is "
"a :term:`text file` object opened for writing, we can do this::"
msgstr ""
"Otra variante de la función de :func:`~json.dumps`, llamada :func:`~json."
"dump`, simplemente serializa el objeto a un :term:`text file`.  Así que si "
"``f`` es un objeto :term:`text file` abierto para escribir, podemos hacer lo "
"siguiente::"

#: ../Doc/tutorial/inputoutput.rst:485
msgid ""
"To decode the object again, if ``f`` is a :term:`text file` object which has "
"been opened for reading::"
msgstr ""
"Para decodificar el objeto de nuevo, si ``f`` es un objeto :term:`text file` "
"que se ha abierto para leer::"

#: ../Doc/tutorial/inputoutput.rst:490
msgid ""
"This simple serialization technique can handle lists and dictionaries, but "
"serializing arbitrary class instances in JSON requires a bit of extra "
"effort. The reference for the :mod:`json` module contains an explanation of "
"this."
msgstr ""
"Esta sencilla técnica de serialización puede controlar listas y "
"diccionarios, pero serializar instancias de clase arbitrarias en JSON "
"requiere un poco de esfuerzo adicional. La referencia para el módulo :mod:"
"`json` contiene una explicación de esto."

#: ../Doc/tutorial/inputoutput.rst:496
msgid ":mod:`pickle` - the pickle module"
msgstr ":mod:`pickle` - el módulo 'pickle'"

#: ../Doc/tutorial/inputoutput.rst:498
msgid ""
"Contrary to :ref:`JSON <tut-json>`, *pickle* is a protocol which allows the "
"serialization of arbitrarily complex Python objects.  As such, it is "
"specific to Python and cannot be used to communicate with applications "
"written in other languages.  It is also insecure by default: deserializing "
"pickle data coming from an untrusted source can execute arbitrary code, if "
"the data was crafted by a skilled attacker."
msgstr ""
"Contrariamente a :ref:`JSON <tut-json>*pickle* es un protocolo que permite "
"la serialización de objetos Python arbitrariamente complejos.  Como tal, es "
"específico de Python y no se puede utilizar para comunicarse con "
"aplicaciones escritas en otros idiomas.  También es inseguro de forma "
"predeterminada: deserializar los datos de pepinillo procedentes de un origen "
"que no es de confianza puede ejecutar código arbitrario, si los datos fueron "
"creados por un atacante experto."
