# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-03-12 09:19+0100\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: Adrian Santos <martinezsantosadrian@gmail.com>\n"
"Language-Team: es\n"
"Language: es\n"
"X-Generator: Poedit 2.3\n"

#: ../Doc/tutorial/modules.rst:5
msgid "Modules"
msgstr "Módulos"

#: ../Doc/tutorial/modules.rst:7
msgid ""
"If you quit from the Python interpreter and enter it again, the definitions "
"you have made (functions and variables) are lost. Therefore, if you want to "
"write a somewhat longer program, you are better off using a text editor to "
"prepare the input for the interpreter and running it with that file as input "
"instead.  This is known as creating a *script*.  As your program gets "
"longer, you may want to split it into several files for easier maintenance.  "
"You may also want to use a handy function that you've written in several "
"programs without copying its definition into each program."
msgstr ""
"Si sales del intérprete de Python y vuelves a entrar, las definiciones que "
"habías hecho (funciones y variables) se pierden. Por lo tanto, si quieres "
"escribir un programa más o menos largo, es mejor que utilices un editor de "
"texto para preparar la entrada para el intérprete y ejecutarlo con ese "
"archivo como entrada. Esto se conoce como crear un *script*. Si tu programa "
"crece, quizás quieras separarlo en varios archivos para un mantenimiento más "
"sencillo. Quizás también quieras usar una función útil que has escrito en "
"distintos programas sin copiar su definición en cada programa."

#: ../Doc/tutorial/modules.rst:16
msgid ""
"To support this, Python has a way to put definitions in a file and use them "
"in a script or in an interactive instance of the interpreter. Such a file is "
"called a *module*; definitions from a module can be *imported* into other "
"modules or into the *main* module (the collection of variables that you have "
"access to in a script executed at the top level and in calculator mode)."
msgstr ""
"Para soportar esto, Python tiene una manera de poner definiciones en un "
"archivo y usarlos en un script o en una instancia del intérprete. Este tipo "
"de ficheros se llama *módulo*; las definiciones de un módulo pueden ser "
"*importadas* a otros módulos o al módulo *principal* (la colección de "
"variables a las que tienes acceso en un script ejecutado en el nivel "
"superior y en el modo calculadora)."

#: ../Doc/tutorial/modules.rst:22
msgid ""
"A module is a file containing Python definitions and statements.  The file "
"name is the module name with the suffix :file:`.py` appended.  Within a "
"module, the module's name (as a string) is available as the value of the "
"global variable ``__name__``.  For instance, use your favorite text editor "
"to create a file called :file:`fibo.py` in the current directory with the "
"following contents::"
msgstr ""
"Un módulo es un fichero conteniendo definiciones y declaraciones de Python. "
"El nombre de archivo es el nombre del módulo con el sufijo :file:`.py` "
"agregado. Dentro de un módulo, el nombre del mismo módulo (como cadena) está "
"disponible en el valor de la variable global ``__name__``. Por ejemplo, "
"utiliza tu editor de texto favorito para crear un archivo llamado :file:"
"`fibo.py` en el directorio actual, con el siguiente contenido:::"

#: ../Doc/tutorial/modules.rst:45
msgid ""
"Now enter the Python interpreter and import this module with the following "
"command::"
msgstr ""
"Ahora entra en el intérprete de Python y importa este modulo con el "
"siguiente comando::"

#: ../Doc/tutorial/modules.rst:50
msgid ""
"This does not enter the names of the functions defined in ``fibo``  directly "
"in the current symbol table; it only enters the module name ``fibo`` there. "
"Using the module name you can access the functions::"
msgstr ""
"Esto no añade los nombres de las funciones definidas en ``fibo`` "
"directamente en el espacio de nombres actual; sólo añade el nombre del "
"módulo ``fibo``. Usando el nombre del módulo puedes acceder a las funciones::"

#: ../Doc/tutorial/modules.rst:61
msgid ""
"If you intend to use a function often you can assign it to a local name::"
msgstr ""
"Si pretendes utilizar las funciones frecuentemente puedes asignarlas a un "
"nombre local::"

#: ../Doc/tutorial/modules.rst:71
msgid "More on Modules"
msgstr "Más sobre los módulos"

#: ../Doc/tutorial/modules.rst:73
msgid ""
"A module can contain executable statements as well as function definitions. "
"These statements are intended to initialize the module. They are executed "
"only the *first* time the module name is encountered in an import statement. "
"[#]_ (They are also run if the file is executed as a script.)"
msgstr ""
"Un módulo puede contener tanto declaraciones ejecutables como definiciones "
"de funciones. Estas declaraciones están pensadas para inicializar el módulo. "
"Se ejecutan únicamente la *primera* vez que el módulo se encuentra en una "
"declaración import. [#]_ (También se ejecutan si el archivo se ejecuta como "
"script.)"

#: ../Doc/tutorial/modules.rst:78
msgid ""
"Each module has its own private symbol table, which is used as the global "
"symbol table by all functions defined in the module. Thus, the author of a "
"module can use global variables in the module without worrying about "
"accidental clashes with a user's global variables. On the other hand, if you "
"know what you are doing you can touch a module's global variables with the "
"same notation used to refer to its functions, ``modname.itemname``."
msgstr ""
"Cada módulo tiene su propio espacio de nombres, el cual es usado como "
"espacio de nombres global para todas las funciones definidas en el módulo. "
"Por lo tanto, el autor de un módulo puede usar variables globales en el "
"módulo sin preocuparse acerca de conflictos con una variable global del "
"usuario. Por otro lado, si sabes lo que estás haciendo puedes acceder a las "
"variables globales de un módulo con la misma notación usada para referirte a "
"sus funciones, ``nombremodulo.nombreitem``."

#: ../Doc/tutorial/modules.rst:85
msgid ""
"Modules can import other modules.  It is customary but not required to place "
"all :keyword:`import` statements at the beginning of a module (or script, "
"for that matter).  The imported module names are placed in the importing "
"module's global symbol table."
msgstr ""
"Los módulos pueden importar otros módulos. Es costumbre pero no obligatorio "
"ubicar todas las declaraciones :keyword:`import` al principio del módulo (o "
"script, para el caso). Los nombres de los módulos importados se ubican en el "
"espacio de nombres global del módulo que hace la importación."

#: ../Doc/tutorial/modules.rst:90
msgid ""
"There is a variant of the :keyword:`import` statement that imports names "
"from a module directly into the importing module's symbol table.  For "
"example::"
msgstr ""
"Hay una variante de la declaración :keyword:`import` que importa nos nombres "
"de un módulo directamente al espacio de nombres del módulo que hace la "
"importación. Por ejemplo::"

#: ../Doc/tutorial/modules.rst:97
msgid ""
"This does not introduce the module name from which the imports are taken in "
"the local symbol table (so in the example, ``fibo`` is not defined)."
msgstr ""
"Esto no introduce en el espacio de nombres local el nombre del módulo desde "
"el cual se está importando (por lo tanto, en el ejemplo, ``fibo`` no esta "
"definido)."

#: ../Doc/tutorial/modules.rst:100
msgid "There is even a variant to import all names that a module defines::"
msgstr ""
"Hay incluso una variante para importar todos los nombres que un módulo "
"define::"

#: ../Doc/tutorial/modules.rst:106
msgid ""
"This imports all names except those beginning with an underscore (``_``). In "
"most cases Python programmers do not use this facility since it introduces "
"an unknown set of names into the interpreter, possibly hiding some things "
"you have already defined."
msgstr ""
"Esto importa todos los nombres excepto los que inician con un guion bajo "
"(``_``). La mayoría de las veces los programadores de Python no usan esto ya "
"que introduce en el intérprete un conjunto de nombres desconocido, "
"posiblemente escondiendo algunas de las definiciones previas."

#: ../Doc/tutorial/modules.rst:111
msgid ""
"Note that in general the practice of importing ``*`` from a module or "
"package is frowned upon, since it often causes poorly readable code. "
"However, it is okay to use it to save typing in interactive sessions."
msgstr ""
"Nota que en general la práctica de importar ``*`` de un módulo o paquete "
"está muy mal vista, ya que frecuentemente genera código poco legible. Sin "
"embargo, está bien usarlo para ahorrar tecleo en sesiones interactivas."

#: ../Doc/tutorial/modules.rst:115
msgid ""
"If the module name is followed by :keyword:`!as`, then the name following :"
"keyword:`!as` is bound directly to the imported module."
msgstr ""
"Si el nombre del módulo es seguido por :keyword:`!as`, el nombre siguiendo :"
"keyword:`!as` queda ligado directamente al módulo importado."

#: ../Doc/tutorial/modules.rst:124
msgid ""
"This is effectively importing the module in the same way that ``import "
"fibo`` will do, with the only difference of it being available as ``fib``."
msgstr ""
"Esto es básicamente importar el módulo de la misma forma que se haría con "
"``import fibo``, con la única diferencia en que se encuentra accesible como "
"``fib``."

#: ../Doc/tutorial/modules.rst:127
msgid ""
"It can also be used when utilising :keyword:`from` with similar effects::"
msgstr ""
"También se puede utilizar cuando se utiliza :keyword:`from` con efectos "
"similares::"

#: ../Doc/tutorial/modules.rst:136
msgid ""
"For efficiency reasons, each module is only imported once per interpreter "
"session.  Therefore, if you change your modules, you must restart the "
"interpreter -- or, if it's just one module you want to test interactively, "
"use :func:`importlib.reload`, e.g. ``import importlib; importlib."
"reload(modulename)``."
msgstr ""
"Por razones de eficiencia, cada módulo solo se importa una vez por sesión de "
"intérprete.  Por lo tanto, si cambia los módulos, debe reiniciar el "
"intérprete o, si es solo un módulo que desea probar de forma interactiva, "
"utilice :func:`importlib.reload`, por ejemplo, ``import importlib; importlib."
"reload(modulename)``."

#: ../Doc/tutorial/modules.rst:146
msgid "Executing modules as scripts"
msgstr "Ejecución de módulos como scripts"

#: ../Doc/tutorial/modules.rst:148
msgid "When you run a Python module with ::"
msgstr "Cuando ejecutas un módulo Python con ::"

#: ../Doc/tutorial/modules.rst:152
msgid ""
"the code in the module will be executed, just as if you imported it, but "
"with the ``__name__`` set to ``\"__main__\"``.  That means that by adding "
"this code at the end of your module::"
msgstr ""
"el código en el módulo se ejecutará, como si lo hubieras importado, pero con "
"el ``__name__`` establecido en ``''__main__''``.  Eso significa que al "
"agregar este código al final de su módulo::"

#: ../Doc/tutorial/modules.rst:160
msgid ""
"you can make the file usable as a script as well as an importable module, "
"because the code that parses the command line only runs if the module is "
"executed as the \"main\" file:"
msgstr ""
"puede hacer que el archivo se pueda utilizar como un script, así como un "
"módulo importable, porque el código que analiza la línea de comandos sólo se "
"ejecuta si el módulo se ejecuta como el archivo \"principal\":"

#: ../Doc/tutorial/modules.rst:169
msgid "If the module is imported, the code is not run::"
msgstr "Si se importa el módulo, el código no se ejecuta::"

#: ../Doc/tutorial/modules.rst:174
msgid ""
"This is often used either to provide a convenient user interface to a "
"module, or for testing purposes (running the module as a script executes a "
"test suite)."
msgstr ""
"Esto se utiliza a menudo para proporcionar una interfaz de usuario "
"conveniente a un módulo, o para fines de prueba (ejecutar el módulo como un "
"script ejecuta un conjunto de pruebas)."

#: ../Doc/tutorial/modules.rst:181
msgid "The Module Search Path"
msgstr "La Ruta de Búsqueda del Módulo"

#: ../Doc/tutorial/modules.rst:185
msgid ""
"When a module named :mod:`spam` is imported, the interpreter first searches "
"for a built-in module with that name. If not found, it then searches for a "
"file named :file:`spam.py` in a list of directories given by the variable :"
"data:`sys.path`.  :data:`sys.path` is initialized from these locations:"
msgstr ""
"Cuando se importa un módulo denominado :mod:`spam`, el intérprete busca "
"primero un módulo integrado con ese nombre. Si no se encuentra, busca un "
"archivo denominado :file:`spam.py` en una lista de directorios dadopor la "
"variable :data:`sys.path`.  :data:`sys.path` se inicializa desde estas "
"ubicaciones:"

#: ../Doc/tutorial/modules.rst:190
msgid ""
"The directory containing the input script (or the current directory when no "
"file is specified)."
msgstr ""
"El directorio que contiene el script de entrada (o el directorio actual "
"cuando no se especifica ningún archivo)."

#: ../Doc/tutorial/modules.rst:192
msgid ""
":envvar:`PYTHONPATH` (a list of directory names, with the same syntax as the "
"shell variable :envvar:`PATH`)."
msgstr ""
":envvar:`PYTHONPATH` (una lista de nombres de directorio, con la misma "
"sintaxis que la variable de shell :envvar:`PATH`)."

#: ../Doc/tutorial/modules.rst:194
msgid "The installation-dependent default."
msgstr "El valor predeterminado dependiente de la instalación."

#: ../Doc/tutorial/modules.rst:197
msgid ""
"On file systems which support symlinks, the directory containing the input "
"script is calculated after the symlink is followed. In other words the "
"directory containing the symlink is **not** added to the module search path."
msgstr ""
"En los sistemas de archivos que admiten enlaces simbólicos, el directorio "
"que contiene el script de entrada se calcula después de seguir el enlace "
"simbólico. En otras palabras, el directorio que contiene el enlace simbólico "
"no se agrega a la ruta de búsqueda del módulo."

#: ../Doc/tutorial/modules.rst:201
msgid ""
"After initialization, Python programs can modify :data:`sys.path`.  The "
"directory containing the script being run is placed at the beginning of the "
"search path, ahead of the standard library path. This means that scripts in "
"that directory will be loaded instead of modules of the same name in the "
"library directory. This is an error unless the replacement is intended.  See "
"section :ref:`tut-standardmodules` for more information."
msgstr ""
"Después de la inicialización, los programas de Python pueden modificar :data:"
"`sys.path`.  El directorio que contiene el script que se está ejecutando se "
"coloca al principio de la ruta de búsqueda, por delante de la ruta de la "
"biblioteca estándar. Esto significa que los scripts de ese directorio se "
"cargarán en lugar de los módulos del mismo nombre en el directorio de la "
"biblioteca. Se trata de un error a menos que se pretenda reemplazar.  "
"Consulte la sección :ref:`tut-standardmodules` para obtener más información."

#: ../Doc/tutorial/modules.rst:212
msgid "\"Compiled\" Python files"
msgstr "Archivos Python \"Compilados\""

#: ../Doc/tutorial/modules.rst:214
msgid ""
"To speed up loading modules, Python caches the compiled version of each "
"module in the ``__pycache__`` directory under the name :file:`module."
"{version}.pyc`, where the version encodes the format of the compiled file; "
"it generally contains the Python version number.  For example, in CPython "
"release 3.3 the compiled version of spam.py would be cached as ``__pycache__/"
"spam.cpython-33.pyc``.  This naming convention allows compiled modules from "
"different releases and different versions of Python to coexist."
msgstr ""
"Para acelerar la carga de módulos, Python almacena en caché la versión "
"compilada de cada módulo en el directorio ``__pycache__`` bajo el nombre :"
"file:`module.{version}.pyc`, en el caso de la versión del archivo compilado, "
"la versión codifica el formato del archivo compilado; generalmente contiene "
"el número de versión de Python.  Por ejemplo, en la versión 3.3 de CPython, "
"la versión compilada de spam.py se almacenaría en caché como ``__pycache__/"
"spam.cpython-33.pyc``.  Esta convención de nomenclatura permite que "
"coexistan módulos compilados de diferentes versiones y diferentes versiones "
"de Python."

#: ../Doc/tutorial/modules.rst:222
msgid ""
"Python checks the modification date of the source against the compiled "
"version to see if it's out of date and needs to be recompiled.  This is a "
"completely automatic process.  Also, the compiled modules are platform-"
"independent, so the same library can be shared among systems with different "
"architectures."
msgstr ""
"Python comprueba la fecha de modificación del origen con la versión "
"compilada para ver si está desactualizada y necesita volver a compilarse.  "
"Este es un proceso completamente automático.  Además, los módulos compilados "
"son independientes de la plataforma, por lo que la misma biblioteca se puede "
"compartir entre sistemas con diferentes arquitecturas."

#: ../Doc/tutorial/modules.rst:227
msgid ""
"Python does not check the cache in two circumstances.  First, it always "
"recompiles and does not store the result for the module that's loaded "
"directly from the command line.  Second, it does not check the cache if "
"there is no source module.  To support a non-source (compiled only) "
"distribution, the compiled module must be in the source directory, and there "
"must not be a source module."
msgstr ""
"Python no comprueba la memoria caché en dos circunstancias.  En primer "
"lugar, siempre se vuelve a compilar y no almacena el resultado del módulo "
"que se carga directamente desde la línea de comandos.  En segundo lugar, no "
"comprueba la memoria caché si no hay ningún módulo de origen.  Para admitir "
"una distribución no de origen (solo compilada), el módulo compilado debe "
"estar en el directorio de origen y no debe haber un módulo de origen."

#: ../Doc/tutorial/modules.rst:234
msgid "Some tips for experts:"
msgstr "Algunos consejos para expertos:"

#: ../Doc/tutorial/modules.rst:236
msgid ""
"You can use the :option:`-O` or :option:`-OO` switches on the Python command "
"to reduce the size of a compiled module.  The ``-O`` switch removes assert "
"statements, the ``-OO`` switch removes both assert statements and __doc__ "
"strings.  Since some programs may rely on having these available, you should "
"only use this option if you know what you're doing.  \"Optimized\" modules "
"have an ``opt-`` tag and are usually smaller.  Future releases may change "
"the effects of optimization."
msgstr ""
"Puede utilizar los modificadores :option:`-O` o :option:`-OO` en el comando "
"Python para reducir el tamaño de un módulo compilado.  El modificador ``-O`` "
"elimina las instrucciones de afirmación, el modificador ``-OO`` quita las "
"instrucciones 'assert' y las cadenas __doc__.  Dado que algunos programas "
"pueden confiar en tenerlos disponibles, solo debe usar esta opción si sabe "
"lo que está haciendo.  Los módulos \"optimizados\" tienen una etiqueta ``opt-"
"`` y suelen ser más pequeños.  Las versiones futuras pueden cambiar los "
"efectos de la optimización."

#: ../Doc/tutorial/modules.rst:244
msgid ""
"A program doesn't run any faster when it is read from a ``.pyc`` file than "
"when it is read from a ``.py`` file; the only thing that's faster about ``."
"pyc`` files is the speed with which they are loaded."
msgstr ""
"Un programa no se ejecuta más rápido cuando se lee desde un archivo ``.pyc`` "
"que cuando se lee desde un archivo ``.py``; lo único que es más rápido "
"acerca de ``.pyc`` es la velocidad con la que se cargan."

#: ../Doc/tutorial/modules.rst:248
msgid ""
"The module :mod:`compileall` can create .pyc files for all modules in a "
"directory."
msgstr ""
"El módulo :mod:`compileall` puede crear archivos .pyc para todos los módulos "
"de un directorio."

#: ../Doc/tutorial/modules.rst:251
msgid ""
"There is more detail on this process, including a flow chart of the "
"decisions, in :pep:`3147`."
msgstr ""
"Hay más detalles sobre este proceso, incluyendo un diagrama de flujo de las "
"decisiones, en :pep:`3147`."

#: ../Doc/tutorial/modules.rst:258
msgid "Standard Modules"
msgstr "Módulos Estándar"

#: ../Doc/tutorial/modules.rst:262
msgid ""
"Python comes with a library of standard modules, described in a separate "
"document, the Python Library Reference (\"Library Reference\" hereafter).  "
"Some modules are built into the interpreter; these provide access to "
"operations that are not part of the core of the language but are "
"nevertheless built in, either for efficiency or to provide access to "
"operating system primitives such as system calls.  The set of such modules "
"is a configuration option which also depends on the underlying platform.  "
"For example, the :mod:`winreg` module is only provided on Windows systems. "
"One particular module deserves some attention: :mod:`sys`, which is built "
"into every Python interpreter.  The variables ``sys.ps1`` and ``sys.ps2`` "
"define the strings used as primary and secondary prompts::"
msgstr ""
"Python viene con una biblioteca de módulos estándar, descritos en un "
"documento independiente, la Referencia de la biblioteca de Python "
"(\"Referencia de la biblioteca\" en adelante).  Algunos módulos están "
"integrados en el intérprete; estos proporcionan acceso a operaciones que no "
"forman parte del núcleo del lenguaje pero que, sin embargo, están "
"integradas, ya sea para la eficiencia o para proporcionar acceso a "
"primitivas del sistema operativo, como las llamadas al sistema.  El conjunto "
"de estos módulos es una opción de configuración que también depende de la "
"plataforma subyacente.  Por ejemplo, el módulo :mod:`winreg` solo se "
"proporciona en sistemas Windows. Un módulo en particular merece cierta "
"atención: :mod:`sys`, que está integrado en cada intérprete de Python.  Las "
"variables ``sys.ps1`` y ``sys.ps2`` definen las cadenas utilizadas como "
"mensajes primarios y secundarios::"

#: ../Doc/tutorial/modules.rst:285
msgid ""
"These two variables are only defined if the interpreter is in interactive "
"mode."
msgstr ""
"Estas dos variables solo se definen si el intérprete está en modo "
"interactivo."

#: ../Doc/tutorial/modules.rst:287
msgid ""
"The variable ``sys.path`` is a list of strings that determines the "
"interpreter's search path for modules. It is initialized to a default path "
"taken from the environment variable :envvar:`PYTHONPATH`, or from a built-in "
"default if :envvar:`PYTHONPATH` is not set.  You can modify it using "
"standard list operations::"
msgstr ""
"La variable ``sys.path`` es una lista de cadenas que determina la ruta de "
"búsqueda del intérprete para los módulos. Se inicializa en una ruta de "
"acceso predeterminada tomada de la variable de entorno :envvar:`PYTHONPATH`, "
"o de un valor predeterminado integrado si :envvar:`PYTHONPATH` no está "
"establecido.  Puede modificarlo utilizando operaciones de lista estándar::"

#: ../Doc/tutorial/modules.rst:300
msgid "The :func:`dir` Function"
msgstr "La función :func:`dir`"

#: ../Doc/tutorial/modules.rst:302
msgid ""
"The built-in function :func:`dir` is used to find out which names a module "
"defines.  It returns a sorted list of strings::"
msgstr ""
"La función integrada :func:`dir` se utiliza para averiguar qué nombres "
"define un módulo.  Devuelve una lista ordenada de cadenas:"

#: ../Doc/tutorial/modules.rst:327
msgid ""
"Without arguments, :func:`dir` lists the names you have defined currently::"
msgstr ""
"Sin argumentos, :func:`dir` enumera los nombres que ha definido actualmente::"

#: ../Doc/tutorial/modules.rst:335
msgid ""
"Note that it lists all types of names: variables, modules, functions, etc."
msgstr ""
"Tenga en cuenta que enumera todos los tipos de nombres: variables, módulos, "
"funciones, etc."

#: ../Doc/tutorial/modules.rst:339
msgid ""
":func:`dir` does not list the names of built-in functions and variables.  If "
"you want a list of those, they are defined in the standard module :mod:"
"`builtins`::"
msgstr ""
":func:`dir` no enumera los nombres de las funciones y variables integradas.  "
"Si desea una lista de ellos, se definen en el módulo estándar :mod:"
"`builtins`::"

#: ../Doc/tutorial/modules.rst:378
msgid "Packages"
msgstr "Paquetes"

#: ../Doc/tutorial/modules.rst:380
msgid ""
"Packages are a way of structuring Python's module namespace by using "
"\"dotted module names\".  For example, the module name :mod:`A.B` designates "
"a submodule named ``B`` in a package named ``A``.  Just like the use of "
"modules saves the authors of different modules from having to worry about "
"each other's global variable names, the use of dotted module names saves the "
"authors of multi-module packages like NumPy or Pillow from having to worry "
"about each other's module names."
msgstr ""
"Los paquetes son una forma de estructurar el espacio de nombres de módulo de "
"Python mediante el uso de \"dotted module names\".  Por ejemplo, el nombre "
"del módulo :mod:`A.B` designa un submódulo denominado ``B`` en un paquete "
"denominado ``A``.  Al igual que el uso de módulos evita que los autores de "
"diferentes módulos tengan que preocuparse por los nombres de variables "
"globales de cada uno, el uso de nombres de módulos punteados evita que los "
"autores de paquetes de varios módulos como NumPy o Pillow tengan que "
"preocuparse entre sí nombres de módulos."

#: ../Doc/tutorial/modules.rst:388
msgid ""
"Suppose you want to design a collection of modules (a \"package\") for the "
"uniform handling of sound files and sound data.  There are many different "
"sound file formats (usually recognized by their extension, for example: :"
"file:`.wav`, :file:`.aiff`, :file:`.au`), so you may need to create and "
"maintain a growing collection of modules for the conversion between the "
"various file formats. There are also many different operations you might "
"want to perform on sound data (such as mixing, adding echo, applying an "
"equalizer function, creating an artificial stereo effect), so in addition "
"you will be writing a never-ending stream of modules to perform these "
"operations.  Here's a possible structure for your package (expressed in "
"terms of a hierarchical filesystem):"
msgstr ""
"Supongamos que desea diseñar una colección de módulos (un \"paquete\") para "
"el manejo uniforme de archivos de sonido y datos de sonido.  Hay muchos "
"formatos de archivo de sonido diferentes (generalmente reconocidos por su "
"extensión, por ejemplo: :file:`.wav`, :file:`.aiff`, :file:`.au`), por lo "
"que es posible que deba crear y mantener una creciente colección de módulos "
"para la conversión entre los distintos formatos de archivo . También hay "
"muchas operaciones diferentes que es posible que desee realizar en datos de "
"sonido (como mezclar, agregar eco, aplicar una función de ecualizador, crear "
"un efecto estéreo artificial), por lo que además estará escribiendo un flujo "
"interminable de módulos para realizar estos Operaciones.  Esta es una "
"posible estructura para su paquete (expresada en términos de un sistema de "
"archivos jerárquico):"

#: ../Doc/tutorial/modules.rst:425
msgid ""
"When importing the package, Python searches through the directories on ``sys."
"path`` looking for the package subdirectory."
msgstr ""
"Al importar el paquete, Python busca a través de los directorios en ``sys."
"path`` buscando el subdirectorio del paquete."

#: ../Doc/tutorial/modules.rst:428
msgid ""
"The :file:`__init__.py` files are required to make Python treat directories "
"containing the file as packages.  This prevents directories with a common "
"name, such as ``string``, unintentionally hiding valid modules that occur "
"later on the module search path. In the simplest case, :file:`__init__.py` "
"can just be an empty file, but it can also execute initialization code for "
"the package or set the ``__all__`` variable, described later."
msgstr ""
"Los archivos :file:`__init__.py` son necesarios para hacer que Python trate "
"los directorios que contienen el archivo como paquetes.  Esto evita que los "
"directorios con un nombre común, como ``string``, oculten involuntariamente "
"los módulos válidos que se producen más adelante en la ruta de búsqueda del "
"módulo. En el caso más simple, :file:`__init__.py` puede ser simplemente un "
"archivo vacío, pero también puede ejecutar código de inicialización para el "
"paquete o establecer la variable ``__all__``, que se describe más adelante."

#: ../Doc/tutorial/modules.rst:435
msgid ""
"Users of the package can import individual modules from the package, for "
"example::"
msgstr ""
"Los usuarios del paquete pueden importar módulos individuales del paquete, "
"por ejemplo::"

#: ../Doc/tutorial/modules.rst:440
msgid ""
"This loads the submodule :mod:`sound.effects.echo`.  It must be referenced "
"with its full name. ::"
msgstr ""
"Esto carga el submódulo :mod:`sound.effects.echo`.  Se debe hacer referencia "
"a él con su nombre completo. ::"

#: ../Doc/tutorial/modules.rst:445
msgid "An alternative way of importing the submodule is::"
msgstr "Una forma alternativa de importar el submódulo es::"

#: ../Doc/tutorial/modules.rst:449
msgid ""
"This also loads the submodule :mod:`echo`, and makes it available without "
"its package prefix, so it can be used as follows::"
msgstr ""
"Esto también carga el submódulo :mod:`echo`, y lo hace disponible sin su "
"prefijo de paquete, por lo que se puede utilizar de la siguiente manera::"

#: ../Doc/tutorial/modules.rst:454
msgid ""
"Yet another variation is to import the desired function or variable "
"directly::"
msgstr ""
"Sin embargo, otra variación es importar la función o variable deseada "
"directamente::"

#: ../Doc/tutorial/modules.rst:458
msgid ""
"Again, this loads the submodule :mod:`echo`, but this makes its function :"
"func:`echofilter` directly available::"
msgstr ""
"Una vez más, esto carga el submódulo :mod:`echo`, pero esto hace que su "
"función :func:`echofilter` directamente disponible::"

#: ../Doc/tutorial/modules.rst:463
msgid ""
"Note that when using ``from package import item``, the item can be either a "
"submodule (or subpackage) of the package, or some  other name defined in the "
"package, like a function, class or variable.  The ``import`` statement first "
"tests whether the item is defined in the package; if not, it assumes it is a "
"module and attempts to load it.  If it fails to find it, an :exc:"
"`ImportError` exception is raised."
msgstr ""
"Tenga en cuenta que cuando se utiliza ``from package import item``, el "
"elemento puede ser un submódulo (o subpaquete) del paquete o algún otro "
"nombre definido en el paquete, como una función, clase o variable.  La "
"instrucción ``import`` comprueba primero si el elemento está definido en el "
"paquete; si no, asume que es un módulo e intenta cargarlo.  Si no lo "
"encuentra, se genera una excepción :exc:`ImportError`."

#: ../Doc/tutorial/modules.rst:470
msgid ""
"Contrarily, when using syntax like ``import item.subitem.subsubitem``, each "
"item except for the last must be a package; the last item can be a module or "
"a package but can't be a class or function or variable defined in the "
"previous item."
msgstr ""
"Por el contrario, cuando se utiliza sintaxis como ``import item.subitem."
"subsubitem``, cada elemento excepto el último debe ser un paquete; el último "
"elemento puede ser un módulo o un paquete, pero no puede ser una clase o "
"función o variable definida en el elemento anterior."

#: ../Doc/tutorial/modules.rst:479
msgid "Importing \\* From a Package"
msgstr "Importando \\* De Un Paquete"

#: ../Doc/tutorial/modules.rst:483
msgid ""
"Now what happens when the user writes ``from sound.effects import *``?  "
"Ideally, one would hope that this somehow goes out to the filesystem, finds "
"which submodules are present in the package, and imports them all.  This "
"could take a long time and importing sub-modules might have unwanted side-"
"effects that should only happen when the sub-module is explicitly imported."
msgstr ""
"Ahora, ¿qué sucede cuando el usuario escribe ``from sound.effects import "
"*``?  Idealmente, uno esperaría que esto de alguna manera se va al sistema "
"de archivos, encuentra qué submódulos están presentes en el paquete, y los "
"importa todos.  Esto podría tardar mucho tiempo y la importación de "
"submódulos podría tener efectos secundarios no deseados que solo deberían "
"ocurrir cuando el submódulo se importa explícitamente."

#: ../Doc/tutorial/modules.rst:489
msgid ""
"The only solution is for the package author to provide an explicit index of "
"the package.  The :keyword:`import` statement uses the following convention: "
"if a package's :file:`__init__.py` code defines a list named ``__all__``, it "
"is taken to be the list of module names that should be imported when ``from "
"package import *`` is encountered.  It is up to the package author to keep "
"this list up-to-date when a new version of the package is released.  Package "
"authors may also decide not to support it, if they don't see a use for "
"importing \\* from their package.  For example, the file :file:`sound/"
"effects/__init__.py` could contain the following code::"
msgstr ""
"La única solución es que el autor del paquete proporcione un índice "
"explícito del paquete.  La instrucción :keyword:`import` utiliza la "
"siguiente convención: si el código :file:`__init__.py` de un paquete define "
"una lista denominada ``__all__``, se toma como la lista de nombres de módulo "
"que se deben importar cuando se encuentra ``from package import *``.  "
"Depende del autor del paquete mantener esta lista actualizada cuando se "
"publique una nueva versión del paquete.  Los autores de paquetes también "
"pueden decidir no admitirlo, si no ven un uso para importar \\* desde su "
"paquete.  Por ejemplo, el archivo :file:`sound/effects/__init__.py` podría "
"contener el siguiente código::"

#: ../Doc/tutorial/modules.rst:501
msgid ""
"This would mean that ``from sound.effects import *`` would import the three "
"named submodules of the :mod:`sound` package."
msgstr ""
"Esto significaría que ``from sound.effects import *`` importaría los tres "
"submódulos nombrados del paquete :mod:`sound`."

#: ../Doc/tutorial/modules.rst:504
msgid ""
"If ``__all__`` is not defined, the statement ``from sound.effects import *`` "
"does *not* import all submodules from the package :mod:`sound.effects` into "
"the current namespace; it only ensures that the package :mod:`sound.effects` "
"has been imported (possibly running any initialization code in :file:"
"`__init__.py`) and then imports whatever names are defined in the package.  "
"This includes any names defined (and submodules explicitly loaded) by :file:"
"`__init__.py`.  It also includes any submodules of the package that were "
"explicitly loaded by previous :keyword:`import` statements.  Consider this "
"code::"
msgstr ""
"Si ``__all__`` no está definido, la instrucción ``from sound.effects import "
"*`` *no* importa todos los submódulos del paquete :mod:`sound.effects` en el "
"espacio de nombres actual; sólo garantiza que el paquete :mod:`sound."
"effects` se ha importado (posiblemente ejecutando cualquier código de "
"inicialización en :file:`__init__.py`) y luego importa cualquier nombre que "
"se defina en el paquete.  Esto incluye los nombres definidos (y submódulos "
"cargados explícitamente) por :file:`__init__.py`.  También incluye los "
"submódulos del paquete que se cargaron explícitamente por instrucciones "
"anteriores :keyword:`import`.  Considere este código::"

#: ../Doc/tutorial/modules.rst:517
msgid ""
"In this example, the :mod:`echo` and :mod:`surround` modules are imported in "
"the current namespace because they are defined in the :mod:`sound.effects` "
"package when the ``from...import`` statement is executed.  (This also works "
"when ``__all__`` is defined.)"
msgstr ""
"En este ejemplo, los módulos :mod:`echo` y :mod:`surround` se importan en el "
"espacio de nombres actual porque se definen en el paquete :mod:`sound."
"effects` cuando el se ejecuta la instrucción ``from...import``.  (Esto "
"también funciona cuando se define ``__all__``.)"

#: ../Doc/tutorial/modules.rst:522
msgid ""
"Although certain modules are designed to export only names that follow "
"certain patterns when you use ``import *``, it is still considered bad "
"practice in production code."
msgstr ""
"Aunque algunos módulos están diseñados para exportar solo nombres que siguen "
"ciertos patrones cuando se utiliza ``importar *``, todavía se considera una "
"mala práctica en el código de producción."

#: ../Doc/tutorial/modules.rst:526
msgid ""
"Remember, there is nothing wrong with using ``from package import "
"specific_submodule``!  In fact, this is the recommended notation unless the "
"importing module needs to use submodules with the same name from different "
"packages."
msgstr ""
"Recuerde, no hay nada de malo en usar ``from package import "
"specific_submodule``!  De hecho, esta es la notación recomendada a menos que "
"el módulo de importación necesite utilizar submódulos con el mismo nombre de "
"diferentes paquetes."

#: ../Doc/tutorial/modules.rst:533
msgid "Intra-package References"
msgstr "Referencias 'Intra-paquete'"

#: ../Doc/tutorial/modules.rst:535
msgid ""
"When packages are structured into subpackages (as with the :mod:`sound` "
"package in the example), you can use absolute imports to refer to submodules "
"of siblings packages.  For example, if the module :mod:`sound.filters."
"vocoder` needs to use the :mod:`echo` module in the :mod:`sound.effects` "
"package, it can use ``from sound.effects import echo``."
msgstr ""
"Cuando los paquetes se estructuran en subpaquetes (como con el paquete :mod:"
"`sound` en el ejemplo), puede utilizar importaciones absolutas para hacer "
"referencia a submódulos de paquetes de hermanos.  Por ejemplo, si el módulo :"
"mod:`sound.filters.vocoder` necesita utilizar el módulo :mod:`echo` en el "
"paquete :mod:`sound.effects`, puede utilizar ``from sound.effects import "
"echo``."

#: ../Doc/tutorial/modules.rst:541
msgid ""
"You can also write relative imports, with the ``from module import name`` "
"form of import statement.  These imports use leading dots to indicate the "
"current and parent packages involved in the relative import.  From the :mod:"
"`surround` module for example, you might use::"
msgstr ""
"También puede escribir importaciones relativas, con la forma ``from module "
"import name`` de la instrucción import.  Estas importaciones utilizan puntos "
"iniciales para indicar los paquetes actuales y primarios implicados en la "
"importación relativa.  Desde el módulo :mod:`surround`, por ejemplo, puede "
"utilizar:"

#: ../Doc/tutorial/modules.rst:550
msgid ""
"Note that relative imports are based on the name of the current module.  "
"Since the name of the main module is always ``\"__main__\"``, modules "
"intended for use as the main module of a Python application must always use "
"absolute imports."
msgstr ""
"Tenga en cuenta que las importaciones relativas se basan en el nombre del "
"módulo actual.  Dado que el nombre del módulo principal es siempre "
"``''__main__''``, los módulos destinados a su uso como módulo principal de "
"una aplicación Python siempre deben utilizar importaciones absolutas."

#: ../Doc/tutorial/modules.rst:556
msgid "Packages in Multiple Directories"
msgstr "Paquetes en Múltiples Directorios"

#: ../Doc/tutorial/modules.rst:558
msgid ""
"Packages support one more special attribute, :attr:`__path__`.  This is "
"initialized to be a list containing the name of the directory holding the "
"package's :file:`__init__.py` before the code in that file is executed.  "
"This variable can be modified; doing so affects future searches for modules "
"and subpackages contained in the package."
msgstr ""
"Los paquetes admiten un atributo especial más, :attr:`__path__`.  Esto se "
"inicializa para ser una lista que contiene el nombre del directorio que "
"contiene el paquete :file:`__init__.py` antes de que se ejecute el código de "
"ese archivo.  Esta variable se puede modificar; esto afecta a futuras "
"búsquedas de módulos y subpaquetes contenidos en el paquete."

#: ../Doc/tutorial/modules.rst:564
msgid ""
"While this feature is not often needed, it can be used to extend the set of "
"modules found in a package."
msgstr ""
"Aunque esta característica no es a menudo necesaria, se puede utilizar para "
"ampliar el conjunto de módulos que se encuentran en un paquete."

#: ../Doc/tutorial/modules.rst:569
msgid "Footnotes"
msgstr "Notas a Pié de Página"

#: ../Doc/tutorial/modules.rst:570
msgid ""
"In fact function definitions are also 'statements' that are 'executed'; the "
"execution of a module-level function definition enters the function name in "
"the module's global symbol table."
msgstr ""
"De hecho, las definiciones de función también son «declaraciones» que se "
"'ejecutan'; la ejecución de una definición de función de nivel de módulo "
"introduce el nombre de la función en la tabla de símbolos global del del "
"módulo."
