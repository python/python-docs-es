# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-03-10 20:46+0100\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: es_ES\n"
"X-Generator: Poedit 2.3\n"

#: ../Doc/tutorial/classes.rst:5
msgid "Classes"
msgstr "Clases"

#: ../Doc/tutorial/classes.rst:7
msgid ""
"Classes provide a means of bundling data and functionality together.  "
"Creating a new class creates a new *type* of object, allowing new "
"*instances* of that type to be made.  Each class instance can have "
"attributes attached to it for maintaining its state.  Class instances can "
"also have methods (defined by its class) for modifying its state."
msgstr ""
"Las clases proveen de significado y funcionalidad a las agrupaciones de "
"datos. Creando una nueva clase creas un nuevo *tipo* de objeto, permitiendo "
"hacer nuevas *instancias* de ese tipo. Cada instancia de clase puede tener "
"atributos adjuntos a ella para mantener su estado. Las instancias de clases "
"pueden también tener métodos (definidos por su clase) para modificarse su "
"estado."

#: ../Doc/tutorial/classes.rst:13
msgid ""
"Compared with other programming languages, Python's class mechanism adds "
"classes with a minimum of new syntax and semantics.  It is a mixture of the "
"class mechanisms found in C++ and Modula-3.  Python classes provide all the "
"standard features of Object Oriented Programming: the class inheritance "
"mechanism allows multiple base classes, a derived class can override any "
"methods of its base class or classes, and a method can call the method of a "
"base class with the same name.  Objects can contain arbitrary amounts and "
"kinds of data.  As is true for modules, classes partake of the dynamic "
"nature of Python: they are created at runtime, and can be modified further "
"after creation."
msgstr ""
"Comparado con otros lenguajes de programación, el mecanismo de clases de "
"Python añade clases con un mínimo de nueva sintaxis y semántica. Es una "
"mezcla de los mecanismos de clases encontrados en C++ y Modula-3. Las clases "
"de Python proveen todas las funcionalidades de la Programación Orientada a "
"Objetos: el mecanismo de herencia de clase permite múltiples clases base, "
"una clase derivada puede anular cualquier método de su base de clase o "
"clases, y un método puede llamar el método de una clase base con el mismo "
"nombre. Los objetos pueden contener tipos y cantidades arbitrarias de datos. "
"Como es cierto para los módulos, las clases participan de la naturaleza "
"dinámica de Python: son creadas en tiempo de ejecución, y pueden ser "
"modificadas más allá de su creación."

#: ../Doc/tutorial/classes.rst:23
msgid ""
"In C++ terminology, normally class members (including the data members) are "
"*public* (except see below :ref:`tut-private`), and all member functions are "
"*virtual*.  As in Modula-3, there are no shorthands for referencing the "
"object's members from its methods: the method function is declared with an "
"explicit first argument representing the object, which is provided "
"implicitly by the call.  As in Smalltalk, classes themselves are objects.  "
"This provides semantics for importing and renaming.  Unlike C++ and "
"Modula-3, built-in types can be used as base classes for extension by the "
"user.  Also, like in C++, most built-in operators with special syntax "
"(arithmetic operators, subscripting etc.) can be redefined for class "
"instances."
msgstr ""
"En la terminología de C++, normalmente los miembros de las clases (incluídos "
"los miembros de datos) son *públicos* (exceptuando mira más abajo :ref:`tut-"
"private`), y todas las funciones de los miembros son *virtuales*. Como en "
"Modula-3, no hay limitaciones para referenciar los objetos de los miembros "
"de sus métodos: la función del método se declara con un explícito primer "
"argumento representando el objeto, el cual es previsto implícitamente por la "
"llamada. Como en Smalltalk, las clases en si mismas son objetos. Esto "
"proporciona la semántica para importar y renombrar. Diferente a C++ y "
"Modula-3, los tipos incorporados pueden ser usado como base de clases para "
"extensión por el usuario. Además, como en C++, la mayoría de operadores "
"incorporados con síntaxis especial (operadores aritméticos, suscripción "
"etc.) pueden ser redefinidos para las instancias de clase."

#: ../Doc/tutorial/classes.rst:34
msgid ""
"(Lacking universally accepted terminology to talk about classes, I will make "
"occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, "
"since its object-oriented semantics are closer to those of Python than C++, "
"but I expect that few readers have heard of it.)"
msgstr ""
"(Dada la falta de terminología universalmente aceptada para hablar sobre "
"clases, haré un uso ocasional de condiciones Smalltalk y C++. Yo usaría las "
"condiciones de Modula-3, desde que su semántica orientada a objetos es mas "
"cercana a la de Python que C++, pero espero que un par de lectores hayan "
"oído hablar de eso.)"

#: ../Doc/tutorial/classes.rst:43
msgid "A Word About Names and Objects"
msgstr "Un Mundo Sobre Nombres y Objetos"

#: ../Doc/tutorial/classes.rst:45
msgid ""
"Objects have individuality, and multiple names (in multiple scopes) can be "
"bound to the same object.  This is known as aliasing in other languages.  "
"This is usually not appreciated on a first glance at Python, and can be "
"safely ignored when dealing with immutable basic types (numbers, strings, "
"tuples).  However, aliasing has a possibly surprising effect on the "
"semantics of Python code involving mutable objects such as lists, "
"dictionaries, and most other types. This is usually used to the benefit of "
"the program, since aliases behave like pointers in some respects.  For "
"example, passing an object is cheap since only a pointer is passed by the "
"implementation; and if a function modifies an object passed as an argument, "
"the caller will see the change --- this eliminates the need for two "
"different argument passing mechanisms as in Pascal."
msgstr ""
"Los objetos tienen individualidad, y múltiples nombres (en múltiples "
"ámbitos) pueden ser ligados al mismo objeto. Esto es conocido como "
"'aliasing' en otros lenguajes. Esto es habitualmente no apreciado a primera "
"vista en Python, y puede ignorarse rin riesgo cuando lidias con tipos "
"básicos inmutables (números, 'strings', tuplas). Sin embargo, 'aliasing' "
"tiene posiblemente un efecto sorprendente en la semántica del código de "
"Python involucrando objetos variables como listas, diccionarios, y la "
"mayoría de los otros tipos. Esto es habitualmente usado para el beneficio "
"del programa, desde que los alias se comportan como punteros en algunos "
"sentidos. Por ejemplo, pasando un objeto es fácil desde que sólo un puntero "
"es pasado por la implementación; y si una función modifica un objeto pasado "
"como un argumento, el que llama verá el cambio --- esto elimina la necesidad "
"de dos mecanismos diferentes para pasar argumentos como en Pascal."

#: ../Doc/tutorial/classes.rst:61
msgid "Python Scopes and Namespaces"
msgstr "El Alcance de Python y 'Namespaces'"

#: ../Doc/tutorial/classes.rst:63
msgid ""
"Before introducing classes, I first have to tell you something about "
"Python's scope rules.  Class definitions play some neat tricks with "
"namespaces, and you need to know how scopes and namespaces work to fully "
"understand what's going on. Incidentally, knowledge about this subject is "
"useful for any advanced Python programmer."
msgstr ""
"Antes de introducir las clases, tengo primero que decirte algo sobre las "
"reglas de alcance de Python. Las definiciones de clase hacen algunos trucos "
"geniales con los 'namespaces', y tu necesitas saber como funcionan los "
"'scopes' y los 'namespaces' para comprender completamente que está "
"sucediendo. De paso, el conocimiento sobre esta materia es útil para "
"cualquier programador avanzado de Python."

#: ../Doc/tutorial/classes.rst:69
msgid "Let's begin with some definitions."
msgstr "Empecemos con algunas definiciones."

#: ../Doc/tutorial/classes.rst:71
msgid ""
"A *namespace* is a mapping from names to objects.  Most namespaces are "
"currently implemented as Python dictionaries, but that's normally not "
"noticeable in any way (except for performance), and it may change in the "
"future.  Examples of namespaces are: the set of built-in names (containing "
"functions such as :func:`abs`, and built-in exception names); the global "
"names in a module; and the local names in a function invocation.  In a sense "
"the set of attributes of an object also form a namespace.  The important "
"thing to know about namespaces is that there is absolutely no relation "
"between names in different namespaces; for instance, two different modules "
"may both define a function ``maximize`` without confusion --- users of the "
"modules must prefix it with the module name."
msgstr ""
"Un *namespace* es un mapeo desde nombres a objetos. La mayoría de los "
"'namespaces' estan actualmente implementados como diccionarios de Python, "
"pero eso normalmente no es perceptible de ningun modo (salvo por el "
"rendimiento), y pueden cambiar en el futuro. Ejemplos de 'namespaces' son: "
"el set de nombres incorporados (que contienen funciones como en :func:`abs`, "
"y nombres de excepción incorporados); los nombres globales en un módulo; y "
"los nombres locales en una llamada a una función. De cierto modo el set de "
"atributos de un objeto también forma un 'namespace'. Lo importante que debe "
"saber sobre los 'namespaces' es que no hay absolutamente ninguna relación "
"entre los nombres en diferentes 'namespaces'; por ejemplo, dos módulos "
"distintos pueden ambos definir una función ``maximize`` sin confusión --- "
"los usuarios de los módulos deben user el prefijo con el nombre del módulo."

#: ../Doc/tutorial/classes.rst:82
msgid ""
"By the way, I use the word *attribute* for any name following a dot --- for "
"example, in the expression ``z.real``, ``real`` is an attribute of the "
"object ``z``.  Strictly speaking, references to names in modules are "
"attribute references: in the expression ``modname.funcname``, ``modname`` is "
"a module object and ``funcname`` is an attribute of it.  In this case there "
"happens to be a straightforward mapping between the module's attributes and "
"the global names defined in the module: they share the same namespace!  [#]_"
msgstr ""
"Por cierto, yo uso la palabra *atributo* para cualquier nombre que sigue a "
"un punto --- por ejemplo, en la expression ``z.real``, ``real`` es un "
"atributo del objeto ``z``. Estrictamente hablando, las referencias a los "
"nombres en los módulos son referencias de atributos: en la expresión "
"``modname.funcname``,``modname`` es un objeto módulo y ``funcname`` es un "
"atributo de él. En este caso sucede que un mapeo sencillo entre los "
"atributos del módulo y los nombres globales definidos en el módulo: ellos "
"comparten el mismo 'namespace'! [#]_"

#: ../Doc/tutorial/classes.rst:90
msgid ""
"Attributes may be read-only or writable.  In the latter case, assignment to "
"attributes is possible.  Module attributes are writable: you can write "
"``modname.the_answer = 42``.  Writable attributes may also be deleted with "
"the :keyword:`del` statement.  For example, ``del modname.the_answer`` will "
"remove the attribute :attr:`the_answer` from the object named by ``modname``."
msgstr ""
"Los atributos pueden ser de sólo lectura o grabables. En este último caso, "
"la asignación a atributos es posible. Los atributos del módulo son "
"grabables: tú puedes escribir ``modname.the_answer = 42``. Los atributos "
"modificables pueden ser también borrados con la declaración :keyword:`del`. "
"Por ejemplo, ``del modname.the_answer`` eliminará el atributo :attr:"
"`the_answer` del objeto llamado ``modname``."

#: ../Doc/tutorial/classes.rst:96
msgid ""
"Namespaces are created at different moments and have different lifetimes.  "
"The namespace containing the built-in names is created when the Python "
"interpreter starts up, and is never deleted.  The global namespace for a "
"module is created when the module definition is read in; normally, module "
"namespaces also last until the interpreter quits.  The statements executed "
"by the top-level invocation of the interpreter, either read from a script "
"file or interactively, are considered part of a module called :mod:"
"`__main__`, so they have their own global namespace.  (The built-in names "
"actually also live in a module; this is called :mod:`builtins`.)"
msgstr ""
"Los 'Namespaces' son creados en diferentes momentos y tienen diferentes "
"vidas. El 'namespace' que contiene los nombres incorporados es creado cuando "
"el intérprete de Python se inicia, y nunca es borrado. El 'namespace' global "
"para un módulo es creado cuando la definición del módulo es leída; "
"normalmente, los modulos de los 'namespaces' además duran hasta que se "
"cierra el intérprete. Las declaraciones ejecutadas por la invocación de "
"nivel superior del intérprete, ya sea leído desde un archivo de script o "
"interactivamente, son considerados parte de un módulo llamado :mod:"
"`__main__`, entonces tienen su propio 'namespace' global. (Los nombres "
"'built-in' en realidad también viven en un módulo; esto es llamado :mod:"
"`builtins`.)"

#: ../Doc/tutorial/classes.rst:106
msgid ""
"The local namespace for a function is created when the function is called, "
"and deleted when the function returns or raises an exception that is not "
"handled within the function.  (Actually, forgetting would be a better way to "
"describe what actually happens.)  Of course, recursive invocations each have "
"their own local namespace."
msgstr ""
"El 'namespace' local para una función es creado cuando la función es "
"llamada, y borrado cuando la función devuelve o eleva una excepción que no "
"está manejada dentro de la función. (Realmente, olvidarse sería una mejor "
"manera de describir que sucede realmente. Por supuesto, las invocaciones "
"recursivas tienen cada una su propio 'namespace' local."

#: ../Doc/tutorial/classes.rst:112
msgid ""
"A *scope* is a textual region of a Python program where a namespace is "
"directly accessible.  \"Directly accessible\" here means that an unqualified "
"reference to a name attempts to find the name in the namespace."
msgstr ""
"Un *scope* es una región textual de un programa de Python donde un "
"'namespace' es directamente accesible. \"Directamente accesible\" aqui "
"significa que una no cualificada referencia a un nombre intenta encontrar el "
"nombre en el 'namespace'."

#: ../Doc/tutorial/classes.rst:116
msgid ""
"Although scopes are determined statically, they are used dynamically. At any "
"time during execution, there are at least three nested scopes whose "
"namespaces are directly accessible:"
msgstr ""
"A pesar de que los scopes se determinan estáticamente, estos son usados "
"dinámicamente. En cualquier momento durante la ejecución, hay al menos tres "
"ámbitos anidados cuyos 'namespaces' son directamente accesibles:"

#: ../Doc/tutorial/classes.rst:120
msgid "the innermost scope, which is searched first, contains the local names"
msgstr ""
"El ámbito más interno, que se busca primero, contiene los nombres locales."

#: ../Doc/tutorial/classes.rst:121
msgid ""
"the scopes of any enclosing functions, which are searched starting with the "
"nearest enclosing scope, contains non-local, but also non-global names"
msgstr ""
"Los ámbitos de las funciones de cierre, que se buscan comenzando por el "
"alcance de cierre más cercano, contienen nombres no locales, pero también no "
"globales."

#: ../Doc/tutorial/classes.rst:123
msgid "the next-to-last scope contains the current module's global names"
msgstr "El penúltimo alcance contiene los nombres globales del módulo actual"

#: ../Doc/tutorial/classes.rst:124
msgid ""
"the outermost scope (searched last) is the namespace containing built-in "
"names"
msgstr ""
"el alcance más externo (último buscado) es el espacio de nombres que "
"contiene los 'built-in' nombres"

#: ../Doc/tutorial/classes.rst:126
msgid ""
"If a name is declared global, then all references and assignments go "
"directly to the middle scope containing the module's global names.  To "
"rebind variables found outside of the innermost scope, the :keyword:"
"`nonlocal` statement can be used; if not declared nonlocal, those variables "
"are read-only (an attempt to write to such a variable will simply create a "
"*new* local variable in the innermost scope, leaving the identically named "
"outer variable unchanged)."
msgstr ""
"Si un nombre es declarado global, entonces todas las referencias y "
"asignaciones van directas a la mitad del 'scope' conteniendo los nombres "
"globales del módulo. Para volver a atar las variables encontradas fuera del "
"alcance más interno, la declaración :keyword:`nonlocal` puede ser usada; si "
"no es declarada no local, esas variables son de sólo lectura (un intento de "
"escribir tal variable creará simplemente una *nueva* variable local en el "
"alcance más interno, dejando la variable de afuera identicamente nombrada "
"sin cambiar."

#: ../Doc/tutorial/classes.rst:133
msgid ""
"Usually, the local scope references the local names of the (textually) "
"current function.  Outside functions, the local scope references the same "
"namespace as the global scope: the module's namespace. Class definitions "
"place yet another namespace in the local scope."
msgstr ""
"Generalmente, el 'scope' local referencia los nombres locales de la "
"(textualmente) función actual. Fuera de las funciones, el local 'scope' hace "
"referencia al mismo espacio de nombres que el ámbito global: el 'namespaces "
"del módulo. Las definiciones de clase colocan otro 'namespace' en el ámbito "
"local."

#: ../Doc/tutorial/classes.rst:138
msgid ""
"It is important to realize that scopes are determined textually: the global "
"scope of a function defined in a module is that module's namespace, no "
"matter from where or by what alias the function is called.  On the other "
"hand, the actual search for names is done dynamically, at run time --- "
"however, the language definition is evolving towards static name resolution, "
"at \"compile\" time, so don't rely on dynamic name resolution!  (In fact, "
"local variables are already determined statically.)"
msgstr ""
"Es importante darse cuenta que los 'scopes' son determinados textualmente: "
"el 'scope' global definido en un módulo es el 'namespace' de ese módulo, no "
"importa desde dónde o por qué alias se llama la función. Por otro lado, la "
"búsqueda actual para los nombres es hecha dinámicamente, a la hora de "
"ejecución --- sin embargo, la definición del lenguaje está evolucionando "
"hacia la resolución de nombres estáticos, en el momento de \"compilación\", "
"¡así que no confíe en la resolución de nombres dinámica! (De hecho, las "
"variables locales ya están determinadas estáticamente)."

#: ../Doc/tutorial/classes.rst:146
msgid ""
"A special quirk of Python is that -- if no :keyword:`global` statement is in "
"effect -- assignments to names always go into the innermost scope.  "
"Assignments do not copy data --- they just bind names to objects.  The same "
"is true for deletions: the statement ``del x`` removes the binding of ``x`` "
"from the namespace referenced by the local scope.  In fact, all operations "
"that introduce new names use the local scope: in particular, :keyword:"
"`import` statements and function definitions bind the module or function "
"name in the local scope."
msgstr ""
"Una peculiaridad especial de Python es que --- si no está en acción la "
"declaración :keyword:`global` -- las asignaciones a nombres siempre van al "
"ámbito más interno. Las asignaciones no copian datos, solo unen nombres a "
"objetos. Lo mismo es cierto para las eliminaciones: la declaración `` del "
"x`` elimina el enlace de `` x`` del espacio de nombres al que hace "
"referencia el ámbito local. De hecho, todas las operaciones que introducen "
"nuevos nombres utilizan el ámbito local: en particular,: palabra clave: las "
"declaraciones `import` y las definiciones de función enlazan el nombre del "
"módulo o función en el ámbito local."

#: ../Doc/tutorial/classes.rst:154
msgid ""
"The :keyword:`global` statement can be used to indicate that particular "
"variables live in the global scope and should be rebound there; the :keyword:"
"`nonlocal` statement indicates that particular variables live in an "
"enclosing scope and should be rebound there."
msgstr ""
"La declaración :keyword:`global` se puede usar para indicar que determinadas "
"variables viven en el ámbito global y deben rebotar allí; la declaración: :"
"keyword:`nonlocal` indica que las variables particulares viven en un ámbito "
"de cobertura y deben rebotar allí."

#: ../Doc/tutorial/classes.rst:162
msgid "Scopes and Namespaces Example"
msgstr "Ejemplo de 'Scopes' y 'Namespaces'"

#: ../Doc/tutorial/classes.rst:164
msgid ""
"This is an example demonstrating how to reference the different scopes and "
"namespaces, and how :keyword:`global` and :keyword:`nonlocal` affect "
"variable binding::"
msgstr ""
"Este es un ejemplo que demuestra cómo hacer referencia a los diferentes "
"ámbitos y 'namespaces, y cómo: la palabra clave: :keyword:`global` y la "
"palabra clave :keyword:`no local` afectan el enlace variable ::"

#: ../Doc/tutorial/classes.rst:191
msgid "The output of the example code is:"
msgstr "La salida del código de ejemplo es:"

#: ../Doc/tutorial/classes.rst:200
msgid ""
"Note how the *local* assignment (which is default) didn't change *scope_test*"
"\\'s binding of *spam*.  The :keyword:`nonlocal` assignment changed "
"*scope_test*\\'s binding of *spam*, and the :keyword:`global` assignment "
"changed the module-level binding."
msgstr ""
"Observa como la asignación *local* (la cual está por defecto) no ha cambiado "
"la *scope_test*\\'s el enlace de *spam*. La asignación :keyword:`nonlocal` "
"ha cambiado el enlace de *scope_test*\\'s a *spam*, y la asignación de :"
"keyword:`global` ha cambiado el enlace del nivel del módulo."

#: ../Doc/tutorial/classes.rst:205
msgid ""
"You can also see that there was no previous binding for *spam* before the :"
"keyword:`global` assignment."
msgstr ""
"También puede ver que no había un enlace previo para * spam * antes de la "
"asignación :keyword:`global`."

#: ../Doc/tutorial/classes.rst:212
msgid "A First Look at Classes"
msgstr "Una Introducción a las Clases"

#: ../Doc/tutorial/classes.rst:214
msgid ""
"Classes introduce a little bit of new syntax, three new object types, and "
"some new semantics."
msgstr ""
"Las clases introducen un poco de nueva sintaxis, tres nuevos tipos de "
"objetos y algunas semánticas nuevas."

#: ../Doc/tutorial/classes.rst:221
msgid "Class Definition Syntax"
msgstr "Sintaxis de Definición de Clase"

#: ../Doc/tutorial/classes.rst:223
msgid "The simplest form of class definition looks like this::"
msgstr "La forma más simple de definición de clase se parece a esto::"

#: ../Doc/tutorial/classes.rst:232
msgid ""
"Class definitions, like function definitions (:keyword:`def` statements) "
"must be executed before they have any effect.  (You could conceivably place "
"a class definition in a branch of an :keyword:`if` statement, or inside a "
"function.)"
msgstr ""
"Las definiciones de clase, como las definiciones de función (:keyword:`def` "
"declaraciones) deben ejecutarse antes de que tengan efecto. (Posiblemente "
"podría colocar una definición de clase en una rama de una declaración :"
"keyword:`if`, o dentro de una función)."

#: ../Doc/tutorial/classes.rst:236
msgid ""
"In practice, the statements inside a class definition will usually be "
"function definitions, but other statements are allowed, and sometimes useful "
"--- we'll come back to this later.  The function definitions inside a class "
"normally have a peculiar form of argument list, dictated by the calling "
"conventions for methods --- again, this is explained later."
msgstr ""
"En la práctica, las declaraciones dentro de una definición de clase "
"generalmente serán definiciones de funciones, pero se permiten otras "
"declaraciones, y a veces útiles --- volveremos a esto más adelante. Las "
"definiciones de funciones dentro de una clase normalmente tienen una forma "
"peculiar de lista de argumentos, dictada por las convenciones de llamada "
"para los métodos --- nuevamente, esto se explica más adelante."

#: ../Doc/tutorial/classes.rst:242
msgid ""
"When a class definition is entered, a new namespace is created, and used as "
"the local scope --- thus, all assignments to local variables go into this "
"new namespace.  In particular, function definitions bind the name of the new "
"function here."
msgstr ""
"Cuando se ingresa una definición de clase, se crea un nuevo 'namespace' y se "
"usa como el ámbito local --- por lo tanto, todas las asignaciones a "
"variables locales entran en este nuevo 'namespace'. En particular, las "
"definiciones de función enlazan el nombre de la nueva función aquí."

#: ../Doc/tutorial/classes.rst:247
msgid ""
"When a class definition is left normally (via the end), a *class object* is "
"created.  This is basically a wrapper around the contents of the namespace "
"created by the class definition; we'll learn more about class objects in the "
"next section.  The original local scope (the one in effect just before the "
"class definition was entered) is reinstated, and the class object is bound "
"here to the class name given in the class definition header (:class:"
"`ClassName` in the example)."
msgstr ""
"Cuando una definición de clase se deja normalmente (hasta el final), se crea "
"un *objeto de clase*. Esto es básicamente una envoltura alrededor del "
"contenido del 'namespace' creado por la definición de clase; Aprenderemos "
"más sobre los objetos de clase en la siguiente sección. El ámbito local "
"original (el que estaba en vigencia justo antes de que se ingresara la "
"definición de clase) se restablece, y el objeto de clase se vincula aquí al "
"nombre de clase dado en el encabezado de definición de clase (:class:"
"`ClassName` en el ejemplo)."

#: ../Doc/tutorial/classes.rst:259
msgid "Class Objects"
msgstr "Objetos de Clase"

#: ../Doc/tutorial/classes.rst:261
msgid ""
"Class objects support two kinds of operations: attribute references and "
"instantiation."
msgstr ""
"Los objetos de clase admiten dos tipos de operaciones: referencias de "
"atributos e instanciación."

#: ../Doc/tutorial/classes.rst:264
msgid ""
"*Attribute references* use the standard syntax used for all attribute "
"references in Python: ``obj.name``.  Valid attribute names are all the names "
"that were in the class's namespace when the class object was created.  So, "
"if the class definition looked like this::"
msgstr ""
"*Referencias de atributos* usa la sintaxis estándar utilizada para todas las "
"referencias de atributos en Python: ``obj.name``. Los nombres de atributo "
"válidos son todos los nombres que estaban en el 'namespace' de la clase "
"cuando se creó el objeto de clase. Entonces, la definición de clase se ve "
"así::"

#: ../Doc/tutorial/classes.rst:276
msgid ""
"then ``MyClass.i`` and ``MyClass.f`` are valid attribute references, "
"returning an integer and a function object, respectively. Class attributes "
"can also be assigned to, so you can change the value of ``MyClass.i`` by "
"assignment. :attr:`__doc__` is also a valid attribute, returning the "
"docstring belonging to the class: ``\"A simple example class\"``."
msgstr ""
"entonces ``MyClass.i`` y ``MyClass.f`` son referencias de atributo válidas, "
"que devuelven un entero y un objeto de función, respectivamente. Los "
"atributos de clase también se pueden asignar a, por lo que puede cambiar el "
"valor de `` MyClass.i`` por asignación. :attr:`__doc__` también es un "
"atributo válido, que devuelve la cadena de documentación que pertenece a la "
"clase: ``\" Una clase de ejemplo simple \"``"

#: ../Doc/tutorial/classes.rst:282
msgid ""
"Class *instantiation* uses function notation.  Just pretend that the class "
"object is a parameterless function that returns a new instance of the class. "
"For example (assuming the above class)::"
msgstr ""
"La clase *instanciación* usa la notación de función. Simplemente imagine que "
"el objeto de clase es una función sin parámetros que devuelve una nueva "
"instancia de la clase. Por ejemplo (suponiendo la clase anterior)::"

#: ../Doc/tutorial/classes.rst:288
msgid ""
"creates a new *instance* of the class and assigns this object to the local "
"variable ``x``."
msgstr ""
"crea una nueva *instancia* de la clase y asigna este objeto a la variable "
"local ``x``."

#: ../Doc/tutorial/classes.rst:291
msgid ""
"The instantiation operation (\"calling\" a class object) creates an empty "
"object. Many classes like to create objects with instances customized to a "
"specific initial state. Therefore a class may define a special method named :"
"meth:`__init__`, like this::"
msgstr ""
"La operación de instanciación (\"llamar\" a un objeto de clase) crea un "
"objeto vacío. A muchas clases les gusta crear objetos con instancias "
"personalizadas para un estado inicial específico. Por lo tanto, una clase "
"puede definir un método especial llamado :meth:`__init__`, como este::"

#: ../Doc/tutorial/classes.rst:299
msgid ""
"When a class defines an :meth:`__init__` method, class instantiation "
"automatically invokes :meth:`__init__` for the newly-created class "
"instance.  So in this example, a new, initialized instance can be obtained "
"by::"
msgstr ""
"Cuando una clase define un método :meth:`__init__`, la creación de "
"instancias de clase invoca automáticamente :meth:`__init__` para la "
"instancia de clase recién creada. Entonces, en este ejemplo, se puede "
"obtener una nueva instancia inicializada por::"

#: ../Doc/tutorial/classes.rst:305
msgid ""
"Of course, the :meth:`__init__` method may have arguments for greater "
"flexibility.  In that case, arguments given to the class instantiation "
"operator are passed on to :meth:`__init__`.  For example, ::"
msgstr ""
"Por supuesto, el método :meth:`__init__` puede tener argumentos para una "
"mayor flexibilidad. En ese caso, los argumentos dados al operador de "
"instanciación de clase se pasan a :meth:`__init__`. Por ejemplo, ::"

#: ../Doc/tutorial/classes.rst:322
msgid "Instance Objects"
msgstr "Objetos de Instancia"

#: ../Doc/tutorial/classes.rst:324
msgid ""
"Now what can we do with instance objects?  The only operations understood by "
"instance objects are attribute references.  There are two kinds of valid "
"attribute names, data attributes and methods."
msgstr ""
"Ahora, ¿qué podemos hacer con los objetos de instancia? Las únicas "
"operaciones entendidas por los objetos de instancia son referencias de "
"atributos. Hay dos tipos de nombres de atributos válidos, atributos de datos "
"y métodos."

#: ../Doc/tutorial/classes.rst:328
msgid ""
"*data attributes* correspond to \"instance variables\" in Smalltalk, and to "
"\"data members\" in C++.  Data attributes need not be declared; like local "
"variables, they spring into existence when they are first assigned to.  For "
"example, if ``x`` is the instance of :class:`MyClass` created above, the "
"following piece of code will print the value ``16``, without leaving a "
"trace::"
msgstr ""
"*los atributos de datos* corresponden a \"variables de instancia\" en "
"Smalltalk y a \"miembros de datos\" en C ++. Los atributos de datos no "
"necesitan ser declarados; Al igual que las variables locales, surgen cuando "
"se les asigna por primera vez. Por ejemplo, si ``x`` es la instancia de :"
"class:`MyClass` creada anteriormente, el siguiente código imprimirá el valor "
"``16``, sin dejar rastro::"

#: ../Doc/tutorial/classes.rst:340
msgid ""
"The other kind of instance attribute reference is a *method*. A method is a "
"function that \"belongs to\" an object.  (In Python, the term method is not "
"unique to class instances: other object types can have methods as well.  For "
"example, list objects have methods called append, insert, remove, sort, and "
"so on. However, in the following discussion, we'll use the term method "
"exclusively to mean methods of class instance objects, unless explicitly "
"stated otherwise.)"
msgstr ""
"El otro tipo de referencia de atributo de instancia es un *método*. Un "
"método es una función que \"pertenece\" a un objeto. (En Python, el término "
"método no es exclusivo de las instancias de clase: otros tipos de objetos "
"también pueden tener métodos. Por ejemplo, los objetos de lista tienen "
"métodos llamados agregar, insertar, eliminar, ordenar, etc.) Sin embargo, en "
"la siguiente discusión, usaremos el término método exclusivamente para "
"significar métodos de objetos de instancia de clase, a menos que se indique "
"explícitamente lo contrario.)"

#: ../Doc/tutorial/classes.rst:349
msgid ""
"Valid method names of an instance object depend on its class.  By "
"definition, all attributes of a class that are function  objects define "
"corresponding methods of its instances.  So in our example, ``x.f`` is a "
"valid method reference, since ``MyClass.f`` is a function, but ``x.i`` is "
"not, since ``MyClass.i`` is not.  But ``x.f`` is not the same thing as "
"``MyClass.f`` --- it is a *method object*, not a function object."
msgstr ""
"Los nombres de método válidos de un objeto de instancia dependen de su "
"clase. Por definición, todos los atributos de una clase que son objetos de "
"función definen los métodos correspondientes de sus instancias. Entonces, en "
"nuestro ejemplo, ``x.f`` es una referencia de método válida, ya que "
"``MyClass.f`` es una función, pero ``x.i`` no lo es, ya que ``MyClass.i`` no "
"lo es. Pero ``x.f`` no es lo mismo que ``MyClass.f`` --- es un *objeto de "
"método*, no un objeto de función."

#: ../Doc/tutorial/classes.rst:360
msgid "Method Objects"
msgstr "Método de Objetos"

#: ../Doc/tutorial/classes.rst:362
msgid "Usually, a method is called right after it is bound::"
msgstr "Por lo general, se llama a un método justo después de unirse:"

#: ../Doc/tutorial/classes.rst:366
msgid ""
"In the :class:`MyClass` example, this will return the string ``'hello "
"world'``. However, it is not necessary to call a method right away: ``x.f`` "
"is a method object, and can be stored away and called at a later time.  For "
"example::"
msgstr ""
"En el ejemplo :class:`MyClass`, esto devolverá la cadena ``'hello world'``. "
"Sin embargo, no es necesario llamar a un método de inmediato: ``x.f`` es un "
"objeto de método y se puede almacenar y llamar más adelante. Por ejemplo::"

#: ../Doc/tutorial/classes.rst:374
msgid "will continue to print ``hello world`` until the end of time."
msgstr "continuará imprimiendo ``hola mundo`` hasta el final de los tiempos."

#: ../Doc/tutorial/classes.rst:376
msgid ""
"What exactly happens when a method is called?  You may have noticed that ``x."
"f()`` was called without an argument above, even though the function "
"definition for :meth:`f` specified an argument.  What happened to the "
"argument? Surely Python raises an exception when a function that requires an "
"argument is called without any --- even if the argument isn't actually "
"used..."
msgstr ""
"¿Qué sucede exactamente cuando se llama a un método? Es posible que haya "
"notado que ``x.f()`` fue invocado sin un argumento anterior, a pesar de que "
"la definición de la función para :meth:`f` especificó un argumento. ¿Qué "
"pasó con la discusión? Seguramente Python genera una excepción cuando se "
"llama a una función que requiere un argumento sin ninguna --- incluso si el "
"argumento no se usa realmente..."

#: ../Doc/tutorial/classes.rst:382
msgid ""
"Actually, you may have guessed the answer: the special thing about methods "
"is that the instance object is passed as the first argument of the "
"function.  In our example, the call ``x.f()`` is exactly equivalent to "
"``MyClass.f(x)``.  In general, calling a method with a list of *n* arguments "
"is equivalent to calling the corresponding function with an argument list "
"that is created by inserting the method's instance object before the first "
"argument."
msgstr ""
"En realidad, puede haber adivinado la respuesta: lo especial de los métodos "
"es que el objeto de instancia se pasa como el primer argumento de la "
"función. En nuestro ejemplo, la llamada ``x.f()`` es exactamente equivalente "
"a ``MyClass.f(x)``. En general, llamar a un método con una lista de *n* "
"argumentos es equivalente a llamar a la función correspondiente con una "
"lista de argumentos que se crea insertando el objeto de instancia del método "
"antes del primer argumento."

#: ../Doc/tutorial/classes.rst:389
msgid ""
"If you still don't understand how methods work, a look at the implementation "
"can perhaps clarify matters.  When a non-data attribute of an instance is "
"referenced, the instance's class is searched.  If the name denotes a valid "
"class attribute that is a function object, a method object is created by "
"packing (pointers to) the instance object and the function object just found "
"together in an abstract object: this is the method object.  When the method "
"object is called with an argument list, a new argument list is constructed "
"from the instance object and the argument list, and the function object is "
"called with this new argument list."
msgstr ""
"Si aún no comprende cómo funcionan los métodos, una mirada a la "
"implementación quizás pueda aclarar las cosas. Cuando se hace referencia a "
"un atributo sin datos de una instancia, se busca en la clase de la "
"instancia. Si el nombre denota un atributo de clase válido que es un objeto "
"de función, se crea un objeto de método empaquetando (apuntando a) el objeto "
"de instancia y el objeto de función que se encuentran juntos en un objeto "
"abstracto: este es el objeto de método. Cuando se llama al objeto de método "
"con una lista de argumentos, se construye una nueva lista de argumentos a "
"partir del objeto de instancia y la lista de argumentos, y se llama al "
"objeto de función con esta nueva lista de argumentos."

#: ../Doc/tutorial/classes.rst:403
msgid "Class and Instance Variables"
msgstr "Variables de Clase e Instancia"

#: ../Doc/tutorial/classes.rst:405
msgid ""
"Generally speaking, instance variables are for data unique to each instance "
"and class variables are for attributes and methods shared by all instances "
"of the class::"
msgstr ""
"En términos generales, las variables de instancia son para datos únicos de "
"cada instancia y las variables de clase son para atributos y métodos "
"compartidos por todas las instancias de la clase::"

#: ../Doc/tutorial/classes.rst:427
msgid ""
"As discussed in :ref:`tut-object`, shared data can have possibly surprising "
"effects with involving :term:`mutable` objects such as lists and "
"dictionaries. For example, the *tricks* list in the following code should "
"not be used as a class variable because just a single list would be shared "
"by all *Dog* instances::"
msgstr ""
"Como se discutió en :ref:`tut-object`, los datos compartidos pueden tener "
"efectos posiblemente sorprendentes al involucrar :term:`mutable`objetos como "
"listas y diccionarios. Por ejemplo, la lista *trucos* en el siguiente código "
"no debe usarse como una variable de clase porque todas las instancias *Dog* "
"compartirían una sola lista::"

#: ../Doc/tutorial/classes.rst:450
msgid "Correct design of the class should use an instance variable instead::"
msgstr ""
"El diseño correcto de la clase debería usar una variable de instancia en su "
"lugar::"

#: ../Doc/tutorial/classes.rst:474
msgid "Random Remarks"
msgstr "Observaciones Aleatorias"

#: ../Doc/tutorial/classes.rst:478
msgid ""
"Data attributes override method attributes with the same name; to avoid "
"accidental name conflicts, which may cause hard-to-find bugs in large "
"programs, it is wise to use some kind of convention that minimizes the "
"chance of conflicts.  Possible conventions include capitalizing method "
"names, prefixing data attribute names with a small unique string (perhaps "
"just an underscore), or using verbs for methods and nouns for data "
"attributes."
msgstr ""
"Los atributos de datos anulan los atributos del método con el mismo nombre; "
"Para evitar conflictos de nombres accidentales, que pueden causar errores "
"difíciles de encontrar en programas grandes, es aconsejable utilizar algún "
"tipo de convención que minimice la posibilidad de conflictos. Las "
"convenciones posibles incluyen el uso de mayúsculas en los nombres de los "
"métodos, el prefijo de los nombres de los atributos de datos con una pequeña "
"cadena única (quizás solo un guión bajo) o el uso de verbos para métodos y "
"sustantivos para los atributos de datos."

#: ../Doc/tutorial/classes.rst:485
msgid ""
"Data attributes may be referenced by methods as well as by ordinary users "
"(\"clients\") of an object.  In other words, classes are not usable to "
"implement pure abstract data types.  In fact, nothing in Python makes it "
"possible to enforce data hiding --- it is all based upon convention.  (On "
"the other hand, the Python implementation, written in C, can completely hide "
"implementation details and control access to an object if necessary; this "
"can be used by extensions to Python written in C.)"
msgstr ""
"Los atributos de datos pueden ser referenciados por métodos, así como por "
"usuarios comunes (\"clientes\") de un objeto. En otras palabras, las clases "
"no son utilizables para implementar tipos de datos abstractos puros. De "
"hecho, nada en Python hace posible forzar la ocultación de datos, todo se "
"basa en la convención. (Por otro lado, la implementación de Python, escrita "
"en C, puede ocultar completamente los detalles de la implementación y "
"controlar el acceso a un objeto si es necesario; esto puede ser usado por "
"extensiones a Python escritas en C.)"

#: ../Doc/tutorial/classes.rst:493
msgid ""
"Clients should use data attributes with care --- clients may mess up "
"invariants maintained by the methods by stamping on their data attributes.  "
"Note that clients may add data attributes of their own to an instance object "
"without affecting the validity of the methods, as long as name conflicts are "
"avoided --- again, a naming convention can save a lot of headaches here."
msgstr ""
"Los clientes deben usar los atributos de los datos con cuidado --- los "
"clientes pueden estropear los invariantes que mantienen los métodos al "
"estampar sus atributos de datos. Tenga en cuenta que los clientes pueden "
"agregar sus propios atributos de datos a un objeto de instancia sin afectar "
"la validez de los métodos, siempre que se eviten los conflictos de nombres "
"--- nuevamente, una convención de nomenclatura puede ahorrar muchos dolores "
"de cabeza aquí."

#: ../Doc/tutorial/classes.rst:499
msgid ""
"There is no shorthand for referencing data attributes (or other methods!) "
"from within methods.  I find that this actually increases the readability of "
"methods: there is no chance of confusing local variables and instance "
"variables when glancing through a method."
msgstr ""
"No hay una forma abreviada para hacer referencia a atributos de datos (u "
"otros métodos) desde dentro de los métodos. Me parece que esto realmente "
"aumenta la legibilidad de los métodos: no hay posibilidad de confundir las "
"variables locales y las variables de instancia cuando se analiza un método."

#: ../Doc/tutorial/classes.rst:504
msgid ""
"Often, the first argument of a method is called ``self``.  This is nothing "
"more than a convention: the name ``self`` has absolutely no special meaning "
"to Python.  Note, however, that by not following the convention your code "
"may be less readable to other Python programmers, and it is also conceivable "
"that a *class browser* program might be written that relies upon such a "
"convention."
msgstr ""
"A menudo, el primer argumento de un método se llama ``self``. Esto no es más "
"que una convención: el nombre ``self`` no tiene absolutamente ningún "
"significado especial para Python. Sin embargo, tenga en cuenta que al no "
"seguir la convención, su código puede ser menos legible para otros "
"programadores de Python, y también es concebible que se pueda escribir un "
"programa *class browser* que se base en dicha convención."

#: ../Doc/tutorial/classes.rst:510
msgid ""
"Any function object that is a class attribute defines a method for instances "
"of that class.  It is not necessary that the function definition is "
"textually enclosed in the class definition: assigning a function object to a "
"local variable in the class is also ok.  For example::"
msgstr ""
"Cualquier objeto de función que sea un atributo de clase define un método "
"para instancias de esa clase. No es necesario que la definición de la "
"función esté encerrada textualmente en la definición de la clase: también "
"está bien asignar un objeto de función a una variable local en la clase. Por "
"ejemplo::"

#: ../Doc/tutorial/classes.rst:527
msgid ""
"Now ``f``, ``g`` and ``h`` are all attributes of class :class:`C` that refer "
"to function objects, and consequently they are all methods of instances of :"
"class:`C` --- ``h`` being exactly equivalent to ``g``.  Note that this "
"practice usually only serves to confuse the reader of a program."
msgstr ""
"Ahora ``f``, ``g`` y ``h`` son todos atributos de clase :class:`C` que se "
"refieren a objetos de función, y en consecuencia son todos métodos de "
"instancias de clase :class:`C` --- ``h`` es exactamente equivalente a ``g``. "
"Tenga en cuenta que esta práctica generalmente solo sirve para confundir al "
"lector de un programa."

#: ../Doc/tutorial/classes.rst:532
msgid ""
"Methods may call other methods by using method attributes of the ``self`` "
"argument::"
msgstr ""
"Los métodos pueden llamar a otros métodos mediante el uso de atributos de "
"método del argumento ``self``::"

#: ../Doc/tutorial/classes.rst:546
msgid ""
"Methods may reference global names in the same way as ordinary functions.  "
"The global scope associated with a method is the module containing its "
"definition.  (A class is never used as a global scope.)  While one rarely "
"encounters a good reason for using global data in a method, there are many "
"legitimate uses of the global scope: for one thing, functions and modules "
"imported into the global scope can be used by methods, as well as functions "
"and classes defined in it.  Usually, the class containing the method is "
"itself defined in this global scope, and in the next section we'll find some "
"good reasons why a method would want to reference its own class."
msgstr ""
"Los métodos pueden hacer referencia a nombres globales de la misma manera "
"que las funciones ordinarias. El alcance global asociado con un método es el "
"módulo que contiene su definición. (Una clase nunca se usa como un alcance "
"global). Si bien uno rara vez encuentra una buena razón para usar datos "
"globales en un método, existen muchos usos legítimos del alcance global: por "
"un lado, las funciones y los módulos importados en el alcance global pueden "
"ser utilizado por métodos, así como funciones y clases definidas en él. Por "
"lo general, la clase que contiene el método se define en este ámbito global, "
"y en la siguiente sección encontraremos algunas buenas razones por las "
"cuales un método querría hacer referencia a su propia clase."

#: ../Doc/tutorial/classes.rst:556
msgid ""
"Each value is an object, and therefore has a *class* (also called its "
"*type*). It is stored as ``object.__class__``."
msgstr ""
"Cada valor es un objeto y, por lo tanto, tiene una *clase* (también llamada "
"su *tipo*). Se almacena como ``objeto.__ clase__``."

#: ../Doc/tutorial/classes.rst:563
msgid "Inheritance"
msgstr "Herencia"

#: ../Doc/tutorial/classes.rst:565
msgid ""
"Of course, a language feature would not be worthy of the name \"class\" "
"without supporting inheritance.  The syntax for a derived class definition "
"looks like this::"
msgstr ""
"Por supuesto, una característica del lenguaje no sería digna del nombre "
"\"clase\" sin admitir la herencia. La sintaxis para una definición de clase "
"derivada se ve así::"

#: ../Doc/tutorial/classes.rst:576
msgid ""
"The name :class:`BaseClassName` must be defined in a scope containing the "
"derived class definition.  In place of a base class name, other arbitrary "
"expressions are also allowed.  This can be useful, for example, when the "
"base class is defined in another module::"
msgstr ""
"El nombre :class:`BaseClassName` debe definirse en un ámbito que contenga la "
"definición de clase derivada. En lugar de un nombre de clase base, también "
"se permiten otras expresiones arbitrarias. Esto puede ser útil, por ejemplo, "
"cuando la clase base se define en otro módulo::"

#: ../Doc/tutorial/classes.rst:583
msgid ""
"Execution of a derived class definition proceeds the same as for a base "
"class. When the class object is constructed, the base class is remembered.  "
"This is used for resolving attribute references: if a requested attribute is "
"not found in the class, the search proceeds to look in the base class.  This "
"rule is applied recursively if the base class itself is derived from some "
"other class."
msgstr ""
"La ejecución de una definición de clase derivada procede igual que para una "
"clase base. Cuando se construye el objeto de clase, se recuerda la clase "
"base. Esto se utiliza para resolver referencias de atributos: si no se "
"encuentra un atributo solicitado en la clase, la búsqueda continúa buscando "
"en la clase base. Esta regla se aplica de forma recursiva si la clase base "
"en sí misma se deriva de alguna otra clase."

#: ../Doc/tutorial/classes.rst:589
msgid ""
"There's nothing special about instantiation of derived classes: "
"``DerivedClassName()`` creates a new instance of the class.  Method "
"references are resolved as follows: the corresponding class attribute is "
"searched, descending down the chain of base classes if necessary, and the "
"method reference is valid if this yields a function object."
msgstr ""
"No hay nada especial en la creación de instancias de clases derivadas: "
"``DerivedClassName()`` crea una nueva instancia de la clase. Las referencias "
"de método se resuelven de la siguiente manera: se busca el atributo de clase "
"correspondiente, descendiendo por la cadena de clases base si es necesario, "
"y la referencia de método es válida si esto produce un objeto de función."

#: ../Doc/tutorial/classes.rst:595
msgid ""
"Derived classes may override methods of their base classes.  Because methods "
"have no special privileges when calling other methods of the same object, a "
"method of a base class that calls another method defined in the same base "
"class may end up calling a method of a derived class that overrides it.  "
"(For C++ programmers: all methods in Python are effectively ``virtual``.)"
msgstr ""
"Las clases derivadas pueden anular los métodos de sus clases base. Debido a "
"que los métodos no tienen privilegios especiales al llamar a otros métodos "
"del mismo objeto, un método de una clase base que llama a otro método "
"definido en la misma clase base puede terminar llamando a un método de una "
"clase derivada que lo anula. (Para programadores de C ++: todos los métodos "
"en Python son efectivamente ``virtuales``)."

#: ../Doc/tutorial/classes.rst:601
msgid ""
"An overriding method in a derived class may in fact want to extend rather "
"than simply replace the base class method of the same name. There is a "
"simple way to call the base class method directly: just call ``BaseClassName."
"methodname(self, arguments)``.  This is occasionally useful to clients as "
"well.  (Note that this only works if the base class is accessible as "
"``BaseClassName`` in the global scope.)"
msgstr ""
"De hecho, un método de anulación en una clase derivada puede querer extender "
"en lugar de simplemente reemplazar el método de la clase base del mismo "
"nombre. Hay una manera simple de llamar directamente al método de la clase "
"base: simplemente llame a ``BaseClassName.methodname(self, argumentos)``. En "
"ocasiones, esto también es útil para los clientes. (Tenga en cuenta que esto "
"solo funciona si la clase base es accesible como ``BaseClassName`` en el "
"ámbito global)."

#: ../Doc/tutorial/classes.rst:608
msgid "Python has two built-in functions that work with inheritance:"
msgstr "Python tiene dos funciones integradas que funcionan con herencia:"

#: ../Doc/tutorial/classes.rst:610
msgid ""
"Use :func:`isinstance` to check an instance's type: ``isinstance(obj, int)`` "
"will be ``True`` only if ``obj.__class__`` is :class:`int` or some class "
"derived from :class:`int`."
msgstr ""
"Use :func:`isinstance` para verificar el tipo de una instancia mecanografía: "
"``isinstance(obj, int)`` will be ``True`` only if ``obj.__ class__`` is: "
"class:`int` o alguna clase derivada de :class:`int`."

#: ../Doc/tutorial/classes.rst:614
msgid ""
"Use :func:`issubclass` to check class inheritance: ``issubclass(bool, int)`` "
"is ``True`` since :class:`bool` is a subclass of :class:`int`.  However, "
"``issubclass(float, int)`` is ``False`` since :class:`float` is not a "
"subclass of :class:`int`."
msgstr ""
"Use :func:`issubclass` para verificar la herencia de la clase: "
"``issubclass(bool, int)`` is ``True`` since: class:`bool` es una subclase "
"de :class:`int`. Sin embargo, ``issubclass(float, int)`` es ``False`` ya "
"que :class:`float` no es una subclase de :class:`int`."

#: ../Doc/tutorial/classes.rst:624
msgid "Multiple Inheritance"
msgstr "Herencia Múltiple"

#: ../Doc/tutorial/classes.rst:626
msgid ""
"Python supports a form of multiple inheritance as well.  A class definition "
"with multiple base classes looks like this::"
msgstr ""
"Python también admite una forma de herencia múltiple. Una definición de "
"clase con múltiples clases base se ve así::"

#: ../Doc/tutorial/classes.rst:636
msgid ""
"For most purposes, in the simplest cases, you can think of the search for "
"attributes inherited from a parent class as depth-first, left-to-right, not "
"searching twice in the same class where there is an overlap in the "
"hierarchy. Thus, if an attribute is not found in :class:`DerivedClassName`, "
"it is searched for in :class:`Base1`, then (recursively) in the base classes "
"of :class:`Base1`, and if it was not found there, it was searched for in :"
"class:`Base2`, and so on."
msgstr ""
"Para la mayoría de los propósitos, en los casos más simples, puede pensar en "
"la búsqueda de atributos heredados de una clase principal como profundidad "
"primero, de izquierda a derecha, sin buscar dos veces en la misma clase "
"donde hay una superposición en la jerarquía. Por lo tanto, si no se "
"encuentra un atributo en :class:`DerivedClassName`, se busca en :class:"
"`Base1`, luego (recursivamente) en las clases base de :class:`Base1`, y si "
"no se encontró allí, se buscó en :class:`Base2`, y así sucesivamente."

#: ../Doc/tutorial/classes.rst:643
msgid ""
"In fact, it is slightly more complex than that; the method resolution order "
"changes dynamically to support cooperative calls to :func:`super`.  This "
"approach is known in some other multiple-inheritance languages as call-next-"
"method and is more powerful than the super call found in single-inheritance "
"languages."
msgstr ""
"De hecho, es un poco más complejo que eso; el orden de resolución del método "
"cambia dinámicamente para admitir llamadas cooperativas a :func:`super`. "
"Este enfoque se conoce en algunos otros lenguajes de herencia múltiple como "
"método de llamada siguiente y es más poderoso que la súper llamada que se "
"encuentra en los lenguajes de herencia única."

#: ../Doc/tutorial/classes.rst:649
msgid ""
"Dynamic ordering is necessary because all cases of multiple inheritance "
"exhibit one or more diamond relationships (where at least one of the parent "
"classes can be accessed through multiple paths from the bottommost class).  "
"For example, all classes inherit from :class:`object`, so any case of "
"multiple inheritance provides more than one path to reach :class:`object`.  "
"To keep the base classes from being accessed more than once, the dynamic "
"algorithm linearizes the search order in a way that preserves the left-to-"
"right ordering specified in each class, that calls each parent only once, "
"and that is monotonic (meaning that a class can be subclassed without "
"affecting the precedence order of its parents). Taken together, these "
"properties make it possible to design reliable and extensible classes with "
"multiple inheritance.  For more detail, see https://www.python.org/download/"
"releases/2.3/mro/."
msgstr ""
"El ordenamiento dinámico es necesario porque todos los casos de herencia "
"múltiple exhiben una o más relaciones de diamante (donde se puede acceder al "
"menos a una de las clases principales a través de múltiples rutas desde la "
"clase más inferior). Por ejemplo, todas las clases heredan de :class:"
"`object`, por lo que cualquier caso de herencia múltiple proporciona más de "
"una ruta para llegar a :class:`object`. Para evitar que se acceda a las "
"clases base más de una vez, el algoritmo dinámico linealiza el orden de "
"búsqueda de una manera que conserva el orden de izquierda a derecha "
"especificado en cada clase, que llama a cada padre solo una vez, y eso es "
"monótono (lo que significa que una clase puede subclasificarse sin afectar "
"el orden de precedencia de sus padres). En conjunto, estas propiedades "
"permiten diseñar clases confiables y extensibles con herencia múltiple. Para "
"obtener más detalles, consulte https://www.python.org/download/releases/2.3/"
"mro/ (DEPRECATED)."

#: ../Doc/tutorial/classes.rst:666
msgid "Private Variables"
msgstr "Variables Privadas"

#: ../Doc/tutorial/classes.rst:668
msgid ""
"\"Private\" instance variables that cannot be accessed except from inside an "
"object don't exist in Python.  However, there is a convention that is "
"followed by most Python code: a name prefixed with an underscore (e.g. "
"``_spam``) should be treated as a non-public part of the API (whether it is "
"a function, a method or a data member).  It should be considered an "
"implementation detail and subject to change without notice."
msgstr ""
"Las variables de instancia \"privadas\" a las que no se puede acceder, "
"excepto desde el interior de un objeto, no existen en Python. Sin embargo, "
"hay una convención que es seguida por la mayoría del código de Python: un "
"nombre prefijado con un guión bajo (por ejemplo, ``_spam``) debe tratarse "
"como una parte no pública de la API (ya sea una función, un método o un "
"miembro de datos). Debe considerarse un detalle de implementación y estar "
"sujeto a cambios sin previo aviso."

#: ../Doc/tutorial/classes.rst:678
msgid ""
"Since there is a valid use-case for class-private members (namely to avoid "
"name clashes of names with names defined by subclasses), there is limited "
"support for such a mechanism, called :dfn:`name mangling`.  Any identifier "
"of the form ``__spam`` (at least two leading underscores, at most one "
"trailing underscore) is textually replaced with ``_classname__spam``, where "
"``classname`` is the current class name with leading underscore(s) "
"stripped.  This mangling is done without regard to the syntactic position of "
"the identifier, as long as it occurs within the definition of a class."
msgstr ""
"Dado que existe un caso de uso válido para miembros privados de la clase (es "
"decir, para evitar conflictos de nombres con nombres definidos por "
"subclases), existe un soporte limitado para dicho mecanismo, llamado: dfn: "
"`cambio de nombre`. Cualquier identificador de la forma ``__spam`` (al menos "
"dos guiones bajos iniciales, como máximo un guión bajo final) se reemplaza "
"textualmente con ``_classname__spam``, donde ``classname`` es el nombre de "
"la clase actual con guiones bajos. despojado Este cambio se realiza sin "
"tener en cuenta la posición sintáctica del identificador, siempre que ocurra "
"dentro de la definición de una clase."

#: ../Doc/tutorial/classes.rst:687
msgid ""
"Name mangling is helpful for letting subclasses override methods without "
"breaking intraclass method calls.  For example::"
msgstr ""
"El cambio de nombre es útil para permitir que las subclases anulen los "
"métodos sin interrumpir las llamadas a métodos intraclase. Por ejemplo::"

#: ../Doc/tutorial/classes.rst:709
msgid ""
"The above example would work even if ``MappingSubclass`` were to introduce a "
"``__update`` identifier since it is replaced with ``_Mapping__update`` in "
"the ``Mapping`` class  and ``_MappingSubclass__update`` in the "
"``MappingSubclass`` class respectively."
msgstr ""
"El ejemplo anterior funcionaría incluso si ``MappingSubclass`` introdujera "
"un identificador de ``__update`` ya que se reemplaza con "
"``_Mapping__update`` en la clase ``Mapping`` y ``_MappingSubclass__update`` "
"en el ``MappingSubclass`` clase respectivamente."

#: ../Doc/tutorial/classes.rst:714
msgid ""
"Note that the mangling rules are designed mostly to avoid accidents; it "
"still is possible to access or modify a variable that is considered "
"private.  This can even be useful in special circumstances, such as in the "
"debugger."
msgstr ""
"Tenga en cuenta que las reglas de destrucción están diseñadas principalmente "
"para evitar accidentes; aún es posible acceder o modificar una variable que "
"se considera privada. Esto incluso puede ser útil en circunstancias "
"especiales, como en el depurador."

#: ../Doc/tutorial/classes.rst:718
msgid ""
"Notice that code passed to ``exec()`` or ``eval()`` does not consider the "
"classname of the invoking class to be the current class; this is similar to "
"the effect of the ``global`` statement, the effect of which is likewise "
"restricted to code that is byte-compiled together.  The same restriction "
"applies to ``getattr()``, ``setattr()`` and ``delattr()``, as well as when "
"referencing ``__dict__`` directly."
msgstr ""
"Observe que el código pasado a ``exec()`` o ``eval()`` no considera que el "
"nombre de clase de la clase que invoca sea la clase actual; Esto es similar "
"al efecto de la declaración ``global``, cuyo efecto también está restringido "
"al código que se compila en bytes. La misma restricción se aplica a `` "
"getattr()``, ``setattr()`` y ``delattr()``, así como cuando se hace "
"referencia a ``__dict__`` directamente."

#: ../Doc/tutorial/classes.rst:729
msgid "Odds and Ends"
msgstr "Materiales Sobrantes"

#: ../Doc/tutorial/classes.rst:731
msgid ""
"Sometimes it is useful to have a data type similar to the Pascal \"record\" "
"or C \"struct\", bundling together a few named data items.  An empty class "
"definition will do nicely::"
msgstr ""
"A veces es útil tener un tipo de datos similar al \"registro\" de Pascal o "
"la \"estructura\" de C, agrupando algunos elementos de datos con nombre. Una "
"definición de clase vacía funcionará bien::"

#: ../Doc/tutorial/classes.rst:745
msgid ""
"A piece of Python code that expects a particular abstract data type can "
"often be passed a class that emulates the methods of that data type "
"instead.  For instance, if you have a function that formats some data from a "
"file object, you can define a class with methods :meth:`read` and :meth:`!"
"readline` that get the data from a string buffer instead, and pass it as an "
"argument."
msgstr ""
"Una parte del código de Python que espera un tipo de datos abstracto en "
"particular a menudo se puede pasar a una clase que emula los métodos de ese "
"tipo de datos. Por ejemplo, si tiene una función que formatea algunos datos "
"de un objeto de archivo, puede definir una clase con los métodos :meth:"
"`read` y :meth:`!readline` que obtienen los datos de un búffer de cadena y "
"pasan como argumento."

#: ../Doc/tutorial/classes.rst:756
msgid ""
"Instance method objects have attributes, too: ``m.__self__`` is the instance "
"object with the method :meth:`m`, and ``m.__func__`` is the function object "
"corresponding to the method."
msgstr ""
"Los objetos del método de instancia también tienen atributos: ``m.__ "
"self__`` es el objeto de instancia con el método :meth:`m`, y``m.__ func__`` "
"es el objeto de función correspondiente al método."

#: ../Doc/tutorial/classes.rst:764
msgid "Iterators"
msgstr "Iteradores"

#: ../Doc/tutorial/classes.rst:766
msgid ""
"By now you have probably noticed that most container objects can be looped "
"over using a :keyword:`for` statement::"
msgstr ""
"A estas alturas, probablemente haya notado que la mayoría de los objetos de "
"contenedor se pueden recorrer usando una declaración :keyword:`for`::"

#: ../Doc/tutorial/classes.rst:780
msgid ""
"This style of access is clear, concise, and convenient.  The use of "
"iterators pervades and unifies Python.  Behind the scenes, the :keyword:"
"`for` statement calls :func:`iter` on the container object.  The function "
"returns an iterator object that defines the method :meth:`~iterator."
"__next__` which accesses elements in the container one at a time.  When "
"there are no more elements, :meth:`~iterator.__next__` raises a :exc:"
"`StopIteration` exception which tells the :keyword:`!for` loop to "
"terminate.  You can call the :meth:`~iterator.__next__` method using the :"
"func:`next` built-in function; this example shows how it all works::"
msgstr ""
"Este estilo de acceso es claro, conciso y conveniente. El uso de iteradores "
"impregna y unifica Python. Detrás de escena, la declaración :keyword:`for` "
"invoca :func:`iter` en el objeto contenedor. La función devuelve un objeto "
"iterador que define el método :meth:`~iterator.__ next__` que accede a los "
"elementos en el contenedor de uno en uno. Cuando no hay más elementos, :meth:"
"`~iterator.__ next__` genera una excepción :exc:`StopIteration` que le dice "
"al bucle :keyword:`!for` que finalice. Puede llamar al método :meth:"
"`~iterator.__ next__` utilizando la función incorporada :func:`next`; Este "
"ejemplo muestra cómo funciona todo::"

#: ../Doc/tutorial/classes.rst:805
msgid ""
"Having seen the mechanics behind the iterator protocol, it is easy to add "
"iterator behavior to your classes.  Define an :meth:`__iter__` method which "
"returns an object with a :meth:`~iterator.__next__` method.  If the class "
"defines :meth:`__next__`, then :meth:`__iter__` can just return ``self``::"
msgstr ""
"Habiendo visto la mecánica detrás del protocolo iterador, es fácil agregar "
"el comportamiento iterador a sus clases. Defina un método :meth:`__iter__` "
"que devuelva un objeto con un método :meth:`~iterator.__ next__`. Si la "
"clase define :meth:`__next__`, entonces :meth:`__iter__` puede devolver `` "
"self``::"

#: ../Doc/tutorial/classes.rst:842
msgid "Generators"
msgstr "Generadores"

#: ../Doc/tutorial/classes.rst:844
msgid ""
":term:`Generator`\\s are a simple and powerful tool for creating iterators.  "
"They are written like regular functions but use the :keyword:`yield` "
"statement whenever they want to return data.  Each time :func:`next` is "
"called on it, the generator resumes where it left off (it remembers all the "
"data values and which statement was last executed).  An example shows that "
"generators can be trivially easy to create::"
msgstr ""
":term:`Generator`\\s es una herramienta simple y poderosa para crear "
"iteradores. Se escriben como funciones regulares, pero usan la palabra "
"clave: palabra clave :keyword:`yield` siempre que quieran devolver datos. "
"Cada vez: se llama a :func:`next`, el generador reanuda donde lo dejó "
"(recuerda todos los valores de datos y qué declaración se ejecutó por última "
"vez). Un ejemplo muestra que los generadores pueden ser trivialmente fáciles "
"de crear::"

#: ../Doc/tutorial/classes.rst:865
msgid ""
"Anything that can be done with generators can also be done with class-based "
"iterators as described in the previous section.  What makes generators so "
"compact is that the :meth:`__iter__` and :meth:`~generator.__next__` methods "
"are created automatically."
msgstr ""
"Todo lo que se puede hacer con generadores también se puede hacer con "
"iteradores basados en clases como se describe en la sección anterior. Lo que "
"hace que los generadores sean tan compactos es que los métodos :meth:"
"`__iter__` y :meth:`~generator.__ next__` se crean automáticamente."

#: ../Doc/tutorial/classes.rst:870
msgid ""
"Another key feature is that the local variables and execution state are "
"automatically saved between calls.  This made the function easier to write "
"and much more clear than an approach using instance variables like ``self."
"index`` and ``self.data``."
msgstr ""
"Otra característica clave es que las variables locales y el estado de "
"ejecución se guardan automáticamente entre llamadas. Esto hizo que la "
"función fuera más fácil de escribir y mucho más clara que un enfoque que usa "
"variables de instancia como ``self.index`` y ``self.data``."

#: ../Doc/tutorial/classes.rst:875
msgid ""
"In addition to automatic method creation and saving program state, when "
"generators terminate, they automatically raise :exc:`StopIteration`. In "
"combination, these features make it easy to create iterators with no more "
"effort than writing a regular function."
msgstr ""
"Además de la creación automática de métodos y el estado del programa de "
"guardado, cuando los generadores terminan, automáticamente generan :exc:"
"`StopIteration`. En combinación, estas características facilitan la creación "
"de iteradores sin más esfuerzo que escribir una función regular."

#: ../Doc/tutorial/classes.rst:884
msgid "Generator Expressions"
msgstr "Generador de Expresiones"

#: ../Doc/tutorial/classes.rst:886
msgid ""
"Some simple generators can be coded succinctly as expressions using a syntax "
"similar to list comprehensions but with parentheses instead of square "
"brackets. These expressions are designed for situations where the generator "
"is used right away by an enclosing function.  Generator expressions are more "
"compact but less versatile than full generator definitions and tend to be "
"more memory friendly than equivalent list comprehensions."
msgstr ""
"Algunos generadores simples pueden codificarse sucintamente como expresiones "
"utilizando una sintaxis similar a las comprensiones de listas pero con "
"paréntesis en lugar de corchetes. Estas expresiones están diseñadas para "
"situaciones en las que el generador se usa de inmediato por una función de "
"cierre. Las expresiones generadoras son más compactas pero menos versátiles "
"que las definiciones completas de generador y tienden a ser más amigables "
"con la memoria que las comprensiones de listas equivalentes."

#: ../Doc/tutorial/classes.rst:893
msgid "Examples::"
msgstr "Ejemplos::"

#: ../Doc/tutorial/classes.rst:917
msgid "Footnotes"
msgstr "Notas a Pié de Página"

#: ../Doc/tutorial/classes.rst:918
msgid ""
"Except for one thing.  Module objects have a secret read-only attribute "
"called :attr:`~object.__dict__` which returns the dictionary used to "
"implement the module's namespace; the name :attr:`~object.__dict__` is an "
"attribute but not a global name. Obviously, using this violates the "
"abstraction of namespace implementation, and should be restricted to things "
"like post-mortem debuggers."
msgstr ""
"Salvo por una cosa. Los objetos del módulo tienen un atributo secreto de "
"solo lectura llamado :attr:`~object.__dict__` que devuelve el diccionario "
"utilizado para implementar el espacio de nombres del módulo; el nombre :attr:"
"`~object.__dict__` es un atributo pero no un nombre global. Obviamente, usar "
"esto viola la abstracción de la implementación del espacio de nombres, y "
"debería restringirse a cosas como depuradores post-mortem."
