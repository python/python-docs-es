# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-03-10 22:21+0100\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: es_ES\n"
"X-Generator: Poedit 2.3\n"

#: ../Doc/tutorial/errors.rst:5
msgid "Errors and Exceptions"
msgstr "Errores y Excepciones"

#: ../Doc/tutorial/errors.rst:7
msgid ""
"Until now error messages haven't been more than mentioned, but if you have "
"tried out the examples you have probably seen some.  There are (at least) "
"two distinguishable kinds of errors: *syntax errors* and *exceptions*."
msgstr ""
"Hasta ahora, los mensajes de error no han sido más que mencionados, pero si "
"ha probado los ejemplos, probablemente haya visto algunos. Hay (al menos) "
"dos tipos distinguibles de errores: *errores de sintaxis* y *excepciones*."

#: ../Doc/tutorial/errors.rst:15
msgid "Syntax Errors"
msgstr "Errores de Sintaxis"

#: ../Doc/tutorial/errors.rst:17
msgid ""
"Syntax errors, also known as parsing errors, are perhaps the most common "
"kind of complaint you get while you are still learning Python::"
msgstr ""
"Los errores de sintaxis, también conocidos como errores de análisis, son "
"quizás el tipo de queja más común que recibe mientras aún está aprendiendo "
"Python::"

#: ../Doc/tutorial/errors.rst:26
msgid ""
"The parser repeats the offending line and displays a little 'arrow' pointing "
"at the earliest point in the line where the error was detected.  The error "
"is caused by (or at least detected at) the token *preceding* the arrow: in "
"the example, the error is detected at the function :func:`print`, since a "
"colon (``':'``) is missing before it.  File name and line number are printed "
"so you know where to look in case the input came from a script."
msgstr ""
"El analizador repite la línea ofensiva y muestra una pequeña 'flecha' "
"apuntando al primer punto de la línea donde se detectó el error. El error es "
"causado por (o al menos detectado en) el token *que precede* a la flecha: en "
"el ejemplo, el error se detecta en la función :func:`print`, ya que dos "
"puntos (``':'``) le falta antes. El nombre del archivo y el número de línea "
"se imprimen para que sepa dónde buscar en caso de que la entrada provenga de "
"un script."

#: ../Doc/tutorial/errors.rst:37
msgid "Exceptions"
msgstr "Excepciones"

#: ../Doc/tutorial/errors.rst:39
msgid ""
"Even if a statement or expression is syntactically correct, it may cause an "
"error when an attempt is made to execute it. Errors detected during "
"execution are called *exceptions* and are not unconditionally fatal: you "
"will soon learn how to handle them in Python programs.  Most exceptions are "
"not handled by programs, however, and result in error messages as shown "
"here::"
msgstr ""
"Incluso si una declaración o expresión es sintácticamente correcta, puede "
"causar un error cuando se intenta ejecutarla. Los errores detectados durante "
"la ejecución se denominan *excepciones* y no son incondicionalmente fatales: "
"pronto aprenderá cómo manejarlos en los programas Python. Sin embargo, la "
"mayoría de las excepciones no son manejadas por los programas y dan como "
"resultado mensajes de error como se muestra aquí::"

#: ../Doc/tutorial/errors.rst:58
msgid ""
"The last line of the error message indicates what happened. Exceptions come "
"in different types, and the type is printed as part of the message: the "
"types in the example are :exc:`ZeroDivisionError`, :exc:`NameError` and :exc:"
"`TypeError`. The string printed as the exception type is the name of the "
"built-in exception that occurred.  This is true for all built-in exceptions, "
"but need not be true for user-defined exceptions (although it is a useful "
"convention). Standard exception names are built-in identifiers (not reserved "
"keywords)."
msgstr ""
"La última línea del mensaje de error indica lo que sucedió. Las excepciones "
"vienen en diferentes tipos, y el tipo se imprime como parte del mensaje: los "
"tipos en el ejemplo son :exc:`ZeroDivisionError`, :exc:`NameError` y :exc:"
"`TypeError`. La cadena impresa como el tipo de excepción es el nombre de la "
"excepción incorporada que ocurrió. Esto es cierto para todas las excepciones "
"integradas, pero no necesariamente para las excepciones definidas por el "
"usuario (aunque es una convención útil). Los nombres de excepción estándar "
"son identificadores integrados (no palabras clave reservadas)."

#: ../Doc/tutorial/errors.rst:66
msgid ""
"The rest of the line provides detail based on the type of exception and what "
"caused it."
msgstr ""
"El resto de la línea proporciona detalles basados en el tipo de excepción y "
"la causa."

#: ../Doc/tutorial/errors.rst:69
msgid ""
"The preceding part of the error message shows the context where the "
"exception happened, in the form of a stack traceback. In general it contains "
"a stack traceback listing source lines; however, it will not display lines "
"read from standard input."
msgstr ""
"La parte anterior del mensaje de error muestra el contexto en el que ocurrió "
"la excepción, en forma de 'stack traceback. En general, contiene un "
"seguimiento de pila que enumera líneas de origen; sin embargo, no mostrará "
"las líneas leídas de la entrada estándar."

#: ../Doc/tutorial/errors.rst:74
msgid ""
":ref:`bltin-exceptions` lists the built-in exceptions and their meanings."
msgstr ""
":ref:`bltin-exceptions` enumera las excepciones incorporadas y sus "
"significados."

#: ../Doc/tutorial/errors.rst:80
msgid "Handling Exceptions"
msgstr "Manejando Excepciones"

#: ../Doc/tutorial/errors.rst:82
msgid ""
"It is possible to write programs that handle selected exceptions. Look at "
"the following example, which asks the user for input until a valid integer "
"has been entered, but allows the user to interrupt the program (using :kbd:"
"`Control-C` or whatever the operating system supports); note that a user-"
"generated interruption is signalled by raising the :exc:`KeyboardInterrupt` "
"exception. ::"
msgstr ""
"Es posible escribir programas que manejen excepciones seleccionadas. Mire el "
"siguiente ejemplo, que le pide al usuario que ingrese hasta que se haya "
"ingresado un número entero válido, pero le permite al usuario interrumpir el "
"programa (usando :kbd:`Control-C` o lo que sea compatible con el sistema "
"operativo); tenga en cuenta que una interrupción generada por el usuario se "
"señala mediante la excepción :exc:`KeyboardInterrupt`.::"

#: ../Doc/tutorial/errors.rst:96
msgid "The :keyword:`try` statement works as follows."
msgstr "La declaración :keyword:`try` funciona de la siguiente manera."

#: ../Doc/tutorial/errors.rst:98
msgid ""
"First, the *try clause* (the statement(s) between the :keyword:`try` and :"
"keyword:`except` keywords) is executed."
msgstr ""
"Primero, se ejecuta la *cláusula try* (la(s) declaración(es) entre :keyword:"
"`try` y :keyword:`except` keywords) se ejecuta."

#: ../Doc/tutorial/errors.rst:101
msgid ""
"If no exception occurs, the *except clause* is skipped and execution of the :"
"keyword:`try` statement is finished."
msgstr ""
"Si no se produce una excepción, se omite la cláusula *except* y se finaliza "
"la ejecución de la palabra clave :keyword:`try`."

#: ../Doc/tutorial/errors.rst:104
msgid ""
"If an exception occurs during execution of the try clause, the rest of the "
"clause is skipped.  Then if its type matches the exception named after the :"
"keyword:`except` keyword, the except clause is executed, and then execution "
"continues after the :keyword:`try` statement."
msgstr ""
"Si se produce una excepción durante la ejecución de la cláusula try, se "
"omite el resto de la cláusula. Luego, si su tipo coincide con la excepción "
"nombrada después de la palabra clave :keyword:`except`, se ejecuta la "
"cláusula except, y luego la ejecución continúa después de la declaración :"
"keyword:`try`."

#: ../Doc/tutorial/errors.rst:109
msgid ""
"If an exception occurs which does not match the exception named in the "
"except clause, it is passed on to outer :keyword:`try` statements; if no "
"handler is found, it is an *unhandled exception* and execution stops with a "
"message as shown above."
msgstr ""
"Si se produce una excepción que no coincide con la excepción mencionada en "
"la cláusula except, se pasa a la palabra externa :keyword:`try`; Si no se "
"encuentra ningún controlador, es una *excepción no controlada* y la "
"ejecución se detiene con un mensaje como se muestra arriba."

#: ../Doc/tutorial/errors.rst:114
msgid ""
"A :keyword:`try` statement may have more than one except clause, to specify "
"handlers for different exceptions.  At most one handler will be executed. "
"Handlers only handle exceptions that occur in the corresponding try clause, "
"not in other handlers of the same :keyword:`!try` statement.  An except "
"clause may name multiple exceptions as a parenthesized tuple, for example::"
msgstr ""
"La declaración :keyword:`try` puede tener más de una cláusula excepto, para "
"especificar controladores para diferentes excepciones. Como máximo se "
"ejecutará un controlador. Los manejadores solo manejan excepciones que "
"ocurren en la cláusula try correspondiente, no en otros manejadores de la "
"misma: palabra clave: instrucción `!try`. Una cláusula except puede nombrar "
"múltiples excepciones como una tupla entre paréntesis, por ejemplo::"

#: ../Doc/tutorial/errors.rst:123
msgid ""
"A class in an :keyword:`except` clause is compatible with an exception if it "
"is the same class or a base class thereof (but not the other way around --- "
"an except clause listing a derived class is not compatible with a base "
"class).  For example, the following code will print B, C, D in that order::"
msgstr ""
"Una clase en una cláusula :keyword:`except` es compatible con una excepción "
"si es la misma clase o una clase base de la misma (pero no al revés --- una "
"cláusula except que enumera una clase derivada no es compatible con una base "
"clase). Por ejemplo, el siguiente código imprimirá B, C, D en ese orden::"

#: ../Doc/tutorial/errors.rst:147
msgid ""
"Note that if the except clauses were reversed (with ``except B`` first), it "
"would have printed B, B, B --- the first matching except clause is triggered."
msgstr ""
"Tenga en cuenta que si las cláusulas except se invierten (con ``excepto B`` "
"primero), se habría impreso B, B, B --- se activa la primera cláusula "
"excepto coincidencia."

#: ../Doc/tutorial/errors.rst:150
msgid ""
"The last except clause may omit the exception name(s), to serve as a "
"wildcard. Use this with extreme caution, since it is easy to mask a real "
"programming error in this way!  It can also be used to print an error "
"message and then re-raise the exception (allowing a caller to handle the "
"exception as well)::"
msgstr ""
"La última cláusula excepto puede omitir los nombres de excepción, para "
"servir como comodín. Use esto con extrema precaución, ya que es fácil "
"enmascarar un error de programación real de esta manera. También se puede "
"usar para imprimir un mensaje de error y luego volver a generar la excepción "
"(permitiendo que la persona que llama también maneje la excepción)::"

#: ../Doc/tutorial/errors.rst:169
msgid ""
"The :keyword:`try` ... :keyword:`except` statement has an optional *else "
"clause*, which, when present, must follow all except clauses.  It is useful "
"for code that must be executed if the try clause does not raise an "
"exception.  For example::"
msgstr ""
"La declaración :keyword:`try` ... :keyword:`except` tiene una *cláusula "
"else* opcional, que, cuando está presente, debe seguir todas las cláusulas "
"excepto. Es útil para el código que debe ejecutarse si la cláusula try no "
"genera una excepción. Por ejemplo::"

#: ../Doc/tutorial/errors.rst:183
msgid ""
"The use of the :keyword:`!else` clause is better than adding additional code "
"to the :keyword:`try` clause because it avoids accidentally catching an "
"exception that wasn't raised by the code being protected by the :keyword:`!"
"try` ... :keyword:`!except` statement."
msgstr ""
"El uso de la cláusula :keyword:`!else` es mejor que agregar código adicional "
"a la cláusula :keyword:`try` porque evita la captura accidental de una "
"excepción que no fue provocada por el código protegido por la declaración :"
"keyword:`! try` ... :keyword:`!except`."

#: ../Doc/tutorial/errors.rst:188
msgid ""
"When an exception occurs, it may have an associated value, also known as the "
"exception's *argument*. The presence and type of the argument depend on the "
"exception type."
msgstr ""
"Cuando ocurre una excepción, puede tener un valor asociado, también conocido "
"como *argumento* de la excepción. La presencia y el tipo del argumento "
"dependen del tipo de excepción."

#: ../Doc/tutorial/errors.rst:192
msgid ""
"The except clause may specify a variable after the exception name.  The "
"variable is bound to an exception instance with the arguments stored in "
"``instance.args``.  For convenience, the exception instance defines :meth:"
"`__str__` so the arguments can be printed directly without having to "
"reference ``.args``.  One may also instantiate an exception first before "
"raising it and add any attributes to it as desired. ::"
msgstr ""
"La cláusula except puede especificar una variable después del nombre de la "
"excepción. La variable está vinculada a una instancia de excepción con los "
"argumentos almacenados en ``instancia.args``. Por conveniencia, la instancia "
"de excepción define :meth:`__str__` para que los argumentos se puedan "
"imprimir directamente sin tener que hacer referencia a ``.args``. También se "
"puede crear una instancia primero antes de generarla y agregarle cualquier "
"atributo como se desee. ::"

#: ../Doc/tutorial/errors.rst:216
msgid ""
"If an exception has arguments, they are printed as the last part ('detail') "
"of the message for unhandled exceptions."
msgstr ""
"Si una excepción tiene argumentos, se imprimen como la última parte "
"('detalle') del mensaje para excepciones no controladas."

#: ../Doc/tutorial/errors.rst:219
msgid ""
"Exception handlers don't just handle exceptions if they occur immediately in "
"the try clause, but also if they occur inside functions that are called "
"(even indirectly) in the try clause. For example::"
msgstr ""
"Los manejadores de excepciones no solo manejan excepciones si ocurren "
"inmediatamente en la cláusula try, sino también si ocurren dentro de "
"funciones que se llaman (incluso indirectamente) en la cláusula try. Por "
"ejemplo::"

#: ../Doc/tutorial/errors.rst:237
msgid "Raising Exceptions"
msgstr "Elevar Excepciones"

#: ../Doc/tutorial/errors.rst:239
msgid ""
"The :keyword:`raise` statement allows the programmer to force a specified "
"exception to occur. For example::"
msgstr ""
"La declaración :keyword:`raise` le permite al programador forzar que ocurra "
"una excepción específica. Por ejemplo::"

#: ../Doc/tutorial/errors.rst:247
msgid ""
"The sole argument to :keyword:`raise` indicates the exception to be raised. "
"This must be either an exception instance or an exception class (a class "
"that derives from :class:`Exception`).  If an exception class is passed, it "
"will be implicitly instantiated by calling its constructor with no "
"arguments::"
msgstr ""
"El único argumento para :keyword:`raise` indica la excepción que se "
"generará. Debe ser una instancia de excepción o una clase de excepción (una "
"clase que se deriva de :class:`exception`). Si se pasa una clase de "
"excepción, se instanciará implícitamente llamando a su constructor sin "
"argumentos::"

#: ../Doc/tutorial/errors.rst:254
msgid ""
"If you need to determine whether an exception was raised but don't intend to "
"handle it, a simpler form of the :keyword:`raise` statement allows you to re-"
"raise the exception::"
msgstr ""
"Si necesita determinar si se generó una excepción pero no tiene la intención "
"de manejarla, una forma más simple de la palabra clave :keyword:`raise` le "
"permite volver a plantear la excepción::"

#: ../Doc/tutorial/errors.rst:273
msgid "User-defined Exceptions"
msgstr "Excepciones Definidas por el Usuario"

#: ../Doc/tutorial/errors.rst:275
msgid ""
"Programs may name their own exceptions by creating a new exception class "
"(see :ref:`tut-classes` for more about Python classes).  Exceptions should "
"typically be derived from the :exc:`Exception` class, either directly or "
"indirectly."
msgstr ""
"Los programas pueden nombrar sus propias excepciones creando una nueva clase "
"de excepción (ver :ref:`tut-classes` para más información sobre las clases "
"de Python). Las excepciones deben derivarse típicamente de la clase :exc:"
"`exception`, ya sea directa o indirectamente."

#: ../Doc/tutorial/errors.rst:279
msgid ""
"Exception classes can be defined which do anything any other class can do, "
"but are usually kept simple, often only offering a number of attributes that "
"allow information about the error to be extracted by handlers for the "
"exception.  When creating a module that can raise several distinct errors, a "
"common practice is to create a base class for exceptions defined by that "
"module, and subclass that to create specific exception classes for different "
"error conditions::"
msgstr ""
"Se pueden definir clases de excepción que hacen cualquier cosa que cualquier "
"otra clase pueda hacer, pero generalmente se mantienen simples, a menudo "
"solo ofrecen una serie de atributos que permiten que los manejadores "
"extraigan información sobre el error para la excepción. Al crear un módulo "
"que puede generar varios errores distintos, una práctica común es crear una "
"clase base para las excepciones definidas por ese módulo, y una subclase "
"para crear clases de excepción específicas para diferentes condiciones de "
"error::"

#: ../Doc/tutorial/errors.rst:317
msgid ""
"Most exceptions are defined with names that end in \"Error\", similar to the "
"naming of the standard exceptions."
msgstr ""
"La mayoría de las excepciones se definen con nombres que terminan en \"Error"
"\", similar al nombre de las excepciones estándar."

#: ../Doc/tutorial/errors.rst:320
msgid ""
"Many standard modules define their own exceptions to report errors that may "
"occur in functions they define.  More information on classes is presented in "
"chapter :ref:`tut-classes`."
msgstr ""
"Muchos módulos estándar definen sus propias excepciones para informar "
"errores que pueden ocurrir en las funciones que definen. Se presenta más "
"información sobre las clases en el capítulo :ref:`tut-classes`."

#: ../Doc/tutorial/errors.rst:328
msgid "Defining Clean-up Actions"
msgstr "Definición de Acciones de Limpieza"

#: ../Doc/tutorial/errors.rst:330
msgid ""
"The :keyword:`try` statement has another optional clause which is intended "
"to define clean-up actions that must be executed under all circumstances.  "
"For example::"
msgstr ""
"La declaración :keyword:`try` tiene otra cláusula opcional que está "
"destinada a definir acciones de limpieza que deben ejecutarse en todas las "
"circunstancias. Por ejemplo::"

#: ../Doc/tutorial/errors.rst:344
msgid ""
"A *finally clause* is always executed before leaving the :keyword:`try` "
"statement, whether an exception has occurred or not. When an exception has "
"occurred in the :keyword:`!try` clause and has not been handled by an :"
"keyword:`except` clause (or it has occurred in an :keyword:`!except` or :"
"keyword:`!else` clause), it is re-raised after the :keyword:`finally` clause "
"has been executed.  The :keyword:`!finally` clause is also executed \"on the "
"way out\" when any other clause of the :keyword:`!try` statement is left via "
"a :keyword:`break`, :keyword:`continue` or :keyword:`return` statement.  A "
"more complicated example::"
msgstr ""
"Siempre se ejecuta una *cláusula* antes de abandonar la palabra clave :"
"keyword:`try`, independientemente de si se ha producido una excepción o no. "
"Cuando se ha producido una excepción en la cláusula :keyword:`! Try` y no ha "
"sido manejada por una cláusula :keyword:`except` (o ha ocurrido en una :"
"keyword:`!except` o en una cláusula :keyword:`!else`), se vuelve a generar "
"después de que se haya ejecutado la palabra clave :keyword:`!finally`. La "
"cláusula :keyword:`!finally` también se ejecuta\" al salir \"cuando se deja "
"cualquier otra cláusula de la declaración :keyword:`!try` a través de :"
"keyword:`break`, :keyword:`continue` o :keyword:`return`. Un ejemplo más "
"complicado::"

#: ../Doc/tutorial/errors.rst:377
msgid ""
"As you can see, the :keyword:`finally` clause is executed in any event.  "
"The :exc:`TypeError` raised by dividing two strings is not handled by the :"
"keyword:`except` clause and therefore re-raised after the :keyword:`!"
"finally` clause has been executed."
msgstr ""
"Como puede ver, la cláusula :keyword:`finally` se ejecuta en cualquier caso. "
"La cláusula: exc:`TypeError` generada al dividir dos cadenas no se maneja "
"con la cláusula :keyword:`except` y, por lo tanto, se vuelve a generar "
"después de que se haya ejecutado la cláusula :keyword:`!finally`."

#: ../Doc/tutorial/errors.rst:382
msgid ""
"In real world applications, the :keyword:`finally` clause is useful for "
"releasing external resources (such as files or network connections), "
"regardless of whether the use of the resource was successful."
msgstr ""
"En aplicaciones del mundo real, la cláusula :keyword:`finally` es útil para "
"liberar recursos externos (como archivos o conexiones de red), "
"independientemente de si el uso del recurso fue exitoso."

#: ../Doc/tutorial/errors.rst:390
msgid "Predefined Clean-up Actions"
msgstr "Acciones de Limpieza Predefinidas"

#: ../Doc/tutorial/errors.rst:392
msgid ""
"Some objects define standard clean-up actions to be undertaken when the "
"object is no longer needed, regardless of whether or not the operation using "
"the object succeeded or failed. Look at the following example, which tries "
"to open a file and print its contents to the screen. ::"
msgstr ""
"Algunos objetos definen acciones de limpieza estándar que se llevarán a cabo "
"cuando el objeto ya no sea necesario, independientemente de si la operación "
"con el objeto tuvo éxito o no. Mire el siguiente ejemplo, que intenta abrir "
"un archivo e imprimir su contenido en la pantalla. :: "

#: ../Doc/tutorial/errors.rst:400
msgid ""
"The problem with this code is that it leaves the file open for an "
"indeterminate amount of time after this part of the code has finished "
"executing. This is not an issue in simple scripts, but can be a problem for "
"larger applications. The :keyword:`with` statement allows objects like files "
"to be used in a way that ensures they are always cleaned up promptly and "
"correctly. ::"
msgstr ""
"El problema con este código es que deja el archivo abierto durante un "
"período de tiempo indeterminado una vez que esta parte del código ha "
"terminado de ejecutarse. Esto no es un problema en scripts simples, pero "
"puede ser un problema para aplicaciones más grandes. La declaración :keyword:"
"`with` permite que objetos como archivos se usen de una manera que garantice "
"que siempre se limpien de manera rápida y correcta. :: "

#: ../Doc/tutorial/errors.rst:410
msgid ""
"After the statement is executed, the file *f* is always closed, even if a "
"problem was encountered while processing the lines. Objects which, like "
"files, provide predefined clean-up actions will indicate this in their "
"documentation."
msgstr ""
"Después de ejecutar la instrucción, el archivo *f* siempre se cierra, "
"incluso si se encontró un problema al procesar las líneas. Los objetos que, "
"como los archivos, proporcionan acciones de limpieza predefinidas lo "
"indicarán en su documentación."
