# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-03-11 10:24+0100\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: Adrian Santos <martinezsantosadrian@gmail.com>\n"
"Language-Team: \n"
"Language: es_ES\n"
"X-Generator: Poedit 2.3\n"

#: ../Doc/glossary.rst:5
msgid "Glossary"
msgstr ""

#: ../Doc/glossary.rst:10
msgid "``>>>``"
msgstr ""

#: ../Doc/glossary.rst:12
msgid ""
"The default Python prompt of the interactive shell.  Often seen for code "
"examples which can be executed interactively in the interpreter."
msgstr ""

#: ../Doc/glossary.rst:14
msgid "``...``"
msgstr ""

#: ../Doc/glossary.rst:16
msgid ""
"The default Python prompt of the interactive shell when entering code for an "
"indented code block, when within a pair of matching left and right "
"delimiters (parentheses, square brackets, curly braces or triple quotes), or "
"after specifying a decorator."
msgstr ""

#: ../Doc/glossary.rst:20
msgid "2to3"
msgstr ""

#: ../Doc/glossary.rst:22
msgid ""
"A tool that tries to convert Python 2.x code to Python 3.x code by handling "
"most of the incompatibilities which can be detected by parsing the source "
"and traversing the parse tree."
msgstr ""

#: ../Doc/glossary.rst:26
msgid ""
"2to3 is available in the standard library as :mod:`lib2to3`; a standalone "
"entry point is provided as :file:`Tools/scripts/2to3`.  See :ref:`2to3-"
"reference`."
msgstr ""

#: ../Doc/glossary.rst:29
msgid "abstract base class"
msgstr ""

#: ../Doc/glossary.rst:31
msgid ""
"Abstract base classes complement :term:`duck-typing` by providing a way to "
"define interfaces when other techniques like :func:`hasattr` would be clumsy "
"or subtly wrong (for example with :ref:`magic methods <special-lookup>`).  "
"ABCs introduce virtual subclasses, which are classes that don't inherit from "
"a class but are still recognized by :func:`isinstance` and :func:"
"`issubclass`; see the :mod:`abc` module documentation.  Python comes with "
"many built-in ABCs for data structures (in the :mod:`collections.abc` "
"module), numbers (in the :mod:`numbers` module), streams (in the :mod:`io` "
"module), import finders and loaders (in the :mod:`importlib.abc` module).  "
"You can create your own ABCs with the :mod:`abc` module."
msgstr ""

#: ../Doc/glossary.rst:42
msgid "annotation"
msgstr ""

#: ../Doc/glossary.rst:44
msgid ""
"A label associated with a variable, a class attribute or a function "
"parameter or return value, used by convention as a :term:`type hint`."
msgstr ""

#: ../Doc/glossary.rst:48
msgid ""
"Annotations of local variables cannot be accessed at runtime, but "
"annotations of global variables, class attributes, and functions are stored "
"in the :attr:`__annotations__` special attribute of modules, classes, and "
"functions, respectively."
msgstr ""

#: ../Doc/glossary.rst:54
msgid ""
"See :term:`variable annotation`, :term:`function annotation`, :pep:`484` "
"and :pep:`526`, which describe this functionality."
msgstr ""

#: ../Doc/glossary.rst:56
#, fuzzy
msgid "argument"
msgstr ""
"Los métodos pueden llamar a otros métodos mediante el uso de atributos de "
"método del argumento ``self``::"

#: ../Doc/glossary.rst:58
msgid ""
"A value passed to a :term:`function` (or :term:`method`) when calling the "
"function.  There are two kinds of argument:"
msgstr ""

#: ../Doc/glossary.rst:61
msgid ""
":dfn:`keyword argument`: an argument preceded by an identifier (e.g. "
"``name=``) in a function call or passed as a value in a dictionary preceded "
"by ``**``.  For example, ``3`` and ``5`` are both keyword arguments in the "
"following calls to :func:`complex`::"
msgstr ""

#: ../Doc/glossary.rst:69
msgid ""
":dfn:`positional argument`: an argument that is not a keyword argument. "
"Positional arguments can appear at the beginning of an argument list and/or "
"be passed as elements of an :term:`iterable` preceded by ``*``. For example, "
"``3`` and ``5`` are both positional arguments in the following calls::"
msgstr ""

#: ../Doc/glossary.rst:78
msgid ""
"Arguments are assigned to the named local variables in a function body. See "
"the :ref:`calls` section for the rules governing this assignment. "
"Syntactically, any expression can be used to represent an argument; the "
"evaluated value is assigned to the local variable."
msgstr ""

#: ../Doc/glossary.rst:83
msgid ""
"See also the :term:`parameter` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"and :pep:`362`."
msgstr ""

#: ../Doc/glossary.rst:86
msgid "asynchronous context manager"
msgstr ""

#: ../Doc/glossary.rst:88
msgid ""
"An object which controls the environment seen in an :keyword:`async with` "
"statement by defining :meth:`__aenter__` and :meth:`__aexit__` methods.  "
"Introduced by :pep:`492`."
msgstr ""

#: ../Doc/glossary.rst:91
#, fuzzy
msgid "asynchronous generator"
msgstr "Generador de Expresiones"

#: ../Doc/glossary.rst:93
msgid ""
"A function which returns an :term:`asynchronous generator iterator`.  It "
"looks like a coroutine function defined with :keyword:`async def` except "
"that it contains :keyword:`yield` expressions for producing a series of "
"values usable in an :keyword:`async for` loop."
msgstr ""

#: ../Doc/glossary.rst:98
msgid ""
"Usually refers to an asynchronous generator function, but may refer to an "
"*asynchronous generator iterator* in some contexts.  In cases where the "
"intended meaning isn't clear, using the full terms avoids ambiguity."
msgstr ""

#: ../Doc/glossary.rst:102
msgid ""
"An asynchronous generator function may contain :keyword:`await` expressions "
"as well as :keyword:`async for`, and :keyword:`async with` statements."
msgstr ""

#: ../Doc/glossary.rst:105
#, fuzzy
msgid "asynchronous generator iterator"
msgstr "Generador de Expresiones"

#: ../Doc/glossary.rst:107
msgid "An object created by a :term:`asynchronous generator` function."
msgstr ""

#: ../Doc/glossary.rst:109
msgid ""
"This is an :term:`asynchronous iterator` which when called using the :meth:"
"`__anext__` method returns an awaitable object which will execute the body "
"of the asynchronous generator function until the next :keyword:`yield` "
"expression."
msgstr ""

#: ../Doc/glossary.rst:114
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *asynchronous generator iterator* effectively resumes "
"with another awaitable returned by :meth:`__anext__`, it picks up where it "
"left off.  See :pep:`492` and :pep:`525`."
msgstr ""

#: ../Doc/glossary.rst:119
msgid "asynchronous iterable"
msgstr ""

#: ../Doc/glossary.rst:121
msgid ""
"An object, that can be used in an :keyword:`async for` statement. Must "
"return an :term:`asynchronous iterator` from its :meth:`__aiter__` method.  "
"Introduced by :pep:`492`."
msgstr ""

#: ../Doc/glossary.rst:124
msgid "asynchronous iterator"
msgstr ""

#: ../Doc/glossary.rst:126
msgid ""
"An object that implements the :meth:`__aiter__` and :meth:`__anext__` "
"methods.  ``__anext__`` must return an :term:`awaitable` object. :keyword:"
"`async for` resolves the awaitables returned by an asynchronous iterator's :"
"meth:`__anext__` method until it raises a :exc:`StopAsyncIteration` "
"exception.  Introduced by :pep:`492`."
msgstr ""

#: ../Doc/glossary.rst:131
#, fuzzy
msgid "attribute"
msgstr ""
"Los objetos de clase admiten dos tipos de operaciones: referencias de "
"atributos e instanciación."

#: ../Doc/glossary.rst:133
msgid ""
"A value associated with an object which is referenced by name using dotted "
"expressions.  For example, if an object *o* has an attribute *a* it would be "
"referenced as *o.a*."
msgstr ""

#: ../Doc/glossary.rst:136
msgid "awaitable"
msgstr ""

#: ../Doc/glossary.rst:138
msgid ""
"An object that can be used in an :keyword:`await` expression.  Can be a :"
"term:`coroutine` or an object with an :meth:`__await__` method. See also :"
"pep:`492`."
msgstr ""

#: ../Doc/glossary.rst:141
msgid "BDFL"
msgstr ""

#: ../Doc/glossary.rst:143
msgid ""
"Benevolent Dictator For Life, a.k.a. `Guido van Rossum <https://gvanrossum."
"github.io/>`_, Python's creator."
msgstr ""

#: ../Doc/glossary.rst:145
#, fuzzy
msgid "binary file"
msgstr "El Archivo de Inicio Interactivo"

#: ../Doc/glossary.rst:147
msgid ""
"A :term:`file object` able to read and write :term:`bytes-like objects "
"<bytes-like object>`. Examples of binary files are files opened in binary "
"mode (``'rb'``, ``'wb'`` or ``'rb+'``), :data:`sys.stdin.buffer`, :data:`sys."
"stdout.buffer`, and instances of :class:`io.BytesIO` and :class:`gzip."
"GzipFile`."
msgstr ""

#: ../Doc/glossary.rst:154
msgid ""
"See also :term:`text file` for a file object able to read and write :class:"
"`str` objects."
msgstr ""

#: ../Doc/glossary.rst:156
msgid "bytes-like object"
msgstr ""

#: ../Doc/glossary.rst:158
msgid ""
"An object that supports the :ref:`bufferobjects` and can export a C-:term:"
"`contiguous` buffer. This includes all :class:`bytes`, :class:`bytearray`, "
"and :class:`array.array` objects, as well as many common :class:`memoryview` "
"objects.  Bytes-like objects can be used for various operations that work "
"with binary data; these include compression, saving to a binary file, and "
"sending over a socket."
msgstr ""

#: ../Doc/glossary.rst:165
msgid ""
"Some operations need the binary data to be mutable.  The documentation often "
"refers to these as \"read-write bytes-like objects\".  Example mutable "
"buffer objects include :class:`bytearray` and a :class:`memoryview` of a :"
"class:`bytearray`. Other operations require the binary data to be stored in "
"immutable objects (\"read-only bytes-like objects\"); examples of these "
"include :class:`bytes` and a :class:`memoryview` of a :class:`bytes` object."
msgstr ""

#: ../Doc/glossary.rst:173
msgid "bytecode"
msgstr ""

#: ../Doc/glossary.rst:175
msgid ""
"Python source code is compiled into bytecode, the internal representation of "
"a Python program in the CPython interpreter.  The bytecode is also cached in "
"``.pyc`` files so that executing the same file is faster the second time "
"(recompilation from source to bytecode can be avoided).  This \"intermediate "
"language\" is said to run on a :term:`virtual machine` that executes the "
"machine code corresponding to each bytecode. Do note that bytecodes are not "
"expected to work between different Python virtual machines, nor to be stable "
"between Python releases."
msgstr ""

#: ../Doc/glossary.rst:185
msgid ""
"A list of bytecode instructions can be found in the documentation for :ref:"
"`the dis module <bytecodes>`."
msgstr ""

#: ../Doc/glossary.rst:187
#, fuzzy
msgid "class"
msgstr "Sintaxis de Definición de Clase"

#: ../Doc/glossary.rst:189
msgid ""
"A template for creating user-defined objects. Class definitions normally "
"contain method definitions which operate on instances of the class."
msgstr ""

#: ../Doc/glossary.rst:192
#, fuzzy
msgid "class variable"
msgstr ""
"Como se discutió en :ref:`tut-object`, los datos compartidos pueden tener "
"efectos posiblemente sorprendentes al involucrar :term:`mutable`objetos como "
"listas y diccionarios. Por ejemplo, la lista *trucos* en el siguiente código "
"no debe usarse como una variable de clase porque todas las instancias *Dog* "
"compartirían una sola lista::"

#: ../Doc/glossary.rst:194
msgid ""
"A variable defined in a class and intended to be modified only at class "
"level (i.e., not in an instance of the class)."
msgstr ""

#: ../Doc/glossary.rst:196
msgid "coercion"
msgstr ""

#: ../Doc/glossary.rst:198
msgid ""
"The implicit conversion of an instance of one type to another during an "
"operation which involves two arguments of the same type.  For example, "
"``int(3.15)`` converts the floating point number to the integer ``3``, but "
"in ``3+4.5``, each argument is of a different type (one int, one float), and "
"both must be converted to the same type before they can be added or it will "
"raise a :exc:`TypeError`.  Without coercion, all arguments of even "
"compatible types would have to be normalized to the same value by the "
"programmer, e.g., ``float(3)+4.5`` rather than just ``3+4.5``."
msgstr ""

#: ../Doc/glossary.rst:206
msgid "complex number"
msgstr ""

#: ../Doc/glossary.rst:208
msgid ""
"An extension of the familiar real number system in which all numbers are "
"expressed as a sum of a real part and an imaginary part.  Imaginary numbers "
"are real multiples of the imaginary unit (the square root of ``-1``), often "
"written ``i`` in mathematics or ``j`` in engineering.  Python has built-in "
"support for complex numbers, which are written with this latter notation; "
"the imaginary part is written with a ``j`` suffix, e.g., ``3+1j``.  To get "
"access to complex equivalents of the :mod:`math` module, use :mod:`cmath`.  "
"Use of complex numbers is a fairly advanced mathematical feature.  If you're "
"not aware of a need for them, it's almost certain you can safely ignore them."
msgstr ""

#: ../Doc/glossary.rst:218
msgid "context manager"
msgstr ""

#: ../Doc/glossary.rst:220
msgid ""
"An object which controls the environment seen in a :keyword:`with` statement "
"by defining :meth:`__enter__` and :meth:`__exit__` methods. See :pep:`343`."
msgstr ""

#: ../Doc/glossary.rst:223
msgid "contiguous"
msgstr ""

#: ../Doc/glossary.rst:227
msgid ""
"A buffer is considered contiguous exactly if it is either *C-contiguous* or "
"*Fortran contiguous*.  Zero-dimensional buffers are C and Fortran "
"contiguous.  In one-dimensional arrays, the items must be laid out in memory "
"next to each other, in order of increasing indexes starting from zero.  In "
"multidimensional C-contiguous arrays, the last index varies the fastest when "
"visiting items in order of memory address.  However, in Fortran contiguous "
"arrays, the first index varies the fastest."
msgstr ""

#: ../Doc/glossary.rst:235
msgid "coroutine"
msgstr ""

#: ../Doc/glossary.rst:237
msgid ""
"Coroutines is a more generalized form of subroutines. Subroutines are "
"entered at one point and exited at another point.  Coroutines can be "
"entered, exited, and resumed at many different points.  They can be "
"implemented with the :keyword:`async def` statement.  See also :pep:`492`."
msgstr ""

#: ../Doc/glossary.rst:242
msgid "coroutine function"
msgstr ""

#: ../Doc/glossary.rst:244
msgid ""
"A function which returns a :term:`coroutine` object.  A coroutine function "
"may be defined with the :keyword:`async def` statement, and may contain :"
"keyword:`await`, :keyword:`async for`, and :keyword:`async with` keywords.  "
"These were introduced by :pep:`492`."
msgstr ""

#: ../Doc/glossary.rst:249
msgid "CPython"
msgstr ""

#: ../Doc/glossary.rst:251
msgid ""
"The canonical implementation of the Python programming language, as "
"distributed on `python.org <https://www.python.org>`_.  The term \"CPython\" "
"is used when necessary to distinguish this implementation from others such "
"as Jython or IronPython."
msgstr ""

#: ../Doc/glossary.rst:255
msgid "decorator"
msgstr ""

#: ../Doc/glossary.rst:257
msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@wrapper`` syntax.  Common examples for "
"decorators are :func:`classmethod` and :func:`staticmethod`."
msgstr ""

#: ../Doc/glossary.rst:261
msgid ""
"The decorator syntax is merely syntactic sugar, the following two function "
"definitions are semantically equivalent::"
msgstr ""

#: ../Doc/glossary.rst:272
msgid ""
"The same concept exists for classes, but is less commonly used there.  See "
"the documentation for :ref:`function definitions <function>` and :ref:`class "
"definitions <class>` for more about decorators."
msgstr ""

#: ../Doc/glossary.rst:275
msgid "descriptor"
msgstr ""

#: ../Doc/glossary.rst:277
msgid ""
"Any object which defines the methods :meth:`__get__`, :meth:`__set__`, or :"
"meth:`__delete__`.  When a class attribute is a descriptor, its special "
"binding behavior is triggered upon attribute lookup.  Normally, using *a.b* "
"to get, set or delete an attribute looks up the object named *b* in the "
"class dictionary for *a*, but if *b* is a descriptor, the respective "
"descriptor method gets called.  Understanding descriptors is a key to a deep "
"understanding of Python because they are the basis for many features "
"including functions, methods, properties, class methods, static methods, and "
"reference to super classes."
msgstr ""

#: ../Doc/glossary.rst:287
msgid ""
"For more information about descriptors' methods, see :ref:`descriptors`."
msgstr ""

#: ../Doc/glossary.rst:288
#, fuzzy
msgid "dictionary"
msgstr ""
"Salvo por una cosa. Los objetos del módulo tienen un atributo secreto de "
"solo lectura llamado :attr:`~object.__dict__` que devuelve el diccionario "
"utilizado para implementar el espacio de nombres del módulo; el nombre :attr:"
"`~object.__dict__` es un atributo pero no un nombre global. Obviamente, usar "
"esto viola la abstracción de la implementación del espacio de nombres, y "
"debería restringirse a cosas como depuradores post-mortem."

#: ../Doc/glossary.rst:290
msgid ""
"An associative array, where arbitrary keys are mapped to values.  The keys "
"can be any object with :meth:`__hash__` and :meth:`__eq__` methods. Called a "
"hash in Perl."
msgstr ""

#: ../Doc/glossary.rst:293
msgid "dictionary view"
msgstr ""

#: ../Doc/glossary.rst:295
msgid ""
"The objects returned from :meth:`dict.keys`, :meth:`dict.values`, and :meth:"
"`dict.items` are called dictionary views. They provide a dynamic view on the "
"dictionary’s entries, which means that when the dictionary changes, the view "
"reflects these changes. To force the dictionary view to become a full list "
"use ``list(dictview)``.  See :ref:`dict-views`."
msgstr ""

#: ../Doc/glossary.rst:301
#, fuzzy
msgid "docstring"
msgstr ""
"entonces ``MyClass.i`` y ``MyClass.f`` son referencias de atributo válidas, "
"que devuelven un entero y un objeto de función, respectivamente. Los "
"atributos de clase también se pueden asignar a, por lo que puede cambiar el "
"valor de `` MyClass.i`` por asignación. :attr:`__doc__` también es un "
"atributo válido, que devuelve la cadena de documentación que pertenece a la "
"clase: ``\" Una clase de ejemplo simple \"``"

#: ../Doc/glossary.rst:303
msgid ""
"A string literal which appears as the first expression in a class, function "
"or module.  While ignored when the suite is executed, it is recognized by "
"the compiler and put into the :attr:`__doc__` attribute of the enclosing "
"class, function or module.  Since it is available via introspection, it is "
"the canonical place for documentation of the object."
msgstr ""

#: ../Doc/glossary.rst:309
msgid "duck-typing"
msgstr ""

#: ../Doc/glossary.rst:311
msgid ""
"A programming style which does not look at an object's type to determine if "
"it has the right interface; instead, the method or attribute is simply "
"called or used (\"If it looks like a duck and quacks like a duck, it must be "
"a duck.\")  By emphasizing interfaces rather than specific types, well-"
"designed code improves its flexibility by allowing polymorphic "
"substitution.  Duck-typing avoids tests using :func:`type` or :func:"
"`isinstance`.  (Note, however, that duck-typing can be complemented with :"
"term:`abstract base classes <abstract base class>`.)  Instead, it typically "
"employs :func:`hasattr` tests or :term:`EAFP` programming."
msgstr ""

#: ../Doc/glossary.rst:320
msgid "EAFP"
msgstr ""

#: ../Doc/glossary.rst:322
msgid ""
"Easier to ask for forgiveness than permission.  This common Python coding "
"style assumes the existence of valid keys or attributes and catches "
"exceptions if the assumption proves false.  This clean and fast style is "
"characterized by the presence of many :keyword:`try` and :keyword:`except` "
"statements.  The technique contrasts with the :term:`LBYL` style common to "
"many other languages such as C."
msgstr ""

#: ../Doc/glossary.rst:328
#, fuzzy
msgid "expression"
msgstr ""
"Incluso si una declaración o expresión es sintácticamente correcta, puede "
"causar un error cuando se intenta ejecutarla. Los errores detectados durante "
"la ejecución se denominan *excepciones* y no son incondicionalmente fatales: "
"pronto aprenderá cómo manejarlos en los programas Python. Sin embargo, la "
"mayoría de las excepciones no son manejadas por los programas y dan como "
"resultado mensajes de error como se muestra aquí::"

#: ../Doc/glossary.rst:330
msgid ""
"A piece of syntax which can be evaluated to some value.  In other words, an "
"expression is an accumulation of expression elements like literals, names, "
"attribute access, operators or function calls which all return a value.  In "
"contrast to many other languages, not all language constructs are "
"expressions.  There are also :term:`statement`\\s which cannot be used as "
"expressions, such as :keyword:`while`.  Assignments are also statements, not "
"expressions."
msgstr ""

#: ../Doc/glossary.rst:337
msgid "extension module"
msgstr ""

#: ../Doc/glossary.rst:339
msgid ""
"A module written in C or C++, using Python's C API to interact with the core "
"and with user code."
msgstr ""

#: ../Doc/glossary.rst:341
msgid "f-string"
msgstr ""

#: ../Doc/glossary.rst:343
msgid ""
"String literals prefixed with ``'f'`` or ``'F'`` are commonly called \"f-"
"strings\" which is short for :ref:`formatted string literals <f-strings>`.  "
"See also :pep:`498`."
msgstr ""

#: ../Doc/glossary.rst:346
#, fuzzy
msgid "file object"
msgstr ""
"Una parte del código de Python que espera un tipo de datos abstracto en "
"particular a menudo se puede pasar a una clase que emula los métodos de ese "
"tipo de datos. Por ejemplo, si tiene una función que formatea algunos datos "
"de un objeto de archivo, puede definir una clase con los métodos :meth:"
"`read` y :meth:`!readline` que obtienen los datos de un búffer de cadena y "
"pasan como argumento."

#: ../Doc/glossary.rst:348
msgid ""
"An object exposing a file-oriented API (with methods such as :meth:`read()` "
"or :meth:`write()`) to an underlying resource.  Depending on the way it was "
"created, a file object can mediate access to a real on-disk file or to "
"another type of storage or communication device (for example standard input/"
"output, in-memory buffers, sockets, pipes, etc.).  File objects are also "
"called :dfn:`file-like objects` or :dfn:`streams`."
msgstr ""

#: ../Doc/glossary.rst:356
msgid ""
"There are actually three categories of file objects: raw :term:`binary files "
"<binary file>`, buffered :term:`binary files <binary file>` and :term:`text "
"files <text file>`. Their interfaces are defined in the :mod:`io` module.  "
"The canonical way to create a file object is by using the :func:`open` "
"function."
msgstr ""

#: ../Doc/glossary.rst:361
msgid "file-like object"
msgstr ""

#: ../Doc/glossary.rst:363
msgid "A synonym for :term:`file object`."
msgstr ""

#: ../Doc/glossary.rst:364
msgid "finder"
msgstr ""

#: ../Doc/glossary.rst:366
msgid ""
"An object that tries to find the :term:`loader` for a module that is being "
"imported."
msgstr ""

#: ../Doc/glossary.rst:369
msgid ""
"Since Python 3.3, there are two types of finder: :term:`meta path finders "
"<meta path finder>` for use with :data:`sys.meta_path`, and :term:`path "
"entry finders <path entry finder>` for use with :data:`sys.path_hooks`."
msgstr ""

#: ../Doc/glossary.rst:373
msgid "See :pep:`302`, :pep:`420` and :pep:`451` for much more detail."
msgstr ""

#: ../Doc/glossary.rst:374
msgid "floor division"
msgstr ""

#: ../Doc/glossary.rst:376
msgid ""
"Mathematical division that rounds down to nearest integer.  The floor "
"division operator is ``//``.  For example, the expression ``11 // 4`` "
"evaluates to ``2`` in contrast to the ``2.75`` returned by float true "
"division.  Note that ``(-11) // 4`` is ``-3`` because that is ``-2.75`` "
"rounded *downward*. See :pep:`238`."
msgstr ""

#: ../Doc/glossary.rst:381
#, fuzzy
msgid "function"
msgstr ""
"El 'namespace' local para una función es creado cuando la función es "
"llamada, y borrado cuando la función devuelve o eleva una excepción que no "
"está manejada dentro de la función. (Realmente, olvidarse sería una mejor "
"manera de describir que sucede realmente. Por supuesto, las invocaciones "
"recursivas tienen cada una su propio 'namespace' local."

#: ../Doc/glossary.rst:383
msgid ""
"A series of statements which returns some value to a caller. It can also be "
"passed zero or more :term:`arguments <argument>` which may be used in the "
"execution of the body. See also :term:`parameter`, :term:`method`, and the :"
"ref:`function` section."
msgstr ""

#: ../Doc/glossary.rst:387
msgid "function annotation"
msgstr ""

#: ../Doc/glossary.rst:389
msgid "An :term:`annotation` of a function parameter or return value."
msgstr ""

#: ../Doc/glossary.rst:391
msgid ""
"Function annotations are usually used for :term:`type hints <type hint>`: "
"for example, this function is expected to take two :class:`int` arguments "
"and is also expected to have an :class:`int` return value::"
msgstr ""

#: ../Doc/glossary.rst:399
msgid "Function annotation syntax is explained in section :ref:`function`."
msgstr ""

#: ../Doc/glossary.rst:401
msgid ""
"See :term:`variable annotation` and :pep:`484`, which describe this "
"functionality."
msgstr ""

#: ../Doc/glossary.rst:403
#, fuzzy
msgid "__future__"
msgstr ""
"Un *namespace* es un mapeo desde nombres a objetos. La mayoría de los "
"'namespaces' estan actualmente implementados como diccionarios de Python, "
"pero eso normalmente no es perceptible de ningun modo (salvo por el "
"rendimiento), y pueden cambiar en el futuro. Ejemplos de 'namespaces' son: "
"el set de nombres incorporados (que contienen funciones como en :func:`abs`, "
"y nombres de excepción incorporados); los nombres globales en un módulo; y "
"los nombres locales en una llamada a una función. De cierto modo el set de "
"atributos de un objeto también forma un 'namespace'. Lo importante que debe "
"saber sobre los 'namespaces' es que no hay absolutamente ninguna relación "
"entre los nombres en diferentes 'namespaces'; por ejemplo, dos módulos "
"distintos pueden ambos definir una función ``maximize`` sin confusión --- "
"los usuarios de los módulos deben user el prefijo con el nombre del módulo."

#: ../Doc/glossary.rst:405
msgid ""
"A pseudo-module which programmers can use to enable new language features "
"which are not compatible with the current interpreter."
msgstr ""

#: ../Doc/glossary.rst:408
msgid ""
"By importing the :mod:`__future__` module and evaluating its variables, you "
"can see when a new feature was first added to the language and when it "
"becomes the default::"
msgstr ""

#: ../Doc/glossary.rst:415
msgid "garbage collection"
msgstr ""

#: ../Doc/glossary.rst:417
msgid ""
"The process of freeing memory when it is not used anymore.  Python performs "
"garbage collection via reference counting and a cyclic garbage collector "
"that is able to detect and break reference cycles.  The garbage collector "
"can be controlled using the :mod:`gc` module."
msgstr ""

#: ../Doc/glossary.rst:423
#, fuzzy
msgid "generator"
msgstr "Generador de Expresiones"

#: ../Doc/glossary.rst:425
msgid ""
"A function which returns a :term:`generator iterator`.  It looks like a "
"normal function except that it contains :keyword:`yield` expressions for "
"producing a series of values usable in a for-loop or that can be retrieved "
"one at a time with the :func:`next` function."
msgstr ""

#: ../Doc/glossary.rst:430
msgid ""
"Usually refers to a generator function, but may refer to a *generator "
"iterator* in some contexts.  In cases where the intended meaning isn't "
"clear, using the full terms avoids ambiguity."
msgstr ""

#: ../Doc/glossary.rst:433
#, fuzzy
msgid "generator iterator"
msgstr "Generador de Expresiones"

#: ../Doc/glossary.rst:435
msgid "An object created by a :term:`generator` function."
msgstr ""

#: ../Doc/glossary.rst:437
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *generator iterator* resumes, it picks up where it "
"left off (in contrast to functions which start fresh on every invocation)."
msgstr ""

#: ../Doc/glossary.rst:444
#, fuzzy
msgid "generator expression"
msgstr "Generador de Expresiones"

#: ../Doc/glossary.rst:446
msgid ""
"An expression that returns an iterator.  It looks like a normal expression "
"followed by a :keyword:`!for` clause defining a loop variable, range, and an "
"optional :keyword:`!if` clause.  The combined expression generates values "
"for an enclosing function::"
msgstr ""

#: ../Doc/glossary.rst:453
msgid "generic function"
msgstr ""

#: ../Doc/glossary.rst:455
msgid ""
"A function composed of multiple functions implementing the same operation "
"for different types. Which implementation should be used during a call is "
"determined by the dispatch algorithm."
msgstr ""

#: ../Doc/glossary.rst:459
msgid ""
"See also the :term:`single dispatch` glossary entry, the :func:`functools."
"singledispatch` decorator, and :pep:`443`."
msgstr ""

#: ../Doc/glossary.rst:462
msgid "GIL"
msgstr ""

#: ../Doc/glossary.rst:464
msgid "See :term:`global interpreter lock`."
msgstr ""

#: ../Doc/glossary.rst:465
#, fuzzy
msgid "global interpreter lock"
msgstr "El Archivo de Inicio Interactivo"

#: ../Doc/glossary.rst:467
msgid ""
"The mechanism used by the :term:`CPython` interpreter to assure that only "
"one thread executes Python :term:`bytecode` at a time. This simplifies the "
"CPython implementation by making the object model (including critical built-"
"in types such as :class:`dict`) implicitly safe against concurrent access.  "
"Locking the entire interpreter makes it easier for the interpreter to be "
"multi-threaded, at the expense of much of the parallelism afforded by multi-"
"processor machines."
msgstr ""

#: ../Doc/glossary.rst:476
msgid ""
"However, some extension modules, either standard or third-party, are "
"designed so as to release the GIL when doing computationally-intensive tasks "
"such as compression or hashing.  Also, the GIL is always released when doing "
"I/O."
msgstr ""

#: ../Doc/glossary.rst:481
msgid ""
"Past efforts to create a \"free-threaded\" interpreter (one which locks "
"shared data at a much finer granularity) have not been successful because "
"performance suffered in the common single-processor case. It is believed "
"that overcoming this performance issue would make the implementation much "
"more complicated and therefore costlier to maintain."
msgstr ""

#: ../Doc/glossary.rst:487
msgid "hash-based pyc"
msgstr ""

#: ../Doc/glossary.rst:489
msgid ""
"A bytecode cache file that uses the hash rather than the last-modified time "
"of the corresponding source file to determine its validity. See :ref:`pyc-"
"invalidation`."
msgstr ""

#: ../Doc/glossary.rst:492
msgid "hashable"
msgstr ""

#: ../Doc/glossary.rst:494
msgid ""
"An object is *hashable* if it has a hash value which never changes during "
"its lifetime (it needs a :meth:`__hash__` method), and can be compared to "
"other objects (it needs an :meth:`__eq__` method).  Hashable objects which "
"compare equal must have the same hash value."
msgstr ""

#: ../Doc/glossary.rst:499
msgid ""
"Hashability makes an object usable as a dictionary key and a set member, "
"because these data structures use the hash value internally."
msgstr ""

#: ../Doc/glossary.rst:502
msgid ""
"All of Python's immutable built-in objects are hashable; mutable containers "
"(such as lists or dictionaries) are not.  Objects which are instances of "
"user-defined classes are hashable by default.  They all compare unequal "
"(except with themselves), and their hash value is derived from their :func:"
"`id`."
msgstr ""

#: ../Doc/glossary.rst:507
msgid "IDLE"
msgstr ""

#: ../Doc/glossary.rst:509
msgid ""
"An Integrated Development Environment for Python.  IDLE is a basic editor "
"and interpreter environment which ships with the standard distribution of "
"Python."
msgstr ""

#: ../Doc/glossary.rst:512
#, fuzzy
msgid "immutable"
msgstr ""
"Los objetos tienen individualidad, y múltiples nombres (en múltiples "
"ámbitos) pueden ser ligados al mismo objeto. Esto es conocido como "
"'aliasing' en otros lenguajes. Esto es habitualmente no apreciado a primera "
"vista en Python, y puede ignorarse rin riesgo cuando lidias con tipos "
"básicos inmutables (números, 'strings', tuplas). Sin embargo, 'aliasing' "
"tiene posiblemente un efecto sorprendente en la semántica del código de "
"Python involucrando objetos variables como listas, diccionarios, y la "
"mayoría de los otros tipos. Esto es habitualmente usado para el beneficio "
"del programa, desde que los alias se comportan como punteros en algunos "
"sentidos. Por ejemplo, pasando un objeto es fácil desde que sólo un puntero "
"es pasado por la implementación; y si una función modifica un objeto pasado "
"como un argumento, el que llama verá el cambio --- esto elimina la necesidad "
"de dos mecanismos diferentes para pasar argumentos como en Pascal."

#: ../Doc/glossary.rst:514
msgid ""
"An object with a fixed value.  Immutable objects include numbers, strings "
"and tuples.  Such an object cannot be altered.  A new object has to be "
"created if a different value has to be stored.  They play an important role "
"in places where a constant hash value is needed, for example as a key in a "
"dictionary."
msgstr ""

#: ../Doc/glossary.rst:519
msgid "import path"
msgstr ""

#: ../Doc/glossary.rst:521
msgid ""
"A list of locations (or :term:`path entries <path entry>`) that are searched "
"by the :term:`path based finder` for modules to import. During import, this "
"list of locations usually comes from :data:`sys.path`, but for subpackages "
"it may also come from the parent package's ``__path__`` attribute."
msgstr ""

#: ../Doc/glossary.rst:526
#, fuzzy
msgid "importing"
msgstr ""
"En la terminología de C++, normalmente los miembros de las clases (incluídos "
"los miembros de datos) son *públicos* (exceptuando mira más abajo :ref:`tut-"
"private`), y todas las funciones de los miembros son *virtuales*. Como en "
"Modula-3, no hay limitaciones para referenciar los objetos de los miembros "
"de sus métodos: la función del método se declara con un explícito primer "
"argumento representando el objeto, el cual es previsto implícitamente por la "
"llamada. Como en Smalltalk, las clases en si mismas son objetos. Esto "
"proporciona la semántica para importar y renombrar. Diferente a C++ y "
"Modula-3, los tipos incorporados pueden ser usado como base de clases para "
"extensión por el usuario. Además, como en C++, la mayoría de operadores "
"incorporados con síntaxis especial (operadores aritméticos, suscripción "
"etc.) pueden ser redefinidos para las instancias de clase."

#: ../Doc/glossary.rst:528
msgid ""
"The process by which Python code in one module is made available to Python "
"code in another module."
msgstr ""

#: ../Doc/glossary.rst:530
msgid "importer"
msgstr ""

#: ../Doc/glossary.rst:532
msgid ""
"An object that both finds and loads a module; both a :term:`finder` and :"
"term:`loader` object."
msgstr ""

#: ../Doc/glossary.rst:534
#, fuzzy
msgid "interactive"
msgstr "Modo Interactivo"

#: ../Doc/glossary.rst:536
msgid ""
"Python has an interactive interpreter which means you can enter statements "
"and expressions at the interpreter prompt, immediately execute them and see "
"their results.  Just launch ``python`` with no arguments (possibly by "
"selecting it from your computer's main menu). It is a very powerful way to "
"test out new ideas or inspect modules and packages (remember ``help(x)``)."
msgstr ""

#: ../Doc/glossary.rst:542
#, fuzzy
msgid "interpreted"
msgstr ""
"Python es un lenguaje interpretado, lo cual puede ahorrarte mucho tiempo "
"durante el desarrollo ya que no es necesario compilar ni enlazar. El "
"intérprete puede usarse interactivamente, lo que facilita experimentar con "
"características del lenguaje, escribir programas desechables o probar "
"funciones cuando se hace desarrollo de programas de abajo hacia arriba. Es "
"también una calculadora de escritorio práctica."

#: ../Doc/glossary.rst:544
msgid ""
"Python is an interpreted language, as opposed to a compiled one, though the "
"distinction can be blurry because of the presence of the bytecode compiler.  "
"This means that source files can be run directly without explicitly creating "
"an executable which is then run. Interpreted languages typically have a "
"shorter development/debug cycle than compiled ones, though their programs "
"generally also run more slowly.  See also :term:`interactive`."
msgstr ""

#: ../Doc/glossary.rst:551
#, fuzzy
msgid "interpreter shutdown"
msgstr "El Archivo de Inicio Interactivo"

#: ../Doc/glossary.rst:553
msgid ""
"When asked to shut down, the Python interpreter enters a special phase where "
"it gradually releases all allocated resources, such as modules and various "
"critical internal structures.  It also makes several calls to the :term:"
"`garbage collector <garbage collection>`. This can trigger the execution of "
"code in user-defined destructors or weakref callbacks. Code executed during "
"the shutdown phase can encounter various exceptions as the resources it "
"relies on may not function anymore (common examples are library modules or "
"the warnings machinery)."
msgstr ""

#: ../Doc/glossary.rst:562
msgid ""
"The main reason for interpreter shutdown is that the ``__main__`` module or "
"the script being run has finished executing."
msgstr ""

#: ../Doc/glossary.rst:564
msgid "iterable"
msgstr ""

#: ../Doc/glossary.rst:566
msgid ""
"An object capable of returning its members one at a time. Examples of "
"iterables include all sequence types (such as :class:`list`, :class:`str`, "
"and :class:`tuple`) and some non-sequence types like :class:`dict`, :term:"
"`file objects <file object>`, and objects of any classes you define with an :"
"meth:`__iter__` method or with a :meth:`__getitem__` method that implements :"
"term:`Sequence` semantics."
msgstr ""

#: ../Doc/glossary.rst:573
msgid ""
"Iterables can be used in a :keyword:`for` loop and in many other places "
"where a sequence is needed (:func:`zip`, :func:`map`, ...).  When an "
"iterable object is passed as an argument to the built-in function :func:"
"`iter`, it returns an iterator for the object.  This iterator is good for "
"one pass over the set of values.  When using iterables, it is usually not "
"necessary to call :func:`iter` or deal with iterator objects yourself.  The "
"``for`` statement does that automatically for you, creating a temporary "
"unnamed variable to hold the iterator for the duration of the loop.  See "
"also :term:`iterator`, :term:`sequence`, and :term:`generator`."
msgstr ""

#: ../Doc/glossary.rst:583
#, fuzzy
msgid "iterator"
msgstr ""
"Este estilo de acceso es claro, conciso y conveniente. El uso de iteradores "
"impregna y unifica Python. Detrás de escena, la declaración :keyword:`for` "
"invoca :func:`iter` en el objeto contenedor. La función devuelve un objeto "
"iterador que define el método :meth:`~iterator.__ next__` que accede a los "
"elementos en el contenedor de uno en uno. Cuando no hay más elementos, :meth:"
"`~iterator.__ next__` genera una excepción :exc:`StopIteration` que le dice "
"al bucle :keyword:`!for` que finalice. Puede llamar al método :meth:"
"`~iterator.__ next__` utilizando la función incorporada :func:`next`; Este "
"ejemplo muestra cómo funciona todo::"

#: ../Doc/glossary.rst:585
msgid ""
"An object representing a stream of data.  Repeated calls to the iterator's :"
"meth:`~iterator.__next__` method (or passing it to the built-in function :"
"func:`next`) return successive items in the stream.  When no more data are "
"available a :exc:`StopIteration` exception is raised instead.  At this "
"point, the iterator object is exhausted and any further calls to its :meth:"
"`__next__` method just raise :exc:`StopIteration` again.  Iterators are "
"required to have an :meth:`__iter__` method that returns the iterator object "
"itself so every iterator is also iterable and may be used in most places "
"where other iterables are accepted.  One notable exception is code which "
"attempts multiple iteration passes.  A container object (such as a :class:"
"`list`) produces a fresh new iterator each time you pass it to the :func:"
"`iter` function or use it in a :keyword:`for` loop.  Attempting this with an "
"iterator will just return the same exhausted iterator object used in the "
"previous iteration pass, making it appear like an empty container."
msgstr ""

#: ../Doc/glossary.rst:600
msgid "More information can be found in :ref:`typeiter`."
msgstr ""

#: ../Doc/glossary.rst:601
msgid "key function"
msgstr ""

#: ../Doc/glossary.rst:603
msgid ""
"A key function or collation function is a callable that returns a value used "
"for sorting or ordering.  For example, :func:`locale.strxfrm` is used to "
"produce a sort key that is aware of locale specific sort conventions."
msgstr ""

#: ../Doc/glossary.rst:608
msgid ""
"A number of tools in Python accept key functions to control how elements are "
"ordered or grouped.  They include :func:`min`, :func:`max`, :func:`sorted`, :"
"meth:`list.sort`, :func:`heapq.merge`, :func:`heapq.nsmallest`, :func:`heapq."
"nlargest`, and :func:`itertools.groupby`."
msgstr ""

#: ../Doc/glossary.rst:614
msgid ""
"There are several ways to create a key function.  For example. the :meth:"
"`str.lower` method can serve as a key function for case insensitive sorts.  "
"Alternatively, a key function can be built from a :keyword:`lambda` "
"expression such as ``lambda r: (r[0], r[2])``.  Also, the :mod:`operator` "
"module provides three key function constructors: :func:`~operator."
"attrgetter`, :func:`~operator.itemgetter`, and :func:`~operator."
"methodcaller`.  See the :ref:`Sorting HOW TO <sortinghowto>` for examples of "
"how to create and use key functions."
msgstr ""

#: ../Doc/glossary.rst:622
#, fuzzy
msgid "keyword argument"
msgstr "no es necesario declarar variables ni argumentos."

#: ../Doc/glossary.rst:624 ../Doc/glossary.rst:888
#, fuzzy
msgid "See :term:`argument`."
msgstr "no es necesario declarar variables ni argumentos."

#: ../Doc/glossary.rst:625
msgid "lambda"
msgstr ""

#: ../Doc/glossary.rst:627
msgid ""
"An anonymous inline function consisting of a single :term:`expression` which "
"is evaluated when the function is called.  The syntax to create a lambda "
"function is ``lambda [parameters]: expression``"
msgstr ""

#: ../Doc/glossary.rst:630
msgid "LBYL"
msgstr ""

#: ../Doc/glossary.rst:632
msgid ""
"Look before you leap.  This coding style explicitly tests for pre-conditions "
"before making calls or lookups.  This style contrasts with the :term:`EAFP` "
"approach and is characterized by the presence of many :keyword:`if` "
"statements."
msgstr ""

#: ../Doc/glossary.rst:637
msgid ""
"In a multi-threaded environment, the LBYL approach can risk introducing a "
"race condition between \"the looking\" and \"the leaping\".  For example, "
"the code, ``if key in mapping: return mapping[key]`` can fail if another "
"thread removes *key* from *mapping* after the test, but before the lookup. "
"This issue can be solved with locks or by using the EAFP approach."
msgstr ""

#: ../Doc/glossary.rst:642
#, fuzzy
msgid "list"
msgstr ""
"Si aún no comprende cómo funcionan los métodos, una mirada a la "
"implementación quizás pueda aclarar las cosas. Cuando se hace referencia a "
"un atributo sin datos de una instancia, se busca en la clase de la "
"instancia. Si el nombre denota un atributo de clase válido que es un objeto "
"de función, se crea un objeto de método empaquetando (apuntando a) el objeto "
"de instancia y el objeto de función que se encuentran juntos en un objeto "
"abstracto: este es el objeto de método. Cuando se llama al objeto de método "
"con una lista de argumentos, se construye una nueva lista de argumentos a "
"partir del objeto de instancia y la lista de argumentos, y se llama al "
"objeto de función con esta nueva lista de argumentos."

#: ../Doc/glossary.rst:644
msgid ""
"A built-in Python :term:`sequence`.  Despite its name it is more akin to an "
"array in other languages than to a linked list since access to elements is "
"O(1)."
msgstr ""

#: ../Doc/glossary.rst:647
msgid "list comprehension"
msgstr ""

#: ../Doc/glossary.rst:649
msgid ""
"A compact way to process all or part of the elements in a sequence and "
"return a list with the results.  ``result = ['{:#04x}'.format(x) for x in "
"range(256) if x % 2 == 0]`` generates a list of strings containing even hex "
"numbers (0x..) in the range from 0 to 255. The :keyword:`if` clause is "
"optional.  If omitted, all elements in ``range(256)`` are processed."
msgstr ""

#: ../Doc/glossary.rst:655
msgid "loader"
msgstr ""

#: ../Doc/glossary.rst:657
msgid ""
"An object that loads a module. It must define a method named :meth:"
"`load_module`. A loader is typically returned by a :term:`finder`. See :pep:"
"`302` for details and :class:`importlib.abc.Loader` for an :term:`abstract "
"base class`."
msgstr ""

#: ../Doc/glossary.rst:661
#, fuzzy
msgid "magic method"
msgstr "Método de Objetos"

#: ../Doc/glossary.rst:665
msgid "An informal synonym for :term:`special method`."
msgstr ""

#: ../Doc/glossary.rst:666
#, fuzzy
msgid "mapping"
msgstr ""
"El ejemplo anterior funcionaría incluso si ``MappingSubclass`` introdujera "
"un identificador de ``__update`` ya que se reemplaza con "
"``_Mapping__update`` en la clase ``Mapping`` y ``_MappingSubclass__update`` "
"en el ``MappingSubclass`` clase respectivamente."

#: ../Doc/glossary.rst:668
msgid ""
"A container object that supports arbitrary key lookups and implements the "
"methods specified in the :class:`~collections.abc.Mapping` or :class:"
"`~collections.abc.MutableMapping` :ref:`abstract base classes <collections-"
"abstract-base-classes>`.  Examples include :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` and :class:"
"`collections.Counter`."
msgstr ""

#: ../Doc/glossary.rst:674
msgid "meta path finder"
msgstr ""

#: ../Doc/glossary.rst:676
msgid ""
"A :term:`finder` returned by a search of :data:`sys.meta_path`.  Meta path "
"finders are related to, but different from :term:`path entry finders <path "
"entry finder>`."
msgstr ""

#: ../Doc/glossary.rst:680
msgid ""
"See :class:`importlib.abc.MetaPathFinder` for the methods that meta path "
"finders implement."
msgstr ""

#: ../Doc/glossary.rst:682
msgid "metaclass"
msgstr ""

#: ../Doc/glossary.rst:684
msgid ""
"The class of a class.  Class definitions create a class name, a class "
"dictionary, and a list of base classes.  The metaclass is responsible for "
"taking those three arguments and creating the class.  Most object oriented "
"programming languages provide a default implementation.  What makes Python "
"special is that it is possible to create custom metaclasses.  Most users "
"never need this tool, but when the need arises, metaclasses can provide "
"powerful, elegant solutions.  They have been used for logging attribute "
"access, adding thread-safety, tracking object creation, implementing "
"singletons, and many other tasks."
msgstr ""

#: ../Doc/glossary.rst:694
msgid "More information can be found in :ref:`metaclasses`."
msgstr ""

#: ../Doc/glossary.rst:695
#, fuzzy
msgid "method"
msgstr "Método de Objetos"

#: ../Doc/glossary.rst:697
msgid ""
"A function which is defined inside a class body.  If called as an attribute "
"of an instance of that class, the method will get the instance object as its "
"first :term:`argument` (which is usually called ``self``). See :term:"
"`function` and :term:`nested scope`."
msgstr ""

#: ../Doc/glossary.rst:701
#, fuzzy
msgid "method resolution order"
msgstr ""
"De hecho, es un poco más complejo que eso; el orden de resolución del método "
"cambia dinámicamente para admitir llamadas cooperativas a :func:`super`. "
"Este enfoque se conoce en algunos otros lenguajes de herencia múltiple como "
"método de llamada siguiente y es más poderoso que la súper llamada que se "
"encuentra en los lenguajes de herencia única."

#: ../Doc/glossary.rst:703
msgid ""
"Method Resolution Order is the order in which base classes are searched for "
"a member during lookup. See `The Python 2.3 Method Resolution Order <https://"
"www.python.org/download/releases/2.3/mro/>`_ for details of the algorithm "
"used by the Python interpreter since the 2.3 release."
msgstr ""

#: ../Doc/glossary.rst:707
#, fuzzy
msgid "module"
msgstr ""
"Los 'Namespaces' son creados en diferentes momentos y tienen diferentes "
"vidas. El 'namespace' que contiene los nombres incorporados es creado cuando "
"el intérprete de Python se inicia, y nunca es borrado. El 'namespace' global "
"para un módulo es creado cuando la definición del módulo es leída; "
"normalmente, los modulos de los 'namespaces' además duran hasta que se "
"cierra el intérprete. Las declaraciones ejecutadas por la invocación de "
"nivel superior del intérprete, ya sea leído desde un archivo de script o "
"interactivamente, son considerados parte de un módulo llamado :mod:"
"`__main__`, entonces tienen su propio 'namespace' global. (Los nombres "
"'built-in' en realidad también viven en un módulo; esto es llamado :mod:"
"`builtins`.)"

#: ../Doc/glossary.rst:709
msgid ""
"An object that serves as an organizational unit of Python code.  Modules "
"have a namespace containing arbitrary Python objects.  Modules are loaded "
"into Python by the process of :term:`importing`."
msgstr ""

#: ../Doc/glossary.rst:713
msgid "See also :term:`package`."
msgstr ""

#: ../Doc/glossary.rst:714
msgid "module spec"
msgstr ""

#: ../Doc/glossary.rst:716
msgid ""
"A namespace containing the import-related information used to load a module. "
"An instance of :class:`importlib.machinery.ModuleSpec`."
msgstr ""

#: ../Doc/glossary.rst:718
#, fuzzy
msgid "MRO"
msgstr ""
"El ordenamiento dinámico es necesario porque todos los casos de herencia "
"múltiple exhiben una o más relaciones de diamante (donde se puede acceder al "
"menos a una de las clases principales a través de múltiples rutas desde la "
"clase más inferior). Por ejemplo, todas las clases heredan de :class:"
"`object`, por lo que cualquier caso de herencia múltiple proporciona más de "
"una ruta para llegar a :class:`object`. Para evitar que se acceda a las "
"clases base más de una vez, el algoritmo dinámico linealiza el orden de "
"búsqueda de una manera que conserva el orden de izquierda a derecha "
"especificado en cada clase, que llama a cada padre solo una vez, y eso es "
"monótono (lo que significa que una clase puede subclasificarse sin afectar "
"el orden de precedencia de sus padres). En conjunto, estas propiedades "
"permiten diseñar clases confiables y extensibles con herencia múltiple. Para "
"obtener más detalles, consulte https://www.python.org/download/releases/2.3/"
"mro/ (DEPRECATED)."

#: ../Doc/glossary.rst:720
msgid "See :term:`method resolution order`."
msgstr ""

#: ../Doc/glossary.rst:721
#, fuzzy
msgid "mutable"
msgstr ""
"Los objetos tienen individualidad, y múltiples nombres (en múltiples "
"ámbitos) pueden ser ligados al mismo objeto. Esto es conocido como "
"'aliasing' en otros lenguajes. Esto es habitualmente no apreciado a primera "
"vista en Python, y puede ignorarse rin riesgo cuando lidias con tipos "
"básicos inmutables (números, 'strings', tuplas). Sin embargo, 'aliasing' "
"tiene posiblemente un efecto sorprendente en la semántica del código de "
"Python involucrando objetos variables como listas, diccionarios, y la "
"mayoría de los otros tipos. Esto es habitualmente usado para el beneficio "
"del programa, desde que los alias se comportan como punteros en algunos "
"sentidos. Por ejemplo, pasando un objeto es fácil desde que sólo un puntero "
"es pasado por la implementación; y si una función modifica un objeto pasado "
"como un argumento, el que llama verá el cambio --- esto elimina la necesidad "
"de dos mecanismos diferentes para pasar argumentos como en Pascal."

#: ../Doc/glossary.rst:723
msgid ""
"Mutable objects can change their value but keep their :func:`id`.  See also :"
"term:`immutable`."
msgstr ""

#: ../Doc/glossary.rst:725
msgid "named tuple"
msgstr ""

#: ../Doc/glossary.rst:727
msgid ""
"Any tuple-like class whose indexable elements are also accessible using "
"named attributes (for example, :func:`time.localtime` returns a tuple-like "
"object where the *year* is accessible either with an index such as ``t[0]`` "
"or with a named attribute like ``t.tm_year``)."
msgstr ""

#: ../Doc/glossary.rst:732
msgid ""
"A named tuple can be a built-in type such as :class:`time.struct_time`, or "
"it can be created with a regular class definition.  A full featured named "
"tuple can also be created with the factory function :func:`collections."
"namedtuple`.  The latter approach automatically provides extra features such "
"as a self-documenting representation like ``Employee(name='jones', "
"title='programmer')``."
msgstr ""

#: ../Doc/glossary.rst:738
#, fuzzy
msgid "namespace"
msgstr ""
"el alcance más externo (último buscado) es el espacio de nombres que "
"contiene los 'built-in' nombres"

#: ../Doc/glossary.rst:740
msgid ""
"The place where a variable is stored.  Namespaces are implemented as "
"dictionaries.  There are the local, global and built-in namespaces as well "
"as nested namespaces in objects (in methods).  Namespaces support modularity "
"by preventing naming conflicts.  For instance, the functions :func:`builtins."
"open <.open>` and :func:`os.open` are distinguished by their namespaces.  "
"Namespaces also aid readability and maintainability by making it clear which "
"module implements a function.  For instance, writing :func:`random.seed` or :"
"func:`itertools.islice` makes it clear that those functions are implemented "
"by the :mod:`random` and :mod:`itertools` modules, respectively."
msgstr ""

#: ../Doc/glossary.rst:750
msgid "namespace package"
msgstr ""

#: ../Doc/glossary.rst:752
msgid ""
"A :pep:`420` :term:`package` which serves only as a container for "
"subpackages.  Namespace packages may have no physical representation, and "
"specifically are not like a :term:`regular package` because they have no "
"``__init__.py`` file."
msgstr ""

#: ../Doc/glossary.rst:757
msgid "See also :term:`module`."
msgstr ""

#: ../Doc/glossary.rst:758
msgid "nested scope"
msgstr ""

#: ../Doc/glossary.rst:760
msgid ""
"The ability to refer to a variable in an enclosing definition.  For "
"instance, a function defined inside another function can refer to variables "
"in the outer function.  Note that nested scopes by default work only for "
"reference and not for assignment.  Local variables both read and write in "
"the innermost scope.  Likewise, global variables read and write to the "
"global namespace.  The :keyword:`nonlocal` allows writing to outer scopes."
msgstr ""

#: ../Doc/glossary.rst:767
msgid "new-style class"
msgstr ""

#: ../Doc/glossary.rst:769
msgid ""
"Old name for the flavor of classes now used for all class objects.  In "
"earlier Python versions, only new-style classes could use Python's newer, "
"versatile features like :attr:`~object.__slots__`, descriptors, properties, :"
"meth:`__getattribute__`, class methods, and static methods."
msgstr ""

#: ../Doc/glossary.rst:773
#, fuzzy
msgid "object"
msgstr ""
"Si aún no comprende cómo funcionan los métodos, una mirada a la "
"implementación quizás pueda aclarar las cosas. Cuando se hace referencia a "
"un atributo sin datos de una instancia, se busca en la clase de la "
"instancia. Si el nombre denota un atributo de clase válido que es un objeto "
"de función, se crea un objeto de método empaquetando (apuntando a) el objeto "
"de instancia y el objeto de función que se encuentran juntos en un objeto "
"abstracto: este es el objeto de método. Cuando se llama al objeto de método "
"con una lista de argumentos, se construye una nueva lista de argumentos a "
"partir del objeto de instancia y la lista de argumentos, y se llama al "
"objeto de función con esta nueva lista de argumentos."

#: ../Doc/glossary.rst:775
msgid ""
"Any data with state (attributes or value) and defined behavior (methods).  "
"Also the ultimate base class of any :term:`new-style class`."
msgstr ""

#: ../Doc/glossary.rst:778
#, fuzzy
msgid "package"
msgstr "Un problema con el paquete GNU Readline puede evitar esto."

#: ../Doc/glossary.rst:780
msgid ""
"A Python :term:`module` which can contain submodules or recursively, "
"subpackages.  Technically, a package is a Python module with an ``__path__`` "
"attribute."
msgstr ""

#: ../Doc/glossary.rst:784
msgid "See also :term:`regular package` and :term:`namespace package`."
msgstr ""

#: ../Doc/glossary.rst:785
msgid "parameter"
msgstr ""

#: ../Doc/glossary.rst:787
msgid ""
"A named entity in a :term:`function` (or method) definition that specifies "
"an :term:`argument` (or in some cases, arguments) that the function can "
"accept.  There are five kinds of parameter:"
msgstr ""

#: ../Doc/glossary.rst:791
msgid ""
":dfn:`positional-or-keyword`: specifies an argument that can be passed "
"either :term:`positionally <argument>` or as a :term:`keyword argument "
"<argument>`.  This is the default kind of parameter, for example *foo* and "
"*bar* in the following::"
msgstr ""

#: ../Doc/glossary.rst:800
msgid ""
":dfn:`positional-only`: specifies an argument that can be supplied only by "
"position.  Python has no syntax for defining positional-only parameters.  "
"However, some built-in functions have positional-only parameters (e.g. :func:"
"`abs`)."
msgstr ""

#: ../Doc/glossary.rst:807
msgid ""
":dfn:`keyword-only`: specifies an argument that can be supplied only by "
"keyword.  Keyword-only parameters can be defined by including a single var-"
"positional parameter or bare ``*`` in the parameter list of the function "
"definition before them, for example *kw_only1* and *kw_only2* in the "
"following::"
msgstr ""

#: ../Doc/glossary.rst:815
msgid ""
":dfn:`var-positional`: specifies that an arbitrary sequence of positional "
"arguments can be provided (in addition to any positional arguments already "
"accepted by other parameters).  Such a parameter can be defined by "
"prepending the parameter name with ``*``, for example *args* in the "
"following::"
msgstr ""

#: ../Doc/glossary.rst:823
msgid ""
":dfn:`var-keyword`: specifies that arbitrarily many keyword arguments can be "
"provided (in addition to any keyword arguments already accepted by other "
"parameters).  Such a parameter can be defined by prepending the parameter "
"name with ``**``, for example *kwargs* in the example above."
msgstr ""

#: ../Doc/glossary.rst:829
msgid ""
"Parameters can specify both optional and required arguments, as well as "
"default values for some optional arguments."
msgstr ""

#: ../Doc/glossary.rst:832
msgid ""
"See also the :term:`argument` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"the :class:`inspect.Parameter` class, the :ref:`function` section, and :pep:"
"`362`."
msgstr ""

#: ../Doc/glossary.rst:836
msgid "path entry"
msgstr ""

#: ../Doc/glossary.rst:838
msgid ""
"A single location on the :term:`import path` which the :term:`path based "
"finder` consults to find modules for importing."
msgstr ""

#: ../Doc/glossary.rst:840
msgid "path entry finder"
msgstr ""

#: ../Doc/glossary.rst:842
msgid ""
"A :term:`finder` returned by a callable on :data:`sys.path_hooks` (i.e. a :"
"term:`path entry hook`) which knows how to locate modules given a :term:"
"`path entry`."
msgstr ""

#: ../Doc/glossary.rst:846
msgid ""
"See :class:`importlib.abc.PathEntryFinder` for the methods that path entry "
"finders implement."
msgstr ""

#: ../Doc/glossary.rst:848
msgid "path entry hook"
msgstr ""

#: ../Doc/glossary.rst:850
msgid ""
"A callable on the :data:`sys.path_hook` list which returns a :term:`path "
"entry finder` if it knows how to find modules on a specific :term:`path "
"entry`."
msgstr ""

#: ../Doc/glossary.rst:853
msgid "path based finder"
msgstr ""

#: ../Doc/glossary.rst:855
msgid ""
"One of the default :term:`meta path finders <meta path finder>` which "
"searches an :term:`import path` for modules."
msgstr ""

#: ../Doc/glossary.rst:857
msgid "path-like object"
msgstr ""

#: ../Doc/glossary.rst:859
msgid ""
"An object representing a file system path. A path-like object is either a :"
"class:`str` or :class:`bytes` object representing a path, or an object "
"implementing the :class:`os.PathLike` protocol. An object that supports the :"
"class:`os.PathLike` protocol can be converted to a :class:`str` or :class:"
"`bytes` file system path by calling the :func:`os.fspath` function; :func:"
"`os.fsdecode` and :func:`os.fsencode` can be used to guarantee a :class:"
"`str` or :class:`bytes` result instead, respectively. Introduced by :pep:"
"`519`."
msgstr ""

#: ../Doc/glossary.rst:867
msgid "PEP"
msgstr ""

#: ../Doc/glossary.rst:869
msgid ""
"Python Enhancement Proposal. A PEP is a design document providing "
"information to the Python community, or describing a new feature for Python "
"or its processes or environment. PEPs should provide a concise technical "
"specification and a rationale for proposed features."
msgstr ""

#: ../Doc/glossary.rst:875
msgid ""
"PEPs are intended to be the primary mechanisms for proposing major new "
"features, for collecting community input on an issue, and for documenting "
"the design decisions that have gone into Python. The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""

#: ../Doc/glossary.rst:881
msgid "See :pep:`1`."
msgstr ""

#: ../Doc/glossary.rst:882
msgid "portion"
msgstr ""

#: ../Doc/glossary.rst:884
msgid ""
"A set of files in a single directory (possibly stored in a zip file) that "
"contribute to a namespace package, as defined in :pep:`420`."
msgstr ""

#: ../Doc/glossary.rst:886
#, fuzzy
msgid "positional argument"
msgstr "no es necesario declarar variables ni argumentos."

#: ../Doc/glossary.rst:889
msgid "provisional API"
msgstr ""

#: ../Doc/glossary.rst:891
msgid ""
"A provisional API is one which has been deliberately excluded from the "
"standard library's backwards compatibility guarantees.  While major changes "
"to such interfaces are not expected, as long as they are marked provisional, "
"backwards incompatible changes (up to and including removal of the "
"interface) may occur if deemed necessary by core developers.  Such changes "
"will not be made gratuitously -- they will occur only if serious fundamental "
"flaws are uncovered that were missed prior to the inclusion of the API."
msgstr ""

#: ../Doc/glossary.rst:900
msgid ""
"Even for provisional APIs, backwards incompatible changes are seen as a "
"\"solution of last resort\" - every attempt will still be made to find a "
"backwards compatible resolution to any identified problems."
msgstr ""

#: ../Doc/glossary.rst:904
msgid ""
"This process allows the standard library to continue to evolve over time, "
"without locking in problematic design errors for extended periods of time.  "
"See :pep:`411` for more details."
msgstr ""

#: ../Doc/glossary.rst:907
msgid "provisional package"
msgstr ""

#: ../Doc/glossary.rst:909
msgid "See :term:`provisional API`."
msgstr ""

#: ../Doc/glossary.rst:910
#, fuzzy
msgid "Python 3000"
msgstr "Contenido de la Documentación de Python"

#: ../Doc/glossary.rst:912
msgid ""
"Nickname for the Python 3.x release line (coined long ago when the release "
"of version 3 was something in the distant future.)  This is also abbreviated "
"\"Py3k\"."
msgstr ""

#: ../Doc/glossary.rst:915
msgid "Pythonic"
msgstr ""

#: ../Doc/glossary.rst:917
msgid ""
"An idea or piece of code which closely follows the most common idioms of the "
"Python language, rather than implementing code using concepts common to "
"other languages.  For example, a common idiom in Python is to loop over all "
"elements of an iterable using a :keyword:`for` statement.  Many other "
"languages don't have this type of construct, so people unfamiliar with "
"Python sometimes use a numerical counter instead::"
msgstr ""

#: ../Doc/glossary.rst:927
msgid "As opposed to the cleaner, Pythonic method::"
msgstr ""

#: ../Doc/glossary.rst:931
msgid "qualified name"
msgstr ""

#: ../Doc/glossary.rst:933
msgid ""
"A dotted name showing the \"path\" from a module's global scope to a class, "
"function or method defined in that module, as defined in :pep:`3155`.  For "
"top-level functions and classes, the qualified name is the same as the "
"object's name::"
msgstr ""

#: ../Doc/glossary.rst:950
msgid ""
"When used to refer to modules, the *fully qualified name* means the entire "
"dotted path to the module, including any parent packages, e.g. ``email.mime."
"text``::"
msgstr ""

#: ../Doc/glossary.rst:957
msgid "reference count"
msgstr ""

#: ../Doc/glossary.rst:959
msgid ""
"The number of references to an object.  When the reference count of an "
"object drops to zero, it is deallocated.  Reference counting is generally "
"not visible to Python code, but it is a key element of the :term:`CPython` "
"implementation.  The :mod:`sys` module defines a :func:`~sys.getrefcount` "
"function that programmers can call to return the reference count for a "
"particular object."
msgstr ""

#: ../Doc/glossary.rst:965
msgid "regular package"
msgstr ""

#: ../Doc/glossary.rst:967
msgid ""
"A traditional :term:`package`, such as a directory containing an ``__init__."
"py`` file."
msgstr ""

#: ../Doc/glossary.rst:970
msgid "See also :term:`namespace package`."
msgstr ""

#: ../Doc/glossary.rst:971
msgid "__slots__"
msgstr ""

#: ../Doc/glossary.rst:973
msgid ""
"A declaration inside a class that saves memory by pre-declaring space for "
"instance attributes and eliminating instance dictionaries.  Though popular, "
"the technique is somewhat tricky to get right and is best reserved for rare "
"cases where there are large numbers of instances in a memory-critical "
"application."
msgstr ""

#: ../Doc/glossary.rst:978
msgid "sequence"
msgstr ""

#: ../Doc/glossary.rst:980
msgid ""
"An :term:`iterable` which supports efficient element access using integer "
"indices via the :meth:`__getitem__` special method and defines a :meth:"
"`__len__` method that returns the length of the sequence. Some built-in "
"sequence types are :class:`list`, :class:`str`, :class:`tuple`, and :class:"
"`bytes`. Note that :class:`dict` also supports :meth:`__getitem__` and :meth:"
"`__len__`, but is considered a mapping rather than a sequence because the "
"lookups use arbitrary :term:`immutable` keys rather than integers."
msgstr ""

#: ../Doc/glossary.rst:989
msgid ""
"The :class:`collections.abc.Sequence` abstract base class defines a much "
"richer interface that goes beyond just :meth:`__getitem__` and :meth:"
"`__len__`, adding :meth:`count`, :meth:`index`, :meth:`__contains__`, and :"
"meth:`__reversed__`. Types that implement this expanded interface can be "
"registered explicitly using :func:`~abc.register`."
msgstr ""

#: ../Doc/glossary.rst:996
msgid "single dispatch"
msgstr ""

#: ../Doc/glossary.rst:998
msgid ""
"A form of :term:`generic function` dispatch where the implementation is "
"chosen based on the type of a single argument."
msgstr ""

#: ../Doc/glossary.rst:1000
msgid "slice"
msgstr ""

#: ../Doc/glossary.rst:1002
msgid ""
"An object usually containing a portion of a :term:`sequence`.  A slice is "
"created using the subscript notation, ``[]`` with colons between numbers "
"when several are given, such as in ``variable_name[1:3:5]``.  The bracket "
"(subscript) notation uses :class:`slice` objects internally."
msgstr ""

#: ../Doc/glossary.rst:1006
#, fuzzy
msgid "special method"
msgstr ""
"La operación de instanciación (\"llamar\" a un objeto de clase) crea un "
"objeto vacío. A muchas clases les gusta crear objetos con instancias "
"personalizadas para un estado inicial específico. Por lo tanto, una clase "
"puede definir un método especial llamado :meth:`__init__`, como este::"

#: ../Doc/glossary.rst:1010
msgid ""
"A method that is called implicitly by Python to execute a certain operation "
"on a type, such as addition.  Such methods have names starting and ending "
"with double underscores.  Special methods are documented in :ref:"
"`specialnames`."
msgstr ""

#: ../Doc/glossary.rst:1014
#, fuzzy
msgid "statement"
msgstr ""
"la agrupación de instrucciones se hace mediante indentación en vez de llaves "
"de apertura y cierre;"

#: ../Doc/glossary.rst:1016
msgid ""
"A statement is part of a suite (a \"block\" of code).  A statement is either "
"an :term:`expression` or one of several constructs with a keyword, such as :"
"keyword:`if`, :keyword:`while` or :keyword:`for`."
msgstr ""

#: ../Doc/glossary.rst:1019
msgid "struct sequence"
msgstr ""

#: ../Doc/glossary.rst:1021
msgid ""
"A tuple with named elements. Struct sequences expose an interface similar "
"to :term:`named tuple` in that elements can be accessed either by index or "
"as an attribute. However, they do not have any of the named tuple methods "
"like :meth:`~collections.somenamedtuple._make` or :meth:`~collections."
"somenamedtuple._asdict`. Examples of struct sequences include :data:`sys."
"float_info` and the return value of :func:`os.stat`."
msgstr ""

#: ../Doc/glossary.rst:1027
msgid "text encoding"
msgstr ""

#: ../Doc/glossary.rst:1029
msgid "A codec which encodes Unicode strings to bytes."
msgstr ""

#: ../Doc/glossary.rst:1030
#, fuzzy
msgid "text file"
msgstr "El Archivo de Inicio Interactivo"

#: ../Doc/glossary.rst:1032
msgid ""
"A :term:`file object` able to read and write :class:`str` objects. Often, a "
"text file actually accesses a byte-oriented datastream and handles the :term:"
"`text encoding` automatically. Examples of text files are files opened in "
"text mode (``'r'`` or ``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, and "
"instances of :class:`io.StringIO`."
msgstr ""

#: ../Doc/glossary.rst:1039
msgid ""
"See also :term:`binary file` for a file object able to read and write :term:"
"`bytes-like objects <bytes-like object>`."
msgstr ""

#: ../Doc/glossary.rst:1041
msgid "triple-quoted string"
msgstr ""

#: ../Doc/glossary.rst:1043
msgid ""
"A string which is bound by three instances of either a quotation mark (\") "
"or an apostrophe (').  While they don't provide any functionality not "
"available with single-quoted strings, they are useful for a number of "
"reasons.  They allow you to include unescaped single and double quotes "
"within a string and they can span multiple lines without the use of the "
"continuation character, making them especially useful when writing "
"docstrings."
msgstr ""

#: ../Doc/glossary.rst:1050
#, fuzzy
msgid "type"
msgstr ""
"Cuando ocurre una excepción, puede tener un valor asociado, también conocido "
"como *argumento* de la excepción. La presencia y el tipo del argumento "
"dependen del tipo de excepción."

#: ../Doc/glossary.rst:1052
msgid ""
"The type of a Python object determines what kind of object it is; every "
"object has a type.  An object's type is accessible as its :attr:`~instance."
"__class__` attribute or can be retrieved with ``type(obj)``."
msgstr ""

#: ../Doc/glossary.rst:1056
msgid "type alias"
msgstr ""

#: ../Doc/glossary.rst:1058
msgid "A synonym for a type, created by assigning the type to an identifier."
msgstr ""

#: ../Doc/glossary.rst:1060
msgid ""
"Type aliases are useful for simplifying :term:`type hints <type hint>`. For "
"example::"
msgstr ""

#: ../Doc/glossary.rst:1069
msgid "could be made more readable like this::"
msgstr ""

#: ../Doc/glossary.rst:1078 ../Doc/glossary.rst:1092
msgid "See :mod:`typing` and :pep:`484`, which describe this functionality."
msgstr ""

#: ../Doc/glossary.rst:1079
msgid "type hint"
msgstr ""

#: ../Doc/glossary.rst:1081
msgid ""
"An :term:`annotation` that specifies the expected type for a variable, a "
"class attribute, or a function parameter or return value."
msgstr ""

#: ../Doc/glossary.rst:1084
msgid ""
"Type hints are optional and are not enforced by Python but they are useful "
"to static type analysis tools, and aid IDEs with code completion and "
"refactoring."
msgstr ""

#: ../Doc/glossary.rst:1088
msgid ""
"Type hints of global variables, class attributes, and functions, but not "
"local variables, can be accessed using :func:`typing.get_type_hints`."
msgstr ""

#: ../Doc/glossary.rst:1093
msgid "universal newlines"
msgstr ""

#: ../Doc/glossary.rst:1095
msgid ""
"A manner of interpreting text streams in which all of the following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention "
"``'\\r'``.  See :pep:`278` and :pep:`3116`, as well as :func:`bytes."
"splitlines` for an additional use."
msgstr ""

#: ../Doc/glossary.rst:1100
#, fuzzy
msgid "variable annotation"
msgstr "no es necesario declarar variables ni argumentos."

#: ../Doc/glossary.rst:1102
msgid "An :term:`annotation` of a variable or a class attribute."
msgstr ""

#: ../Doc/glossary.rst:1104
msgid ""
"When annotating a variable or a class attribute, assignment is optional::"
msgstr ""

#: ../Doc/glossary.rst:1109
msgid ""
"Variable annotations are usually used for :term:`type hints <type hint>`: "
"for example this variable is expected to take :class:`int` values::"
msgstr ""

#: ../Doc/glossary.rst:1115
msgid "Variable annotation syntax is explained in section :ref:`annassign`."
msgstr ""

#: ../Doc/glossary.rst:1117
msgid ""
"See :term:`function annotation`, :pep:`484` and :pep:`526`, which describe "
"this functionality."
msgstr ""

#: ../Doc/glossary.rst:1119
msgid "virtual environment"
msgstr ""

#: ../Doc/glossary.rst:1121
msgid ""
"A cooperatively isolated runtime environment that allows Python users and "
"applications to install and upgrade Python distribution packages without "
"interfering with the behaviour of other Python applications running on the "
"same system."
msgstr ""

#: ../Doc/glossary.rst:1126
msgid "See also :mod:`venv`."
msgstr ""

#: ../Doc/glossary.rst:1127
msgid "virtual machine"
msgstr ""

#: ../Doc/glossary.rst:1129
msgid ""
"A computer defined entirely in software.  Python's virtual machine executes "
"the :term:`bytecode` emitted by the bytecode compiler."
msgstr ""

#: ../Doc/glossary.rst:1131
#, fuzzy
msgid "Zen of Python"
msgstr "Contenido de la Documentación de Python"

#: ../Doc/glossary.rst:1133
msgid ""
"Listing of Python design principles and philosophies that are helpful in "
"understanding and using the language.  The listing can be found by typing "
"\"``import this``\" at the interactive prompt."
msgstr ""
