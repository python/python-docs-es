# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-10-12 10:25+0200\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language: es\n"
"X-Generator: Poedit 2.4.1\n"

#: ../Doc/library/email.mime.rst:2
msgid ":mod:`email.mime`: Creating email and MIME objects from scratch"
msgstr ""
":mod:`email.mime`: Creación de correo electrónico y objetos MIME desde cero"

#: ../Doc/library/email.mime.rst:7
msgid "**Source code:** :source:`Lib/email/mime/`"
msgstr "**Código fuente:** :source:`Lib/email/mime/`"

#: ../Doc/library/email.mime.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  Its "
"functionality is partially replaced by the :mod:`~email.contentmanager` in "
"the new API, but in certain applications these classes may still be useful, "
"even in non-legacy code."
msgstr ""
"Este módulo forma parte de la API heredada de correo electrónico "
"(``Compat32``). Su funcionalidad se sustituye parcialmente por el :mod:"
"`~email.contentmanager` en la nueva API, pero en ciertas aplicaciones estas "
"clases pueden seguir siendo útiles, incluso en código no heredado."

#: ../Doc/library/email.mime.rst:16
msgid ""
"Ordinarily, you get a message object structure by passing a file or some "
"text to a parser, which parses the text and returns the root message "
"object.  However you can also build a complete message structure from "
"scratch, or even individual :class:`~email.message.Message` objects by "
"hand.  In fact, you can also take an existing structure and add new :class:"
"`~email.message.Message` objects, move them around, etc.  This makes a very "
"convenient interface for slicing-and-dicing MIME messages."
msgstr ""
"Normalmente, se obtiene una estructura de objeto de mensaje pasando un "
"archivo o algún texto a un analizador, que analiza el texto y retorna el "
"objeto de mensaje principal. Sin embargo, también puede crear una estructura "
"de mensajes completa desde cero, o incluso objetos individuales :class:"
"`~email.message.Message` a mano. De hecho, también puede tomar una "
"estructura existente y agregar nuevos objetos :class:`~email.message."
"Message`, moverlos, etc. Esto compone una interfaz muy conveniente para "
"cortar y gestionar mensajes MIME."

#: ../Doc/library/email.mime.rst:24
msgid ""
"You can create a new object structure by creating :class:`~email.message."
"Message` instances, adding attachments and all the appropriate headers "
"manually.  For MIME messages though, the :mod:`email` package provides some "
"convenient subclasses to make things easier."
msgstr ""
"Puede crear una nueva estructura de objeto mediante la creación de una "
"instancia de :class:`~email.message.Message`, añadiendo accesorios y todos "
"los encabezados necesarios manualmente. Para mensajes MIME sin embargo, el "
"paquete :mod:`email` proporciona subclases convenientes para facilitar las "
"cosas."

#: ../Doc/library/email.mime.rst:29
msgid "Here are the classes:"
msgstr "Descripción de las clases:"

#: ../Doc/library/email.mime.rst:35
msgid "Module: :mod:`email.mime.base`"
msgstr "Módulo: :mod:`email.mime.base`"

#: ../Doc/library/email.mime.rst:37
msgid ""
"This is the base class for all the MIME-specific subclasses of :class:"
"`~email.message.Message`.  Ordinarily you won't create instances "
"specifically of :class:`MIMEBase`, although you could.  :class:`MIMEBase` is "
"provided primarily as a convenient base class for more specific MIME-aware "
"subclasses."
msgstr ""
"Esta es la clase básica para todas las subclases específicas :class:`~email."
"message.Message` para MIME. Normalmente no creará instancias específicas de "
"la :class:`MIMEBase`, aunque es posible. La :class:`MIMEBase` se proporciona "
"principalmente como una clase básica conveniente para subclases más "
"específicas, apropiadas para MIME."

#: ../Doc/library/email.mime.rst:43
msgid ""
"*_maintype* is the :mailheader:`Content-Type` major type (e.g. :mimetype:"
"`text` or :mimetype:`image`), and *_subtype* is the :mailheader:`Content-"
"Type` minor type  (e.g. :mimetype:`plain` or :mimetype:`gif`).  *_params* is "
"a parameter key/value dictionary and is passed directly to :meth:`Message."
"add_header <email.message.Message.add_header>`."
msgstr ""
"*_maintype* es el tipo principal :mailheader:`Content-Type` (por ejemplo :"
"mimetype:`text` o :mimetype:`image`), y *_subtype* es el tipo menor :"
"mailheader:`Content-Type` (por ejemplo :mimetype:`plain` o :mimetype:`gif`). "
"*_params* es un diccionario de parámetro clave/valor y se pasa directamente "
"a :meth:`Message.add_header <email.message.Message.add_header>`."

#: ../Doc/library/email.mime.rst:49
msgid ""
"If *policy* is specified, (defaults to the :class:`compat32 <email.policy."
"Compat32>` policy) it will be passed to :class:`~email.message.Message`."
msgstr ""
"Si se especifica *policy*, (por defecto, la directiva :class:`compat32 "
"<email.policy.Compat32>`) se pasará a :class:`~email.message.Message`."

#: ../Doc/library/email.mime.rst:53
msgid ""
"The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` header "
"(based on *_maintype*, *_subtype*, and *_params*), and a :mailheader:`MIME-"
"Version` header (always set to ``1.0``)."
msgstr ""
"La clase :class:`MIMEBase` siempre agrega un encabezado :mailheader:`Content-"
"Type` (basado en *_maintype*, *_subtype* y *_params*), y un encabezado :"
"mailheader:`MIME-Versión` (siempre establecido en ``1.0``)."

#: ../Doc/library/email.mime.rst:57 ../Doc/library/email.mime.rst:104
#: ../Doc/library/email.mime.rst:135 ../Doc/library/email.mime.rst:169
#: ../Doc/library/email.mime.rst:204 ../Doc/library/email.mime.rst:224
#: ../Doc/library/email.mime.rst:258
msgid "Added *policy* keyword-only parameter."
msgstr "Se ha añadido el parámetro *policy* de solo palabra clave."

#: ../Doc/library/email.mime.rst:65
msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr "Módulo: :mod:`email.mime.nonmultipart`"

#: ../Doc/library/email.mime.rst:67
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are not :mimetype:`multipart`.  The "
"primary purpose of this class is to prevent the use of the :meth:`~email."
"message.Message.attach` method, which only makes sense for :mimetype:"
"`multipart` messages.  If :meth:`~email.message.Message.attach` is called, "
"a :exc:`~email.errors.MultipartConversionError` exception is raised."
msgstr ""
"Una subclase de :class:`~email.mime.base.MIMEBase`, es una clase base "
"intermedia para los mensajes MIME que no son :mimetype:`multipart`. El "
"propósito principal de esta clase es evitar el uso del método :meth:`~email."
"message.Message.attach`, que solo tiene sentido para los mensajes :mimetype:"
"`multipart`. Si se llama a :meth:`~email.message.message.attach`, se lanza "
"una excepción :exc:`~email.errors.MultipartConversionError`."

#: ../Doc/library/email.mime.rst:80
msgid "Module: :mod:`email.mime.multipart`"
msgstr "Módulo: :mod:`email.mime.multipart`"

#: ../Doc/library/email.mime.rst:82
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are :mimetype:`multipart`.  Optional "
"*_subtype* defaults to :mimetype:`mixed`, but can be used to specify the "
"subtype of the message.  A :mailheader:`Content-Type` header of :mimetype:"
"`multipart/_subtype` will be added to the message object.  A :mailheader:"
"`MIME-Version` header will also be added."
msgstr ""
"Una subclase de :class:`~email.mime.base.MIMEBase`, se trata de una clase "
"base intermedia para los mensajes MIME que son :mimetype:`multipart`. El "
"valor predeterminado opcional de *_subtype* es :mimetype:`mixed`, pero se "
"puede utilizar para especificar el subtipo del mensaje. Se agregará un "
"encabezado :mailheader:`Content-Type` de :mimetype:`multipart/_subtype` al "
"objeto del mensaje. También se agregará un encabezado :mailheader:`MIME-"
"Version`."

#: ../Doc/library/email.mime.rst:89
msgid ""
"Optional *boundary* is the multipart boundary string.  When ``None`` (the "
"default), the boundary is calculated when needed (for example, when the "
"message is serialized)."
msgstr ""
"El *boundary* opcional es la cadena de límite multiparte. Cuando ``None`` "
"(valor predeterminado), el límite se calcula cuando es necesario (por "
"ejemplo, cuando se serializa el mensaje)."

#: ../Doc/library/email.mime.rst:93
msgid ""
"*_subparts* is a sequence of initial subparts for the payload.  It must be "
"possible to convert this sequence to a list.  You can always attach new "
"subparts to the message by using the :meth:`Message.attach <email.message."
"Message.attach>` method."
msgstr ""
"*_subparts* es una secuencia de subpartes iniciales para la carga útil. Debe "
"ser posible convertir esta secuencia en una lista. Siempre puede adjuntar "
"nuevas subpartes al mensaje mediante el método :meth:`Message.attach <email."
"message.Message.attach>`."

#: ../Doc/library/email.mime.rst:98 ../Doc/library/email.mime.rst:131
#: ../Doc/library/email.mime.rst:165 ../Doc/library/email.mime.rst:199
#: ../Doc/library/email.mime.rst:222 ../Doc/library/email.mime.rst:253
msgid ""
"Optional *policy* argument defaults to :class:`compat32 <email.policy."
"Compat32>`."
msgstr ""
"El valor predeterminado del argumento *policy* opcional es :class:`compat32 "
"<email.policy.Compat32>`."

#: ../Doc/library/email.mime.rst:100
msgid ""
"Additional parameters for the :mailheader:`Content-Type` header are taken "
"from the keyword arguments, or passed into the *_params* argument, which is "
"a keyword dictionary."
msgstr ""
"Los parámetros adicionales para el encabezado :mailheader:`Content-Type` se "
"toman de los argumentos de palabra clave, o se pasan al argumento *_params*, "
"que es un diccionario de palabras clave."

#: ../Doc/library/email.mime.rst:113
msgid "Module: :mod:`email.mime.application`"
msgstr "Módulo: :mod:`email.mime.application`"

#: ../Doc/library/email.mime.rst:115
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEApplication` class is used to represent MIME message objects of major "
"type :mimetype:`application`.  *_data* is a string containing the raw byte "
"data.  Optional *_subtype* specifies the MIME subtype and defaults to :"
"mimetype:`octet-stream`."
msgstr ""
"Una subclase de :class:`~email.mime.nonmultipart.MIMENonMultipart`, la "
"clase :class:`MIMEApplication` se utiliza para representar objetos de "
"mensaje MIME de tipo principal :mimetype:`application`. *_data* es una "
"cadena de caracteres que contiene los datos de bytes sin procesar. "
"*_subtype* opcional especifica el subtipo MIME y el valor predeterminado es :"
"mimetype:`octet-stream`."

#: ../Doc/library/email.mime.rst:121
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the data for transport.  This callable takes one "
"argument, which is the :class:`MIMEApplication` instance. It should use :"
"meth:`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"*_encoder* opcional es una recurso invocable (es decir, una función) que "
"realizará la codificación real de los datos para el transporte. Este "
"invocable toma un argumento, que es la instancia :class:`MIMEApplication`. "
"Debe utilizar :meth:`~email.message.Message.get_payload` y :meth:`~email."
"message.Message.set_payload` para cambiar la carga útil a la forma "
"codificada. También debe agregar cualquier :mailheader:`Content-Transfer-"
"Encoding` u otros encabezados al objeto del mensaje según sea necesario. La "
"codificación predeterminada es base64. Consulte el módulo :mod:`email."
"encoders` para obtener una lista de los codificadores integrados."

#: ../Doc/library/email.mime.rst:133 ../Doc/library/email.mime.rst:167
msgid "*_params* are passed straight through to the base class constructor."
msgstr "*_params* se pasan directamente al constructor de la clase base."

#: ../Doc/library/email.mime.rst:144
msgid "Module: :mod:`email.mime.audio`"
msgstr "Módulo: :mod:`email.mime.audio`"

#: ../Doc/library/email.mime.rst:146
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEAudio` class is used to create MIME message objects of major type :"
"mimetype:`audio`. *_audiodata* is a string containing the raw audio data.  "
"If this data can be decoded by the standard Python module :mod:`sndhdr`, "
"then the subtype will be automatically included in the :mailheader:`Content-"
"Type` header. Otherwise you can explicitly specify the audio subtype via the "
"*_subtype* argument.  If the minor type could not be guessed and *_subtype* "
"was not given, then :exc:`TypeError` is raised."
msgstr ""
"Una subclase de :class:`~email.mime.nonmultipart.MIMENonMultipart`, la "
"clase :class:`MIMEAudio` se utiliza para crear objetos de mensaje MIME de "
"tipo principal :mimetype:`audio`. *_audiodata* es una cadena de caracteres "
"que contiene los datos de audio sin procesar. Si estos datos pueden ser "
"decodificados por el módulo estándar de Python :mod:`sndhdr`, entonces el "
"subtipo se incluirá automáticamente en el encabezado :mailheader:`Content-"
"Type`. De lo contrario, puede especificar explícitamente el subtipo de audio "
"mediante el argumento *_subtype*. Si no se pudo adivinar el tipo secundario "
"y no se ha proporcionado *_subtype*, se lanza :exc:`TypeError`."

#: ../Doc/library/email.mime.rst:155
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the audio data for transport.  This callable takes one "
"argument, which is the :class:`MIMEAudio` instance. It should use :meth:"
"`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"*_encoder* opcional es un recurso invocable (es decir, una función) que "
"realizará la codificación real de los datos de audio para el transporte. "
"Este invocable toma un argumento, que es la instancia :class:`MIMEAudio`. "
"Debe utilizar :meth:`~email.message.Message.get_payload` y :meth:`~email."
"message.Message.set_payload` para cambiar la carga útil a la forma "
"codificada. También debe agregar cualquier :mailheader:`Content-Transfer-"
"Encoding` u otros encabezados al objeto del mensaje según sea necesario. La "
"codificación predeterminada es base64. Consulte el módulo :mod:`email."
"encoders` para obtener una lista de los codificadores integrados."

#: ../Doc/library/email.mime.rst:178
msgid "Module: :mod:`email.mime.image`"
msgstr "Módulo: :mod:`email.mime.image`"

#: ../Doc/library/email.mime.rst:180
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEImage` class is used to create MIME message objects of major type :"
"mimetype:`image`. *_imagedata* is a string containing the raw image data.  "
"If this data can be decoded by the standard Python module :mod:`imghdr`, "
"then the subtype will be automatically included in the :mailheader:`Content-"
"Type` header. Otherwise you can explicitly specify the image subtype via the "
"*_subtype* argument.  If the minor type could not be guessed and *_subtype* "
"was not given, then :exc:`TypeError` is raised."
msgstr ""
"Una subclase de :class:`~email.mime.nonmultipart.MIMENonMultipart`, la "
"clase :class:`MIMEImage` se utiliza para crear objetos de mensaje MIME de "
"tipo principal :mimetype:`image`. *_imagedata* es una cadena de caracteres "
"que contiene los datos de imagen sin procesar. Si estos datos pueden ser "
"decodificados por el módulo estándar de Python :mod:`imghdr`, entonces el "
"subtipo se incluirá automáticamente en el encabezado :mailheader:`Content-"
"Type`. De lo contrario, puede especificar explícitamente el subtipo de "
"imagen mediante el argumento *_subtype*. Si no se pudo adivinar el tipo "
"secundario y no se ha proporcionado *_subtype*, se lanza :exc:`TypeError`."

#: ../Doc/library/email.mime.rst:189
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the image data for transport.  This callable takes one "
"argument, which is the :class:`MIMEImage` instance. It should use :meth:"
"`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"*_encoder* opcional es un recurso invocable (es decir, una función) que "
"realizará la codificación real de los datos de imagen para el transporte. "
"Este invocable toma un argumento, que es la instancia :class:`MIMEImage`. "
"Debe utilizar :meth:`~email.message.Message.get_payload` y :meth:`~email."
"message.Message.set_payload` para cambiar la carga útil a la forma "
"codificada. También debe agregar cualquier :mailheader:`Content-Transfer-"
"Encoding` u otros encabezados al objeto del mensaje según sea necesario. La "
"codificación predeterminada es base64. Consulte el módulo :mod:`email."
"encoders` para obtener una lista de los codificadores integrados."

#: ../Doc/library/email.mime.rst:201
msgid ""
"*_params* are passed straight through to the :class:`~email.mime.base."
"MIMEBase` constructor."
msgstr ""
"*_params* se pasan directamente al constructor :class:`~email.mime.base."
"MIMEBase`."

#: ../Doc/library/email.mime.rst:211
msgid "Module: :mod:`email.mime.message`"
msgstr "Módulo: :mod:`email.mime.message`"

#: ../Doc/library/email.mime.rst:213
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEMessage` class is used to create MIME objects of main type :mimetype:"
"`message`. *_msg* is used as the payload, and must be an instance of class :"
"class:`~email.message.Message` (or a subclass thereof), otherwise a :exc:"
"`TypeError` is raised."
msgstr ""
"Una subclase de :class:`~email.mime.nonmultipart.MIMENonMultipart`, la "
"clase :class:`MIMEMessage` se utiliza para crear objetos MIME de tipo "
"principal :mimetype:`message`. *_msg* se utiliza como la carga y debe ser "
"una instancia de la clase :class:`~email.message.Message` (o una subclase de "
"la misma), de lo contrario se lanza un :exc:`TypeError`."

#: ../Doc/library/email.mime.rst:219
msgid ""
"Optional *_subtype* sets the subtype of the message; it defaults to :"
"mimetype:`rfc822`."
msgstr ""
"*_subtype* opcional establece el subtipo del mensaje; por defecto es :"
"mimetype:`rfc822`."

#: ../Doc/library/email.mime.rst:231
msgid "Module: :mod:`email.mime.text`"
msgstr "Módulo: :mod:`email.mime.text`"

#: ../Doc/library/email.mime.rst:233
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEText` class is used to create MIME objects of major type :mimetype:"
"`text`. *_text* is the string for the payload.  *_subtype* is the minor type "
"and defaults to :mimetype:`plain`.  *_charset* is the character set of the "
"text and is passed as an argument to the :class:`~email.mime.nonmultipart."
"MIMENonMultipart` constructor; it defaults to ``us-ascii`` if the string "
"contains only ``ascii`` code points, and ``utf-8`` otherwise.  The "
"*_charset* parameter accepts either a string or a :class:`~email.charset."
"Charset` instance."
msgstr ""
"Una subclase de :class:`~email.mime.nonmultipart.MIMENonMultipart`, la "
"clase :class:`MIMEText` se utiliza para crear objetos MIME de tipo "
"principal :mimetype:`text`. *_text* es la cadena de caracteres de la carga "
"útil. *_subtype* es el tipo menor y el valor predeterminado es :mimetype:"
"`plain`. *_charset* es el paquete de caracteres del texto y se pasa como "
"argumento al constructor :class:`~email.mime.nonmultipart.MIMENonMultipart`; "
"el valor predeterminado es ``us-ascii`` si la cadena contiene sólo puntos de "
"código ``ascii``, y ``utf-8`` en caso contrario. El parámetro *_charset* "
"acepta una cadena o una instancia :class:`~email.charset.Charset`."

#: ../Doc/library/email.mime.rst:243
msgid ""
"Unless the *_charset* argument is explicitly set to ``None``, the MIMEText "
"object created will have both a :mailheader:`Content-Type` header with a "
"``charset`` parameter, and a :mailheader:`Content-Transfer-Encoding` "
"header.  This means that a subsequent ``set_payload`` call will not result "
"in an encoded payload, even if a charset is passed in the ``set_payload`` "
"command.  You can \"reset\" this behavior by deleting the ``Content-Transfer-"
"Encoding`` header, after which a ``set_payload`` call will automatically "
"encode the new payload (and add a new :mailheader:`Content-Transfer-"
"Encoding` header)."
msgstr ""
"A menos que el argumento *_charset* se establezca explícitamente como "
"``None``, el objeto MIMEText creado tendrá a la vez un encabezado :"
"mailheader:`Content-Type` con un parámetro ``charset``, y un encabezado :"
"mailheader:`Content-Transfer-Encoding`. Esto significa que una llamada "
"posterior a ``set_payload`` no dará lugar a una carga codificada, incluso si "
"se pasa un conjunto de caracteres en el comando ``set_payload``. Puede "
"\"restablecer\" este comportamiento eliminando el encabezado ``Content-"
"Transfer-Encoding``, después de lo cual una llamada a ``set_payload`` "
"codificará automáticamente la nueva carga útil (y agregará un nuevo "
"encabezado :mailheader:`Content-Transfer-Encoding`)."

#: ../Doc/library/email.mime.rst:255
msgid "*_charset* also accepts :class:`~email.charset.Charset` instances."
msgstr "*_charset* también acepta instancias :class:`~email.charset.Charset`."
