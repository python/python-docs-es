# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-07-22 13:24-0300\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language: es\n"
"X-Generator: Poedit 2.3\n"

#: ../Doc/library/bisect.rst:2
msgid ":mod:`bisect` --- Array bisection algorithm"
msgstr ":mod:`bisect` --- Algoritmo de bisección de arreglos"

#: ../Doc/library/bisect.rst:10
msgid "**Source code:** :source:`Lib/bisect.py`"
msgstr "**Código fuente:** :source:`Lib/bisect.py`"

#: ../Doc/library/bisect.rst:14
msgid ""
"This module provides support for maintaining a list in sorted order without "
"having to sort the list after each insertion.  For long lists of items with "
"expensive comparison operations, this can be an improvement over the more "
"common approach.  The module is called :mod:`bisect` because it uses a basic "
"bisection algorithm to do its work.  The source code may be most useful as a "
"working example of the algorithm (the boundary conditions are already "
"right!)."
msgstr ""
"Este módulo brinda soporte para mantener una lista ordenada sin tener que "
"reordenar la lista tras cada nueva inserción. Para listas largas de "
"elementos que tienen operaciones de comparación costosas, será una mejora "
"respecto a la estrategia más habitual. El módulo se llama  :mod:`bisect` "
"porque usa un algoritmo de bisección básico para lograr su objetivo. El "
"código fuente puede ser útil como ejemplo del algoritmo en funcionamiento "
"(¡las precondiciones ya están bien de antemano!)."

#: ../Doc/library/bisect.rst:21
msgid "The following functions are provided:"
msgstr "Las siguientes funciones están disponibles:"

#: ../Doc/library/bisect.rst:26
msgid ""
"Locate the insertion point for *x* in *a* to maintain sorted order. The "
"parameters *lo* and *hi* may be used to specify a subset of the list which "
"should be considered; by default the entire list is used.  If *x* is already "
"present in *a*, the insertion point will be before (to the left of) any "
"existing entries.  The return value is suitable for use as the first "
"parameter to ``list.insert()`` assuming that *a* is already sorted."
msgstr ""
"Ubicar el punto de inserción para *x* en *a* para mantener el ordenamiento. "
"Los parámetros *lo* (inferior) y *hi* (superior) pueden utilizarse para "
"especificar un subconjunto (*subset*) de la lista que debería considerarse. "
"Por defecto, se utiliza la lista completa. Si *x* ya está presente en *a*, "
"el punto de inserción será antes (a la izquierda de) cualquier elemento "
"existente. El valor de retorno es adecuado para que se utilice como primer "
"parámetro para ``list.insert()``, suponiendo que *a* ya está ordenada."

#: ../Doc/library/bisect.rst:33
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so "
"that ``all(val < x for val in a[lo:i])`` for the left side and ``all(val >= "
"x for val in a[i:hi])`` for the right side."
msgstr ""
"El punto de inserción retornado *i* particiona al arreglo *a* en dos "
"mitades, tal que ``all(val < x for val in a[lo:i])`` para el lado izquierdo "
"y ``all(val >= x for val in a[i:hi])`` para el derecho."

#: ../Doc/library/bisect.rst:40
msgid ""
"Similar to :func:`bisect_left`, but returns an insertion point which comes "
"after (to the right of) any existing entries of *x* in *a*."
msgstr ""
"Similar a  :func:`bisect_left`, pero retorna un punto de inserción que viene "
"después (a la derecha de) cualquier entrada de *x* en *a*."

#: ../Doc/library/bisect.rst:43
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so "
"that ``all(val <= x for val in a[lo:i])`` for the left side and ``all(val > "
"x for val in a[i:hi])`` for the right side."
msgstr ""
"El punto de inserción retornado *i* particiona al arreglo *a* en dos "
"mitades, tal que ``all(val <= x for val in a[lo:i])`` para el lado izquierdo "
"y ``all(val > x for val in a[i:hi])`` para el derecho."

#: ../Doc/library/bisect.rst:49
msgid ""
"Insert *x* in *a* in sorted order.  This is equivalent to ``a.insert(bisect."
"bisect_left(a, x, lo, hi), x)`` assuming that *a* is already sorted.  Keep "
"in mind that the O(log n) search is dominated by the slow O(n) insertion "
"step."
msgstr ""
"Inserta *x* en *a* de forma ordenada. Esto equivale a ``a.insert(bisect."
"bisect_left(a, x, lo, hi), x)``, suponiendo que *a* ya está ordenada. Tenga "
"presente que la búsqueda O(log n) está dominada por el paso de inserción "
"O(n) lento."

#: ../Doc/library/bisect.rst:57
msgid ""
"Similar to :func:`insort_left`, but inserting *x* in *a* after any existing "
"entries of *x*."
msgstr ""
"Similar a :func:`insort_left`, pero inserta *x* en *a* después de cualquier "
"entrada *x* existente."

#: ../Doc/library/bisect.rst:62
msgid ""
"`SortedCollection recipe <https://code.activestate.com/recipes/577197-"
"sortedcollection/>`_ that uses bisect to build a full-featured collection "
"class with straight-forward search methods and support for a key-function.  "
"The keys are precomputed to save unnecessary calls to the key function "
"during searches."
msgstr ""
"`Receta SortedCollection <https://code.activestate.com/recipes/577197-"
"sortedcollection/>`_ que usa bisección para construir una \"clase-colección"
"\" con todas las funcionalidades, con métodos de búsqueda directos y con "
"soporte para una función-clave (*key-function*). Las claves son procesadas "
"de antemano, para ahorrar llamadas innecesarias a la función clave durante "
"las búsquedas."

#: ../Doc/library/bisect.rst:70
msgid "Searching Sorted Lists"
msgstr "Búsqueda en listas ordenadas"

#: ../Doc/library/bisect.rst:72
msgid ""
"The above :func:`bisect` functions are useful for finding insertion points "
"but can be tricky or awkward to use for common searching tasks. The "
"following five functions show how to transform them into the standard "
"lookups for sorted lists::"
msgstr ""
"Las funciones anteriores :func:`bisect` son útiles para encontrar puntos de "
"inserción, pero pueden resultar difíciles o engorrosas para tareas de "
"búsqueda habituales. Las cinco funciones que siguen muestran cómo "
"convertirlas en búsquedas estándar para listas ordenadas::"

#: ../Doc/library/bisect.rst:114
msgid "Other Examples"
msgstr "Otros ejemplos"

#: ../Doc/library/bisect.rst:118
msgid ""
"The :func:`bisect` function can be useful for numeric table lookups. This "
"example uses :func:`bisect` to look up a letter grade for an exam score "
"(say) based on a set of ordered numeric breakpoints: 90 and up is an 'A', 80 "
"to 89 is a 'B', and so on::"
msgstr ""
"La función :func:`bisect` puede ser útil para búsquedas en tablas numéricas. "
"Este ejemplo utiliza :func:`bisect` para buscar una calificación de un "
"examen dada por una letra, basada en un conjunto de marcas numéricas "
"ordenadas: 90 o más es una 'A', de 80 a 89 es una 'B', y así sucesivamente::"

#: ../Doc/library/bisect.rst:130
msgid ""
"Unlike the :func:`sorted` function, it does not make sense for the :func:"
"`bisect` functions to have *key* or *reversed* arguments because that would "
"lead to an inefficient design (successive calls to bisect functions would "
"not \"remember\" all of the previous key lookups)."
msgstr ""
"A diferencia de la función :func:`sorted`, no tiene sentido para las "
"funciones :func:`bisect` tener los argumentos *key* o *reversed*, porque "
"conduciría a un diseño ineficiente (llamadas sucesivas a funciones de "
"bisección no \"recordarían\" todas las búsquedas previas con clave)."

#: ../Doc/library/bisect.rst:135
msgid ""
"Instead, it is better to search a list of precomputed keys to find the index "
"of the record in question::"
msgstr ""
"En su lugar, es mejor buscar en una lista de claves procesadas de antemano "
"para encontrar el índice del registro en cuestión::"
