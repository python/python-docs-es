# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-07-21 16:16-0300\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language: es_AR\n"
"X-Generator: Poedit 2.2.1\n"

#: ../Doc/library/atexit.rst:2
msgid ":mod:`atexit` --- Exit handlers"
msgstr ":mod:`atexit` --- Gestores de Salida"

#: ../Doc/library/atexit.rst:12
msgid ""
"The :mod:`atexit` module defines functions to register and unregister "
"cleanup functions.  Functions thus registered are automatically executed "
"upon normal interpreter termination.  :mod:`atexit` runs these functions in "
"the *reverse* order in which they were registered; if you register ``A``, "
"``B``, and ``C``, at interpreter termination time they will be run in the "
"order ``C``, ``B``, ``A``."
msgstr ""
"El módulo :mod:`atexit` define funciones para registrar y cancelar el "
"registro de las funciones de limpieza. Las funciones así registradas se "
"ejecutan automáticamente cuando el intérprete se detiene normalmente. El "
"módulo :mod:`atexit` realiza estas funciones en el orden inverso en el que "
"se registraron; si ingresa ``A``, ``B``, y ``C``, cuando el intérprete se "
"detenga, se ejecutarán en el orden ``C``, ``B``, ``A``."

#: ../Doc/library/atexit.rst:19
msgid ""
"**Note:** The functions registered via this module are not called when the "
"program is killed by a signal not handled by Python, when a Python fatal "
"internal error is detected, or when :func:`os._exit` is called."
msgstr ""
"**Nota:** Las funciones registradas a través de este módulo no se invocan "
"cuando el programa es eliminado por una señal no gestionada por Python, "
"cuando se detecta un error fatal interno en Python o cuando se llama a la "
"función :func:`os._exit`."

#: ../Doc/library/atexit.rst:23
msgid ""
"When used with C-API subinterpreters, registered functions are local to the "
"interpreter they were registered in."
msgstr ""
"Cuando se usan con sub-intérpretes API C, las funciones registradas son "
"locales para el intérprete en el que se registraron."

#: ../Doc/library/atexit.rst:29
msgid ""
"Register *func* as a function to be executed at termination.  Any optional "
"arguments that are to be passed to *func* must be passed as arguments to :"
"func:`register`.  It is possible to register the same function and arguments "
"more than once."
msgstr ""
"Registra *func* como una función que se ejecutará cuando el intérprete se "
"detenga. Cualquier argumento opcional que deba pasarse a *func* debe pasarse "
"como un argumento para la función :func:`register`. Es posible registrar las "
"mismas funciones y argumentos más de una vez."

#: ../Doc/library/atexit.rst:34
msgid ""
"At normal program termination (for instance, if :func:`sys.exit` is called "
"or the main module's execution completes), all functions registered are "
"called in last in, first out order.  The assumption is that lower level "
"modules will normally be imported before higher level modules and thus must "
"be cleaned up later."
msgstr ""
"En la finalización normal del programa (por ejemplo, si se llama a la "
"función :func:`sys.exit` o finaliza la ejecución del módulo principal), "
"todas las funciones registradas se invocan en el orden último en entrar, "
"primero en salir. Se supone que los módulos de nivel más bajo normalmente se "
"importarán antes que los módulos de nivel alto y, por lo tanto, se limpiarán "
"al final."

#: ../Doc/library/atexit.rst:40
msgid ""
"If an exception is raised during execution of the exit handlers, a traceback "
"is printed (unless :exc:`SystemExit` is raised) and the exception "
"information is saved.  After all exit handlers have had a chance to run the "
"last exception to be raised is re-raised."
msgstr ""
"Si se lanza una excepción durante la ejecución de los gestores de salida, se "
"muestra un seguimiento de llamada (a menos que se haya lanzado :exc:"
"`SystemExit`) y se guarda la información de la excepción. Después de que "
"todos los controladores de fin de programa hayan tenido la oportunidad de "
"ejecutarse, la última excepción que se lanzó se vuelve a lanzar."

#: ../Doc/library/atexit.rst:45
msgid ""
"This function returns *func*, which makes it possible to use it as a "
"decorator."
msgstr ""
"Esta función retorna *func*, lo que hace posible usarlo como decorador."

#: ../Doc/library/atexit.rst:51
msgid ""
"Remove *func* from the list of functions to be run at interpreter shutdown.  "
"After calling :func:`unregister`, *func* is guaranteed not to be called when "
"the interpreter shuts down, even if it was registered more than once.  :func:"
"`unregister` silently does nothing if *func* was not previously registered."
msgstr ""
"Elimina *func* de la lista de funciones que se ejecutarán cuando el "
"intérprete se detenga. Después de llamar a la función :func:`unregister`, se "
"garantiza que *func* no se llamará cuando el intérprete se detenga, incluso "
"si se ha registrado más de una vez. :func:`unregister` no hace nada y "
"permanece en silencio en caso de que *func* no se haya registrado "
"previamente."

#: ../Doc/library/atexit.rst:61
msgid "Module :mod:`readline`"
msgstr "Módulo :mod:`readline`"

#: ../Doc/library/atexit.rst:61
msgid ""
"Useful example of :mod:`atexit` to read and write :mod:`readline` history "
"files."
msgstr ""
"Un ejemplo útil del uso de :mod:`atexit` para leer y escribir archivos de "
"historial :mod:`readline`."

#: ../Doc/library/atexit.rst:68
msgid ":mod:`atexit` Example"
msgstr "Ejemplo con :mod:`atexit`"

#: ../Doc/library/atexit.rst:70
msgid ""
"The following simple example demonstrates how a module can initialize a "
"counter from a file when it is imported and save the counter's updated value "
"automatically when the program terminates without relying on the application "
"making an explicit call into this module at termination. ::"
msgstr ""
"El siguiente ejemplo simple muestra cómo un módulo puede inicializar un "
"contador desde un archivo cuando se importa, y guardar el valor del contador "
"actualizado automáticamente cuando finaliza el programa, sin necesidad de "
"que la aplicación realice una llamada explícita en este módulo cuando el "
"intérprete se detiene. ::"

#: ../Doc/library/atexit.rst:92
msgid ""
"Positional and keyword arguments may also be passed to :func:`register` to "
"be passed along to the registered function when it is called::"
msgstr ""
"Los argumentos posicionales y de palabras clave también se pueden pasar a :"
"func:`register` para volver a pasar a la función registrada cuando se llama::"

#: ../Doc/library/atexit.rst:104
msgid "Usage as a :term:`decorator`::"
msgstr "Usar como un :term:`decorator`::"

#: ../Doc/library/atexit.rst:112
msgid "This only works with functions that can be called without arguments."
msgstr "Esto solo funciona con funciones que se pueden invocar sin argumentos."
