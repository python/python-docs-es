# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get
# the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 19:43+0200\n"
"PO-Revision-Date: 2023-11-03 07:55-0500\n"
"Last-Translator: \n"
"Language-Team: python-doc-es\n"
"Language: es_AR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.13.0\n"
"X-Generator: Poedit 3.4.1\n"

#: ../Doc/library/atexit.rst:2
msgid ":mod:`atexit` --- Exit handlers"
msgstr ":mod:`atexit` --- Gestores de Salida"

#: ../Doc/library/atexit.rst:12
msgid ""
"The :mod:`atexit` module defines functions to register and unregister "
"cleanup functions.  Functions thus registered are automatically executed "
"upon normal interpreter termination.  :mod:`atexit` runs these functions in "
"the *reverse* order in which they were registered; if you register ``A``, "
"``B``, and ``C``, at interpreter termination time they will be run in the "
"order ``C``, ``B``, ``A``."
msgstr ""
"El módulo :mod:`atexit` define funciones para registrar y cancelar el "
"registro de las funciones de limpieza. Las funciones así registradas se "
"ejecutan de forma automática al terminar el intérprete normalmente. El "
"módulo :mod:`atexit` realiza estas funciones en el orden *inverso* en el que "
"se registraron; si ingresa ``A``, ``B``, y ``C``, cuando el intérprete se "
"detenga, se ejecutarán en el orden ``C``, ``B``, ``A``."

#: ../Doc/library/atexit.rst:19
msgid ""
"**Note:** The functions registered via this module are not called when the "
"program is killed by a signal not handled by Python, when a Python fatal "
"internal error is detected, or when :func:`os._exit` is called."
msgstr ""
"**Nota:** Las funciones registradas a través de este módulo no son llamadas "
"cuando el programa es eliminado por una señal no manejada por Python, cuando "
"se detecta un error fatal interno en Python o cuando se llama a la función :"
"func:`os._exit`."

#: ../Doc/library/atexit.rst:23
msgid ""
"**Note:** The effect of registering or unregistering functions from within a "
"cleanup function is undefined."
msgstr ""
"**Nota:** El efecto de registrar o cancelar el registro de funciones dentro "
"de una función de limpieza no esta definido."

#: ../Doc/library/atexit.rst:26
msgid ""
"When used with C-API subinterpreters, registered functions are local to the "
"interpreter they were registered in."
msgstr ""
"Cuando se usan con sub-intérpretes API C, las funciones registradas son "
"locales para el intérprete en el que se registraron."

#: ../Doc/library/atexit.rst:32
msgid ""
"Register *func* as a function to be executed at termination.  Any optional "
"arguments that are to be passed to *func* must be passed as arguments to :"
"func:`register`.  It is possible to register the same function and arguments "
"more than once."
msgstr ""
"Registra *func* como una función que se ejecutará cuando el intérprete se "
"termine. Cualquier argumento opcional que deba pasarse a *func* debe pasarse "
"como un argumento para la función :func:`register`. Es posible registrar la "
"misma función y argumentos más de una vez."

#: ../Doc/library/atexit.rst:37
msgid ""
"At normal program termination (for instance, if :func:`sys.exit` is called "
"or the main module's execution completes), all functions registered are "
"called in last in, first out order.  The assumption is that lower level "
"modules will normally be imported before higher level modules and thus must "
"be cleaned up later."
msgstr ""
"En la finalización normal del programa (por ejemplo, si se llama a la "
"función :func:`sys.exit` o finaliza la ejecución del módulo principal), "
"todas las funciones registradas son llamadas en el orden último en entrar, "
"primero en salir. Se supone que los módulos de menor nivel normalmente se "
"importarán antes que los módulos de mayor nivel,  y por lo tanto, se "
"limpiarán al final."

#: ../Doc/library/atexit.rst:43
msgid ""
"If an exception is raised during execution of the exit handlers, a traceback "
"is printed (unless :exc:`SystemExit` is raised) and the exception "
"information is saved.  After all exit handlers have had a chance to run, the "
"last exception to be raised is re-raised."
msgstr ""
"Si se lanza una excepción durante la ejecución de los manejadores de salida, "
"se muestra un rastreo (a menos que se haya lanzado :exc:`SystemExit`) y se "
"guarda la información de la excepción. Después de que todos los manejadores "
"de salida hayan tenido la oportunidad de ejecutarse, la última excepción "
"lanzada se vuelve a lanzar."

#: ../Doc/library/atexit.rst:48
msgid ""
"This function returns *func*, which makes it possible to use it as a "
"decorator."
msgstr ""
"Esta función retorna *func*, lo que hace posible usarlo como decorador."

#: ../Doc/library/atexit.rst:52
msgid ""
"Starting new threads or calling :func:`os.fork` from a registered function "
"can lead to race condition between the main Python runtime thread freeing "
"thread states while internal :mod:`threading` routines or the new process "
"try to use that state. This can lead to crashes rather than clean shutdown."
msgstr ""
"Iniciar nuevos hilos o llamar a :func:`os.fork` desde una función registrada "
"puede llevar a una condición de carrera entre el hilo principal de Python "
"liberando estados de hilos mientras las rutinas internas de :mod:`threading` "
"o el nuevo proceso intentan usar ese estado. Esto puede provocar fallos en "
"lugar de un cierre limpio."

#: ../Doc/library/atexit.rst:58
msgid ""
"Attempts to start a new thread or :func:`os.fork` a new process in a "
"registered function now leads to :exc:`RuntimeError`."
msgstr ""
"Los intentos de iniciar un nuevo hilo o :func:`bifurcar <os.fork>` un nuevo "
"proceso en una función registrada conducen ahora a un :exc:`RuntimeError`."

#: ../Doc/library/atexit.rst:64
msgid ""
"Remove *func* from the list of functions to be run at interpreter shutdown. :"
"func:`unregister` silently does nothing if *func* was not previously "
"registered.  If *func* has been registered more than once, every occurrence "
"of that function in the :mod:`atexit` call stack will be removed.  Equality "
"comparisons (``==``) are used internally during unregistration, so function "
"references do not need to have matching identities."
msgstr ""
"Elimina *func* de la lista de funciones que se ejecutarán en el apagado del "
"intérprete. La función :func:`unregister` silenciosamente no hace nada si la "
"*func* no se registró previamente. Si *func* se ha registrado más de una "
"vez, se eliminarán todas las apariciones de esa función en la pila de "
"llamadas de :mod:`atexit`. Se utilizan comparaciones de igualdad (''=='') "
"internamente durante la cancelación del registro, por lo que las referencias "
"de funciones no necesitan tener identidades coincidentes."

#: ../Doc/library/atexit.rst:75
msgid "Module :mod:`readline`"
msgstr "Módulo :mod:`readline`"

#: ../Doc/library/atexit.rst:75
msgid ""
"Useful example of :mod:`atexit` to read and write :mod:`readline` history "
"files."
msgstr ""
"Un ejemplo útil del uso de :mod:`atexit` para leer y escribir archivos de "
"historial :mod:`readline`."

#: ../Doc/library/atexit.rst:82
msgid ":mod:`atexit` Example"
msgstr "Ejemplo con :mod:`atexit`"

#: ../Doc/library/atexit.rst:84
msgid ""
"The following simple example demonstrates how a module can initialize a "
"counter from a file when it is imported and save the counter's updated value "
"automatically when the program terminates without relying on the application "
"making an explicit call into this module at termination. ::"
msgstr ""
"El siguiente ejemplo muestra cómo un módulo puede inicializar un contador "
"desde un archivo cuando se importa, y guardar el valor del contador "
"actualizado automáticamente cuando finaliza el programa, sin necesidad de "
"que la aplicación realice una llamada explícita en este módulo cuando el "
"intérprete se detiene. ::"

#: ../Doc/library/atexit.rst:107
msgid ""
"Positional and keyword arguments may also be passed to :func:`register` to "
"be passed along to the registered function when it is called::"
msgstr ""
"Los argumentos posicionales y de palabras clave también se pueden pasar a la "
"función :func:`register` para volver a pasar a la función registrada cuando "
"se llama::"

#: ../Doc/library/atexit.rst:119
msgid "Usage as a :term:`decorator`::"
msgstr "Usar como un :term:`decorator`::"

#: ../Doc/library/atexit.rst:127
msgid "This only works with functions that can be called without arguments."
msgstr "Esto solo funciona con funciones que se puedan llamar sin argumentos."
