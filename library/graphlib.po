# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python en Español
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Python en Español 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-16 21:42+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../Doc/library/graphlib.rst:2
msgid ":mod:`graphlib` --- Functionality to operate with graph-like structures"
msgstr ""
":mod:`graphlib` ---Funcionalidad para operar con estructuras de tipo-grafo"

#: ../Doc/library/graphlib.rst:8
msgid "**Source code:** :source:`Lib/graphlib.py`"
msgstr "**Código fuente:** :source:`Lib/graphlib.py`"

#: ../Doc/library/graphlib.rst:20
msgid "Provides functionality to topologically sort a graph of hashable nodes."
msgstr ""
"Provee una funcionalidad para ordenar topológicamente un grafo de nodos hash."

#: ../Doc/library/graphlib.rst:22
msgid ""
"A topological order is a linear ordering of the vertices in a graph such "
"that for every directed edge u -> v from vertex u to vertex v, vertex u "
"comes before vertex v in the ordering. For instance, the vertices of the "
"graph may represent tasks to be performed, and the edges may represent "
"constraints that one task must be performed before another; in this example, "
"a topological ordering is just a valid sequence for the tasks. A complete "
"topological ordering is possible if and only if the graph has no directed "
"cycles, that is, if it is a directed acyclic graph."
msgstr ""
"Un ordenamiento topológico es un ordenamiento lineal de los vértices en un "
"grafo de modo que para cada arista dirigida u -> v desde el vértice u al "
"vértice v, el vértice u viene antes del vértice v en el ordenamiento. Por "
"ejemplo, los vértices del grafo pueden representar tareas a realizar y las "
"aristas pueden representar restricciones de que una tarea debe realizarse "
"antes que otra; en este ejemplo, un ordenamiento topológico es solo una "
"secuencia válida para las tareas. Es posible un ordenamiento topológico "
"completo si y solo si el grafo no tiene ciclos dirigidos, es decir, si es un "
"grafo acíclico dirigido."

#: ../Doc/library/graphlib.rst:31
msgid ""
"If the optional *graph* argument is provided it must be a dictionary "
"representing a directed acyclic graph where the keys are nodes and the "
"values are iterables of all predecessors of that node in the graph (the "
"nodes that have edges that point to the value in the key). Additional nodes "
"can be added to the graph using the :meth:`~TopologicalSorter.add` method."
msgstr ""
"Si se proporciona el argumento opcional *graph*, este debe ser un "
"diccionario que represente un grafo acíclico dirigido donde las claves son "
"nodos y los valores son iterables de todos los predecesores de ese nodo en "
"el grafo (los nodos que tienen las aristas que apuntan al valor clave). Se "
"pueden agregar nodos adicionales al grafo utilizando el :meth:"
"`~TopologicalSorter.add` method."

#: ../Doc/library/graphlib.rst:37
msgid ""
"In the general case, the steps required to perform the sorting of a given "
"graph are as follows:"
msgstr ""
"En el caso general, los pasos necesarios para realizar el ordenamiento de un "
"grafo son los siguientes:"

#: ../Doc/library/graphlib.rst:40
msgid ""
"Create an instance of the :class:`TopologicalSorter` with an optional "
"initial graph."
msgstr ""
"Cree una instancia :class:`TopologicalSorter` con un grafo inicial opcional."

#: ../Doc/library/graphlib.rst:42
msgid "Add additional nodes to the graph."
msgstr "Agregue nodos adicionales al grafo."

#: ../Doc/library/graphlib.rst:43
msgid "Call :meth:`~TopologicalSorter.prepare` on the graph."
msgstr "Llame a :meth:`~TopologicalSorter.prepare` en el grafo."

#: ../Doc/library/graphlib.rst:44
msgid ""
"While :meth:`~TopologicalSorter.is_active` is ``True``, iterate over the "
"nodes returned by :meth:`~TopologicalSorter.get_ready` and process them. "
"Call :meth:`~TopologicalSorter.done` on each node as it finishes processing."
msgstr ""
"Mientras :meth:`~TopologicalSorter.is_active` is ``True``, itere sobre los "
"nodos retornados por :meth:`~TopologicalSorter.get_ready` y procéselos . "
"Llame a :meth:`~TopologicalSorter.done` en cada nodo a medida que finaliza "
"el procesamiento."

#: ../Doc/library/graphlib.rst:49
msgid ""
"In case just an immediate sorting of the nodes in the graph is required and "
"no parallelism is involved, the convenience method :meth:`TopologicalSorter."
"static_order` can be used directly:"
msgstr ""
"En caso de que sólo se requiera una ordenación inmediata de los nodos del "
"grafo y no haya paralelismo, se puede utilizar directamente el método de "
"conveniencia :meth:`TopologicalSorter.static_order`"

#: ../Doc/library/graphlib.rst:60
msgid ""
"The class is designed to easily support parallel processing of the nodes as "
"they become ready. For instance::"
msgstr ""
"La clase está diseñada para soportar fácilmente el procesamiento en paralelo "
"de los nodos a medida que estén listos. Para la instancia::"

#: ../Doc/library/graphlib.rst:87
msgid ""
"Add a new node and its predecessors to the graph. Both the *node* and all "
"elements in *predecessors* must be hashable."
msgstr ""
"Añade un nuevo nodo y sus predecesores al grafo. Tanto el *node* como todos "
"los elementos de *predecessors* deben ser hashables."

#: ../Doc/library/graphlib.rst:90
msgid ""
"If called multiple times with the same node argument, the set of "
"dependencies will be the union of all dependencies passed in."
msgstr ""
"Si se llama varias veces con el mismo argumento del nodo, el conjunto de "
"dependencias será la unión de todas las dependencias pasadas."

#: ../Doc/library/graphlib.rst:93
msgid ""
"It is possible to add a node with no dependencies (*predecessors* is not "
"provided) or to provide a dependency twice. If a node that has not been "
"provided before is included among *predecessors* it will be automatically "
"added to the graph with no predecessors of its own."
msgstr ""
"Es posible añadir un nodo sin dependencias (no se proporciona "
"*predecessors*) o proporcionar una dependencia dos veces. Si un nodo que no "
"se ha proporcionado antes se incluye entre los *predecessors*, se añadirá "
"automáticamente al grafo sin predecesores propios."

#: ../Doc/library/graphlib.rst:98
msgid ""
"Raises :exc:`ValueError` if called after :meth:`~TopologicalSorter.prepare`."
msgstr ""
"Provoca :exc:`ValueError` si se llama después de :meth:`~TopologicalSorter."
"prepare`."

#: ../Doc/library/graphlib.rst:102
msgid ""
"Mark the graph as finished and check for cycles in the graph. If any cycle "
"is detected, :exc:`CycleError` will be raised, but :meth:`~TopologicalSorter."
"get_ready` can still be used to obtain as many nodes as possible until "
"cycles block more progress. After a call to this function, the graph cannot "
"be modified, and therefore no more nodes can be added using :meth:"
"`~TopologicalSorter.add`."
msgstr ""
"Marca el grafo como terminado y comprueba si existen ciclos en el grafo. Si "
"se detecta algún ciclo, se lanzará :exc:`CycleError`, pero se puede seguir "
"utilizando :meth:`~TopologicalSorter.get_ready` para obtener tantos nodos "
"como sea posible hasta que los ciclos bloqueen más el progreso. Después de "
"una llamada a esta función, el grafo no puede ser modificado, y por lo tanto "
"no se pueden añadir más nodos utilizando :meth:`~TopologicalSorter.add`."

#: ../Doc/library/graphlib.rst:111
msgid ""
"Returns ``True`` if more progress can be made and ``False`` otherwise. "
"Progress can be made if cycles do not block the resolution and either there "
"are still nodes ready that haven't yet been returned by :meth:"
"`TopologicalSorter.get_ready` or the number of nodes marked :meth:"
"`TopologicalSorter.done` is less than the number that have been returned by :"
"meth:`TopologicalSorter.get_ready`."
msgstr ""
"Retorna ``True`` si se puede avanzar más y ``False`` en caso contrario. Se "
"puede avanzar si los ciclos no bloquean la resolución y, o bien todavía "
"existen nodos listos que aún no han sido retornados por :meth:"
"`TopologicalSorter.get_ready` o el número de nodos marcados con :meth:"
"`TopologicalSorter.done` es menor que el número que han sido retornados por :"
"meth:`TopologicalSorter.get_ready`."

#: ../Doc/library/graphlib.rst:118
msgid ""
"The :meth:`~TopologicalSorter.__bool__` method of this class defers to this "
"function, so instead of::"
msgstr ""
"El método :meth:`~TopologicalSorter.__bool__` de esta clase defiere a esta "
"función, por lo que en lugar de::"

#: ../Doc/library/graphlib.rst:124
msgid "it is possible to simply do::"
msgstr "es posible hacer simplemente::"

#: ../Doc/library/graphlib.rst:129 ../Doc/library/graphlib.rst:152
msgid ""
"Raises :exc:`ValueError` if called without calling :meth:`~TopologicalSorter."
"prepare` previously."
msgstr ""
"Lanzar :exc:`ValueError` si se llama sin llamar previamente a :meth:"
"`~TopologicalSorter.prepare`."

#: ../Doc/library/graphlib.rst:134
msgid ""
"Marks a set of nodes returned by :meth:`TopologicalSorter.get_ready` as "
"processed, unblocking any successor of each node in *nodes* for being "
"returned in the future by a call to :meth:`TopologicalSorter.get_ready`."
msgstr ""
"Marca un conjunto de nodos retornados por :meth:`TopologicalSorter."
"get_ready` como procesados, desbloqueando cualquier sucesor de cada nodo en "
"*nodes* para ser retornado en el futuro por una llamada a :meth:"
"`TopologicalSorter.get_ready`."

#: ../Doc/library/graphlib.rst:138
msgid ""
"Raises :exc:`ValueError` if any node in *nodes* has already been marked as "
"processed by a previous call to this method or if a node was not added to "
"the graph by using :meth:`TopologicalSorter.add`, if called without calling :"
"meth:`~TopologicalSorter.prepare` or if node has not yet been returned by :"
"meth:`~TopologicalSorter.get_ready`."
msgstr ""
"Lanza :exc:`ValueError` si algún nodo de *nodes* ya ha sido marcado como "
"procesado por una llamada anterior a este método o si un nodo no fue añadido "
"al grafo usando :meth:`TopologicalSorter.add`, si se llama sin llamar a :"
"meth:`~TopologicalSorter.prepare` o si el nodo aún no ha sido retornado por :"
"meth:`~TopologicalSorter.get_ready`."

#: ../Doc/library/graphlib.rst:146
msgid ""
"Returns a ``tuple`` with all the nodes that are ready. Initially it returns "
"all nodes with no predecessors, and once those are marked as processed by "
"calling :meth:`TopologicalSorter.done`, further calls will return all new "
"nodes that have all their predecessors already processed. Once no more "
"progress can be made, empty tuples are returned."
msgstr ""
"Retorna una ``tupla`` con todos los nodos que están listos. Inicialmente "
"retorna todos los nodos sin predecesores, y una vez que éstos se marcan como "
"procesados llamando a :meth:`TopologicalSorter.done`, las llamadas "
"posteriores devolverán todos los nuevos nodos que tengan todos sus "
"predecesores ya procesados. Una vez que no se puede avanzar más, se retornan "
"tuplas vacías."

#: ../Doc/library/graphlib.rst:157
msgid ""
"Returns an iterator object which will iterate over nodes in a topological "
"order. When using this method, :meth:`~TopologicalSorter.prepare` and :meth:"
"`~TopologicalSorter.done` should not be called. This method is equivalent "
"to::"
msgstr ""
"Retorna un iterable de nodos en un ordenamiento topológico. El uso de este "
"método no requiere llamar a :meth:`TopologicalSorter.prepare` o :meth:"
"`TopologicalSorter.done`. Este método es equivalente a::"

#: ../Doc/library/graphlib.rst:169
msgid ""
"The particular order that is returned may depend on the specific order in "
"which the items were inserted in the graph. For example:"
msgstr ""
"El orden concreto que se retorna puede depender del orden específico en que "
"se insertaron los elementos en el grafo. Por ejemplo:"

#: ../Doc/library/graphlib.rst:186
msgid ""
"This is due to the fact that \"0\" and \"2\" are in the same level in the "
"graph (they would have been returned in the same call to :meth:"
"`~TopologicalSorter.get_ready`) and the order between them is determined by "
"the order of insertion."
msgstr ""
"Esto se debe a que \"0\" y \"2\" están en el mismo nivel en el gráfico "
"(habrían sido retornados en la misma llamada a :meth:`~TopologicalSorter."
"get_ready`) y el orden entre ellos está determinado por el orden de "
"inserción."

#: ../Doc/library/graphlib.rst:192
msgid "If any cycle is detected, :exc:`CycleError` will be raised."
msgstr "Si se detecta algún ciclo, se lanzará :exc:`CycleError`."

#: ../Doc/library/graphlib.rst:198
msgid "Exceptions"
msgstr "Excepciones"

#: ../Doc/library/graphlib.rst:199
msgid "The :mod:`graphlib` module defines the following exception classes:"
msgstr "El módulo :mod:`graphlib` define las siguientes clases de excepción:"

#: ../Doc/library/graphlib.rst:203
msgid ""
"Subclass of :exc:`ValueError` raised by :meth:`TopologicalSorter.prepare` if "
"cycles exist in the working graph. If multiple cycles exist, only one "
"undefined choice among them will be reported and included in the exception."
msgstr ""
"Subclase de :exc:`ValueError` planteada por :meth:`TopologicalSorter."
"prepare` si existen ciclos en el grafo de trabajo. Si existen múltiples "
"ciclos, sólo se informará de una elección indefinida entre ellos y se "
"incluirá en la excepción."

#: ../Doc/library/graphlib.rst:207
msgid ""
"The detected cycle can be accessed via the second element in the :attr:"
"`~CycleError.args` attribute of the exception instance and consists in a "
"list of nodes, such that each node is, in the graph, an immediate "
"predecessor of the next node in the list. In the reported list, the first "
"and the last node will be the same, to make it clear that it is cyclic."
msgstr ""
"Se puede acceder al ciclo detectado a través del segundo elemento del "
"atributo :attr:`~CycleError.args` de la instancia de la excepción y consiste "
"en una lista de nodos, tal que cada nodo este, en el grafo, un predecesor "
"inmediato del siguiente nodo en la lista. En la lista reportada, el primer y "
"el último nodo serán el mismo, para dejar claro que es cíclico."
