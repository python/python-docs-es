# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-10-08 06:30-0500\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language: es_EC\n"
"X-Generator: Poedit 2.4.1\n"

#: ../Doc/library/runpy.rst:2
msgid ":mod:`runpy` --- Locating and executing Python modules"
msgstr ":mod:`runpy` --- Localización y ejecución de módulos *Python*"

#: ../Doc/library/runpy.rst:9
msgid "**Source code:** :source:`Lib/runpy.py`"
msgstr "**Código Fuente:** :source:`Lib/runpy.py`"

#: ../Doc/library/runpy.rst:13
msgid ""
"The :mod:`runpy` module is used to locate and run Python modules without "
"importing them first. Its main use is to implement the :option:`-m` command "
"line switch that allows scripts to be located using the Python module "
"namespace rather than the filesystem."
msgstr ""
"El modulo  :mod:`runpy` es usado para localizar y correr módulos *Python* "
"sin importarlo primero. Su uso principal es implementar la opción :option:`-"
"m` cambiando la linea de comando que permite que los scripts se ubiquen "
"utilizando el espacio de nombres del módulo de Python en lugar del sistema "
"de archivos."

#: ../Doc/library/runpy.rst:18
msgid ""
"Note that this is *not* a sandbox module - all code is executed in the "
"current process, and any side effects (such as cached imports of other "
"modules) will remain in place after the functions have returned."
msgstr ""
"Tenga en cuenta que este *no* es un módulo de espacio aislado - Todo el "
"código es ejecutado en el proceso actual, y cualquier efecto secundario "
"(como las importaciones en cache de otros módulos) permanecerán en su lugar "
"después de que las funciones hayan retornado."

#: ../Doc/library/runpy.rst:22
msgid ""
"Furthermore, any functions and classes defined by the executed code are not "
"guaranteed to work correctly after a :mod:`runpy` function has returned. If "
"that limitation is not acceptable for a given use case, :mod:`importlib` is "
"likely to be a more suitable choice than this module."
msgstr ""
"Además, no se garantiza que las funciones y clases definidas por el código "
"ejecutado funcionen correctamente después de que se haya devuelto la "
"función :mod:`runpy`. Si esa limitación no es aceptable para un caso de uso "
"determinado, es probable que :mod:`importlib` sea una opción más adecuada "
"que este módulo."

#: ../Doc/library/runpy.rst:27
msgid "The :mod:`runpy` module provides two functions:"
msgstr "El modulo :mod:`runpy` proporciona dos funciones:"

#: ../Doc/library/runpy.rst:35
msgid ""
"Execute the code of the specified module and return the resulting module "
"globals dictionary. The module's code is first located using the standard "
"import mechanism (refer to :pep:`302` for details) and then executed in a "
"fresh module namespace."
msgstr ""
"Ejecute el código del módulo especificado y devuelva el diccionario de "
"globales de módulo resultante. El código del módulo se encuentra primero "
"mediante el mecanismo de importación estándar (consulte :p ep:'302' para "
"obtener más información) y, a continuación, se ejecuta en un espacio de "
"nombres de módulo nuevo."

#: ../Doc/library/runpy.rst:40
msgid ""
"The *mod_name* argument should be an absolute module name. If the module "
"name refers to a package rather than a normal module, then that package is "
"imported and the ``__main__`` submodule within that package is then executed "
"and the resulting module globals dictionary returned."
msgstr ""
"El argumento *mod_name* debe ser un nombre de módulo absoluto. Si el nombre "
"del paquete se refiere a un paquete en lugar de un módulo normal, entonces "
"ese paquete es importado y el submódulo ``__main__`` dentro de ese paquete "
"luego se ejecuta y se devuelve el diccionario global del módulo resultante."

#: ../Doc/library/runpy.rst:46
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_module`."
msgstr ""
"El argumento de diccionario opcional *init_globals* se puede utilizar para "
"rellenar previamente el diccionario global del módulo antes de ejecutar el "
"código. El diccionario suministrado no se modificará. Si alguna de las "
"variables globales especiales siguientes se define en el diccionario "
"proporcionado, esas definiciones se reemplazan por :func:`run_module`."

#: ../Doc/library/runpy.rst:52 ../Doc/library/runpy.rst:121
msgid ""
"The special global variables ``__name__``, ``__spec__``, ``__file__``, "
"``__cached__``, ``__loader__`` and ``__package__`` are set in the globals "
"dictionary before the module code is executed (Note that this is a minimal "
"set of variables - other variables may be set implicitly as an interpreter "
"implementation detail)."
msgstr ""
"Las variables globales especiales ``__name__``, ``__spec__``, ``__file__``, "
"``__cached__``, ``__loader__`` y ``__package__`` se establecen en el "
"diccionario global antes del que el código del módulo sea ejecutado (tenga "
"en cuenta que esto es un conjunto mínimo de variables - otras variables "
"pueden establecerse implícitamente como un detalle de implementación del "
"intérprete)."

#: ../Doc/library/runpy.rst:58
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None`, to ``mod_name + '.__main__'`` if the named module is a package and "
"to the *mod_name* argument otherwise."
msgstr ""
"``__name__`` se establece en *run_name* si el argumento opcional no es :"
"const:`None`, para `mod_name + ‘.__main__’`` si módulo nombrado es un "
"paquete y al argumento *mod_name* en caso contrario."

#: ../Doc/library/runpy.rst:62
msgid ""
"``__spec__`` will be set appropriately for the *actually* imported module "
"(that is, ``__spec__.name`` will always be *mod_name* or ``mod_name + '."
"__main__``, never *run_name*)."
msgstr ""
"``__spec__`` se configura apropiadamente para el modulo *realmente* "
"importado (es decir, ``__spec__.name`` siempre será un *mod_name* o "
"``mod_name + ‘.__main__``, jamas *run_name*)."

#: ../Doc/library/runpy.rst:66
msgid ""
"``__file__``, ``__cached__``, ``__loader__`` and ``__package__`` are :ref:"
"`set as normal <import-mod-attrs>` based on the module spec."
msgstr ""
"``__file__``, ``__cached__``, ``__loader__`` y ``__package__`` son basados "
"en la especificación del modulo :ref:`set as normal <import-mod-attrs>`."

#: ../Doc/library/runpy.rst:69
msgid ""
"If the argument *alter_sys* is supplied and evaluates to :const:`True`, then "
"``sys.argv[0]`` is updated with the value of ``__file__`` and ``sys."
"modules[__name__]`` is updated with a temporary module object for the module "
"being executed. Both ``sys.argv[0]`` and ``sys.modules[__name__]`` are "
"restored to their original values before the function returns."
msgstr ""
"Si el argumento *alter_sys* es proporcionado y evaluado a :const:`True`, "
"entonces ``sys.argv[0]`` es actualizado y el valor de ``__file__`` y ``sys."
"modules[__name__]`` es actualizado con un objeto de módulo temporal para el "
"módulo que se esta ejecutado. Ambas `sys.argv[0]`` y ``sys."
"modules[__name__]`` son restauradas a sus valores originales antes del "
"retorno de la función."

#: ../Doc/library/runpy.rst:75
msgid ""
"Note that this manipulation of :mod:`sys` is not thread-safe. Other threads "
"may see the partially initialised module, as well as the altered list of "
"arguments. It is recommended that the :mod:`sys` module be left alone when "
"invoking this function from threaded code."
msgstr ""
"Tenga en cuenta que esta manipulación de :mod:`sys` no es segura para "
"subprocesos. Otros subprocesos pueden ver el módulo parcialmente "
"inicializado, así como la lista alterada de argumentos. Se recomienda que el "
"módulo :mod:`sys` se deje solo al invocar esta función desde código roscado."

#: ../Doc/library/runpy.rst:81
msgid ""
"The :option:`-m` option offering equivalent functionality from the command "
"line."
msgstr ""
"La opción :option:`-m` ofrece una funcionalidad equivalente desde la linea "
"de comandos."

#: ../Doc/library/runpy.rst:84
msgid ""
"Added ability to execute packages by looking for a ``__main__`` submodule."
msgstr ""
"Se agrego la capacidad de ejecutar paquetes buscando un submódulo "
"``__main__``."

#: ../Doc/library/runpy.rst:87
msgid "Added ``__cached__`` global variable (see :pep:`3147`)."
msgstr "Se agrego la variable global ``__cached__`` (consultar :pep:`3147`)."

#: ../Doc/library/runpy.rst:90
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly for modules run this way, as "
"well as ensuring the real module name is always accessible as ``__spec__."
"name``."
msgstr ""
"Se ha actualizado para aprovechar la función de especificación de módulo "
"agregada por :pep:'451'. Esto permite que ''__cached__'' se establezca "
"correctamente para que los módulos se ejecuten de esta manera, así como "
"asegurarse de que el nombre real del módulo siempre sea accesible como "
"''__spec__.name''."

#: ../Doc/library/runpy.rst:101
msgid ""
"Execute the code at the named filesystem location and return the resulting "
"module globals dictionary. As with a script name supplied to the CPython "
"command line, the supplied path may refer to a Python source file, a "
"compiled bytecode file or a valid sys.path entry containing a ``__main__`` "
"module (e.g. a zipfile containing a top-level ``__main__.py`` file)."
msgstr ""
"Ejecute el código en la ubicación del sistema de archivos con nombre y "
"devuelva el diccionario de globales de módulo resultante. Al igual que con "
"un nombre de script proporcionado a la línea de comandos de CPython, la ruta "
"de acceso proporcionada puede hacer referencia a un archivo de origen de "
"Python, un archivo de código de bytes compilado o una entrada sys.path "
"válida que contiene un módulo ''__main__'' (por ejemplo, un archivo zip que "
"contiene un archivo ''__main__.py'' de nivel superior)."

#: ../Doc/library/runpy.rst:107
msgid ""
"For a simple script, the specified code is simply executed in a fresh module "
"namespace. For a valid sys.path entry (typically a zipfile or directory), "
"the entry is first added to the beginning of ``sys.path``. The function then "
"looks for and executes a :mod:`__main__` module using the updated path. Note "
"that there is no special protection against invoking an existing :mod:"
"`__main__` entry located elsewhere on ``sys.path`` if there is no such "
"module at the specified location."
msgstr ""
"Para un *script* simple, el código especificado se ejecuta simplemente en un "
"espacio de nombres de un módulo nuevo. Para un entrada *sys.path* valida "
"(comúnmente es un archivo *zip* o un directorio), la entrada se agrega "
"primero al comienzo de ``sys.path``. La función busca y ejecuta un modulo :"
"mod:`__main__` usando la ruta actualizada. Tenga en cuenta que no existe una "
"protección especial contra la invocación de una entrada existente :mod:"
"`__main__` ubicada en otro lugar en ``sys.path`` si no hay tal módulo en la "
"ubicación especificada."

#: ../Doc/library/runpy.rst:115
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_path`."
msgstr ""
"El argumento de diccionario opcional *init_globals* se puede utilizar para "
"rellenar previamente el diccionario global del módulo antes de ejecutar el "
"código. El diccionario suministrado no se modificará. Si alguna de las "
"variables globales especiales siguientes se define en el diccionario "
"proporcionado, esas definiciones se reemplazan por :func:`run_path`."

#: ../Doc/library/runpy.rst:127
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None` and to ``'<run_path>'`` otherwise."
msgstr ""
"``__name__`` se establece para *run_name* si el argumento opcional no es :"
"const:`None` y a ``'<run_path>'`` de lo contrario."

#: ../Doc/library/runpy.rst:130
msgid ""
"If the supplied path directly references a script file (whether as source or "
"as precompiled byte code), then ``__file__`` will be set to the supplied "
"path, and ``__spec__``, ``__cached__``, ``__loader__`` and ``__package__`` "
"will all be set to :const:`None`."
msgstr ""
"Si la ruta proporcionada hace referencia a un archivo *script* (ya sea como "
"fuente o un código de *byte* precompilado), entonces ``__file__`` se "
"establecerá en la ruta proporcionada, y ``__spec__``, ``__cached__``, "
"``__loader__`` y ``__package__`` se establecerán todos en :const:`None`."

#: ../Doc/library/runpy.rst:135
msgid ""
"If the supplied path is a reference to a valid sys.path entry, then "
"``__spec__`` will be set appropriately for the imported ``__main__`` module "
"(that is, ``__spec__.name`` will always be ``__main__``). ``__file__``, "
"``__cached__``, ``__loader__`` and ``__package__`` will be :ref:`set as "
"normal <import-mod-attrs>` based on the module spec."
msgstr ""
"Si la ruta proporciona es una referencia a una entrada *sys.path* valida, "
"entonces ``__spec__`` se establece apropiadamente para la importación del "
"modulo ``__main__``(es decir, ``__spec__.name`` siempre deberá ser "
"``__main__``). ``__file__``, ``__cached__``, ``__loader__`` y "
"``__package__`` estarán basadas en la especificación del modulo  :ref:"
"`establecidas como normal <import-mod-attrs>`."

#: ../Doc/library/runpy.rst:141
msgid ""
"A number of alterations are also made to the :mod:`sys` module. Firstly, "
"``sys.path`` may be altered as described above. ``sys.argv[0]`` is updated "
"with the value of ``file_path`` and ``sys.modules[__name__]`` is updated "
"with a temporary module object for the module being executed. All "
"modifications to items in :mod:`sys` are reverted before the function "
"returns."
msgstr ""
"También se realizan una serie de alteraciones en el módulo :mod:`sys`. En "
"primer lugar, ``sys.path`` puede ser alterado como se describió "
"anteriormente. ``sys.argv[0]`` se actualiza con el valor de ``file_path`` y "
"``sys.modules[__name__]`` se actualiza con un objeto de módulo temporal para "
"el módulo que se está ejecutando. Todas las modificaciones de los elementos "
"de :mod:`sys` se revierten antes de que se devuelva la función."

#: ../Doc/library/runpy.rst:148
msgid ""
"Note that, unlike :func:`run_module`, the alterations made to :mod:`sys` are "
"not optional in this function as these adjustments are essential to allowing "
"the execution of sys.path entries. As the thread-safety limitations still "
"apply, use of this function in threaded code should be either serialised "
"with the import lock or delegated to a separate process."
msgstr ""
"Tenga en cuenta que, diferente a :func:`run_module`, las alteraciones hecha "
"a :mod:`sys` no son opcionales en esta función ya que estos ajustes son "
"esenciales para permitir la ejecución de entradas *sys.path*. Como aún se "
"aplican las limitaciones de seguridad de los subprocesos, el uso de esta "
"función en un código procesado debe serializarse con el bloqueo de "
"importación o delegarse a un proceso separado."

#: ../Doc/library/runpy.rst:155
msgid ""
":ref:`using-on-interface-options` for equivalent functionality on the "
"command line (``python path/to/script``)."
msgstr ""
":ref:`using-on-interface-options` para una funcionalidad equivalente en la "
"linea de comandos (``python path/to/script``)."

#: ../Doc/library/runpy.rst:160
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly in the case where "
"``__main__`` is imported from a valid sys.path entry rather than being "
"executed directly."
msgstr ""
"Actualizado para aprovechar la función de especificación del módulo agregada "
"por :pep:`451`. Esto permite que ``__cached__`` se configure correctamente "
"en el caso de que ``__main__`` se importe de una entrada *sys.path* valida "
"en lugar de ejecutarse directamente."

#: ../Doc/library/runpy.rst:169
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` -- Ejecutando módulos como *scripts*"

#: ../Doc/library/runpy.rst:169 ../Doc/library/runpy.rst:172
msgid "PEP written and implemented by Nick Coghlan."
msgstr "*PEP* escrito y implementado por *Nick Coghlan*."

#: ../Doc/library/runpy.rst:172
msgid ":pep:`366` -- Main module explicit relative imports"
msgstr ":pep:`366` -- Importaciones relativas explícitas del módulo principal"

#: ../Doc/library/runpy.rst:175
msgid ":pep:`451` -- A ModuleSpec Type for the Import System"
msgstr ":pep:`451` — Un tipo *ModuleSpec* para el sistema de Importación"

#: ../Doc/library/runpy.rst:175
msgid "PEP written and implemented by Eric Snow"
msgstr "*PEP* escrito y implementado por *Eric Snow*"

#: ../Doc/library/runpy.rst:177
msgid ":ref:`using-on-general` - CPython command line details"
msgstr ":ref:`using-on-general` - Detalles de la linea de comandos *CPython*"

#: ../Doc/library/runpy.rst:179
msgid "The :func:`importlib.import_module` function"
msgstr "La función :func:`importlib.import_module`"
