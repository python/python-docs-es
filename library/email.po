# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-10-16 11:13-0500\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language: es\n"
"X-Generator: Poedit 2.4.1\n"

#: ../Doc/library/email.rst:2
msgid ":mod:`email` --- An email and MIME handling package"
msgstr ":mod:`email` --- Un paquete de manejo de correo electrónico y MIME"

#: ../Doc/library/email.rst:11
msgid "**Source code:** :source:`Lib/email/__init__.py`"
msgstr "**Código fuente** :source:`Lib/email/__init__.py`"

#: ../Doc/library/email.rst:15
msgid ""
"The :mod:`email` package is a library for managing email messages.  It is "
"specifically *not* designed to do any sending of email messages to SMTP (:"
"rfc:`2821`), NNTP, or other servers; those are functions of modules such as :"
"mod:`smtplib` and :mod:`nntplib`.  The :mod:`email` package attempts to be "
"as RFC-compliant as possible, supporting :rfc:`5233` and :rfc:`6532`, as "
"well as such MIME-related RFCs as :rfc:`2045`, :rfc:`2046`, :rfc:`2047`, :"
"rfc:`2183`, and :rfc:`2231`."
msgstr ""
"El paquete :mod:`email` es una biblioteca para administrar mensajes de "
"correo electrónico. *No* esta diseñado específicamente para enviar mensajes "
"de correo electrónico SMTP (:rfc:`2821`), NNTP u otros servidores; esas son "
"funciones de módulos como :mod:`smtplib` y :mod:`nntplib`. El paquete :mod:"
"`email` intenta ser lo más compatible con RFC, admitiendo :rfc:`5233` y :rfc:"
"`6532`, así como RFC relacionados con MIME como :rfc:`2045`, :rfc:`2046`, :"
"rfc:`2047`, :rfc:`2183`, y :rfc:`2231`."

#: ../Doc/library/email.rst:23
msgid ""
"The overall structure of the email package can be divided into three major "
"components, plus a fourth component that controls the behavior of the other "
"components."
msgstr ""
"La estructura general del paquete de correo electrónico se puede dividir en "
"tres componentes principales, más un cuarto componente que controla el "
"comportamiento de los otros componentes."

#: ../Doc/library/email.rst:27
msgid ""
"The central component of the package is an \"object model\" that represents "
"email messages.  An application interacts with the package primarily through "
"the object model interface defined in the :mod:`~email.message` sub-module.  "
"The application can use this API to ask questions about an existing email, "
"to construct a new email, or to add or remove email subcomponents that "
"themselves use the same object model interface.  That is, following the "
"nature of email messages and their MIME subcomponents, the email object "
"model is a tree structure of objects that all provide the :class:`~email."
"message.EmailMessage` API."
msgstr ""
"El componente central del paquete es un \"modelo de objetos\" que representa "
"los mensajes de correo electrónico. Una aplicación interactúa con el paquete "
"principalmente a través de la interfaz del modelo de objetos definida en el "
"submódulo :mod:`~email.message`. La aplicación puede usar esta API para "
"hacer preguntas sobre un correo electrónico existente, para construir un "
"nuevo correo electrónico o para agregar o eliminar subcomponentes de correo "
"electrónico que utilizan la misma interfaz de modelo de objetos. Es decir, "
"siguiendo la naturaleza de los mensajes de correo electrónico y sus "
"subcomponentes MIME, el modelo de objetos de correo electrónico es una "
"estructura de árbol de objetos que proporcionan la API :class:`~email."
"message.EmailMessage`."

#: ../Doc/library/email.rst:37
msgid ""
"The other two major components of the package are the :mod:`~email.parser` "
"and the :mod:`~email.generator`.  The parser takes the serialized version of "
"an email message (a stream of bytes) and converts it into a tree of :class:"
"`~email.message.EmailMessage` objects.  The generator takes an :class:"
"`~email.message.EmailMessage` and turns it back into a serialized byte "
"stream.  (The parser and generator also handle streams of text characters, "
"but this usage is discouraged as it is too easy to end up with messages that "
"are not valid in one way or another.)"
msgstr ""
"Los otros dos componentes principales del paquete son :mod:`~email.parser` "
"y :mod:`~email.generator`. El parser toma la versión serializada de un "
"mensaje de correo electrónico (una secuencia de bytes) Y la convierte en un "
"árbol de objetos :class:`~email.message.EmailMessage`. El generador toma un :"
"class:`~email.message.EmailMessage` y lo convierte de nuevo en un flujo de "
"bytes serializado. (El analizador y el generador también manejan flujos de "
"caracteres de texto, pero se desaconseja este uso ya que es demasiado fácil "
"terminar con mensajes que no son válidos de una forma u otra)."

#: ../Doc/library/email.rst:46
msgid ""
"The control component is the :mod:`~email.policy` module.  Every :class:"
"`~email.message.EmailMessage`, every :mod:`~email.generator`, and every :mod:"
"`~email.parser` has an associated :mod:`~email.policy` object that controls "
"its behavior.  Usually an application only needs to specify the policy when "
"an :class:`~email.message.EmailMessage` is created, either by directly "
"instantiating an :class:`~email.message.EmailMessage`  to create a new "
"email, or by parsing an input stream using a :mod:`~email.parser`.  But the "
"policy can be changed when the message is serialized using a :mod:`~email."
"generator`. This allows, for example, a generic email message to be parsed "
"from disk, but to serialize it using standard SMTP settings when sending it "
"to an email server."
msgstr ""
"El componente de control es el módulo de :mod:`~email.policy`. Cada :class:"
"`~email.message.EmailMessage` cada :mod:`~email.generator`, y cada :mod:"
"`~email.parser` tiene un objeto de :mod:`~email.policy` asociado que "
"controla su comportamiento. Por lo general, una aplicación solo necesita "
"especificar la política cuando se crea un :class:`~email.message."
"EmailMessage` , ya sea instanciando directamente un :class:`~email.message."
"EmailMessage` para crear un nuevo correo electrónico o analizando un flujo "
"de entrada con un :mod:`~email.parser`. Pero la política se puede cambiar "
"cuando el mensaje se serializa mediante un :mod:`~email.generator`. Esto "
"permite, por ejemplo, analizar un mensaje de correo electrónico genérico "
"desde el disco, pero serializarlo utilizando la configuración estándar de "
"SMTP al enviarlo a un servidor de correo electrónico."

#: ../Doc/library/email.rst:58
msgid ""
"The email package does its best to hide the details of the various governing "
"RFCs from the application.  Conceptually the application should be able to "
"treat the email message as a structured tree of unicode text and binary "
"attachments, without having to worry about how these are represented when "
"serialized.  In practice, however, it is often necessary to be aware of at "
"least some of the rules governing MIME messages and their structure, "
"specifically the names and nature of the MIME \"content types\" and how they "
"identify multipart documents.  For the most part this knowledge should only "
"be required for more complex applications, and even then it should only be "
"the high level structure in question, and not the details of how those "
"structures are represented.  Since MIME content types are used widely in "
"modern internet software (not just email), this will be a familiar concept "
"to many programmers."
msgstr ""
"El paquete de correo electrónico hace todo lo posible para ocultar los "
"detalles de las diversas RFC que rigen de la aplicación. Conceptualmente, la "
"aplicación debería poder tratar el mensaje de correo electrónico como un "
"árbol estructurado de texto Unicode y archivos adjuntos binarios, sin tener "
"que preocuparse por cómo se representan estos cuando se serializan. En la "
"práctica, sin embargo, a menudo es necesario conocer al menos algunas de las "
"reglas que rigen los mensajes MIME y su estructura, específicamente los "
"nombres y la naturaleza de los «tipos de contenido» MIME y cómo identifican "
"los documentos de varias partes. En su mayor parte, este conocimiento solo "
"debería ser necesario para aplicaciones más complejas, e incluso entonces "
"debería ser solo la estructura de alto nivel en cuestión, y no los detalles "
"de cómo se representan esas estructuras. Dado que los tipos de contenido "
"MIME se utilizan ampliamente en el software moderno de Internet (no solo en "
"el correo electrónico), este será un concepto familiar para muchos "
"programadores."

#: ../Doc/library/email.rst:71
msgid ""
"The following sections describe the functionality of the :mod:`email` "
"package. We start with the :mod:`~email.message` object model, which is the "
"primary interface an application will use, and follow that with the :mod:"
"`~email.parser` and :mod:`~email.generator` components.  Then we cover the :"
"mod:`~email.policy` controls, which completes the treatment of the main "
"components of the library."
msgstr ""
"Las siguientes secciones describen la funcionalidad del paquete :mod:"
"`email`. Comenzamos con el modelo de objetos :mod:`~email.message`, que es "
"la interfaz principal que usará una aplicación, y lo seguimos con los "
"componentes del :mod:`~email.parser` y :mod:`~email.generator` . Luego "
"cubrimos los controles de la :mod:`~email.policy`, lo que completa el "
"tratamiento de los principales componentes de la biblioteca."

#: ../Doc/library/email.rst:78
msgid ""
"The next three sections cover the exceptions the package may raise and the "
"defects (non-compliance with the RFCs) that the :mod:`~email.parser` may "
"detect.  Then we cover the :mod:`~email.headerregistry` and the :mod:`~email."
"contentmanager` sub-components, which provide tools for doing more detailed "
"manipulation of headers and payloads, respectively.  Both of these "
"components contain features relevant to consuming and producing non-trivial "
"messages, but also document their extensibility APIs, which will be of "
"interest to advanced applications."
msgstr ""
"Las siguientes tres secciones cubren las excepciones que puede generar el "
"paquete y los defectos (incumplimiento de las RFC) que el :mod:`~email."
"parser` puede detectar. Luego cubrimos los subcomponentes :mod:`~email."
"headerregistry` y :mod:`~email.contentmanager`, que proporcionan "
"herramientas para realizar una manipulación más detallada de los encabezados "
"y cargas útiles, respectivamente. Ambos componentes contienen "
"características relevantes para consumir y producir mensajes no triviales, "
"pero también documentan sus API de extensibilidad, que serán de interés para "
"aplicaciones avanzadas."

#: ../Doc/library/email.rst:87
msgid ""
"Following those is a set of examples of using the fundamental parts of the "
"APIs covered in the preceding sections."
msgstr ""
"A continuación, se muestra un conjunto de ejemplos del uso de las partes "
"fundamentales de las API cubiertas en las secciones anteriores."

#: ../Doc/library/email.rst:90
msgid ""
"The foregoing represent the modern (unicode friendly) API of the email "
"package. The remaining sections, starting with the :class:`~email.message."
"Message` class, cover the legacy :data:`~email.policy.compat32` API that "
"deals much more directly with the details of how email messages are "
"represented.  The :data:`~email.policy.compat32` API does *not* hide the "
"details of the RFCs from the application, but for applications that need to "
"operate at that level, they can be useful tools.  This documentation is also "
"relevant for applications that are still using the :mod:`~email.policy."
"compat32` API for backward compatibility reasons."
msgstr ""
"Lo anterior representa la API moderna (compatible con Unicode) del paquete "
"de correo electrónico. Las secciones restantes, comenzando con la clase :"
"class:`~email.message.Message`, cubren la API :data:`~email.policy.compat32` "
"heredada que trata mucho más directamente con los detalles de cómo se "
"representan los mensajes de correo electrónico. La API :data:`~email.policy."
"compat32` no oculta los detalles de las RFC de la aplicación, pero para las "
"aplicaciones que necesitan operar a ese nivel, pueden ser herramientas "
"útiles. Esta documentación también es relevante para las aplicaciones que "
"todavía usan la API :mod:`~email.policy.compat32` por razones de "
"compatibilidad con versiones anteriores."

#: ../Doc/library/email.rst:100
msgid ""
"Docs reorganized and rewritten to promote the new :class:`~email.message."
"EmailMessage`/:class:`~email.policy.EmailPolicy` API."
msgstr ""
"Documentos reorganizados y reescritos para promover la nueva API :class:"
"`~email.message.EmailMessage`/:class:`~email.policy.EmailPolicy`."

#: ../Doc/library/email.rst:105
msgid "Contents of the :mod:`email` package documentation:"
msgstr "Contenido de la documentación del paquete :mod:`email`:"

#: ../Doc/library/email.rst:120
msgid "Legacy API:"
msgstr "API heredada:"

#: ../Doc/library/email.rst:136
msgid "Module :mod:`smtplib`"
msgstr "Módulo :mod:`smtplib`"

#: ../Doc/library/email.rst:136
msgid "SMTP (Simple Mail Transport Protocol) client"
msgstr "Cliente SMTP (Protocolo simple de transporte de correo)"

#: ../Doc/library/email.rst:139
msgid "Module :mod:`poplib`"
msgstr "Módulo :mod:`poplib`"

#: ../Doc/library/email.rst:139
msgid "POP (Post Office Protocol) client"
msgstr "Cliente POP (Protocolo de oficina postal)"

#: ../Doc/library/email.rst:142
msgid "Module :mod:`imaplib`"
msgstr "Módulo :mod:`imaplib`"

#: ../Doc/library/email.rst:142
msgid "IMAP (Internet Message Access Protocol) client"
msgstr "Cliente IMAP (Protocolo de acceso a mensajes de Internet)"

#: ../Doc/library/email.rst:145
msgid "Module :mod:`nntplib`"
msgstr "Módulo :mod:`nntplib`"

#: ../Doc/library/email.rst:145
msgid "NNTP (Net News Transport Protocol) client"
msgstr "Cliente NNTP (Protocolo de transporte de noticias de red)"

#: ../Doc/library/email.rst:149
msgid "Module :mod:`mailbox`"
msgstr "Módulo :mod:`mailbox`"

#: ../Doc/library/email.rst:148
msgid ""
"Tools for creating, reading, and managing collections of messages on disk "
"using a variety standard formats."
msgstr ""
"Herramientas para crear, leer y administrar colecciones de mensajes en disco "
"utilizando una variedad de formatos estándar."

#: ../Doc/library/email.rst:151
msgid "Module :mod:`smtpd`"
msgstr "Módulo :mod:`smtpd`"

#: ../Doc/library/email.rst:152
msgid "SMTP server framework (primarily useful for testing)"
msgstr "Marco del servidor SMTP (principalmente útil para pruebas)"
