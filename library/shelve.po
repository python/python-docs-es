# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-10-01 13:08-0400\n"
"Last-Translator: Alvaro Cárdenas <alvaruz101@gmail.com>\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"X-Generator: Poedit 2.4.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../Doc/library/shelve.rst:2
msgid ":mod:`shelve` --- Python object persistence"
msgstr ":mod:`shelve` --- Persistencia de objetos de Python"

#: ../Doc/library/shelve.rst:7
msgid "**Source code:** :source:`Lib/shelve.py`"
msgstr "**Source code:** :source:`Lib/shelve.py`"

#: ../Doc/library/shelve.rst:13
msgid ""
"A \"shelf\" is a persistent, dictionary-like object.  The difference with "
"\"dbm\" databases is that the values (not the keys!) in a shelf can be "
"essentially arbitrary Python objects --- anything that the :mod:`pickle` "
"module can handle. This includes most class instances, recursive data types, "
"and objects containing lots of shared  sub-objects.  The keys are ordinary "
"strings."
msgstr ""
"Un \"estante\" o *shelve*, es un objeto persistente similar a un "
"diccionario.  La diferencia con las bases de datos \"dbm\" es que los "
"valores (¡no las claves!) en un estante pueden ser esencialmente objetos "
"Python arbitrarios --- cualquier cosa que el módulo :mod:`pickle` pueda "
"manejar. Esto incluye la mayoría de las instancias de clase, tipos de datos "
"recursivos y objetos que contienen muchos subobjetos compartidos.  Las "
"claves son cadenas ordinarias."

#: ../Doc/library/shelve.rst:22
msgid ""
"Open a persistent dictionary.  The filename specified is the base filename "
"for the underlying database.  As a side-effect, an extension may be added to "
"the filename and more than one file may be created.  By default, the "
"underlying database file is opened for reading and writing.  The optional "
"*flag* parameter has the same interpretation as the *flag* parameter of :"
"func:`dbm.open`."
msgstr ""
"Abre un diccionario persistente.  El nombre de archivo especificado es el "
"nombre de archivo base para la base de datos subyacente.  Como efecto "
"secundario, se puede agregar una extensión al nombre de archivo y se puede "
"crear más de un archivo.  De forma predeterminada, el archivo de base de "
"datos subyacente se abre para leer y escribir.  El parámetro opcional *flag* "
"tiene la misma interpretación que el parámetro *flag* de :func:`dbm.open`."

#: ../Doc/library/shelve.rst:28
msgid ""
"By default, version 3 pickles are used to serialize values.  The version of "
"the pickle protocol can be specified with the *protocol* parameter."
msgstr ""
"De forma predeterminada, los *pickles* de la versión 3 se utilizan para "
"serializar valores.  La versión del protocolo *pickle* se puede especificar "
"con el parámetro *protocol*."

#: ../Doc/library/shelve.rst:31
msgid ""
"Because of Python semantics, a shelf cannot know when a mutable persistent-"
"dictionary entry is modified.  By default modified objects are written "
"*only* when assigned to the shelf (see :ref:`shelve-example`).  If the "
"optional *writeback* parameter is set to ``True``, all entries accessed are "
"also cached in memory, and written back on :meth:`~Shelf.sync` and :meth:"
"`~Shelf.close`; this can make it handier to mutate mutable entries in the "
"persistent dictionary, but, if many entries are accessed, it can consume "
"vast amounts of memory for the cache, and it can make the close operation "
"very slow since all accessed entries are written back (there is no way to "
"determine which accessed entries are mutable, nor which ones were actually "
"mutated)."
msgstr ""
"Debido a la semántica de Python, un estante no puede saber cuándo se "
"modifica una entrada de diccionario persistente mutable.  De forma "
"predeterminada, los objetos modificados se escriben *sólo* cuando se asignan "
"al estante (consulte :ref:`shelve-example`).  Si el parámetro opcional "
"*writeback* se establece en ``True``, todas las entradas a las que se accede "
"también se almacenan en caché en la memoria y se vuelven a escribir en :meth:"
"`~Shelf.sync` y :meth:`~Shelf.close`; esto puede hacer que sea más práctico "
"mutar entradas mutables en el diccionario persistente, pero, si se accede a "
"muchas entradas, puede consumir grandes cantidades de memoria para la "
"memoria caché, y puede hacer que la operación de cierre sea muy lenta ya que "
"todas las entradas a las que se accede se vuelven a escribir (no hay manera "
"de determinar qué entradas a las que se accede son mutables, ni cuáles se "
"mutaron realmente)."

#: ../Doc/library/shelve.rst:45
msgid ""
"Do not rely on the shelf being closed automatically; always call :meth:"
"`~Shelf.close` explicitly when you don't need it any more, or use :func:"
"`shelve.open` as a context manager::"
msgstr ""
"No confíe en que el estante se cerrará automáticamente; siempre llame a :"
"meth:`~Shelf.close`  explícitamente cuando ya no lo necesite, o use :func:"
"`shelve.open` como administrador de contexto::"

#: ../Doc/library/shelve.rst:54
msgid ""
"Because the :mod:`shelve` module is backed by :mod:`pickle`, it is insecure "
"to load a shelf from an untrusted source.  Like with pickle, loading a shelf "
"can execute arbitrary code."
msgstr ""
"Debido a que el módulo :mod:`shelve` está respaldado por :mod:`pickle`, es "
"inseguro cargar un estante desde una fuente que no es de confianza. Al igual "
"que con el *pickle*, cargar un estante puede ejecutar código arbitrario."

#: ../Doc/library/shelve.rst:58
msgid ""
"Shelf objects support all methods supported by dictionaries.  This eases the "
"transition from dictionary based scripts to those requiring persistent "
"storage."
msgstr ""
"Los objetos de estante admiten todos los métodos admitidos por los "
"diccionarios. Esto facilita la transición de scripts basados en diccionarios "
"a aquellos que requieren almacenamiento persistente."

#: ../Doc/library/shelve.rst:61
msgid "Two additional methods are supported:"
msgstr "Se admiten dos métodos adicionales:"

#: ../Doc/library/shelve.rst:65
msgid ""
"Write back all entries in the cache if the shelf was opened with *writeback* "
"set to :const:`True`.  Also empty the cache and synchronize the persistent "
"dictionary on disk, if feasible.  This is called automatically when the "
"shelf is closed with :meth:`close`."
msgstr ""
"Escriba todas las entradas en la caché si el estante se abrió con "
"*writeback* establecido en :const:`True`. También vacíe la caché y "
"sincronice el diccionario persistente en el disco, si es posible. Esto se "
"llama automáticamente cuando el estante se cierra con :meth:`close`."

#: ../Doc/library/shelve.rst:72
msgid ""
"Synchronize and close the persistent *dict* object.  Operations on a closed "
"shelf will fail with a :exc:`ValueError`."
msgstr ""
"Sincronice y cierre el objeto persistente *dict*. Las operaciones en un "
"estante cerrado fallarán con un :exc:`ValueError`."

#: ../Doc/library/shelve.rst:78
msgid ""
"`Persistent dictionary recipe <https://code.activestate.com/recipes/576642/"
">`_ with widely supported storage formats and having the speed of native "
"dictionaries."
msgstr ""
"`Receta de diccionario persistente <https://code.activestate.com/"
"recipes/576642/>` _ con formatos de almacenamiento ampliamente compatibles y "
"con la velocidad de los diccionarios nativos."

#: ../Doc/library/shelve.rst:84
msgid "Restrictions"
msgstr "Restricciones"

#: ../Doc/library/shelve.rst:90
msgid ""
"The choice of which database package will be used (such as :mod:`dbm.ndbm` "
"or :mod:`dbm.gnu`) depends on which interface is available.  Therefore it is "
"not safe to open the database directly using :mod:`dbm`.  The database is "
"also (unfortunately) subject to the limitations of :mod:`dbm`, if it is used "
"--- this means that (the pickled representation of) the objects stored in "
"the database should be fairly small, and in rare cases key collisions may "
"cause the database to refuse updates."
msgstr ""
"La elección de qué paquete de base de datos se utilizará (como :mod:`dbm."
"ndbm` o :mod:`dbm.gnu`) depende de la interfaz disponible. Por lo tanto, no "
"es seguro abrir la base de datos directamente usando :mod:`dbm`. La base de "
"datos también está (desafortunadamente) sujeta a las limitaciones de :mod:"
"`dbm`, si se usa --- esto significa que (la representación *pickle* de) los "
"objetos almacenados en la base de datos debe ser bastante pequeña, y en "
"casos raros las colisiones de claves pueden hacer que la base de datos "
"rechace las actualizaciones."

#: ../Doc/library/shelve.rst:98
msgid ""
"The :mod:`shelve` module does not support *concurrent* read/write access to "
"shelved objects.  (Multiple simultaneous read accesses are safe.)  When a "
"program has a shelf open for writing, no other program should have it open "
"for reading or writing.  Unix file locking can be used to solve this, but "
"this differs across Unix versions and requires knowledge about the database "
"implementation used."
msgstr ""
"El módulo :mod:`shelve` no admite el acceso *concurrent* de lectura/"
"escritura a los objetos almacenados. (Los accesos de lectura múltiples "
"simultáneos son seguros). Cuando un programa tiene un estante abierto para "
"escritura, ningún otro programa debe tenerlo abierto para lectura o "
"escritura. El bloqueo de archivos Unix se puede usar para resolver esto, "
"pero esto difiere entre las versiones de Unix y requiere conocimiento sobre "
"la implementación de la base de datos utilizada."

#: ../Doc/library/shelve.rst:108
msgid ""
"A subclass of :class:`collections.abc.MutableMapping` which stores pickled "
"values in the *dict* object."
msgstr ""
"Una subclase de :class:`collections.abc.MutableMapping` que almacena valores "
"*pickle* en el objeto *dict*."

#: ../Doc/library/shelve.rst:111
msgid ""
"By default, version 3 pickles are used to serialize values.  The version of "
"the pickle protocol can be specified with the *protocol* parameter. See the :"
"mod:`pickle` documentation for a discussion of the pickle protocols."
msgstr ""
"De forma predeterminada, los *pickles* de la versión 3 se utilizan para "
"serializar valores. La versión del protocolo *pickle* se puede especificar "
"con el parámetro *protocol*. Vea la documentación de :mod:`pickle` para una "
"discusión de los protocolos de *pickle*."

#: ../Doc/library/shelve.rst:115
msgid ""
"If the *writeback* parameter is ``True``, the object will hold a cache of "
"all entries accessed and write them back to the *dict* at sync and close "
"times. This allows natural operations on mutable entries, but can consume "
"much more memory and make sync and close take a long time."
msgstr ""
"Si el parámetro *writeback* es ``True``, el objeto mantendrá un caché de "
"todas las entradas a las que se accedió y las volverá a escribir en el "
"*dict* en las horas de sincronización y cierre. Esto permite operaciones "
"naturales en entradas mutables, pero puede consumir mucha más memoria y "
"hacer que la sincronización y el cierre tomen mucho tiempo."

#: ../Doc/library/shelve.rst:120
msgid ""
"The *keyencoding* parameter is the encoding used to encode keys before they "
"are used with the underlying dict."
msgstr ""
"El parámetro *keyencoding* es la codificación utilizada para codificar las "
"claves antes de que se utilicen con el *dict* subyacente."

#: ../Doc/library/shelve.rst:123
msgid ""
"A :class:`Shelf` object can also be used as a context manager, in which case "
"it will be automatically closed when the :keyword:`with` block ends."
msgstr ""
"El objeto :class:`Shelf` también se puede utilizar como administrador de "
"contexto, en cuyo caso se cerrará automáticamente cuando finalice el bloque :"
"keyword:`with`."

#: ../Doc/library/shelve.rst:126
msgid ""
"Added the *keyencoding* parameter; previously, keys were always encoded in "
"UTF-8."
msgstr ""
"Se agregó el parámetro *keyencoding*; anteriormente, las claves siempre "
"estaban codificadas en UTF-8."

#: ../Doc/library/shelve.rst:130
msgid "Added context manager support."
msgstr "Agregado soporte para administrador de contexto."

#: ../Doc/library/shelve.rst:136
#, fuzzy
msgid ""
"A subclass of :class:`Shelf` which exposes :meth:`first`, :meth:`!next`, :"
"meth:`previous`, :meth:`last` and :meth:`set_location` which are available "
"in the third-party :mod:`bsddb` module from `pybsddb <https://www.jcea.es/"
"programacion/pybsddb.htm>`_ but not in other database modules.  The *dict* "
"object passed to the constructor must support those methods.  This is "
"generally accomplished by calling one of :func:`bsddb.hashopen`, :func:"
"`bsddb.btopen` or :func:`bsddb.rnopen`.  The optional *protocol*, "
"*writeback*, and *keyencoding* parameters have the same interpretation as "
"for the :class:`Shelf` class."
msgstr ""
"Una subclase de :class:`Shelf` que expone :meth:`first`, :meth:`!next`, :"
"meth:`previous`, :meth:`last` y :meth:`set_location` que están disponibles "
"en el módulo de terceros :mod:`bsddb` de `pybsddb <https://www.jcea.es/"
"programacion/pybsddb.htm>`_ pero no en otros módulos de base de datos. El "
"objeto *dict* que se pasa al constructor debe admitir esos métodos. Esto se "
"logra generalmente llamando a uno de los siguientes :func:`bsddb.hashopen`, :"
"func:`bsddb.btopen` o :func:`bsddb.rnopen`. Los parámetros opcionales "
"*protocol*, *writeback* y *keyencoding* tienen la misma interpretación que "
"para la clase :class:`Shelf`."

#: ../Doc/library/shelve.rst:149
msgid ""
"A subclass of :class:`Shelf` which accepts a *filename* instead of a dict-"
"like object.  The underlying file will be opened using :func:`dbm.open`.  By "
"default, the file will be created and opened for both read and write.  The "
"optional *flag* parameter has the same interpretation as for the :func:`."
"open` function.  The optional *protocol* and *writeback* parameters have the "
"same interpretation as for the :class:`Shelf` class."
msgstr ""
"Una subclase de :class:`Shelf` que acepta un *filename* en lugar de un "
"objeto tipo diccionario (*dict*). El archivo subyacente se abrirá usando :"
"func:`dbm.open`. De forma predeterminada, el archivo se creará y se abrirá "
"tanto para lectura como para escritura. El parámetro opcional *flag* tiene "
"la misma interpretación que para la función :func:`.open`. Los parámetros "
"opcionales *protocol* y *writeback* tienen la misma interpretación que para "
"la clase :class:`Shelf`."

#: ../Doc/library/shelve.rst:160
msgid "Example"
msgstr "Ejemplo"

#: ../Doc/library/shelve.rst:162
#, fuzzy
msgid ""
"To summarize the interface (``key`` is a string, ``data`` is an arbitrary "
"object)::"
msgstr ""
"Para resumir la interfaz (``key`` es una cadena de caracteres, ``data`` es "
"un objeto arbitrario)::"

#: ../Doc/library/shelve.rst:199
msgid "Module :mod:`dbm`"
msgstr "Módulo :mod:`dbm`"

#: ../Doc/library/shelve.rst:199
msgid "Generic interface to ``dbm``-style databases."
msgstr "Interfaz genérica para bases de datos estilo ``dbm``."

#: ../Doc/library/shelve.rst:201
msgid "Module :mod:`pickle`"
msgstr "Módulo :mod:`pickle`"

#: ../Doc/library/shelve.rst:202
msgid "Object serialization used by :mod:`shelve`."
msgstr "Serialización de objetos utilizada por :mod:`shelve`."
