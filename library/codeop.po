# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get
# the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-19 11:16+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../Doc/library/codeop.rst:2
msgid ":mod:`codeop` --- Compile Python code"
msgstr ":mod:`codeop` --- Compila código Python"

#: ../Doc/library/codeop.rst:10
msgid "**Source code:** :source:`Lib/codeop.py`"
msgstr "**Código fuente:** :source:`Lib/codeop.py`"

#: ../Doc/library/codeop.rst:14
msgid ""
"The :mod:`codeop` module provides utilities upon which the Python read-eval-"
"print loop can be emulated, as is done in the :mod:`code` module.  As a "
"result, you probably don't want to use the module directly; if you want to "
"include such a loop in your program you probably want to use the :mod:`code` "
"module instead."
msgstr ""
"El módulo :mod:`codeop` proporciona herramientas para emular el bucle "
"principal del intérprete de Python (también conocido como read-eval-print), "
"tal como se hace en el módulo :mod:`code`.  Por lo tanto, este módulo no "
"está diseñado para utilizarlo directamente; si desea incluir un ciclo de "
"este tipo en su programa, probablemente es mejor utilizar el módulo :mod:"
"`code` en su lugar."

#: ../Doc/library/codeop.rst:20
msgid "There are two parts to this job:"
msgstr "Esta actividad consta de dos partes:"

#: ../Doc/library/codeop.rst:22
msgid ""
"Being able to tell if a line of input completes a Python  statement: in "
"short, telling whether to print '``>>>``' or '``...``' next."
msgstr ""
"Ser capaz de identificar si una línea de entrada completa una sentencia de "
"Python: en resumen, decir si se debe imprimir a continuación '``>>>``' o "
"'``...``' ."

#: ../Doc/library/codeop.rst:25
msgid ""
"Remembering which future statements the user has entered, so  subsequent "
"input can be compiled with these in effect."
msgstr ""
"Recordar qué sentencias posteriores ha ingresado el usuario, para que estas "
"entradas sean incluidas al momento de compilar."

#: ../Doc/library/codeop.rst:28
msgid ""
"The :mod:`codeop` module provides a way of doing each of these things, and a "
"way of doing them both."
msgstr ""
"El módulo :mod:`codeop` proporciona formas de realizar estas dos partes, "
"tanto de forma independiente, como en conjunto."

#: ../Doc/library/codeop.rst:31
msgid "To do just the former:"
msgstr "Para hacer lo anterior:"

#: ../Doc/library/codeop.rst:35
msgid ""
"Tries to compile *source*, which should be a string of Python code and "
"return a code object if *source* is valid Python code. In that case, the "
"filename attribute of the code object will be *filename*, which defaults to "
"``'<input>'``. Returns ``None`` if *source* is *not* valid Python code, but "
"is a prefix of valid Python code."
msgstr ""
"Intenta compilar *source*, que debe ser una cadena de caracteres de código "
"Python y retorna un objeto si *source* es código Python válido. En este "
"caso, el atributo del nombre del archivo del objeto va a ser *filename*, el "
"cuál por defecto es ``'<input>'``. Retorna ``None`` si *source* no es código "
"Python válido, pero es un prefijo de código Python válido."

#: ../Doc/library/codeop.rst:41
msgid ""
"If there is a problem with *source*, an exception will be raised. :exc:"
"`SyntaxError` is raised if there is invalid Python syntax, and :exc:"
"`OverflowError` or :exc:`ValueError` if there is an invalid literal."
msgstr ""
"Si hay un problema con *source*, se lanzará una excepción. :exc:"
"`SyntaxError` se lanza si hay una sintaxis de Python no válida, y :exc:"
"`OverflowError` o :exc:`ValueError` si hay un literal no válido."

#: ../Doc/library/codeop.rst:45
msgid ""
"The *symbol* argument determines whether *source* is compiled as a statement "
"(``'single'``, the default), as a sequence of statements (``'exec'``) or as "
"an :term:`expression` (``'eval'``).  Any other value will cause :exc:"
"`ValueError` to  be raised."
msgstr ""
"El argumento *symbol* determina si *source* se compila como una declaración "
"(``'single'``, el valor predeterminado) o como un :term:`expression` "
"(``'eval'``). Cualquier otro valor hará que se lance :exc:`ValueError`."

#: ../Doc/library/codeop.rst:52
msgid ""
"It is possible (but not likely) that the parser stops parsing with a "
"successful outcome before reaching the end of the source; in this case, "
"trailing symbols may be ignored instead of causing an error.  For example, a "
"backslash followed by two newlines may be followed by arbitrary garbage. "
"This will be fixed once the API for the parser is better."
msgstr ""
"Es posible (pero no probable) que el analizador deje de analizar con un "
"resultado exitoso antes de llegar al final de la fuente; en este caso, los "
"símbolos finales pueden ignorarse en lugar de provocar un error. Por "
"ejemplo, una barra invertida seguida de dos nuevas líneas puede ir seguida "
"de basura arbitraria. Esto se solucionará una vez que la API para el "
"analizador sea mejor."

#: ../Doc/library/codeop.rst:61
msgid ""
"Instances of this class have :meth:`__call__` methods identical in signature "
"to the built-in function :func:`compile`, but with the difference that if "
"the instance compiles program text containing a :mod:`__future__` statement, "
"the instance 'remembers' and compiles all subsequent program texts with the "
"statement in force."
msgstr ""
"Las instancias de esta clase tienen :meth:`__call__` métodos idénticos en "
"firma a la función incorporada :func:`compile`, pero con la diferencia de "
"que si la instancia compila el texto del programa que contiene una "
"instrucción :mod:`__future__`, la instancia 'recuerda' y compila todos los "
"textos de programa posteriores con la declaración en vigor."

#: ../Doc/library/codeop.rst:70
msgid ""
"Instances of this class have :meth:`__call__` methods identical in signature "
"to :func:`compile_command`; the difference is that if the instance compiles "
"program text containing a ``__future__`` statement, the instance 'remembers' "
"and compiles all subsequent program texts with the statement in force."
msgstr ""
"Las instancias de esta clase tienen :meth:`__call__` métodos idénticos en "
"firma a :func:`compile_command`; la diferencia es que si la instancia "
"compila un texto de programa que contiene una declaración ``__future__``, la "
"instancia 'recuerda' y compila todos los textos de programa posteriores con "
"la declaración en vigor."
