# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam. 
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/PyCampES/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/exceptions.rst:4
msgid "Built-in Exceptions"
msgstr ""

#: ../Doc/library/exceptions.rst:10
msgid ""
"In Python, all exceptions must be instances of a class that derives from :"
"class:`BaseException`.  In a :keyword:`try` statement with an :keyword:"
"`except` clause that mentions a particular class, that clause also handles "
"any exception classes derived from that class (but not exception classes "
"from which *it* is derived).  Two exception classes that are not related via "
"subclassing are never equivalent, even if they have the same name."
msgstr ""

#: ../Doc/library/exceptions.rst:19
msgid ""
"The built-in exceptions listed below can be generated by the interpreter or "
"built-in functions.  Except where mentioned, they have an \"associated value"
"\" indicating the detailed cause of the error.  This may be a string or a "
"tuple of several items of information (e.g., an error code and a string "
"explaining the code).  The associated value is usually passed as arguments "
"to the exception class's constructor."
msgstr ""

#: ../Doc/library/exceptions.rst:26
msgid ""
"User code can raise built-in exceptions.  This can be used to test an "
"exception handler or to report an error condition \"just like\" the "
"situation in which the interpreter raises the same exception; but beware "
"that there is nothing to prevent user code from raising an inappropriate "
"error."
msgstr ""

#: ../Doc/library/exceptions.rst:31
msgid ""
"The built-in exception classes can be subclassed to define new exceptions; "
"programmers are encouraged to derive new exceptions from the :exc:"
"`Exception` class or one of its subclasses, and not from :exc:"
"`BaseException`.  More information on defining exceptions is available in "
"the Python Tutorial under :ref:`tut-userexceptions`."
msgstr ""

#: ../Doc/library/exceptions.rst:37
msgid ""
"When raising (or re-raising) an exception in an :keyword:`except` or :"
"keyword:`finally` clause :attr:`__context__` is automatically set to the "
"last exception caught; if the new exception is not handled the traceback "
"that is eventually displayed will include the originating exception(s) and "
"the final exception."
msgstr ""

#: ../Doc/library/exceptions.rst:43
msgid ""
"When raising a new exception (rather than using a bare ``raise`` to re-raise "
"the exception currently being handled), the implicit exception context can "
"be supplemented with an explicit cause by using :keyword:`from` with :"
"keyword:`raise`::"
msgstr ""

#: ../Doc/library/exceptions.rst:50
msgid ""
"The expression following :keyword:`from` must be an exception or ``None``. "
"It will be set as :attr:`__cause__` on the raised exception. Setting :attr:"
"`__cause__` also implicitly sets the :attr:`__suppress_context__` attribute "
"to ``True``, so that using ``raise new_exc from None`` effectively replaces "
"the old exception with the new one for display purposes (e.g. converting :"
"exc:`KeyError` to :exc:`AttributeError`), while leaving the old exception "
"available in :attr:`__context__` for introspection when debugging."
msgstr ""

#: ../Doc/library/exceptions.rst:59
msgid ""
"The default traceback display code shows these chained exceptions in "
"addition to the traceback for the exception itself. An explicitly chained "
"exception in :attr:`__cause__` is always shown when present. An implicitly "
"chained exception in :attr:`__context__` is shown only if :attr:`__cause__` "
"is :const:`None` and :attr:`__suppress_context__` is false."
msgstr ""

#: ../Doc/library/exceptions.rst:65
msgid ""
"In either case, the exception itself is always shown after any chained "
"exceptions so that the final line of the traceback always shows the last "
"exception that was raised."
msgstr ""

#: ../Doc/library/exceptions.rst:71
msgid "Base classes"
msgstr ""

#: ../Doc/library/exceptions.rst:73
msgid ""
"The following exceptions are used mostly as base classes for other "
"exceptions."
msgstr ""

#: ../Doc/library/exceptions.rst:77
msgid ""
"The base class for all built-in exceptions.  It is not meant to be directly "
"inherited by user-defined classes (for that, use :exc:`Exception`).  If :"
"func:`str` is called on an instance of this class, the representation of the "
"argument(s) to the instance are returned, or the empty string when there "
"were no arguments."
msgstr ""

#: ../Doc/library/exceptions.rst:85
msgid ""
"The tuple of arguments given to the exception constructor.  Some built-in "
"exceptions (like :exc:`OSError`) expect a certain number of arguments and "
"assign a special meaning to the elements of this tuple, while others are "
"usually called only with a single string giving an error message."
msgstr ""

#: ../Doc/library/exceptions.rst:92
msgid ""
"This method sets *tb* as the new traceback for the exception and returns the "
"exception object.  It is usually used in exception handling code like this::"
msgstr ""

#: ../Doc/library/exceptions.rst:105
msgid ""
"All built-in, non-system-exiting exceptions are derived from this class.  "
"All user-defined exceptions should also be derived from this class."
msgstr ""

#: ../Doc/library/exceptions.rst:111
msgid ""
"The base class for those built-in exceptions that are raised for various "
"arithmetic errors: :exc:`OverflowError`, :exc:`ZeroDivisionError`, :exc:"
"`FloatingPointError`."
msgstr ""

#: ../Doc/library/exceptions.rst:118
msgid ""
"Raised when a :ref:`buffer <bufferobjects>` related operation cannot be "
"performed."
msgstr ""

#: ../Doc/library/exceptions.rst:124
msgid ""
"The base class for the exceptions that are raised when a key or index used "
"on a mapping or sequence is invalid: :exc:`IndexError`, :exc:`KeyError`.  "
"This can be raised directly by :func:`codecs.lookup`."
msgstr ""

#: ../Doc/library/exceptions.rst:130
msgid "Concrete exceptions"
msgstr ""

#: ../Doc/library/exceptions.rst:132
msgid "The following exceptions are the exceptions that are usually raised."
msgstr ""

#: ../Doc/library/exceptions.rst:138
msgid "Raised when an :keyword:`assert` statement fails."
msgstr ""

#: ../Doc/library/exceptions.rst:143
msgid ""
"Raised when an attribute reference (see :ref:`attribute-references`) or "
"assignment fails.  (When an object does not support attribute references or "
"attribute assignments at all, :exc:`TypeError` is raised.)"
msgstr ""

#: ../Doc/library/exceptions.rst:150
msgid ""
"Raised when the :func:`input` function hits an end-of-file condition (EOF) "
"without reading any data. (N.B.: the :meth:`io.IOBase.read` and :meth:`io."
"IOBase.readline` methods return an empty string when they hit EOF.)"
msgstr ""

#: ../Doc/library/exceptions.rst:157
msgid "Not currently used."
msgstr ""

#: ../Doc/library/exceptions.rst:162
msgid ""
"Raised when a :term:`generator` or :term:`coroutine` is closed; see :meth:"
"`generator.close` and :meth:`coroutine.close`.  It directly inherits from :"
"exc:`BaseException` instead of :exc:`Exception` since it is technically not "
"an error."
msgstr ""

#: ../Doc/library/exceptions.rst:170
msgid ""
"Raised when the :keyword:`import` statement has troubles trying to load a "
"module.  Also raised when the \"from list\" in ``from ... import`` has a "
"name that cannot be found."
msgstr ""

#: ../Doc/library/exceptions.rst:174
msgid ""
"The :attr:`name` and :attr:`path` attributes can be set using keyword-only "
"arguments to the constructor. When set they represent the name of the module "
"that was attempted to be imported and the path to any file which triggered "
"the exception, respectively."
msgstr ""

#: ../Doc/library/exceptions.rst:179
msgid "Added the :attr:`name` and :attr:`path` attributes."
msgstr ""

#: ../Doc/library/exceptions.rst:184
msgid ""
"A subclass of :exc:`ImportError` which is raised by :keyword:`import` when a "
"module could not be located.  It is also raised when ``None`` is found in :"
"data:`sys.modules`."
msgstr ""

#: ../Doc/library/exceptions.rst:193
msgid ""
"Raised when a sequence subscript is out of range.  (Slice indices are "
"silently truncated to fall in the allowed range; if an index is not an "
"integer, :exc:`TypeError` is raised.)"
msgstr ""

#: ../Doc/library/exceptions.rst:202
msgid ""
"Raised when a mapping (dictionary) key is not found in the set of existing "
"keys."
msgstr ""

#: ../Doc/library/exceptions.rst:209
msgid ""
"Raised when the user hits the interrupt key (normally :kbd:`Control-C` or :"
"kbd:`Delete`).  During execution, a check for interrupts is made regularly. "
"The exception inherits from :exc:`BaseException` so as to not be "
"accidentally caught by code that catches :exc:`Exception` and thus prevent "
"the interpreter from exiting."
msgstr ""

#: ../Doc/library/exceptions.rst:218
msgid ""
"Raised when an operation runs out of memory but the situation may still be "
"rescued (by deleting some objects).  The associated value is a string "
"indicating what kind of (internal) operation ran out of memory. Note that "
"because of the underlying memory management architecture (C's :c:func:"
"`malloc` function), the interpreter may not always be able to completely "
"recover from this situation; it nevertheless raises an exception so that a "
"stack traceback can be printed, in case a run-away program was the cause."
msgstr ""

#: ../Doc/library/exceptions.rst:229
msgid ""
"Raised when a local or global name is not found.  This applies only to "
"unqualified names.  The associated value is an error message that includes "
"the name that could not be found."
msgstr ""

#: ../Doc/library/exceptions.rst:236
msgid ""
"This exception is derived from :exc:`RuntimeError`.  In user defined base "
"classes, abstract methods should raise this exception when they require "
"derived classes to override the method, or while the class is being "
"developed to indicate that the real implementation still needs to be added."
msgstr ""

#: ../Doc/library/exceptions.rst:243
msgid ""
"It should not be used to indicate that an operator or method is not meant to "
"be supported at all -- in that case either leave the operator / method "
"undefined or, if a subclass, set it to :data:`None`."
msgstr ""

#: ../Doc/library/exceptions.rst:249
msgid ""
"``NotImplementedError`` and ``NotImplemented`` are not interchangeable, even "
"though they have similar names and purposes.  See :data:`NotImplemented` for "
"details on when to use it."
msgstr ""

#: ../Doc/library/exceptions.rst:258
msgid ""
"This exception is raised when a system function returns a system-related "
"error, including I/O failures such as \"file not found\" or \"disk full"
"\" (not for illegal argument types or other incidental errors)."
msgstr ""

#: ../Doc/library/exceptions.rst:262
msgid ""
"The second form of the constructor sets the corresponding attributes, "
"described below.  The attributes default to :const:`None` if not specified.  "
"For backwards compatibility, if three arguments are passed, the :attr:"
"`~BaseException.args` attribute contains only a 2-tuple of the first two "
"constructor arguments."
msgstr ""

#: ../Doc/library/exceptions.rst:268
msgid ""
"The constructor often actually returns a subclass of :exc:`OSError`, as "
"described in `OS exceptions`_ below.  The particular subclass depends on the "
"final :attr:`.errno` value.  This behaviour only occurs when constructing :"
"exc:`OSError` directly or via an alias, and is not inherited when "
"subclassing."
msgstr ""

#: ../Doc/library/exceptions.rst:276
msgid "A numeric error code from the C variable :c:data:`errno`."
msgstr ""

#: ../Doc/library/exceptions.rst:280
msgid ""
"Under Windows, this gives you the native Windows error code.  The :attr:`."
"errno` attribute is then an approximate translation, in POSIX terms, of that "
"native error code."
msgstr ""

#: ../Doc/library/exceptions.rst:284
msgid ""
"Under Windows, if the *winerror* constructor argument is an integer, the :"
"attr:`.errno` attribute is determined from the Windows error code, and the "
"*errno* argument is ignored.  On other platforms, the *winerror* argument is "
"ignored, and the :attr:`winerror` attribute does not exist."
msgstr ""

#: ../Doc/library/exceptions.rst:292
msgid ""
"The corresponding error message, as provided by the operating system.  It is "
"formatted by the C functions :c:func:`perror` under POSIX, and :c:func:"
"`FormatMessage` under Windows."
msgstr ""

#: ../Doc/library/exceptions.rst:300
msgid ""
"For exceptions that involve a file system path (such as :func:`open` or :"
"func:`os.unlink`), :attr:`filename` is the file name passed to the function. "
"For functions that involve two file system paths (such as :func:`os."
"rename`), :attr:`filename2` corresponds to the second file name passed to "
"the function."
msgstr ""

#: ../Doc/library/exceptions.rst:307
msgid ""
":exc:`EnvironmentError`, :exc:`IOError`, :exc:`WindowsError`, :exc:`socket."
"error`, :exc:`select.error` and :exc:`mmap.error` have been merged into :exc:"
"`OSError`, and the constructor may return a subclass."
msgstr ""

#: ../Doc/library/exceptions.rst:313
msgid ""
"The :attr:`filename` attribute is now the original file name passed to the "
"function, instead of the name encoded to or decoded from the filesystem "
"encoding.  Also, the *filename2* constructor argument and attribute was "
"added."
msgstr ""

#: ../Doc/library/exceptions.rst:322
msgid ""
"Raised when the result of an arithmetic operation is too large to be "
"represented.  This cannot occur for integers (which would rather raise :exc:"
"`MemoryError` than give up).  However, for historical reasons, OverflowError "
"is sometimes raised for integers that are outside a required range.   "
"Because of the lack of standardization of floating point exception handling "
"in C, most floating point operations are not checked."
msgstr ""

#: ../Doc/library/exceptions.rst:332
msgid ""
"This exception is derived from :exc:`RuntimeError`.  It is raised when the "
"interpreter detects that the maximum recursion depth (see :func:`sys."
"getrecursionlimit`) is exceeded."
msgstr ""

#: ../Doc/library/exceptions.rst:336
msgid "Previously, a plain :exc:`RuntimeError` was raised."
msgstr ""

#: ../Doc/library/exceptions.rst:342
msgid ""
"This exception is raised when a weak reference proxy, created by the :func:"
"`weakref.proxy` function, is used to access an attribute of the referent "
"after it has been garbage collected. For more information on weak "
"references, see the :mod:`weakref` module."
msgstr ""

#: ../Doc/library/exceptions.rst:350
msgid ""
"Raised when an error is detected that doesn't fall in any of the other "
"categories.  The associated value is a string indicating what precisely went "
"wrong."
msgstr ""

#: ../Doc/library/exceptions.rst:357
msgid ""
"Raised by built-in function :func:`next` and an :term:`iterator`\\'s :meth:"
"`~iterator.__next__` method to signal that there are no further items "
"produced by the iterator."
msgstr ""

#: ../Doc/library/exceptions.rst:361
msgid ""
"The exception object has a single attribute :attr:`value`, which is given as "
"an argument when constructing the exception, and defaults to :const:`None`."
msgstr ""

#: ../Doc/library/exceptions.rst:365
msgid ""
"When a :term:`generator` or :term:`coroutine` function returns, a new :exc:"
"`StopIteration` instance is raised, and the value returned by the function "
"is used as the :attr:`value` parameter to the constructor of the exception."
msgstr ""

#: ../Doc/library/exceptions.rst:370
msgid ""
"If a generator code directly or indirectly raises :exc:`StopIteration`, it "
"is converted into a :exc:`RuntimeError` (retaining the :exc:`StopIteration` "
"as the new exception's cause)."
msgstr ""

#: ../Doc/library/exceptions.rst:374
msgid ""
"Added ``value`` attribute and the ability for generator functions to use it "
"to return a value."
msgstr ""

#: ../Doc/library/exceptions.rst:378
msgid ""
"Introduced the RuntimeError transformation via ``from __future__ import "
"generator_stop``, see :pep:`479`."
msgstr ""

#: ../Doc/library/exceptions.rst:382
msgid ""
"Enable :pep:`479` for all code by default: a :exc:`StopIteration` error "
"raised in a generator is transformed into a :exc:`RuntimeError`."
msgstr ""

#: ../Doc/library/exceptions.rst:388
msgid ""
"Must be raised by :meth:`__anext__` method of an :term:`asynchronous "
"iterator` object to stop the iteration."
msgstr ""

#: ../Doc/library/exceptions.rst:395
msgid ""
"Raised when the parser encounters a syntax error.  This may occur in an :"
"keyword:`import` statement, in a call to the built-in functions :func:`exec` "
"or :func:`eval`, or when reading the initial script or standard input (also "
"interactively)."
msgstr ""

#: ../Doc/library/exceptions.rst:400
msgid ""
"Instances of this class have attributes :attr:`filename`, :attr:`lineno`, :"
"attr:`offset` and :attr:`text` for easier access to the details.  :func:"
"`str` of the exception instance returns only the message."
msgstr ""

#: ../Doc/library/exceptions.rst:407
msgid ""
"Base class for syntax errors related to incorrect indentation.  This is a "
"subclass of :exc:`SyntaxError`."
msgstr ""

#: ../Doc/library/exceptions.rst:413
msgid ""
"Raised when indentation contains an inconsistent use of tabs and spaces. "
"This is a subclass of :exc:`IndentationError`."
msgstr ""

#: ../Doc/library/exceptions.rst:419
msgid ""
"Raised when the interpreter finds an internal error, but the situation does "
"not look so serious to cause it to abandon all hope. The associated value is "
"a string indicating what went wrong (in low-level terms)."
msgstr ""

#: ../Doc/library/exceptions.rst:423
msgid ""
"You should report this to the author or maintainer of your Python "
"interpreter. Be sure to report the version of the Python interpreter (``sys."
"version``; it is also printed at the start of an interactive Python "
"session), the exact error message (the exception's associated value) and if "
"possible the source of the program that triggered the error."
msgstr ""

#: ../Doc/library/exceptions.rst:432
msgid ""
"This exception is raised by the :func:`sys.exit` function.  It inherits "
"from :exc:`BaseException` instead of :exc:`Exception` so that it is not "
"accidentally caught by code that catches :exc:`Exception`.  This allows the "
"exception to properly propagate up and cause the interpreter to exit.  When "
"it is not handled, the Python interpreter exits; no stack traceback is "
"printed.  The constructor accepts the same optional argument passed to :func:"
"`sys.exit`. If the value is an integer, it specifies the system exit status "
"(passed to C's :c:func:`exit` function); if it is ``None``, the exit status "
"is zero; if it has another type (such as a string), the object's value is "
"printed and the exit status is one."
msgstr ""

#: ../Doc/library/exceptions.rst:443
msgid ""
"A call to :func:`sys.exit` is translated into an exception so that clean-up "
"handlers (:keyword:`finally` clauses of :keyword:`try` statements) can be "
"executed, and so that a debugger can execute a script without running the "
"risk of losing control.  The :func:`os._exit` function can be used if it is "
"absolutely positively necessary to exit immediately (for example, in the "
"child process after a call to :func:`os.fork`)."
msgstr ""

#: ../Doc/library/exceptions.rst:452
msgid ""
"The exit status or error message that is passed to the constructor. "
"(Defaults to ``None``.)"
msgstr ""

#: ../Doc/library/exceptions.rst:458
msgid ""
"Raised when an operation or function is applied to an object of "
"inappropriate type.  The associated value is a string giving details about "
"the type mismatch."
msgstr ""

#: ../Doc/library/exceptions.rst:461
msgid ""
"This exception may be raised by user code to indicate that an attempted "
"operation on an object is not supported, and is not meant to be. If an "
"object is meant to support a given operation but has not yet provided an "
"implementation, :exc:`NotImplementedError` is the proper exception to raise."
msgstr ""

#: ../Doc/library/exceptions.rst:466
msgid ""
"Passing arguments of the wrong type (e.g. passing a :class:`list` when an :"
"class:`int` is expected) should result in a :exc:`TypeError`, but passing "
"arguments with the wrong value (e.g. a number outside expected boundaries) "
"should result in a :exc:`ValueError`."
msgstr ""

#: ../Doc/library/exceptions.rst:473
msgid ""
"Raised when a reference is made to a local variable in a function or method, "
"but no value has been bound to that variable.  This is a subclass of :exc:"
"`NameError`."
msgstr ""

#: ../Doc/library/exceptions.rst:480
msgid ""
"Raised when a Unicode-related encoding or decoding error occurs.  It is a "
"subclass of :exc:`ValueError`."
msgstr ""

#: ../Doc/library/exceptions.rst:483
msgid ""
":exc:`UnicodeError` has attributes that describe the encoding or decoding "
"error.  For example, ``err.object[err.start:err.end]`` gives the particular "
"invalid input that the codec failed on."
msgstr ""

#: ../Doc/library/exceptions.rst:489
msgid "The name of the encoding that raised the error."
msgstr ""

#: ../Doc/library/exceptions.rst:493
msgid "A string describing the specific codec error."
msgstr ""

#: ../Doc/library/exceptions.rst:497
msgid "The object the codec was attempting to encode or decode."
msgstr ""

#: ../Doc/library/exceptions.rst:501
msgid "The first index of invalid data in :attr:`object`."
msgstr ""

#: ../Doc/library/exceptions.rst:505
msgid "The index after the last invalid data in :attr:`object`."
msgstr ""

#: ../Doc/library/exceptions.rst:510
msgid ""
"Raised when a Unicode-related error occurs during encoding.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr ""

#: ../Doc/library/exceptions.rst:516
msgid ""
"Raised when a Unicode-related error occurs during decoding.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr ""

#: ../Doc/library/exceptions.rst:522
msgid ""
"Raised when a Unicode-related error occurs during translating.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr ""

#: ../Doc/library/exceptions.rst:528
msgid ""
"Raised when an operation or function receives an argument that has the right "
"type but an inappropriate value, and the situation is not described by a "
"more precise exception such as :exc:`IndexError`."
msgstr ""

#: ../Doc/library/exceptions.rst:535
msgid ""
"Raised when the second argument of a division or modulo operation is zero.  "
"The associated value is a string indicating the type of the operands and the "
"operation."
msgstr ""

#: ../Doc/library/exceptions.rst:540
msgid ""
"The following exceptions are kept for compatibility with previous versions; "
"starting from Python 3.3, they are aliases of :exc:`OSError`."
msgstr ""

#: ../Doc/library/exceptions.rst:549
msgid "Only available on Windows."
msgstr ""

#: ../Doc/library/exceptions.rst:553
msgid "OS exceptions"
msgstr ""

#: ../Doc/library/exceptions.rst:555
msgid ""
"The following exceptions are subclasses of :exc:`OSError`, they get raised "
"depending on the system error code."
msgstr ""

#: ../Doc/library/exceptions.rst:560
msgid ""
"Raised when an operation would block on an object (e.g. socket) set for non-"
"blocking operation. Corresponds to :c:data:`errno` ``EAGAIN``, ``EALREADY``, "
"``EWOULDBLOCK`` and ``EINPROGRESS``."
msgstr ""

#: ../Doc/library/exceptions.rst:565
msgid ""
"In addition to those of :exc:`OSError`, :exc:`BlockingIOError` can have one "
"more attribute:"
msgstr ""

#: ../Doc/library/exceptions.rst:570
msgid ""
"An integer containing the number of characters written to the stream before "
"it blocked.  This attribute is available when using the buffered I/O classes "
"from the :mod:`io` module."
msgstr ""

#: ../Doc/library/exceptions.rst:576
msgid ""
"Raised when an operation on a child process failed. Corresponds to :c:data:"
"`errno` ``ECHILD``."
msgstr ""

#: ../Doc/library/exceptions.rst:581
msgid "A base class for connection-related issues."
msgstr ""

#: ../Doc/library/exceptions.rst:583
msgid ""
"Subclasses are :exc:`BrokenPipeError`, :exc:`ConnectionAbortedError`, :exc:"
"`ConnectionRefusedError` and :exc:`ConnectionResetError`."
msgstr ""

#: ../Doc/library/exceptions.rst:588
msgid ""
"A subclass of :exc:`ConnectionError`, raised when trying to write on a pipe "
"while the other end has been closed, or trying to write on a socket which "
"has been shutdown for writing. Corresponds to :c:data:`errno` ``EPIPE`` and "
"``ESHUTDOWN``."
msgstr ""

#: ../Doc/library/exceptions.rst:595
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection attempt is "
"aborted by the peer. Corresponds to :c:data:`errno` ``ECONNABORTED``."
msgstr ""

#: ../Doc/library/exceptions.rst:601
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection attempt is "
"refused by the peer. Corresponds to :c:data:`errno` ``ECONNREFUSED``."
msgstr ""

#: ../Doc/library/exceptions.rst:607
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection is reset by "
"the peer. Corresponds to :c:data:`errno` ``ECONNRESET``."
msgstr ""

#: ../Doc/library/exceptions.rst:613
msgid ""
"Raised when trying to create a file or directory which already exists. "
"Corresponds to :c:data:`errno` ``EEXIST``."
msgstr ""

#: ../Doc/library/exceptions.rst:618
msgid ""
"Raised when a file or directory is requested but doesn't exist. Corresponds "
"to :c:data:`errno` ``ENOENT``."
msgstr ""

#: ../Doc/library/exceptions.rst:623
msgid ""
"Raised when a system call is interrupted by an incoming signal. Corresponds "
"to :c:data:`errno` :py:data:`~errno.EINTR`."
msgstr ""

#: ../Doc/library/exceptions.rst:626
msgid ""
"Python now retries system calls when a syscall is interrupted by a signal, "
"except if the signal handler raises an exception (see :pep:`475` for the "
"rationale), instead of raising :exc:`InterruptedError`."
msgstr ""

#: ../Doc/library/exceptions.rst:633
msgid ""
"Raised when a file operation (such as :func:`os.remove`) is requested on a "
"directory. Corresponds to :c:data:`errno` ``EISDIR``."
msgstr ""

#: ../Doc/library/exceptions.rst:639
msgid ""
"Raised when a directory operation (such as :func:`os.listdir`) is requested "
"on something which is not a directory. Corresponds to :c:data:`errno` "
"``ENOTDIR``."
msgstr ""

#: ../Doc/library/exceptions.rst:645
msgid ""
"Raised when trying to run an operation without the adequate access rights - "
"for example filesystem permissions. Corresponds to :c:data:`errno` "
"``EACCES`` and ``EPERM``."
msgstr ""

#: ../Doc/library/exceptions.rst:651
msgid ""
"Raised when a given process doesn't exist. Corresponds to :c:data:`errno` "
"``ESRCH``."
msgstr ""

#: ../Doc/library/exceptions.rst:656
msgid ""
"Raised when a system function timed out at the system level. Corresponds to :"
"c:data:`errno` ``ETIMEDOUT``."
msgstr ""

#: ../Doc/library/exceptions.rst:659
msgid "All the above :exc:`OSError` subclasses were added."
msgstr ""

#: ../Doc/library/exceptions.rst:665
msgid ":pep:`3151` - Reworking the OS and IO exception hierarchy"
msgstr ""

#: ../Doc/library/exceptions.rst:671
msgid "Warnings"
msgstr ""

#: ../Doc/library/exceptions.rst:673
msgid ""
"The following exceptions are used as warning categories; see the :ref:"
"`warning-categories` documentation for more details."
msgstr ""

#: ../Doc/library/exceptions.rst:678
msgid "Base class for warning categories."
msgstr ""

#: ../Doc/library/exceptions.rst:683
msgid "Base class for warnings generated by user code."
msgstr ""

#: ../Doc/library/exceptions.rst:688
msgid ""
"Base class for warnings about deprecated features when those warnings are "
"intended for other Python developers."
msgstr ""

#: ../Doc/library/exceptions.rst:694
msgid ""
"Base class for warnings about features which are obsolete and expected to be "
"deprecated in the future, but are not deprecated at the moment."
msgstr ""

#: ../Doc/library/exceptions.rst:698
msgid ""
"This class is rarely used as emitting a warning about a possible upcoming "
"deprecation is unusual, and :exc:`DeprecationWarning` is preferred for "
"already active deprecations."
msgstr ""

#: ../Doc/library/exceptions.rst:705
msgid "Base class for warnings about dubious syntax."
msgstr ""

#: ../Doc/library/exceptions.rst:710
msgid "Base class for warnings about dubious runtime behavior."
msgstr ""

#: ../Doc/library/exceptions.rst:715
msgid ""
"Base class for warnings about deprecated features when those warnings are "
"intended for end users of applications that are written in Python."
msgstr ""

#: ../Doc/library/exceptions.rst:721
msgid "Base class for warnings about probable mistakes in module imports."
msgstr ""

#: ../Doc/library/exceptions.rst:726
msgid "Base class for warnings related to Unicode."
msgstr ""

#: ../Doc/library/exceptions.rst:731
msgid ""
"Base class for warnings related to :class:`bytes` and :class:`bytearray`."
msgstr ""

#: ../Doc/library/exceptions.rst:736
msgid ""
"Base class for warnings related to resource usage. Ignored by the default "
"warning filters."
msgstr ""

#: ../Doc/library/exceptions.rst:744
msgid "Exception hierarchy"
msgstr ""

#: ../Doc/library/exceptions.rst:746
msgid "The class hierarchy for built-in exceptions is:"
msgstr ""
