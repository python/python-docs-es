# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-25 19:47+0200\n"
"PO-Revision-Date: 2022-11-25 00:29+0800\n"
"Last-Translator: Rodrigo Tobar <rtobarc@gmail.com>\n"
"Language-Team: python-doc-es\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.10.3\n"
"X-Generator: Poedit 3.0.1\n"

#: ../Doc/library/importlib.rst:2
msgid ":mod:`!importlib` --- The implementation of :keyword:`!import`"
msgstr ":mod:`!importlib` --- La implementación de :keyword:`!import`"

#: ../Doc/library/importlib.rst:12
msgid "**Source code:** :source:`Lib/importlib/__init__.py`"
msgstr "**Código fuente:** :source:`Lib/importlib/__init__.py`"

#: ../Doc/library/importlib.rst:18
msgid "Introduction"
msgstr "Introducción"

#: ../Doc/library/importlib.rst:20
msgid "The purpose of the :mod:`importlib` package is three-fold."
msgstr "El propósito del paquete :mod:`importlib` es triple:"

#: ../Doc/library/importlib.rst:22
msgid ""
"One is to provide the implementation of the :keyword:`import` statement (and "
"thus, by extension, the :func:`__import__` function) in Python source code. "
"This provides an implementation of :keyword:`!import` which is portable to "
"any Python interpreter. This also provides an implementation which is easier "
"to comprehend than one implemented in a programming language other than "
"Python."
msgstr ""
"Uno es proveer la implementación de la declaración de :keyword:`import` (y "
"así, por extensión, el método :func:`__import__` ) en el código fuente de "
"Python. Esto provee una implementación de la :keyword:`!import` la cual es "
"compatible con cualquier intérprete de Python. También provee una "
"implementación que es más fácil de comprender que una implementada en un "
"lenguajes que no es Python."

#: ../Doc/library/importlib.rst:29
msgid ""
"Two, the components to implement :keyword:`import` are exposed in this "
"package, making it easier for users to create their own custom objects "
"(known generically as an :term:`importer`) to participate in the import "
"process."
msgstr ""
"Dos, los componentes incluidos para implementar :keyword:`import`  están "
"expuestos en este paquete para que sea más fácil para los usuarios crear sus "
"propios objetos (conocidos de forma genérica como :term:`importer`) para "
"participar en el proceso de importación."

#: ../Doc/library/importlib.rst:33
msgid ""
"Three, the package contains modules exposing additional functionality for "
"managing aspects of Python packages:"
msgstr ""
"Tres, el paquete contiene módulos exponiendo funcionalidad adicional para "
"administrar aspectos de paquetes de Python:"

#: ../Doc/library/importlib.rst:36
msgid ""
":mod:`importlib.metadata` presents access to metadata from third-party "
"distributions."
msgstr ""
":mod:`importlib.metadata` presenta acceso a metadatos de distribuciones de "
"terceros."

#: ../Doc/library/importlib.rst:38
msgid ""
":mod:`importlib.resources` provides routines for accessing non-code "
"\"resources\" from Python packages."
msgstr ""
":mod:`importlib.resources` provee rutinas para acceder a *recursos* que no "
"son código de paquetes de Python."

#: ../Doc/library/importlib.rst:44
msgid ":ref:`import`"
msgstr ":ref:`import`"

#: ../Doc/library/importlib.rst:44
msgid "The language reference for the :keyword:`import` statement."
msgstr "La referencia en el lenguaje para la declaración de :keyword:`import`."

#: ../Doc/library/importlib.rst:49
msgid ""
"`Packages specification <https://www.python.org/doc/essays/packages/>`__"
msgstr ""
"`Especificaciones de paquetes <https://www.python.org/doc/essays/packages/"
">`__"

#: ../Doc/library/importlib.rst:47
msgid ""
"Original specification of packages. Some semantics have changed since the "
"writing of this document (e.g. redirecting based on ``None`` in :data:`sys."
"modules`)."
msgstr ""
"Especificaciones originales de los paquetes. Algunas semánticas han cambiado "
"desde que este documento fue escrito (ejemplo, redirección de acuerdo a "
"``None`` en :data:`sys.modules`)."

#: ../Doc/library/importlib.rst:52
msgid "The :func:`.__import__` function"
msgstr "La función :func:`.__import__`"

#: ../Doc/library/importlib.rst:52
msgid "The :keyword:`import` statement is syntactic sugar for this function."
msgstr ""
"La declaración de :keyword:`import` es una decoración sintáctica para esta "
"función."

#: ../Doc/library/importlib.rst:55
msgid ":ref:`sys-path-init`"
msgstr ":ref:`sys-path-init`"

#: ../Doc/library/importlib.rst:55
msgid "The initialization of :data:`sys.path`."
msgstr "La inicialización de :data:`sys.path`."

#: ../Doc/library/importlib.rst:58
msgid ":pep:`235`"
msgstr ":pep:`235`"

#: ../Doc/library/importlib.rst:58
msgid "Import on Case-Insensitive Platforms"
msgstr "Importar en sistemas que no distinguen entre mayúsculas y minúsculas"

#: ../Doc/library/importlib.rst:61
msgid ":pep:`263`"
msgstr ":pep:`263`"

#: ../Doc/library/importlib.rst:61
msgid "Defining Python Source Code Encodings"
msgstr "Definiendo las codificaciones del código fuente de Python"

#: ../Doc/library/importlib.rst:64
msgid ":pep:`302`"
msgstr ":pep:`302`"

#: ../Doc/library/importlib.rst:64
msgid "New Import Hooks"
msgstr "Nuevos ganchos de importación"

#: ../Doc/library/importlib.rst:67
msgid ":pep:`328`"
msgstr ":pep:`328`"

#: ../Doc/library/importlib.rst:67
msgid "Imports: Multi-Line and Absolute/Relative"
msgstr "Importaciones: Multilíneas, y absolutos/relativos"

#: ../Doc/library/importlib.rst:70
msgid ":pep:`366`"
msgstr ":pep:`366`"

#: ../Doc/library/importlib.rst:70
msgid "Main module explicit relative imports"
msgstr "Importaciones relativas, explicitas, del módulo principal"

#: ../Doc/library/importlib.rst:73
msgid ":pep:`420`"
msgstr ":pep:`420`"

#: ../Doc/library/importlib.rst:73
msgid "Implicit namespace packages"
msgstr "Paquetes implícitos en el espacio de nombres"

#: ../Doc/library/importlib.rst:76
msgid ":pep:`451`"
msgstr ":pep:`451`"

#: ../Doc/library/importlib.rst:76
msgid "A ModuleSpec Type for the Import System"
msgstr "Un tipo de ModuleSpec para el sistema de importación"

#: ../Doc/library/importlib.rst:79
msgid ":pep:`488`"
msgstr ":pep:`488`"

#: ../Doc/library/importlib.rst:79
msgid "Elimination of PYO files"
msgstr "Eliminación de archivos PYO"

#: ../Doc/library/importlib.rst:82
msgid ":pep:`489`"
msgstr ":pep:`489`"

#: ../Doc/library/importlib.rst:82
msgid "Multi-phase extension module initialization"
msgstr "Inicialización de extensión de módulo en múltiples fases"

#: ../Doc/library/importlib.rst:85
msgid ":pep:`552`"
msgstr ":pep:`552`"

#: ../Doc/library/importlib.rst:85
msgid "Deterministic pycs"
msgstr "Pycs determinísticos"

#: ../Doc/library/importlib.rst:88
msgid ":pep:`3120`"
msgstr ":pep:`3120`"

#: ../Doc/library/importlib.rst:88
msgid "Using UTF-8 as the Default Source Encoding"
msgstr "Usando UTF-8 como la codificación fuente por defecto"

#: ../Doc/library/importlib.rst:90
msgid ":pep:`3147`"
msgstr ":pep:`3147`"

#: ../Doc/library/importlib.rst:91
msgid "PYC Repository Directories"
msgstr "Repositorio de directorios PYC"

#: ../Doc/library/importlib.rst:95
msgid "Functions"
msgstr "Funciones"

#: ../Doc/library/importlib.rst:99
msgid "An implementation of the built-in :func:`__import__` function."
msgstr "Una implementación de la función :func:`__import__` incorporada."

#: ../Doc/library/importlib.rst:102
msgid ""
"Programmatic importing of modules should use :func:`import_module` instead "
"of this function."
msgstr ""
"La importación programática los módulos debe usar :func:`import_module` en "
"lugar de esta función."

#: ../Doc/library/importlib.rst:107
msgid ""
"Import a module. The *name* argument specifies what module to import in "
"absolute or relative terms (e.g. either ``pkg.mod`` or ``..mod``). If the "
"name is specified in relative terms, then the *package* argument must be set "
"to the name of the package which is to act as the anchor for resolving the "
"package name (e.g. ``import_module('..mod', 'pkg.subpkg')`` will import "
"``pkg.mod``)."
msgstr ""
"Importar un módulo. El argumento llamado *name* especifica qué módulo "
"importar en términos absolutos o relativos (ejemplo, puede ser ``pkg.mod`` o "
"``..mod``). Si el nombre fuera especificado en términos relativos, entonces "
"el argumento llamado *package* debe ser igual al nombre del paquete que será "
"el ancla para resolver el nombre del paquete (ejemplo ``import_module('.."
"mod', 'pkg.subpkg')`` importará ``pkg.mod``)."

#: ../Doc/library/importlib.rst:115
msgid ""
"The :func:`import_module` function acts as a simplifying wrapper around :"
"func:`importlib.__import__`. This means all semantics of the function are "
"derived from :func:`importlib.__import__`. The most important difference "
"between these two functions is that :func:`import_module` returns the "
"specified package or module (e.g. ``pkg.mod``), while :func:`__import__` "
"returns the top-level package or module (e.g. ``pkg``)."
msgstr ""
"La función :func:`import_module` actúa como un envoltorio simplificador "
"alrededor de :func:`importlib.__import__`.  Esto quiere decir que las "
"semánticas de la función son derivadas de :func:`importlib.__import__`. La "
"diferencia más importante entre las dos funciones es que :func:"
"`import_module` retorna el paquete especificado o el módulo (ejemplo ``pkg."
"mod``), mientras que :func:`__import__` retorna el paquete o módulo del "
"nivel superior (ejemplo ``pkg``)."

#: ../Doc/library/importlib.rst:122
msgid ""
"If you are dynamically importing a module that was created since the "
"interpreter began execution (e.g., created a Python source file), you may "
"need to call :func:`invalidate_caches` in order for the new module to be "
"noticed by the import system."
msgstr ""
"Si está importando dinámicamente un módulo que se creó desde que el "
"intérprete comenzó la ejecución (por ejemplo, creó un archivo fuente de "
"Python), es posible que deba llamar a :func:`invalidate_caches` para que el "
"nuevo módulo sea detectado por el sistema de importación."

#: ../Doc/library/importlib.rst:127
msgid "Parent packages are automatically imported."
msgstr "Paquetes padres son importados automáticamente."

#: ../Doc/library/importlib.rst:132
msgid ""
"Find the loader for a module, optionally within the specified *path*. If the "
"module is in :attr:`sys.modules`, then ``sys.modules[name].__loader__`` is "
"returned (unless the loader would be ``None`` or is not set, in which case :"
"exc:`ValueError` is raised). Otherwise a search using :attr:`sys.meta_path` "
"is done. ``None`` is returned if no loader is found."
msgstr ""
"Encuentra el cargador de un módulo, opcionalmente con el especificado en "
"*path*. Si el módulo esta en :attr:`sys.modules`, entonces retorna el ``sys."
"modules[name].__loader__`` (a menos que el cargador sea ``None`` o no haya "
"uno especificado, en tal caso se lanza un :exc:`ValueError`).Si no se "
"encuentra ahí, se hace una búsqueda usando :attr:`sys.meta_path`. Se retorna "
"``None`` si no se encuentra un cargador."

#: ../Doc/library/importlib.rst:138
msgid ""
"A dotted name does not have its parents implicitly imported as that requires "
"loading them and that may not be desired. To properly import a submodule you "
"will need to import all parent packages of the submodule and use the correct "
"argument to *path*."
msgstr ""
"Un nombre con puntos no tiene sus ascendientes importados implícitamente, ya "
"que eso requeriría cargarlo y eso podría no ser deseado. Para importar un "
"sub-módulo correctamente debes importar todos los paquetes ascendientes del "
"sub-módulo y pase el argumento correcto a *path*."

#: ../Doc/library/importlib.rst:145
msgid ""
"If ``__loader__`` is not set, raise :exc:`ValueError`, just like when the "
"attribute is set to ``None``."
msgstr ""
"Si el ``__loader__`` no está configurado, lanza un :exc:`ValueError`, igual "
"a si el atributo fuera ``None``."

#: ../Doc/library/importlib.rst:149
msgid "Use :func:`importlib.util.find_spec` instead."
msgstr "Utilice :func:`importlib.util.find_spec` en su lugar."

#: ../Doc/library/importlib.rst:154
msgid ""
"Invalidate the internal caches of finders stored at :data:`sys.meta_path`. "
"If a finder implements ``invalidate_caches()`` then it will be called to "
"perform the invalidation.  This function should be called if any modules are "
"created/installed while your program is running to guarantee all finders "
"will notice the new module's existence."
msgstr ""
"Invalide los cache internos de ubicadores encontrados en :data:`sys."
"meta_path`.Si un buscador implementa ``invalidate_caches()`` entonces será "
"llamado para realizar la invalidación.Esta función debe ser llamada si "
"cualquier módulo ha sido creado/instalado mientras tu programa esta siendo "
"ejecutado para garantizar que todos los buscadores noten la existencia del "
"nuevo módulo."

#: ../Doc/library/importlib.rst:162
msgid ""
"Namespace packages created/installed in a different :data:`sys.path` "
"location after the same namespace was already imported are noticed."
msgstr ""
"Paquetes de espacio de nombres creados/instalados en una ubicación :data:"
"`sys.path` distinta después de que el mismo espacio de nombres fue importado "
"son notados."

#: ../Doc/library/importlib.rst:168
msgid ""
"Reload a previously imported *module*.  The argument must be a module "
"object, so it must have been successfully imported before.  This is useful "
"if you have edited the module source file using an external editor and want "
"to try out the new version without leaving the Python interpreter.  The "
"return value is the module object (which can be different if re-importing "
"causes a different object to be placed in :data:`sys.modules`)."
msgstr ""
"Recarga un *modulo* previamente importado. El argumento debe ser un objeto "
"módulo, por lo que debe haber sido importado exitosamente. Esto es útil "
"cuando has editado el código fuente de un archivo usando un editor externo y "
"deseas probar la nueva versión sin abandonar el interprete de Python. El "
"valor retornado es el objeto módulo (que puede ser diferente si la "
"reimportación crea un nuevo objeto en :data:`sys.modules`)."

#: ../Doc/library/importlib.rst:175
msgid "When :func:`reload` is executed:"
msgstr "Cuando :func:`reload` es ejecutada:"

#: ../Doc/library/importlib.rst:177
msgid ""
"Python module's code is recompiled and the module-level code re-executed, "
"defining a new set of objects which are bound to names in the module's "
"dictionary by reusing the :term:`loader` which originally loaded the "
"module.  The ``init`` function of extension modules is not called a second "
"time."
msgstr ""
"El código de un módulo de Python es recompilado y el código del módulo "
"reejecutado, definiendo un nuevo conjunto de objetos que son asignados a los "
"nombres de los módulos en el diccionario, reusando el :term:`loader` que "
"originalmente carga los módulos. El método ``init`` de los módulos de "
"extension no es llamado de nuevo."

#: ../Doc/library/importlib.rst:183
msgid ""
"As with all other objects in Python the old objects are only reclaimed after "
"their reference counts drop to zero."
msgstr ""
"Al igual que con todos los demás objetos en Python, los objetos antiguos "
"solo se recuperan después de que sus recuentos de referencias caen a cero."

#: ../Doc/library/importlib.rst:186
msgid ""
"The names in the module namespace are updated to point to any new or changed "
"objects."
msgstr ""
"Los nombres en el espacio de nombres del módulo se actualizan para señalar "
"cualquier objeto nuevo o modificado."

#: ../Doc/library/importlib.rst:189
msgid ""
"Other references to the old objects (such as names external to the module) "
"are not rebound to refer to the new objects and must be updated in each "
"namespace where they occur if that is desired."
msgstr ""
"Otras referencias a los objetos antiguos (como los nombres externos al "
"módulo) no se vuelven a vincular para hacer referencia a los nuevos objetos "
"y deben actualizarse en cada espacio de nombres donde se produzcan si se "
"desea."

#: ../Doc/library/importlib.rst:193
msgid "There are a number of other caveats:"
msgstr "Hay una serie de otras advertencias:"

#: ../Doc/library/importlib.rst:195
msgid ""
"When a module is reloaded, its dictionary (containing the module's global "
"variables) is retained.  Redefinitions of names will override the old "
"definitions, so this is generally not a problem.  If the new version of a "
"module does not define a name that was defined by the old version, the old "
"definition remains.  This feature can be used to the module's advantage if "
"it maintains a global table or cache of objects --- with a :keyword:`try` "
"statement it can test for the table's presence and skip its initialization "
"if desired::"
msgstr ""
"Cuando se vuelve a cargar un módulo, se conserva su diccionario (que "
"contiene las variables globales del módulo). Las redefiniciones de nombres "
"anularán las antiguas definiciones, por lo que generalmente esto no es un "
"problema. Si la nueva versión de un módulo no define un nombre que fue "
"definido por la versión anterior, la definición anterior permanece. Esta "
"característica se puede utilizar en beneficio del módulo si mantiene una "
"tabla global o caché de objetos --- con una declaración :keyword:`try` puede "
"probar la presencia de la tabla y omitir su inicialización si lo desea:"

#: ../Doc/library/importlib.rst:209
msgid ""
"It is generally not very useful to reload built-in or dynamically loaded "
"modules.  Reloading :mod:`sys`, :mod:`__main__`, :mod:`builtins` and other "
"key modules is not recommended.  In many cases extension modules are not "
"designed to be initialized more than once, and may fail in arbitrary ways "
"when reloaded."
msgstr ""
"Por lo general, no es muy útil recargar módulos integrados o cargados "
"dinámicamente. No se recomienda recargar :mod:`sys`, :mod:`__main__`, :mod:"
"`builtins` y otros módulos clave. En muchos casos, los módulos de extensión "
"no están diseñados para inicializarse más de una vez y pueden fallar de "
"manera arbitraria cuando se vuelven a cargar."

#: ../Doc/library/importlib.rst:215
msgid ""
"If a module imports objects from another module using :keyword:`from` ... :"
"keyword:`import` ..., calling :func:`reload` for the other module does not "
"redefine the objects imported from it --- one way around this is to re-"
"execute the :keyword:`!from` statement, another is to use :keyword:`!import` "
"and qualified names (*module.name*) instead."
msgstr ""
"Si un módulo importa objetos de otro módulo usando :keyword:`from` ... :"
"keyword:`import` ..., al llamar a :func:`reload` para el otro módulo no "
"redefine los objetos importados de él --- una forma de evitar esto es volver "
"a ejecutar la instrucción :keyword:`!from`, otra es usar :keyword:`!import` "
"y nombres calificados (*module.name*) en su lugar."

#: ../Doc/library/importlib.rst:221
msgid ""
"If a module instantiates instances of a class, reloading the module that "
"defines the class does not affect the method definitions of the instances "
"--- they continue to use the old class definition.  The same is true for "
"derived classes."
msgstr ""
"Si un módulo crea instancias de una clase, volver a cargar el módulo que "
"define la clase no afecta las definiciones de método de las instancias --- "
"continúan usando la definición de clase anterior. Lo mismo ocurre con las "
"clases derivadas."

#: ../Doc/library/importlib.rst:227
msgid ""
":exc:`ModuleNotFoundError` is raised when the module being reloaded lacks a :"
"class:`~importlib.machinery.ModuleSpec`."
msgstr ""
":exc:`ModuleNotFoundError` se lanza cuando el módulo que se está recargando "
"carece de :class:`~importlib.machinery.ModuleSpec`."

#: ../Doc/library/importlib.rst:233
msgid ":mod:`importlib.abc` -- Abstract base classes related to import"
msgstr ""
":mod:`importlib.abc` -- Clases base abstractas relacionadas con la "
"importación"

#: ../Doc/library/importlib.rst:238
msgid "**Source code:** :source:`Lib/importlib/abc.py`"
msgstr "**Código fuente:** :source:`Lib/importlib/abc.py`"

#: ../Doc/library/importlib.rst:243
msgid ""
"The :mod:`importlib.abc` module contains all of the core abstract base "
"classes used by :keyword:`import`. Some subclasses of the core abstract base "
"classes are also provided to help in implementing the core ABCs."
msgstr ""
"El módulo :mod:`importlib.abc` contiene todas las clases base abstractas "
"principales utilizadas por :keyword:`import`. También se proporcionan "
"algunas subclases de las clases base abstractas centrales para ayudar a "
"implementar los ABC centrales."

#: ../Doc/library/importlib.rst:247
msgid "ABC hierarchy::"
msgstr "Jerarquía ABC::"

#: ../Doc/library/importlib.rst:263
msgid "An abstract base class representing a :term:`finder`."
msgstr "Una clase base abstracta que representa :term:`finder`."

#: ../Doc/library/importlib.rst:265
msgid "Use :class:`MetaPathFinder` or :class:`PathEntryFinder` instead."
msgstr ""
"Utilice :class:`MetaPathFinder` o :class:`PathEntryFinder` en su lugar."

#: ../Doc/library/importlib.rst:270
msgid ""
"An abstract method for finding a :term:`loader` for the specified module.  "
"Originally specified in :pep:`302`, this method was meant for use in :data:"
"`sys.meta_path` and in the path-based import subsystem."
msgstr ""
"Un método abstracto para encontrar un :term:`loader` para el módulo "
"especificado. Originalmente especificado en :pep:`302`, este método estaba "
"destinado a ser utilizado en :data:`sys.meta_path` y en el subsistema de "
"importación basado en rutas."

#: ../Doc/library/importlib.rst:274
msgid ""
"Returns ``None`` when called instead of raising :exc:`NotImplementedError`."
msgstr ""
"Retorna ``None`` cuando se llama en lugar de generar :exc:"
"`NotImplementedError`."

#: ../Doc/library/importlib.rst:278
msgid ""
"Implement :meth:`MetaPathFinder.find_spec` or :meth:`PathEntryFinder."
"find_spec` instead."
msgstr ""
"Implemente :meth:`MetaPathFinder.find_spec` o :meth:`PathEntryFinder."
"find_spec` en su lugar."

#: ../Doc/library/importlib.rst:285
msgid "An abstract base class representing a :term:`meta path finder`."
msgstr "Una clase base abstracta que representa :term:`meta path finder`."

#: ../Doc/library/importlib.rst:289 ../Doc/library/importlib.rst:344
msgid "No longer a subclass of :class:`Finder`."
msgstr "Ya no hereda de :class:`Finder`."

#: ../Doc/library/importlib.rst:294
msgid ""
"An abstract method for finding a :term:`spec <module spec>` for the "
"specified module.  If this is a top-level import, *path* will be ``None``.  "
"Otherwise, this is a search for a subpackage or module and *path* will be "
"the value of :attr:`__path__` from the parent package. If a spec cannot be "
"found, ``None`` is returned. When passed in, ``target`` is a module object "
"that the finder may use to make a more educated guess about what spec to "
"return. :func:`importlib.util.spec_from_loader` may be useful for "
"implementing concrete ``MetaPathFinders``."
msgstr ""
"Un método abstracto para encontrar un :term:`spec <module spec>` para el "
"módulo especificado. Si se trata de una importación de nivel superior, el "
"*path* será ``None``. De lo contrario, esta es una búsqueda de un subpaquete "
"o módulo y *path* será el valor de :attr:`__path__` del paquete principal. "
"Si no se puede encontrar una especificación, se retorna ``None``. Cuando se "
"pasa, ``target`` es un objeto de módulo que el buscador puede usar para "
"hacer una suposición más informada sobre qué especificación retornar. :func:"
"`importlib.util.spec_from_loader` puede ser útil para implementar "
"``MetaPathFinders`` concretos."

#: ../Doc/library/importlib.rst:308
msgid ""
"A legacy method for finding a :term:`loader` for the specified module.  If "
"this is a top-level import, *path* will be ``None``. Otherwise, this is a "
"search for a subpackage or module and *path* will be the value of :attr:"
"`__path__` from the parent package. If a loader cannot be found, ``None`` is "
"returned."
msgstr ""
"Un método heredado para encontrar un :term:`loader` para el módulo "
"especificado. Si se trata de una importación de nivel superior, el *path* "
"será ``None``. De lo contrario, esta es una búsqueda de un subpaquete o "
"módulo y *path* será el valor de :attr:`__path__` del paquete principal. Si "
"no se puede encontrar un cargador, se retorna ``None``."

#: ../Doc/library/importlib.rst:314
msgid ""
"If :meth:`find_spec` is defined, backwards-compatible functionality is "
"provided."
msgstr ""
"Si se define :meth:`find_spec`, se proporciona una funcionalidad compatible "
"con versiones anteriores."

#: ../Doc/library/importlib.rst:317
msgid ""
"Returns ``None`` when called instead of raising :exc:`NotImplementedError`. "
"Can use :meth:`find_spec` to provide functionality."
msgstr ""
"Retorna ``None`` cuando se llama en lugar de generar :exc:"
"`NotImplementedError`. Puede usar :meth:`find_spec` para proporcionar "
"funcionalidad."

#: ../Doc/library/importlib.rst:322 ../Doc/library/importlib.rst:378
#: ../Doc/library/importlib.rst:386 ../Doc/library/importlib.rst:902
#: ../Doc/library/importlib.rst:959
msgid "Use :meth:`find_spec` instead."
msgstr "Use :meth:`find_spec` en su lugar."

#: ../Doc/library/importlib.rst:327
msgid ""
"An optional method which, when called, should invalidate any internal cache "
"used by the finder. Used by :func:`importlib.invalidate_caches` when "
"invalidating the caches of all finders on :data:`sys.meta_path`."
msgstr ""
"Un método opcional que, cuando se llama, debería invalidar cualquier caché "
"interno utilizado por el buscador. Utilizado por :func:`importlib."
"invalidate_caches` al invalidar los cachés de todos los buscadores en :data:"
"`sys.meta_path`."

#: ../Doc/library/importlib.rst:331
msgid "Returns ``None`` when called instead of ``NotImplemented``."
msgstr "Retorna ``None`` cuando se llama en lugar de ``NotImplemented``."

#: ../Doc/library/importlib.rst:337
msgid ""
"An abstract base class representing a :term:`path entry finder`.  Though it "
"bears some similarities to :class:`MetaPathFinder`, ``PathEntryFinder`` is "
"meant for use only within the path-based import subsystem provided by :class:"
"`importlib.machinery.PathFinder`."
msgstr ""
"Una clase base abstracta que representa un :term:`buscador de entradas de "
"ruta <path entry finder>`. Aunque tiene algunas similitudes con :class:"
"`MetaPathFinder`, ``PathEntryFinder`` está diseñado para usarse solo dentro "
"del subsistema de importación basado en rutas proporcionado por :class:"
"`importlib.machinery.PathFinder`."

#: ../Doc/library/importlib.rst:349
msgid ""
"An abstract method for finding a :term:`spec <module spec>` for the "
"specified module.  The finder will search for the module only within the :"
"term:`path entry` to which it is assigned.  If a spec cannot be found, "
"``None`` is returned.  When passed in, ``target`` is a module object that "
"the finder may use to make a more educated guess about what spec to return. :"
"func:`importlib.util.spec_from_loader` may be useful for implementing "
"concrete ``PathEntryFinders``."
msgstr ""
"Un método abstracto para encontrar un :term:`spec <module spec>` para el "
"módulo especificado. El buscador buscará el módulo solo dentro del :term:"
"`path entry` a la que está asignado. Si no se puede encontrar una "
"especificación, se retorna ``None``. Cuando se pasa, ``target`` es un objeto "
"de módulo que el buscador puede usar para hacer una suposición más informada "
"sobre qué especificación retornar. :func:`importlib.util.spec_from_loader` "
"puede ser útil para implementar ``PathEntryFinders`` concretos."

#: ../Doc/library/importlib.rst:361
msgid ""
"A legacy method for finding a :term:`loader` for the specified module.  "
"Returns a 2-tuple of ``(loader, portion)`` where ``portion`` is a sequence "
"of file system locations contributing to part of a namespace package. The "
"loader may be ``None`` while specifying ``portion`` to signify the "
"contribution of the file system locations to a namespace package. An empty "
"list can be used for ``portion`` to signify the loader is not part of a "
"namespace package. If ``loader`` is ``None`` and ``portion`` is the empty "
"list then no loader or location for a namespace package were found (i.e. "
"failure to find anything for the module)."
msgstr ""
"Un método heredado para encontrar un :term:`loader` para el módulo "
"especificado. Retorna una tupla de 2 de ``(loader, portion)`` donde "
"``portion`` es una secuencia de ubicaciones del sistema de archivos que "
"contribuyen a parte de un paquete de espacio de nombres. El cargador puede "
"ser ``None`` mientras se especifica ``portion`` para indicar la contribución "
"de las ubicaciones del sistema de archivos a un paquete de espacio de "
"nombres. Se puede usar una lista vacía para ``portion`` para indicar que el "
"cargador no es parte de un paquete de espacio de nombres. Si ``loader`` es "
"``None`` y ``portion`` es la lista vacía, entonces no se encontró ningún "
"cargador o ubicación para un paquete de espacio de nombres (es decir, no se "
"pudo encontrar nada para el módulo)."

#: ../Doc/library/importlib.rst:371
msgid ""
"If :meth:`find_spec` is defined then backwards-compatible functionality is "
"provided."
msgstr ""
"Si se define :meth:`find_spec`, se proporciona una funcionalidad compatible "
"con versiones anteriores."

#: ../Doc/library/importlib.rst:374
msgid ""
"Returns ``(None, [])`` instead of raising :exc:`NotImplementedError`. Uses :"
"meth:`find_spec` when available to provide functionality."
msgstr ""
"Retorna ``(None, [])`` en lugar de lanzar :exc:`NotImplementedError`. Usa :"
"meth:`find_spec` cuando está disponible para proporcionar funcionalidad."

#: ../Doc/library/importlib.rst:383
msgid ""
"A concrete implementation of :meth:`Finder.find_module` which is equivalent "
"to ``self.find_loader(fullname)[0]``."
msgstr ""
"Una implementación concreta de :meth:`Finder.find_module` que es equivalente "
"a ``self.find_loader(fullname)[0]``."

#: ../Doc/library/importlib.rst:391
msgid ""
"An optional method which, when called, should invalidate any internal cache "
"used by the finder. Used by :meth:`importlib.machinery.PathFinder."
"invalidate_caches` when invalidating the caches of all cached finders."
msgstr ""
"Un método opcional que, cuando se llama, debería invalidar cualquier caché "
"interno utilizado por el buscador. Usado por :meth:`importlib.machinery."
"PathFinder.invalidate_caches` al invalidar las cachés de todos los "
"buscadores en caché."

#: ../Doc/library/importlib.rst:399
msgid ""
"An abstract base class for a :term:`loader`. See :pep:`302` for the exact "
"definition for a loader."
msgstr ""
"Una clase base abstracta para un :term:`loader`. Consulte :pep:`302` para "
"obtener la definición exacta de cargador."

#: ../Doc/library/importlib.rst:402
msgid ""
"Loaders that wish to support resource reading should implement a :meth:"
"`get_resource_reader` method as specified by :class:`importlib.resources.abc."
"ResourceReader`."
msgstr ""
"Los cargadores que deseen admitir la lectura de recursos deben implementar "
"un método :meth:`get_resource_reader` según lo especificado por :class:"
"`importlib.abc.ResourceReader`."

#: ../Doc/library/importlib.rst:406
msgid "Introduced the optional :meth:`get_resource_reader` method."
msgstr "Introducido el método opcional :meth:`get_resource_reader`."

#: ../Doc/library/importlib.rst:411
msgid ""
"A method that returns the module object to use when importing a module.  "
"This method may return ``None``, indicating that default module creation "
"semantics should take place."
msgstr ""
"Un método que retorna el objeto de módulo que se utilizará al importar un "
"módulo. Este método puede retornar ``None``, lo que indica que se debe "
"llevar a cabo la semántica de creación de módulos predeterminada."

#: ../Doc/library/importlib.rst:417
msgid "This method is no longer optional when :meth:`exec_module` is defined."
msgstr "Este método ya no es opcional cuando se defina :meth:`exec_module`."

#: ../Doc/library/importlib.rst:423
msgid ""
"An abstract method that executes the module in its own namespace when a "
"module is imported or reloaded.  The module should already be initialized "
"when :meth:`exec_module` is called.  When this method exists, :meth:"
"`create_module` must be defined."
msgstr ""
"Un método abstracto que ejecuta el módulo en su propio espacio de nombres "
"cuando se importa o se vuelve a cargar un módulo. El módulo ya debería estar "
"inicializado cuando se llama a :meth:`exec_module`. Cuando existe este "
"método, se debe definir :meth:`create_module`."

#: ../Doc/library/importlib.rst:430
msgid ":meth:`create_module` must also be defined."
msgstr ":meth:`create_module` también debe definirse."

#: ../Doc/library/importlib.rst:435
msgid ""
"A legacy method for loading a module.  If the module cannot be loaded, :exc:"
"`ImportError` is raised, otherwise the loaded module is returned."
msgstr ""
"Un método heredado para cargar un módulo. Si el módulo no se puede cargar, "
"se lanza :exc:`ImportError`; de lo contrario, se retorna el módulo cargado."

#: ../Doc/library/importlib.rst:439
msgid ""
"If the requested module already exists in :data:`sys.modules`, that module "
"should be used and reloaded. Otherwise the loader should create a new module "
"and insert it into :data:`sys.modules` before any loading begins, to prevent "
"recursion from the import.  If the loader inserted a module and the load "
"fails, it must be removed by the loader from :data:`sys.modules`; modules "
"already in :data:`sys.modules` before the loader began execution should be "
"left alone (see :func:`importlib.util.module_for_loader`)."
msgstr ""
"Si el módulo solicitado ya existe en :data:`sys.modules`, ese módulo debe "
"usarse y recargarse. De lo contrario, el cargador debe crear un nuevo módulo "
"e insertarlo en :data:`sys.modules` antes de que comience la carga, para "
"evitar la recursividad de la importación. Si el cargador insertó un módulo y "
"la carga falla, el cargador debe eliminarlo de :data:`sys.modules`; los "
"módulos que ya están en :data:`sys.modules` antes de que el cargador "
"comenzara a ejecutarse deben dejarse en paz (ver :func:`importlib.util."
"module_for_loader`)."

#: ../Doc/library/importlib.rst:448
msgid ""
"The loader should set several attributes on the module (note that some of "
"these attributes can change when a module is reloaded):"
msgstr ""
"El cargador debe establecer varios atributos en el módulo (tenga en cuenta "
"que algunos de estos atributos pueden cambiar cuando se recarga un módulo):"

#: ../Doc/library/importlib.rst:454
msgid ":attr:`__name__`"
msgstr ":attr:`__name__`"

#: ../Doc/library/importlib.rst:453
msgid ""
"The module's fully qualified name. It is ``'__main__'`` for an executed "
"module."
msgstr ""
"El nombre completo del módulo. Es ``'__main__'`` para un módulo ejecutado."

#: ../Doc/library/importlib.rst:459
msgid ":attr:`__file__`"
msgstr ":attr:`__file__`"

#: ../Doc/library/importlib.rst:457
msgid ""
"The location the :term:`loader` used to load the module. For example, for "
"modules loaded from a .py file this is the filename. It is not set on all "
"modules (e.g. built-in modules)."
msgstr ""
"La ubicación que el :term:`cargador <loader>` usó para cargar el módulo. Por "
"ejemplo, para módulos cargados desde un archivo .py, éste es el nombre del "
"archivo. No está establecido para todos los módulos (por ejemplo. módulos "
"integrados)."

#: ../Doc/library/importlib.rst:463
msgid ":attr:`__cached__`"
msgstr ":attr:`__cached__`"

#: ../Doc/library/importlib.rst:462
msgid ""
"The filename of a compiled version of the module's code. It is not set on "
"all modules (e.g. built-in modules)."
msgstr ""
"El nombre de archivo de una versión compilada del código del módulo. No está "
"establecido para todos los módulos (por ejemplo, módulos integrados)."

#: ../Doc/library/importlib.rst:471
msgid ":attr:`__path__`"
msgstr ":attr:`__path__`"

#: ../Doc/library/importlib.rst:466
msgid ""
"The list of locations where the package's submodules will be found. Most of "
"the time this is a single directory. The import system passes this attribute "
"to ``__import__()`` and to finders in the same way as :attr:`sys.path` but "
"just for the package. It is not set on non-package modules so it can be used "
"as an indicator that the module is a package."
msgstr ""
"La lista de ubicaciones donde los sub-módulos del paquete pueden ser "
"encontrados. La mayoría de las veces es un solo directorio. El sistema de "
"importación pasa este atributo a ``__import__()`` y a buscadores de la misma "
"forma que :attr:`sys.path` pero sólo para el paquete. No está establecido en "
"módulos que no son paquetes, por lo que puede ser usado como un indicador si "
"el módulo es un paquete."

#: ../Doc/library/importlib.rst:476
msgid ":attr:`__package__`"
msgstr ":attr:`__package__`"

#: ../Doc/library/importlib.rst:474
msgid ""
"The fully qualified name of the package the module is in (or the empty "
"string for a top-level module). If the module is a package then this is the "
"same as :attr:`__name__`."
msgstr ""
"El nombre completo del paquete bajo el cual está el módulo (o la cadena de "
"caracteres vacía para los módulos de nivel superior). Si el módulo es un "
"paquete es lo mismo que :attr:`__name__`."

#: ../Doc/library/importlib.rst:479
msgid ":attr:`__loader__`"
msgstr ":attr:`__loader__`"

#: ../Doc/library/importlib.rst:479
msgid "The :term:`loader` used to load the module."
msgstr "El :term:`cargador <loader>` usado para cargar el módulo."

#: ../Doc/library/importlib.rst:481
msgid ""
"When :meth:`exec_module` is available then backwards-compatible "
"functionality is provided."
msgstr ""
"Cuando :meth:`exec_module` está disponible, se proporciona una funcionalidad "
"compatible con versiones anteriores."

#: ../Doc/library/importlib.rst:484
msgid ""
"Raise :exc:`ImportError` when called instead of :exc:`NotImplementedError`.  "
"Functionality provided when :meth:`exec_module` is available."
msgstr ""
"Lanza :exc:`ImportError` cuando se llama en lugar de :exc:"
"`NotImplementedError`. Funcionalidad proporcionada cuando :meth:"
"`exec_module` está disponible."

#: ../Doc/library/importlib.rst:489
msgid ""
"The recommended API for loading a module is :meth:`exec_module` (and :meth:"
"`create_module`).  Loaders should implement it instead of :meth:"
"`load_module`.  The import machinery takes care of all the other "
"responsibilities of :meth:`load_module` when :meth:`exec_module` is "
"implemented."
msgstr ""
"La API recomendada para cargar un módulo es :meth:`exec_module` (y :meth:"
"`create_module`). Los cargadores deberían implementarlo en lugar de :meth:"
"`load_module`. La maquinaria de importación se encarga de todas las demás "
"responsabilidades de :meth:`load_module` cuando se implementa :meth:"
"`exec_module`."

#: ../Doc/library/importlib.rst:498
msgid ""
"A legacy method which when implemented calculates and returns the given "
"module's representation, as a string.  The module type's default :meth:"
"`__repr__` will use the result of this method as appropriate."
msgstr ""
"Un método heredado que, cuando se implementa, calcula y retorna la "
"representación del módulo dado, como una cadena. El método :meth:`__repr__` "
"predeterminado del tipo de módulo utilizará el resultado de este método "
"según corresponda."

#: ../Doc/library/importlib.rst:504
msgid "Made optional instead of an abstractmethod."
msgstr "Hecho opcional en vez de un método abstracto (*abstractmethod*)"

#: ../Doc/library/importlib.rst:507
msgid "The import machinery now takes care of this automatically."
msgstr "La maquinaria de importación ahora se encarga de esto automáticamente."

#: ../Doc/library/importlib.rst:513
msgid ""
"An abstract base class for a :term:`loader` which implements the optional :"
"pep:`302` protocol for loading arbitrary resources from the storage back-end."
msgstr ""
"Una clase base abstracta para un :term:`loader` que implementa el protocolo "
"opcional :pep:`302` para cargar recursos arbitrarios desde el back-end de "
"almacenamiento."

#: ../Doc/library/importlib.rst:517
msgid ""
"This ABC is deprecated in favour of supporting resource loading through :"
"class:`importlib.resources.abc.ResourceReader`."
msgstr ""
"Este ABC está en desuso a favor de admitir la carga de recursos a través de :"
"class:`importlib.resources.abc.ResourceReader`."

#: ../Doc/library/importlib.rst:523
msgid ""
"An abstract method to return the bytes for the data located at *path*. "
"Loaders that have a file-like storage back-end that allows storing arbitrary "
"data can implement this abstract method to give direct access to the data "
"stored. :exc:`OSError` is to be raised if the *path* cannot be found. The "
"*path* is expected to be constructed using a module's :attr:`__file__` "
"attribute or an item from a package's :attr:`__path__`."
msgstr ""
"Un método abstracto para devolver los bytes de los datos ubicados en *path*. "
"Los cargadores que tienen un back-end de almacenamiento similar a un archivo "
"que permite almacenar datos arbitrarios pueden implementar este método "
"abstracto para dar acceso directo a los datos almacenados. :exc:`OSError` se "
"lanza si no se puede encontrar el *path*. Se espera que la *path* se "
"construya utilizando el atributo :attr:`__file__` de un módulo o un elemento "
"de un paquete :attr:`__path__`."

#: ../Doc/library/importlib.rst:531
msgid "Raises :exc:`OSError` instead of :exc:`NotImplementedError`."
msgstr "Lanza :exc:`OSError` en vez de :exc:`NotImplementedError`."

#: ../Doc/library/importlib.rst:537
msgid ""
"An abstract base class for a :term:`loader` which implements the optional :"
"pep:`302` protocol for loaders that inspect modules."
msgstr ""
"Una clase base abstracta para un :term:`loader` que implementa el protocolo "
"opcional :pep:`302` para cargadores que inspeccionan módulos."

#: ../Doc/library/importlib.rst:542
msgid ""
"Return the code object for a module, or ``None`` if the module does not have "
"a code object (as would be the case, for example, for a built-in module).  "
"Raise an :exc:`ImportError` if loader cannot find the requested module."
msgstr ""
"Retorna el objeto código para un módulo, o ``None`` si el módulo no tiene un "
"objeto código (como sería el caso, por ejemplo, para un módulo integrado). "
"Lanza un :exc:`ImportError` si el cargador no puede encontrar el módulo "
"solicitado."

#: ../Doc/library/importlib.rst:548
msgid ""
"While the method has a default implementation, it is suggested that it be "
"overridden if possible for performance."
msgstr ""
"Si bien el método tiene una implementación predeterminada, se sugiere que se "
"anule si es posible para mejorar el rendimiento."

#: ../Doc/library/importlib.rst:554
msgid "No longer abstract and a concrete implementation is provided."
msgstr ""
"Ya no es un método abstracto y se proporciona una implementación concreta."

#: ../Doc/library/importlib.rst:559
msgid ""
"An abstract method to return the source of a module. It is returned as a "
"text string using :term:`universal newlines`, translating all recognized "
"line separators into ``'\\n'`` characters.  Returns ``None`` if no source is "
"available (e.g. a built-in module). Raises :exc:`ImportError` if the loader "
"cannot find the module specified."
msgstr ""
"Un método abstracto para retornar la fuente de un módulo. Se retorna como "
"una cadena de caracteres de texto usando :term:`universal newlines`, "
"traduciendo todos los separadores de línea reconocidos en caracteres ``'\n"
"'``. Retorna ``None`` si no hay una fuente disponible (por ejemplo, un "
"módulo integrado). Lanza :exc:`ImportError` si el cargador no puede "
"encontrar el módulo especificado."

#: ../Doc/library/importlib.rst:565 ../Doc/library/importlib.rst:574
#: ../Doc/library/importlib.rst:624
msgid "Raises :exc:`ImportError` instead of :exc:`NotImplementedError`."
msgstr "Lanza :exc:`ImportError` en vez de :exc:`NotImplementedError`."

#: ../Doc/library/importlib.rst:570
msgid ""
"An optional method to return a true value if the module is a package, a "
"false value otherwise. :exc:`ImportError` is raised if the :term:`loader` "
"cannot find the module."
msgstr ""
"Un método opcional para retornar un valor verdadero si el módulo es un "
"paquete, un valor falso en caso contrario. Se lanza :exc:`ImportError` si "
"el :term:`cargador <loader>` no puede encontrar el módulo."

#: ../Doc/library/importlib.rst:579
msgid "Create a code object from Python source."
msgstr "Cree un objeto de código a partir de la fuente de Python."

#: ../Doc/library/importlib.rst:581
msgid ""
"The *data* argument can be whatever the :func:`compile` function supports (i."
"e. string or bytes). The *path* argument should be the \"path\" to where the "
"source code originated from, which can be an abstract concept (e.g. location "
"in a zip file)."
msgstr ""
"El argumento *data* puede ser cualquier cosa que admita la función :func:"
"`compile` (es decir, cadena de caracteres o bytes). El argumento *path* debe "
"ser la \"ruta\" de donde se originó el código fuente, que puede ser un "
"concepto abstracto (por ejemplo, ubicación en un archivo zip)."

#: ../Doc/library/importlib.rst:586
msgid ""
"With the subsequent code object one can execute it in a module by running "
"``exec(code, module.__dict__)``."
msgstr ""
"Con el objeto de código subsiguiente, uno puede ejecutarlo en un módulo "
"ejecutando ``exec(code, module.__dict__)``."

#: ../Doc/library/importlib.rst:591
msgid "Made the method static."
msgstr "Hace el método estático."

#: ../Doc/library/importlib.rst:596
msgid "Implementation of :meth:`Loader.exec_module`."
msgstr "Implementación de :meth:`Loader.exec_module`."

#: ../Doc/library/importlib.rst:602
msgid "Implementation of :meth:`Loader.load_module`."
msgstr "Implementación de :meth:`Loader.load_module`."

#: ../Doc/library/importlib.rst:604
msgid "use :meth:`exec_module` instead."
msgstr "use :meth:`exec_module` en su lugar."

#: ../Doc/library/importlib.rst:610
msgid ""
"An abstract base class which inherits from :class:`InspectLoader` that, when "
"implemented, helps a module to be executed as a script. The ABC represents "
"an optional :pep:`302` protocol."
msgstr ""
"Una clase base abstracta que hereda de :class:`InspectLoader` que, cuando se "
"implementa, ayuda a que un módulo se ejecute como un script. El ABC "
"representa un protocolo opcional :pep:`302`."

#: ../Doc/library/importlib.rst:616
msgid ""
"An abstract method that is to return the value of :attr:`__file__` for the "
"specified module. If no path is available, :exc:`ImportError` is raised."
msgstr ""
"Un método abstracto que retorna el valor de :attr:`__file__` para el módulo "
"especificado. Si no hay una ruta disponible, se lanza :exc:`ImportError`."

#: ../Doc/library/importlib.rst:620
msgid ""
"If source code is available, then the method should return the path to the "
"source file, regardless of whether a bytecode was used to load the module."
msgstr ""
"Si el código fuente está disponible, entonces el método debe devolver la "
"ruta al archivo fuente, independientemente de si se utilizó un código de "
"bytes para cargar el módulo."

#: ../Doc/library/importlib.rst:630
msgid ""
"An abstract base class which inherits from :class:`ResourceLoader` and :"
"class:`ExecutionLoader`, providing concrete implementations of :meth:"
"`ResourceLoader.get_data` and :meth:`ExecutionLoader.get_filename`."
msgstr ""
"Una clase base abstracta que hereda de :class:`ResourceLoader` y :class:"
"`ExecutionLoader`, proporcionando implementaciones concretas de :meth:"
"`ResourceLoader.get_data` y :meth:`ExecutionLoader.get_filename`."

#: ../Doc/library/importlib.rst:634
msgid ""
"The *fullname* argument is a fully resolved name of the module the loader is "
"to handle. The *path* argument is the path to the file for the module."
msgstr ""
"El argumento *fullname* es un nombre completamente resuelto del módulo que "
"el cargador debe manejar. El argumento *path* es la ruta al archivo del "
"módulo."

#: ../Doc/library/importlib.rst:641
msgid "The name of the module the loader can handle."
msgstr "El nombre del módulo que puede manejar el cargador."

#: ../Doc/library/importlib.rst:645
msgid "Path to the file of the module."
msgstr "Ruta al archivo del módulo."

#: ../Doc/library/importlib.rst:649
msgid "Calls super's ``load_module()``."
msgstr "Llama a super's ``load_module()``."

#: ../Doc/library/importlib.rst:651
msgid "Use :meth:`Loader.exec_module` instead."
msgstr "Utilice :meth:`Loader.exec_module` en su lugar."

#: ../Doc/library/importlib.rst:656 ../Doc/library/importlib.rst:1104
msgid "Returns :attr:`path`."
msgstr "Retorna :attr:`path`."

#: ../Doc/library/importlib.rst:660
msgid "Reads *path* as a binary file and returns the bytes from it."
msgstr "Lee *path* como un archivo binario y devuelve los bytes de él."

#: ../Doc/library/importlib.rst:665
msgid ""
"An abstract base class for implementing source (and optionally bytecode) "
"file loading. The class inherits from both :class:`ResourceLoader` and :"
"class:`ExecutionLoader`, requiring the implementation of:"
msgstr ""
"Una clase base abstracta para implementar la carga de archivos fuente (y "
"opcionalmente bytecode). La clase hereda tanto de :class:`ResourceLoader` "
"como de :class:`ExecutionLoader`, lo que requiere la implementación de:"

#: ../Doc/library/importlib.rst:669
msgid ":meth:`ResourceLoader.get_data`"
msgstr ":meth:`ResourceLoader.get_data`"

#: ../Doc/library/importlib.rst:672
msgid ":meth:`ExecutionLoader.get_filename`"
msgstr ":meth:`ExecutionLoader.get_filename`"

#: ../Doc/library/importlib.rst:671
msgid ""
"Should only return the path to the source file; sourceless loading is not "
"supported."
msgstr ""
"Solo debe devolver la ruta al archivo de origen; la carga sin fuente no es "
"compatible."

#: ../Doc/library/importlib.rst:674
msgid ""
"The abstract methods defined by this class are to add optional bytecode file "
"support. Not implementing these optional methods (or causing them to raise :"
"exc:`NotImplementedError`) causes the loader to only work with source code. "
"Implementing the methods allows the loader to work with source *and* "
"bytecode files; it does not allow for *sourceless* loading where only "
"bytecode is provided.  Bytecode files are an optimization to speed up "
"loading by removing the parsing step of Python's compiler, and so no "
"bytecode-specific API is exposed."
msgstr ""
"Los métodos abstractos definidos por esta clase son para agregar soporte de "
"archivo de código de bytes opcional. No implementar estos métodos opcionales "
"(o hacer que se lance :exc:`NotImplementedError`) hace que el cargador solo "
"funcione con el código fuente. La implementación de los métodos permite que "
"el cargador trabaje con archivos fuente *y* código de bytes; no permite la "
"carga *sin fuente* donde solo se proporciona un código de bytes. Los "
"archivos de código de bytes son una optimización para acelerar la carga al "
"eliminar el paso de análisis del compilador de Python, por lo que no se "
"expone ninguna API específica de código de bytes."

#: ../Doc/library/importlib.rst:685
msgid ""
"Optional abstract method which returns a :class:`dict` containing metadata "
"about the specified path.  Supported dictionary keys are:"
msgstr ""
"Método abstracto opcional que devuelve un :class:`dict` que contiene "
"metadatos sobre la ruta especificada. Las claves de diccionario admitidas "
"son:"

#: ../Doc/library/importlib.rst:688
msgid ""
"``'mtime'`` (mandatory): an integer or floating-point number representing "
"the modification time of the source code;"
msgstr ""
"``'mtime'`` (obligatorio): un número entero o de punto flotante que "
"representa la hora de modificación del código fuente;"

#: ../Doc/library/importlib.rst:690
msgid "``'size'`` (optional): the size in bytes of the source code."
msgstr "``'size'`` (opcional): el tamaño en bytes del código fuente."

#: ../Doc/library/importlib.rst:692
msgid ""
"Any other keys in the dictionary are ignored, to allow for future "
"extensions. If the path cannot be handled, :exc:`OSError` is raised."
msgstr ""
"Cualquier otra clave del diccionario se ignora para permitir futuras "
"extensiones. Si no se puede manejar la ruta, se genera :exc:`OSError`."

#: ../Doc/library/importlib.rst:697 ../Doc/library/importlib.rst:710
msgid "Raise :exc:`OSError` instead of :exc:`NotImplementedError`."
msgstr "Lanza :exc:`OSError` en vez de :exc:`NotImplementedError`."

#: ../Doc/library/importlib.rst:702
msgid ""
"Optional abstract method which returns the modification time for the "
"specified path."
msgstr ""
"Método abstracto opcional que retorna la hora de modificación de la ruta "
"especificada."

#: ../Doc/library/importlib.rst:705
msgid ""
"This method is deprecated in favour of :meth:`path_stats`.  You don't have "
"to implement it, but it is still available for compatibility purposes. "
"Raise :exc:`OSError` if the path cannot be handled."
msgstr ""
"Este método está obsoleto en favor de :meth:`path_stats`. No tiene que "
"implementarlo, pero aún está disponible para fines de compatibilidad. Lanza :"
"exc:`OSError` si la ruta no se puede manejar."

#: ../Doc/library/importlib.rst:715
msgid ""
"Optional abstract method which writes the specified bytes to a file path. "
"Any intermediate directories which do not exist are to be created "
"automatically."
msgstr ""
"Método abstracto opcional que escribe los bytes especificados en una ruta de "
"archivo. Los directorios intermedios que no existan se crearán "
"automáticamente."

#: ../Doc/library/importlib.rst:719
msgid ""
"When writing to the path fails because the path is read-only (:attr:`errno."
"EACCES`/:exc:`PermissionError`), do not propagate the exception."
msgstr ""
"Cuando la escritura en la ruta falla porque la ruta es de solo lectura (:"
"attr:`errno.EACCES`/:exc:`PermissionError`), no propague la excepción."

#: ../Doc/library/importlib.rst:723
msgid "No longer raises :exc:`NotImplementedError` when called."
msgstr "Ya no lanza :exc:`NotImplementedError` cuando se llama."

#: ../Doc/library/importlib.rst:728
msgid "Concrete implementation of :meth:`InspectLoader.get_code`."
msgstr "Implementación concreta de :meth:`InspectLoader.get_code`."

#: ../Doc/library/importlib.rst:732
msgid "Concrete implementation of :meth:`Loader.exec_module`."
msgstr "Implementación concreta de :meth:`Loader.exec_module`."

#: ../Doc/library/importlib.rst:738
msgid "Concrete implementation of :meth:`Loader.load_module`."
msgstr "Implementación concreta de :meth:`Loader.load_module`."

#: ../Doc/library/importlib.rst:740
msgid "Use :meth:`exec_module` instead."
msgstr "Utilice :meth:`exec_module` en su lugar."

#: ../Doc/library/importlib.rst:745
msgid "Concrete implementation of :meth:`InspectLoader.get_source`."
msgstr "Implementación concreta de :meth:`InspectLoader.get_source`."

#: ../Doc/library/importlib.rst:749
msgid ""
"Concrete implementation of :meth:`InspectLoader.is_package`. A module is "
"determined to be a package if its file path (as provided by :meth:"
"`ExecutionLoader.get_filename`) is a file named ``__init__`` when the file "
"extension is removed **and** the module name itself does not end in "
"``__init__``."
msgstr ""
"Implementación concreta de :meth:`InspectLoader.is_package`. Se determina "
"que un módulo es un paquete si su ruta de archivo (proporcionada por :meth:"
"`ExecutionLoader.get_filename`) es un archivo llamado ``__init__`` cuando se "
"elimina la extensión del archivo **y** el nombre del módulo sí lo hace no "
"termina en ``__init__``."

#: ../Doc/library/importlib.rst:758
msgid ":mod:`importlib.machinery` -- Importers and path hooks"
msgstr ":mod:`importlib.machinery` -- Importadores y enlaces de ruta"

#: ../Doc/library/importlib.rst:763
msgid "**Source code:** :source:`Lib/importlib/machinery.py`"
msgstr "**Código fuente:** :source:`Lib/importlib/machinery.py`"

#: ../Doc/library/importlib.rst:767
msgid ""
"This module contains the various objects that help :keyword:`import` find "
"and load modules."
msgstr ""
"Este módulo contiene varios objetos que ayudan :keyword:`import` buscar y "
"cargar módulos."

#: ../Doc/library/importlib.rst:772
msgid ""
"A list of strings representing the recognized file suffixes for source "
"modules."
msgstr ""
"Una lista de cadenas de caracteres que representan los sufijos de archivo "
"reconocidos para los módulos de origen."

#: ../Doc/library/importlib.rst:779
msgid ""
"A list of strings representing the file suffixes for non-optimized bytecode "
"modules."
msgstr ""
"Una lista de cadenas que representan los sufijos de archivo para módulos de "
"código de bytes no optimizados."

#: ../Doc/library/importlib.rst:784 ../Doc/library/importlib.rst:794
msgid "Use :attr:`BYTECODE_SUFFIXES` instead."
msgstr "Utilice :attr:`BYTECODE_SUFFIXES` en su lugar."

#: ../Doc/library/importlib.rst:789
msgid ""
"A list of strings representing the file suffixes for optimized bytecode "
"modules."
msgstr ""
"Una lista de cadenas de caracteres que representan los sufijos de archivo "
"para módulos de código de bytes optimizados."

#: ../Doc/library/importlib.rst:799
msgid ""
"A list of strings representing the recognized file suffixes for bytecode "
"modules (including the leading dot)."
msgstr ""
"Una lista de cadenas de caracteres que representan los sufijos de archivo "
"reconocidos para los módulos de código de bytes (incluido el punto inicial)."

#: ../Doc/library/importlib.rst:804
msgid "The value is no longer dependent on ``__debug__``."
msgstr "El valor ya no depende de ``__debug__``."

#: ../Doc/library/importlib.rst:809
msgid ""
"A list of strings representing the recognized file suffixes for extension "
"modules."
msgstr ""
"Una lista de cadenas de caracteres que representan los sufijos de archivo "
"reconocidos para los módulos de extensión."

#: ../Doc/library/importlib.rst:816
msgid ""
"Returns a combined list of strings representing all file suffixes for "
"modules recognized by the standard import machinery. This is a helper for "
"code which simply needs to know if a filesystem path potentially refers to a "
"module without needing any details on the kind of module (for example, :func:"
"`inspect.getmodulename`)."
msgstr ""
"Retorna una lista combinada de cadenas de caracteres que representan todos "
"los sufijos de archivo para módulos reconocidos por la maquinaria de "
"importación estándar. Este es un ayudante para el código que simplemente "
"necesita saber si una ruta del sistema de archivos potencialmente se refiere "
"a un módulo sin necesidad de detalles sobre el tipo de módulo (por ejemplo, :"
"func:`inspect.getmodulename`)."

#: ../Doc/library/importlib.rst:827
msgid ""
"An :term:`importer` for built-in modules. All known built-in modules are "
"listed in :data:`sys.builtin_module_names`. This class implements the :class:"
"`importlib.abc.MetaPathFinder` and :class:`importlib.abc.InspectLoader` ABCs."
msgstr ""
"Un :term:`importer` para módulos integrados. Todos los módulos integrados "
"conocidos se enumeran en :data:`sys.builtin_module_names`. Esta clase "
"implementa los ABC :class:`importlib.abc.MetaPathFinder` y :class:`importlib."
"abc.InspectLoader`."

#: ../Doc/library/importlib.rst:832 ../Doc/library/importlib.rst:846
#: ../Doc/library/importlib.rst:859 ../Doc/library/importlib.rst:874
msgid ""
"Only class methods are defined by this class to alleviate the need for "
"instantiation."
msgstr ""
"Esta clase solo define los métodos de clase para aliviar la necesidad de "
"instanciación."

#: ../Doc/library/importlib.rst:835
msgid ""
"As part of :pep:`489`, the builtin importer now implements :meth:`Loader."
"create_module` and :meth:`Loader.exec_module`"
msgstr ""
"Como parte de :pep:`489`, el importador integrado ahora implementa :meth:"
"`Loader.create_module` y :meth:`Loader.exec_module`"

#: ../Doc/library/importlib.rst:842
msgid ""
"An :term:`importer` for frozen modules. This class implements the :class:"
"`importlib.abc.MetaPathFinder` and :class:`importlib.abc.InspectLoader` ABCs."
msgstr ""
"Un :term:`importer` para módulos congelados. Esta clase implementa los ABC :"
"class:`importlib.abc.MetaPathFinder` y :class:`importlib.abc.InspectLoader`."

#: ../Doc/library/importlib.rst:849
msgid ""
"Gained :meth:`~Loader.create_module` and :meth:`~Loader.exec_module` methods."
msgstr ""
"Métodos obtenidos :meth:`~Loader.create_module` y :meth:`~Loader."
"exec_module`."

#: ../Doc/library/importlib.rst:856
msgid ""
":term:`Finder <finder>` for modules declared in the Windows registry.  This "
"class implements the :class:`importlib.abc.MetaPathFinder` ABC."
msgstr ""
":term:`Finder <finder>` para los módulos declarados en el registro de "
"Windows. Esta clase implementa el :class:`importlib.abc.MetaPathFinder` ABC."

#: ../Doc/library/importlib.rst:864
msgid ""
"Use :mod:`site` configuration instead. Future versions of Python may not "
"enable this finder by default."
msgstr ""
"Utilice la configuración de :mod:`site` en su lugar. Es posible que las "
"versiones futuras de Python no habiliten este buscador de forma "
"predeterminada."

#: ../Doc/library/importlib.rst:871
msgid ""
"A :term:`Finder <finder>` for :data:`sys.path` and package ``__path__`` "
"attributes. This class implements the :class:`importlib.abc.MetaPathFinder` "
"ABC."
msgstr ""
"Un :term:`Finder <finder>` para :data:`sys.path` y atributos del paquete "
"``__path__``. Esta clase implementa el :class:`importlib.abc.MetaPathFinder` "
"ABC."

#: ../Doc/library/importlib.rst:879
msgid ""
"Class method that attempts to find a :term:`spec <module spec>` for the "
"module specified by *fullname* on :data:`sys.path` or, if defined, on "
"*path*. For each path entry that is searched, :data:`sys."
"path_importer_cache` is checked. If a non-false object is found then it is "
"used as the :term:`path entry finder` to look for the module being searched "
"for. If no entry is found in :data:`sys.path_importer_cache`, then :data:"
"`sys.path_hooks` is searched for a finder for the path entry and, if found, "
"is stored in :data:`sys.path_importer_cache` along with being queried about "
"the module. If no finder is ever found then ``None`` is both stored in the "
"cache and returned."
msgstr ""
"Método de clase que intenta encontrar un :term:`spec <module spec>` para el "
"módulo especificado por *fullname* en :data:`sys.path` o, si está definido, "
"en *path*. Para cada entrada de ruta que se busca, se comprueba :data:`sys."
"path_importer_cache`. Si se encuentra un objeto que no es falso, se utiliza "
"como :term:`path entry finder` para buscar el módulo que se está buscando. "
"Si no se encuentra ninguna entrada en :data:`sys.path_importer_cache`, "
"entonces :data:`sys.path_hooks` se busca un buscador para la entrada de ruta "
"y, si se encuentra, se almacena en :data:`sys.path_importer_cache` junto con "
"ser consultado sobre el módulo. Si nunca se encuentra ningún buscador, "
"entonces ``None`` se almacena en el caché y se retorna."

#: ../Doc/library/importlib.rst:893
msgid ""
"If the current working directory -- represented by an empty string -- is no "
"longer valid then ``None`` is returned but no value is cached in :data:`sys."
"path_importer_cache`."
msgstr ""
"Si el directorio de trabajo actual, representado por una cadena de "
"caracteres vacía, ya no es válido, se retorna ``None`` pero no se almacena "
"ningún valor en :data:`sys.path_importer_cache`."

#: ../Doc/library/importlib.rst:900
msgid "A legacy wrapper around :meth:`find_spec`."
msgstr "Una envoltura heredada alrededor de :meth:`find_spec`."

#: ../Doc/library/importlib.rst:907
msgid ""
"Calls :meth:`importlib.abc.PathEntryFinder.invalidate_caches` on all finders "
"stored in :data:`sys.path_importer_cache` that define the method. Otherwise "
"entries in :data:`sys.path_importer_cache` set to ``None`` are deleted."
msgstr ""
"Llama :meth:`importlib.abc.PathEntryFinder.invalidate_caches` en todos los "
"buscadores almacenados en :data:`sys.path_importer_cache` que definen el "
"método. De lo contrario, las entradas en :data:`sys.path_importer_cache` "
"establecidas en ``None`` se eliminan."

#: ../Doc/library/importlib.rst:912
msgid "Entries of ``None`` in :data:`sys.path_importer_cache` are deleted."
msgstr ""
"Se eliminan las entradas de ``None`` en :data:`sys.path_importer_cache`."

#: ../Doc/library/importlib.rst:915
msgid ""
"Calls objects in :data:`sys.path_hooks` with the current working directory "
"for ``''`` (i.e. the empty string)."
msgstr ""
"Llama a objetos en :data:`sys.path_hooks` con el directorio de trabajo "
"actual para ``''`` (es decir, la cadena de caracteres vacía)."

#: ../Doc/library/importlib.rst:922
msgid ""
"A concrete implementation of :class:`importlib.abc.PathEntryFinder` which "
"caches results from the file system."
msgstr ""
"Una implementación concreta de :class:`importlib.abc.PathEntryFinder` que "
"almacena en caché los resultados del sistema de archivos."

#: ../Doc/library/importlib.rst:925
msgid ""
"The *path* argument is the directory for which the finder is in charge of "
"searching."
msgstr ""
"El argumento *path* es el directorio que el buscador se encarga de buscar."

#: ../Doc/library/importlib.rst:928
msgid ""
"The *loader_details* argument is a variable number of 2-item tuples each "
"containing a loader and a sequence of file suffixes the loader recognizes. "
"The loaders are expected to be callables which accept two arguments of the "
"module's name and the path to the file found."
msgstr ""
"El argumento *loader_details* es un número variable de tuplas de 2 "
"elementos, cada una de las cuales contiene un cargador y una secuencia de "
"sufijos de archivo que el cargador reconoce. Se espera que los cargadores "
"sean invocables que acepten dos argumentos del nombre del módulo y la ruta "
"al archivo encontrado."

#: ../Doc/library/importlib.rst:933
msgid ""
"The finder will cache the directory contents as necessary, making stat calls "
"for each module search to verify the cache is not outdated. Because cache "
"staleness relies upon the granularity of the operating system's state "
"information of the file system, there is a potential race condition of "
"searching for a module, creating a new file, and then searching for the "
"module the new file represents. If the operations happen fast enough to fit "
"within the granularity of stat calls, then the module search will fail. To "
"prevent this from happening, when you create a module dynamically, make sure "
"to call :func:`importlib.invalidate_caches`."
msgstr ""
"El buscador almacenará en caché el contenido del directorio según sea "
"necesario, haciendo llamadas estadísticas para cada búsqueda de módulo para "
"verificar que la caché no esté desactualizada. Debido a que la obsolescencia "
"de la caché se basa en la granularidad de la información de estado del "
"sistema operativo del sistema de archivos, existe una condición de carrera "
"potencial de buscar un módulo, crear un nuevo archivo y luego buscar el "
"módulo que representa el nuevo archivo. Si las operaciones ocurren lo "
"suficientemente rápido como para ajustarse a la granularidad de las llamadas "
"estadísticas, la búsqueda del módulo fallará. Para evitar que esto suceda, "
"cuando cree un módulo dinámicamente, asegúrese de llamar a :func:`importlib."
"invalidate_caches`."

#: ../Doc/library/importlib.rst:947
msgid "The path the finder will search in."
msgstr "La ruta en la que buscará el buscador."

#: ../Doc/library/importlib.rst:951
msgid "Attempt to find the spec to handle *fullname* within :attr:`path`."
msgstr ""
"Intente encontrar la especificación para manejar *fullname* dentro de :attr:"
"`path`."

#: ../Doc/library/importlib.rst:957
msgid "Attempt to find the loader to handle *fullname* within :attr:`path`."
msgstr ""
"Intente encontrar el cargador para manejar *fullname* dentro de :attr:`path`."

#: ../Doc/library/importlib.rst:964
msgid "Clear out the internal cache."
msgstr "Borrar el caché interno."

#: ../Doc/library/importlib.rst:968
msgid ""
"A class method which returns a closure for use on :attr:`sys.path_hooks`. An "
"instance of :class:`FileFinder` is returned by the closure using the path "
"argument given to the closure directly and *loader_details* indirectly."
msgstr ""
"Un método de clase que devuelve un cierre para su uso en :attr:`sys."
"path_hooks`. Una instancia de :class:`FileFinder` es retornada por el cierre "
"usando el argumento de ruta dado al cierre directamente y *loader_details* "
"indirectamente."

#: ../Doc/library/importlib.rst:973
msgid ""
"If the argument to the closure is not an existing directory, :exc:"
"`ImportError` is raised."
msgstr ""
"Si el argumento del cierre no es un directorio existente, se lanza :exc:"
"`ImportError`."

#: ../Doc/library/importlib.rst:979
msgid ""
"A concrete implementation of :class:`importlib.abc.SourceLoader` by "
"subclassing :class:`importlib.abc.FileLoader` and providing some concrete "
"implementations of other methods."
msgstr ""
"Una implementación concreta de :class:`importlib.abc.SourceLoader` "
"subclasificando :class:`importlib.abc.FileLoader` y proporcionando algunas "
"implementaciones concretas de otros métodos."

#: ../Doc/library/importlib.rst:987
msgid "The name of the module that this loader will handle."
msgstr "El nombre del módulo que manejará este cargador."

#: ../Doc/library/importlib.rst:991
msgid "The path to the source file."
msgstr "La ruta al archivo de origen."

#: ../Doc/library/importlib.rst:995
msgid "Return ``True`` if :attr:`path` appears to be for a package."
msgstr "Devuelve ``True`` si :attr:`path` parece ser para un paquete."

#: ../Doc/library/importlib.rst:999
msgid ""
"Concrete implementation of :meth:`importlib.abc.SourceLoader.path_stats`."
msgstr ""
"Implementación concreta de :meth:`importlib.abc.SourceLoader.path_stats`."

#: ../Doc/library/importlib.rst:1003
msgid "Concrete implementation of :meth:`importlib.abc.SourceLoader.set_data`."
msgstr ""
"Implementación concreta de :meth:`importlib.abc.SourceLoader.set_data`."

#: ../Doc/library/importlib.rst:1007 ../Doc/library/importlib.rst:1050
msgid ""
"Concrete implementation of :meth:`importlib.abc.Loader.load_module` where "
"specifying the name of the module to load is optional."
msgstr ""
"Implementación concreta de :meth:`importlib.abc.Loader.load_module` donde "
"especificar el nombre del módulo a cargar es opcional."

#: ../Doc/library/importlib.rst:1012 ../Doc/library/importlib.rst:1055
msgid "Use :meth:`importlib.abc.Loader.exec_module` instead."
msgstr "Utilice :meth:`importlib.abc.Loader.exec_module` en su lugar."

#: ../Doc/library/importlib.rst:1017
msgid ""
"A concrete implementation of :class:`importlib.abc.FileLoader` which can "
"import bytecode files (i.e. no source code files exist)."
msgstr ""
"Una implementación concreta de :class:`importlib.abc.FileLoader` que puede "
"importar archivos de código de bytes (es decir, no existen archivos de "
"código fuente)."

#: ../Doc/library/importlib.rst:1020
msgid ""
"Please note that direct use of bytecode files (and thus not source code "
"files) inhibits your modules from being usable by all Python implementations "
"or new versions of Python which change the bytecode format."
msgstr ""
"Tenga en cuenta que el uso directo de archivos de código de bytes (y, por lo "
"tanto, no de archivos de código fuente) impide que sus módulos sean "
"utilizables por todas las implementaciones de Python o las nuevas versiones "
"de Python que cambian el formato de código de bytes."

#: ../Doc/library/importlib.rst:1029
msgid "The name of the module the loader will handle."
msgstr "El nombre del módulo que manejará el cargador."

#: ../Doc/library/importlib.rst:1033
msgid "The path to the bytecode file."
msgstr "La ruta al archivo de código de bytes."

#: ../Doc/library/importlib.rst:1037
msgid "Determines if the module is a package based on :attr:`path`."
msgstr "Determina si el módulo es un paquete basado en :attr:`path`."

#: ../Doc/library/importlib.rst:1041
msgid "Returns the code object for :attr:`name` created from :attr:`path`."
msgstr ""
"Retorna el objeto de código para :attr:`name` creado a partir de :attr:"
"`path`."

#: ../Doc/library/importlib.rst:1045
msgid ""
"Returns ``None`` as bytecode files have no source when this loader is used."
msgstr ""
"Devuelve ``None`` ya que los archivos de código de bytes no tienen fuente "
"cuando se usa este cargador."

#: ../Doc/library/importlib.rst:1060
msgid ""
"A concrete implementation of :class:`importlib.abc.ExecutionLoader` for "
"extension modules."
msgstr ""
"Una implementación concreta de :class:`importlib.abc.ExecutionLoader` para "
"módulos de extensión."

#: ../Doc/library/importlib.rst:1063
msgid ""
"The *fullname* argument specifies the name of the module the loader is to "
"support. The *path* argument is the path to the extension module's file."
msgstr ""
"El argumento *fullname* especifica el nombre del módulo que el cargador debe "
"admitir. El argumento *path* es la ruta al archivo del módulo de extensión."

#: ../Doc/library/importlib.rst:1070
msgid "Name of the module the loader supports."
msgstr "Nombre del módulo que admite el cargador."

#: ../Doc/library/importlib.rst:1074
msgid "Path to the extension module."
msgstr "Ruta al módulo de extensión."

#: ../Doc/library/importlib.rst:1078
msgid ""
"Creates the module object from the given specification in accordance with :"
"pep:`489`."
msgstr ""
"Crea el objeto de módulo a partir de la especificación dada de acuerdo con :"
"pep:`489`."

#: ../Doc/library/importlib.rst:1085
msgid "Initializes the given module object in accordance with :pep:`489`."
msgstr "Inicializa el objeto de módulo dado de acuerdo con :pep:`489`."

#: ../Doc/library/importlib.rst:1091
msgid ""
"Returns ``True`` if the file path points to a package's ``__init__`` module "
"based on :attr:`EXTENSION_SUFFIXES`."
msgstr ""
"Retorna ``True`` si la ruta del archivo apunta al módulo ``__init__`` de un "
"paquete basado en :attr:`EXTENSION_SUFFIXES`."

#: ../Doc/library/importlib.rst:1096
msgid "Returns ``None`` as extension modules lack a code object."
msgstr ""
"Retorna ``None`` ya que los módulos de extensión carecen de un objeto de "
"código."

#: ../Doc/library/importlib.rst:1100
msgid "Returns ``None`` as extension modules do not have source code."
msgstr ""
"Retorna ``None`` ya que los módulos de extensión no tienen código fuente."

#: ../Doc/library/importlib.rst:1111
msgid ""
"A concrete implementation of :class:`importlib.abc.InspectLoader` for "
"namespace packages.  This is an alias for a private class and is only made "
"public for introspecting the ``__loader__`` attribute on namespace packages::"
msgstr ""
"Una implementación concreta de :class:`importlib.abc.InspectLoader` para "
"paquetes de espacio de nombres. Ésta es un alias para una clase privada y "
"sólo se hace pública para introspeccionar el atributo ``__loader__`` en "
"paquetes de espacio de nombres::"

#: ../Doc/library/importlib.rst:1129
msgid ""
"A specification for a module's import-system-related state.  This is "
"typically exposed as the module's :attr:`__spec__` attribute.  In the "
"descriptions below, the names in parentheses give the corresponding "
"attribute available directly on the module object, e.g. ``module.__spec__."
"origin == module.__file__``.  Note, however, that while the *values* are "
"usually equivalent, they can differ since there is no synchronization "
"between the two objects.  For example, it is possible to update the "
"module's :attr:`__file__` at runtime and this will not be automatically "
"reflected in the module's :attr:`__spec__.origin`, and vice versa."
msgstr ""
"Una especificación para el estado relacionado con el sistema de importación "
"de un módulo. Esto generalmente se expone como el atributo :attr:`__spec__`` "
"del módulo. En las descripciones siguientes, los nombres entre paréntesis "
"dan el atributo correspondiente disponible directamente en el objeto del "
"módulo, por ejemplo, ``module.__spec__.origin == module.__file__``. Sin "
"embargo, tenga en cuenta que, si bien los *valores* suelen ser equivalentes, "
"pueden diferir ya que no hay sincronización entre los dos objetos. Por "
"ejemplo, es posible actualizar el  :attr:`__path__` del módulo en tiempo de "
"ejecución, y esto no se reflejará automáticamente en el :attr:`__spec__."
"origin` del módulo, y viceversa."

#: ../Doc/library/importlib.rst:1143
msgid "(:attr:`__name__`)"
msgstr "(:attr:`__name__`)"

#: ../Doc/library/importlib.rst:1145
msgid ""
"The module's fully qualified name. The :term:`finder` should always set this "
"attribute to a non-empty string."
msgstr ""
"El nombre completo del módulo. El :term:`buscador <finder>` debe siempre "
"establecer este atributo a una cadena de caracteres no vacía."

#: ../Doc/library/importlib.rst:1150
msgid "(:attr:`__loader__`)"
msgstr "(:attr:`__loader__`)"

#: ../Doc/library/importlib.rst:1152
msgid ""
"The :term:`loader` used to load the module. The :term:`finder` should always "
"set this attribute."
msgstr ""
"El :term:`Cargador <loader>` que debe usarse para cargar el módulo. El :term:"
"`Buscador <finder>` siempre debe establecer este atributo."

#: ../Doc/library/importlib.rst:1157
msgid "(:attr:`__file__`)"
msgstr "(:attr:`__file__`)"

#: ../Doc/library/importlib.rst:1159
msgid ""
"The location the :term:`loader` should use to load the module. For example, "
"for modules loaded from a .py file this is the filename. The :term:`finder` "
"should always set this attribute to a meaningful value for the :term:"
"`loader` to use.  In the uncommon case that there is not one (like for "
"namespace packages), it should be set to ``None``."
msgstr ""
"La ubicación que el :term:`cargador <loader>` debe usar para cargar el "
"módulo. Por ejemplo, para módulos cargados de archivos .py éste es el nombre "
"del archivo. El :term:`buscador <finder>` debe siempre establecer este "
"atributo a un valor significativo para que el :term:`cargador <loader>` lo "
"use. El en caso poco común de que no hay uno (como para paquetes de nombre "
"de espacio), debe estar establecido en ``None``."

#: ../Doc/library/importlib.rst:1167
msgid "(:attr:`__path__`)"
msgstr "(:attr:`__path__`)"

#: ../Doc/library/importlib.rst:1169
msgid ""
"The list of locations where the package's submodules will be found. Most of "
"the time this is a single directory. The :term:`finder` should set this "
"attribute to a list, even an empty one, to indicate to the import system "
"that the module is a package.  It should be set to ``None`` for non-package "
"modules.  It is set automatically later to a special object for namespace "
"packages."
msgstr ""
"La lista de ubicaciones donde los sub-módulos del paquete serán encontrados. "
"La mayoría de las veces es un solo directorio. El :term:`buscador <finder>` "
"debe establecer este atributo a una lista, incluso una vacía, para indicar "
"al sistema de importación que el módulo es un paquete. Debe ser establecido "
"en ``None`` para módulos que no son paquetes. Es establecido automáticamente "
"más tarde a un objeto especial para paquetes de espacio de nombres."

#: ../Doc/library/importlib.rst:1178
msgid ""
"The :term:`finder` may set this attribute to an object containing "
"additional, module-specific data to use when loading the module.  Otherwise "
"it should be set to ``None``."
msgstr ""
"El :term:`buscador <finder>` podría establecer este atributo a un objeto "
"conteniendo datos adicionales y específicos al módulo para usar cuando se "
"carga el módulo.. De lo contrario, debe establecerse en ``None``."

#: ../Doc/library/importlib.rst:1184
msgid "(:attr:`__cached__`)"
msgstr "(:attr:`__cached__`)"

#: ../Doc/library/importlib.rst:1186
msgid ""
"The filename of a compiled version of the module's code. The :term:`finder` "
"should always set this attribute but it may be ``None`` for modules that do "
"not need compiled code stored."
msgstr ""
"El nombre de archivo de una versión compilada del código de el módulo. El :"
"term:`buscador <finder>` siempre debe establecer este atributo pero puede "
"ser ``None`` para módulos que no necesitan guardar código compilado."

#: ../Doc/library/importlib.rst:1192
msgid "(:attr:`__package__`)"
msgstr "(:attr:`__package__`)"

#: ../Doc/library/importlib.rst:1194
msgid ""
"(Read-only) The fully qualified name of the package the module is in (or the "
"empty string for a top-level module). If the module is a package then this "
"is the same as :attr:`name`."
msgstr ""
"(Solo lectura) El nombre completo del paquete bajo el cual está este módulo "
"(o la cadena de caracteres vacía para los módulos de nivel superior). Si el "
"módulo es un paquete es lo mismo que :attr:`__name__`."

#: ../Doc/library/importlib.rst:1201
msgid "``True`` if the spec's :attr:`origin` refers to a loadable location,"
msgstr ""
"``True`` si el :attr:`origin` de la especificación se refiere a una "
"ubicación cargable,"

#: ../Doc/library/importlib.rst:1201
msgid ""
"``False`` otherwise.  This value impacts how :attr:`origin` is interpreted "
"and how the module's :attr:`__file__` is populated."
msgstr ""
"``False`` en caso contrario. Este valor impacta en cómo :attr:`origin` es "
"interpretado y cómo el atributo :attr:`__file__` del módulo es poblado."

#: ../Doc/library/importlib.rst:1206
msgid ":mod:`importlib.util` -- Utility code for importers"
msgstr ":mod:`importlib.util` -- Código de utilidad para importadores"

#: ../Doc/library/importlib.rst:1212
msgid "**Source code:** :source:`Lib/importlib/util.py`"
msgstr "**Código fuente:** :source:`Lib/importlib/util.py`"

#: ../Doc/library/importlib.rst:1216
msgid ""
"This module contains the various objects that help in the construction of "
"an :term:`importer`."
msgstr ""
"Este módulo contiene los diversos objetos que ayudan en la construcción de "
"un :term:`importer`."

#: ../Doc/library/importlib.rst:1221
msgid ""
"The bytes which represent the bytecode version number. If you need help with "
"loading/writing bytecode then consider :class:`importlib.abc.SourceLoader`."
msgstr ""
"Los bytes que representan el número de versión del código de bytes. Si "
"necesita ayuda para cargar/escribir código de bytes, considere :class:"
"`importlib.abc.SourceLoader`."

#: ../Doc/library/importlib.rst:1228
msgid ""
"Return the :pep:`3147`/:pep:`488` path to the byte-compiled file associated "
"with the source *path*.  For example, if *path* is ``/foo/bar/baz.py`` the "
"return value would be ``/foo/bar/__pycache__/baz.cpython-32.pyc`` for Python "
"3.2. The ``cpython-32`` string comes from the current magic tag (see :func:"
"`get_tag`; if :attr:`sys.implementation.cache_tag` is not defined then :exc:"
"`NotImplementedError` will be raised)."
msgstr ""
"Retorna la ruta :pep:`3147`/:pep:`488` al archivo compilado por bytes "
"asociado con la *path* de origen. Por ejemplo, si *path* es ``/foo/bar/baz."
"py``, el valor de retorno sería ``/foo/bar/__pycache__/baz.cpython-32.pyc`` "
"para Python 3.2. La cadena de caracteres ``cpython-32`` proviene de la "
"etiqueta mágica actual (ver :func:`get_tag`; si :attr:`sys.implementation."
"cache_tag` no está definido, se lanzará :exc:`NotImplementedError`)."

#: ../Doc/library/importlib.rst:1235
msgid ""
"The *optimization* parameter is used to specify the optimization level of "
"the bytecode file. An empty string represents no optimization, so ``/foo/bar/"
"baz.py`` with an *optimization* of ``''`` will result in a bytecode path of "
"``/foo/bar/__pycache__/baz.cpython-32.pyc``. ``None`` causes the "
"interpreter's optimization level to be used. Any other value's string "
"representation is used, so ``/foo/bar/baz.py`` with an *optimization* of "
"``2`` will lead to the bytecode path of ``/foo/bar/__pycache__/baz."
"cpython-32.opt-2.pyc``. The string representation of *optimization* can only "
"be alphanumeric, else :exc:`ValueError` is raised."
msgstr ""
"El parámetro *optimization* se utiliza para especificar el nivel de "
"optimización del archivo de código de bytes. Una cadena de caracteres vacía "
"no representa optimización, por lo que ``/foo/bar/baz.py`` con una "
"*optimization* de ``''`` dará como resultado una ruta de código de bytes de "
"``/foo/bar/__pycache__/baz.cpython-32.pyc``. ``None`` hace que se utilice el "
"nivel de optimización del intérprete. Se usa la representación de cadena de "
"caracteres de cualquier otro valor, por lo que ``/foo/bar/baz.py`` con una "
"*optimization* de ``2`` conducirá a la ruta del código de bytes de ``/foo/"
"bar/__pycache__/baz.cpython-32.opt-2.pyc``. La representación de cadena de "
"caracteres *optimization* solo puede ser alfanumérica, de lo contrario se "
"lanza :exc:`ValueError`."

#: ../Doc/library/importlib.rst:1245
msgid ""
"The *debug_override* parameter is deprecated and can be used to override the "
"system's value for ``__debug__``. A ``True`` value is the equivalent of "
"setting *optimization* to the empty string. A ``False`` value is the same as "
"setting *optimization* to ``1``. If both *debug_override* an *optimization* "
"are not ``None`` then :exc:`TypeError` is raised."
msgstr ""
"El parámetro *debug_override* está obsoleto y se puede usar para anular el "
"valor del sistema para ``__debug__``. Un valor ``True`` es el equivalente a "
"establecer *optimization* en la cadena de caracteres vacía. Un valor "
"``False`` es lo mismo que establecer *optimization* en ``1``. Si tanto "
"*debug_override* como *optimization* no es ``None``, entonces se lanza :exc:"
"`TypeError`."

#: ../Doc/library/importlib.rst:1253
msgid ""
"The *optimization* parameter was added and the *debug_override* parameter "
"was deprecated."
msgstr ""
"Se agregó el parámetro *optimization* y el parámetro *debug_override* quedó "
"obsoleto."

#: ../Doc/library/importlib.rst:1257 ../Doc/library/importlib.rst:1273
#: ../Doc/library/importlib.rst:1423
msgid "Accepts a :term:`path-like object`."
msgstr "Acepta un :term:`path-like object`."

#: ../Doc/library/importlib.rst:1263
msgid ""
"Given the *path* to a :pep:`3147` file name, return the associated source "
"code file path.  For example, if *path* is ``/foo/bar/__pycache__/baz."
"cpython-32.pyc`` the returned path would be ``/foo/bar/baz.py``.  *path* "
"need not exist, however if it does not conform to :pep:`3147` or :pep:`488` "
"format, a :exc:`ValueError` is raised. If :attr:`sys.implementation."
"cache_tag` is not defined, :exc:`NotImplementedError` is raised."
msgstr ""
"Dado el *path* a un nombre de archivo :pep:`3147`, retorna la ruta del "
"archivo del código fuente asociado. Por ejemplo, si *path* es ``/foo/bar/"
"__pycache__/baz.cpython-32.pyc``, la ruta retornada sería ``/foo/bar/baz."
"py``. *path* no necesita existir, sin embargo, si no se ajusta al formato :"
"pep:`3147` o :pep:`488`, se lanza un :exc:`ValueError`. Si :attr:`sys."
"implementation.cache_tag` no está definido, se lanza :exc:"
"`NotImplementedError`."

#: ../Doc/library/importlib.rst:1278
msgid ""
"Decode the given bytes representing source code and return it as a string "
"with universal newlines (as required by :meth:`importlib.abc.InspectLoader."
"get_source`)."
msgstr ""
"Decodifica los bytes dados que representan el código fuente y los retorna "
"como una cadena de caracteres con nuevas líneas universales (como lo "
"requiere :meth:`importlib.abc.InspectLoader.get_source`)."

#: ../Doc/library/importlib.rst:1286
msgid "Resolve a relative module name to an absolute one."
msgstr "Resuelve un nombre de módulo relativo a uno absoluto."

#: ../Doc/library/importlib.rst:1288
msgid ""
"If  **name** has no leading dots, then **name** is simply returned. This "
"allows for usage such as ``importlib.util.resolve_name('sys', __spec__."
"parent)`` without doing a check to see if the **package** argument is needed."
msgstr ""
"Si **name** no tiene puntos iniciales, entonces **name** simplemente se "
"retorna. Esto permite el uso como ``importlib.util.resolve_name('sys', "
"__spec__.parent)`` sin hacer una verificación para ver si se necesita el "
"argumento **package**."

#: ../Doc/library/importlib.rst:1293
msgid ""
":exc:`ImportError` is raised if **name** is a relative module name but "
"**package** is a false value (e.g. ``None`` or the empty string). :exc:"
"`ImportError` is also raised if a relative name would escape its containing "
"package (e.g. requesting ``..bacon`` from within the ``spam`` package)."
msgstr ""
":exc:`ImportError` se lanza si **name** es un nombre de módulo relativo pero "
"**package** es un valor falso (por ejemplo, ``None`` o la cadena de "
"caracteres vacía). También se lanza :exc:`ImportError` si un nombre relativo "
"escaparía del paquete que lo contiene (por ejemplo, solicitando ``..bacon`` "
"desde el paquete ``spam``)."

#: ../Doc/library/importlib.rst:1301
msgid ""
"To improve consistency with import statements, raise :exc:`ImportError` "
"instead of :exc:`ValueError` for invalid relative import attempts."
msgstr ""
"Para mejorar la coherencia con las declaraciones de importación, aumente :"
"exc:`ImportError` en lugar de :exc:`ValueError` para intentos de importación "
"relativa no válidos."

#: ../Doc/library/importlib.rst:1308
msgid ""
"Find the :term:`spec <module spec>` for a module, optionally relative to the "
"specified **package** name. If the module is in :attr:`sys.modules`, then "
"``sys.modules[name].__spec__`` is returned (unless the spec would be "
"``None`` or is not set, in which case :exc:`ValueError` is raised). "
"Otherwise a search using :attr:`sys.meta_path` is done. ``None`` is returned "
"if no spec is found."
msgstr ""
"Busca el :term:`spec <module spec>` para un módulo, opcionalmente relativo "
"al nombre del **package** especificado. Si el módulo está en :attr:`sys."
"modules`, se retorna ``sys.modules[name].__spec__`` (a menos que la "
"especificación sea ``None`` o no esté establecida, en cuyo caso se lanza :"
"exc:`ValueError`). De lo contrario, se realiza una búsqueda utilizando :attr:"
"`sys.meta_path`. Se retorna ``None`` si no se encuentra ninguna "
"especificación."

#: ../Doc/library/importlib.rst:1315
msgid ""
"If **name** is for a submodule (contains a dot), the parent module is "
"automatically imported."
msgstr ""
"Si **name** es para un submódulo (contiene un punto), el módulo principal se "
"importa automáticamente."

#: ../Doc/library/importlib.rst:1318
msgid "**name** and **package** work the same as for :func:`import_module`."
msgstr "**name** y **package** funcionan igual que para :func:`import_module`."

#: ../Doc/library/importlib.rst:1322
msgid ""
"Raises :exc:`ModuleNotFoundError` instead of :exc:`AttributeError` if "
"**package** is in fact not a package (i.e. lacks a :attr:`__path__` "
"attribute)."
msgstr ""
"Lanza :exc:`ModuleNotFoundError` en lugar de :exc:`AttributeError` si "
"**package** no es de hecho un paquete (es decir, carece de un atributo :attr:"
"`__path__`)."

#: ../Doc/library/importlib.rst:1329
msgid ""
"Create a new module based on **spec** and :meth:`spec.loader.create_module "
"<importlib.abc.Loader.create_module>`."
msgstr ""
"Cree un nuevo módulo basado en **spec** y :meth:`spec.loader.create_module "
"<importlib.abc.Loader.create_module>`."

#: ../Doc/library/importlib.rst:1332
msgid ""
"If :meth:`spec.loader.create_module <importlib.abc.Loader.create_module>` "
"does not return ``None``, then any pre-existing attributes will not be "
"reset. Also, no :exc:`AttributeError` will be raised if triggered while "
"accessing **spec** or setting an attribute on the module."
msgstr ""
"Si :meth:`spec.loader.create_module <importlib.abc.Loader.create_module>` no "
"retorna ``None``, no se restablecerán los atributos preexistentes. Además, "
"no se lanzará :exc:`AttributeError` si se activa mientras se accede a "
"**spec** o se establece un atributo en el módulo."

#: ../Doc/library/importlib.rst:1337
msgid ""
"This function is preferred over using :class:`types.ModuleType` to create a "
"new module as **spec** is used to set as many import-controlled attributes "
"on the module as possible."
msgstr ""
"Esta función es preferible a usar :class:`types.ModuleType` para crear un "
"nuevo módulo ya que **spec** se usa para establecer tantos atributos de "
"importación controlados en el módulo como sea posible."

#: ../Doc/library/importlib.rst:1345
msgid ""
"A :term:`decorator` for :meth:`importlib.abc.Loader.load_module` to handle "
"selecting the proper module object to load with. The decorated method is "
"expected to have a call signature taking two positional arguments (e.g. "
"``load_module(self, module)``) for which the second argument will be the "
"module **object** to be used by the loader. Note that the decorator will not "
"work on static methods because of the assumption of two arguments."
msgstr ""
"Un :term:`decorator` para :meth:`importlib.abc.Loader.load_module` para "
"manejar la selección del objeto de módulo adecuado para cargar. Se espera "
"que el método decorado tenga una firma de llamada que tome dos argumentos "
"posicionales (por ejemplo, ``load_module(self, module)``) para los cuales el "
"segundo argumento será el módulo **object** que usará el cargador. Tenga en "
"cuenta que el decorador no funcionará con métodos estáticos debido a la "
"suposición de dos argumentos."

#: ../Doc/library/importlib.rst:1354
msgid ""
"The decorated method will take in the **name** of the module to be loaded as "
"expected for a :term:`loader`. If the module is not found in :data:`sys."
"modules` then a new one is constructed. Regardless of where the module came "
"from, :attr:`__loader__` set to **self** and :attr:`__package__` is set "
"based on what :meth:`importlib.abc.InspectLoader.is_package` returns (if "
"available). These attributes are set unconditionally to support reloading."
msgstr ""
"El método decorado tomará el **name** del módulo que se cargará como se "
"esperaba para un :term:`loader`. Si el módulo no se encuentra en :data:`sys."
"modules`, se construye uno nuevo. Independientemente de la procedencia del "
"módulo, :attr:`__loader__` se establece en **self** y :attr:`__package__` se "
"establece en función de lo que retorna :meth:`importlib.abc.InspectLoader."
"is_package` (si está disponible) . Estos atributos se establecen "
"incondicionalmente para admitir la recarga."

#: ../Doc/library/importlib.rst:1362
msgid ""
"If an exception is raised by the decorated method and a module was added to :"
"data:`sys.modules`, then the module will be removed to prevent a partially "
"initialized module from being in left in :data:`sys.modules`. If the module "
"was already in :data:`sys.modules` then it is left alone."
msgstr ""
"Si el método decorado lanza una excepción y se agrega un módulo a :data:`sys."
"modules`, entonces el módulo se eliminará para evitar que un módulo "
"parcialmente inicializado quede en :data:`sys.modules`. Si el módulo ya "
"estaba en :data:`sys.modules` entonces se deja solo."

#: ../Doc/library/importlib.rst:1367
msgid ""
":attr:`__loader__` and :attr:`__package__` are automatically set (when "
"possible)."
msgstr ""
":attr:`__loader__` y :attr:`__package__` se configuran automáticamente "
"(cuando es posible)."

#: ../Doc/library/importlib.rst:1371
msgid ""
"Set :attr:`__name__`, :attr:`__loader__` :attr:`__package__` unconditionally "
"to support reloading."
msgstr ""
"Establece :attr:`__name__`, :attr:`__loader__` :attr:`__package__` "
"incondicionalmente para apoyar la recarga."

#: ../Doc/library/importlib.rst:1375
msgid ""
"The import machinery now directly performs all the functionality provided by "
"this function."
msgstr ""
"La maquinaria de importación ahora realiza directamente toda la "
"funcionalidad proporcionada por esta función."

#: ../Doc/library/importlib.rst:1381
msgid ""
"A :term:`decorator` for :meth:`importlib.abc.Loader.load_module` to set the :"
"attr:`__loader__` attribute on the returned module. If the attribute is "
"already set the decorator does nothing. It is assumed that the first "
"positional argument to the wrapped method (i.e. ``self``) is what :attr:"
"`__loader__` should be set to."
msgstr ""
"Un :term:`decorator` para :meth:`importlib.abc.Loader.load_module` para "
"establecer el atributo :attr:`__loader__` en el módulo retornado. Si el "
"atributo ya está configurado, el decorador no hace nada. Se asume que el "
"primer argumento posicional del método envuelto (es decir, ``self``) es lo "
"que se debe establecer en :attr:`__loader__`."

#: ../Doc/library/importlib.rst:1388
msgid ""
"Set ``__loader__`` if set to ``None``, as if the attribute does not exist."
msgstr ""
"Establece ``__loader__`` si está configurado como ``None``, como si el "
"atributo no existiera."

#: ../Doc/library/importlib.rst:1392 ../Doc/library/importlib.rst:1401
msgid "The import machinery takes care of this automatically."
msgstr "La maquinaria de importación se encarga de esto automáticamente."

#: ../Doc/library/importlib.rst:1397
msgid ""
"A :term:`decorator` for :meth:`importlib.abc.Loader.load_module` to set the :"
"attr:`__package__` attribute on the returned module. If :attr:`__package__` "
"is set and has a value other than ``None`` it will not be changed."
msgstr ""
"Un :term:`decorator` para :meth:`importlib.abc.Loader.load_module` para "
"establecer el atributo :attr:`__package__` en el módulo retornado. Si :attr:"
"`__package__` está configurado y tiene un valor diferente a ``None``, no se "
"cambiará."

#: ../Doc/library/importlib.rst:1406
msgid ""
"A factory function for creating a :class:`~importlib.machinery.ModuleSpec` "
"instance based on a loader.  The parameters have the same meaning as they do "
"for ModuleSpec.  The function uses available :term:`loader` APIs, such as :"
"meth:`InspectLoader.is_package`, to fill in any missing information on the "
"spec."
msgstr ""
"Una función de fábrica para crear una instancia de :class:`~importlib."
"machinery.ModuleSpec` basada en un cargador. Los parámetros tienen el mismo "
"significado que para ModuleSpec. La función utiliza APIs disponibles de :"
"term:`loader`, tal como :meth:`InspectLoader.is_package`, para completar "
"cualquier información que falte en la especificación."

#: ../Doc/library/importlib.rst:1416
msgid ""
"A factory function for creating a :class:`~importlib.machinery.ModuleSpec` "
"instance based on the path to a file.  Missing information will be filled in "
"on the spec by making use of loader APIs and by the implication that the "
"module will be file-based."
msgstr ""
"Una función de fábrica para crear una instancia de :class:`~importlib."
"machinery.ModuleSpec` basada en la ruta a un archivo. La información que "
"falte se completará en la especificación mediante el uso de las API de "
"loader y la implicación de que el módulo estará basado en archivos."

#: ../Doc/library/importlib.rst:1428
msgid ""
"Return the hash of *source_bytes* as bytes. A hash-based ``.pyc`` file "
"embeds the :func:`source_hash` of the corresponding source file's contents "
"in its header."
msgstr ""
"Retorna el hash de *source_bytes* como bytes. Un archivo ``.pyc`` basado en "
"hash incrusta :func:`source_hash` del contenido del archivo fuente "
"correspondiente en su encabezado."

#: ../Doc/library/importlib.rst:1436
msgid ""
"A class which postpones the execution of the loader of a module until the "
"module has an attribute accessed."
msgstr ""
"Una clase que pospone la ejecución del cargador de un módulo hasta que el "
"módulo tiene acceso a un atributo."

#: ../Doc/library/importlib.rst:1439
msgid ""
"This class **only** works with loaders that define :meth:`~importlib.abc."
"Loader.exec_module` as control over what module type is used for the module "
"is required. For those same reasons, the loader's :meth:`~importlib.abc."
"Loader.create_module` method must return ``None`` or a type for which its "
"``__class__`` attribute can be mutated along with not using :term:`slots "
"<__slots__>`. Finally, modules which substitute the object placed into :attr:"
"`sys.modules` will not work as there is no way to properly replace the "
"module references throughout the interpreter safely; :exc:`ValueError` is "
"raised if such a substitution is detected."
msgstr ""
"Esta clase **solo** funciona con cargadores que definen :meth:`~importlib."
"abc.Loader.exec_module` ya que se requiere control sobre qué tipo de módulo "
"se usa para el módulo. Por esas mismas razones, el método del cargador :meth:"
"`~importlib.abc.Loader.create_module` debe retornar ``None`` o un tipo para "
"el cual su atributo ``__class__`` se puede mutar junto con no usar :term:"
"`slots <__slots__>`. Finalmente, los módulos que sustituyen el objeto "
"colocado en :attr:`sys.modules` no funcionarán ya que no hay forma de "
"reemplazar correctamente las referencias del módulo en todo el intérprete de "
"forma segura; :exc:`ValueError` se genera si se detecta tal sustitución."

#: ../Doc/library/importlib.rst:1450
msgid ""
"For projects where startup time is critical, this class allows for "
"potentially minimizing the cost of loading a module if it is never used. For "
"projects where startup time is not essential then use of this class is "
"**heavily** discouraged due to error messages created during loading being "
"postponed and thus occurring out of context."
msgstr ""
"Para proyectos donde el tiempo de inicio es crítico, esta clase permite "
"minimizar potencialmente el costo de cargar un módulo si nunca se usa. Para "
"proyectos en los que el tiempo de inicio no es esencial, el uso de esta "
"clase se desaconseja **en gran medida** debido a que los mensajes de error "
"creados durante la carga se posponen y, por lo tanto, ocurren fuera de "
"contexto."

#: ../Doc/library/importlib.rst:1458
msgid ""
"Began calling :meth:`~importlib.abc.Loader.create_module`, removing the "
"compatibility warning for :class:`importlib.machinery.BuiltinImporter` and :"
"class:`importlib.machinery.ExtensionFileLoader`."
msgstr ""
"Comenzó a llamar :meth:`~importlib.abc.Loader.create_module`, eliminando la "
"advertencia de compatibilidad para :class:`importlib.machinery."
"BuiltinImporter` y :class:`importlib.machinery.ExtensionFileLoader`."

#: ../Doc/library/importlib.rst:1465
msgid ""
"A static method which returns a callable that creates a lazy loader. This is "
"meant to be used in situations where the loader is passed by class instead "
"of by instance. ::"
msgstr ""
"Un método estático que devuelve un invocable que crea un cargador diferido. "
"Esto está destinado a utilizarse en situaciones en las que el cargador se "
"pasa por clase en lugar de por instancia. ::"

#: ../Doc/library/importlib.rst:1478
msgid "Examples"
msgstr "Ejemplos"

#: ../Doc/library/importlib.rst:1481
msgid "Importing programmatically"
msgstr "Importar programáticamente"

#: ../Doc/library/importlib.rst:1483
msgid ""
"To programmatically import a module, use :func:`importlib.import_module`. ::"
msgstr ""
"Para importar un módulo mediante programación, use :func:`importlib."
"import_module`. ::"

#: ../Doc/library/importlib.rst:1492
msgid "Checking if a module can be imported"
msgstr "Comprobando si se puede importar un módulo"

#: ../Doc/library/importlib.rst:1494
msgid ""
"If you need to find out if a module can be imported without actually doing "
"the import, then you should use :func:`importlib.util.find_spec`."
msgstr ""
"Si necesita averiguar si un módulo se puede importar sin realmente realizar "
"la importación, entonces debe usar :func:`importlib.util.find_spec`."

#: ../Doc/library/importlib.rst:1497
msgid ""
"Note that if ``name`` is a submodule (contains a dot), :func:`importlib.util."
"find_spec` will import the parent module. ::"
msgstr ""
"Note que si ``name`` es un sub-módulo (contiene sólo un punto), :func:"
"`importlib.util.find_spec` importará el módulo padre. ::"

#: ../Doc/library/importlib.rst:1520
msgid "Importing a source file directly"
msgstr "Importar un archivo fuente directamente"

#: ../Doc/library/importlib.rst:1522
msgid "To import a Python source file directly, use the following recipe::"
msgstr ""
"Para importar un archivo fuente de Python directamente, use la siguiente "
"receta::"

#: ../Doc/library/importlib.rst:1539
msgid "Implementing lazy imports"
msgstr "Implementar importaciones diferidas"

#: ../Doc/library/importlib.rst:1541
msgid "The example below shows how to implement lazy imports::"
msgstr "El ejemplo de abajo muestra cómo implementar importaciones diferidas::"

#: ../Doc/library/importlib.rst:1563
msgid "Setting up an importer"
msgstr "Configurar un importador"

#: ../Doc/library/importlib.rst:1565
msgid ""
"For deep customizations of import, you typically want to implement an :term:"
"`importer`. This means managing both the :term:`finder` and :term:`loader` "
"side of things. For finders there are two flavours to choose from depending "
"on your needs: a :term:`meta path finder` or a :term:`path entry finder`. "
"The former is what you would put on :attr:`sys.meta_path` while the latter "
"is what you create using a :term:`path entry hook` on :attr:`sys.path_hooks` "
"which works with :attr:`sys.path` entries to potentially create a finder. "
"This example will show you how to register your own importers so that import "
"will use them (for creating an importer for yourself, read the documentation "
"for the appropriate classes defined within this package)::"
msgstr ""
"Para personalizaciones profundas de la importación, normalmente desea "
"implementar un :term:`importador`. Esto significa administrar tanto el lado :"
"term:`finder` como :term:`loader` de las cosas. Para los buscadores, hay dos "
"sabores para elegir según sus necesidades: un :term:`meta path finder` o un :"
"term:`path entry finder`. El primero es lo que pondrías en :attr:`sys."
"meta_path` mientras que el segundo es lo que creas usando un :term:`path "
"entry hook` en :attr:`sys.path_hooks` que funciona con :attr:`sys .path` "
"entradas para crear potencialmente un buscador. Este ejemplo le mostrará "
"cómo registrar sus propios importadores para que import los utilice (para "
"crear un importador para usted, lea la documentación de las clases "
"apropiadas definidas dentro de este paquete):"

#: ../Doc/library/importlib.rst:1597
msgid "Approximating :func:`importlib.import_module`"
msgstr "Aproximando :func:`importlib.import_module`"

#: ../Doc/library/importlib.rst:1599
msgid ""
"Import itself is implemented in Python code, making it possible to expose "
"most of the import machinery through importlib. The following helps "
"illustrate the various APIs that importlib exposes by providing an "
"approximate implementation of :func:`importlib.import_module`::"
msgstr ""
"La importación en sí está implementada en código Python, lo que permite "
"exponer la mayor parte de la maquinaria de importación a través de "
"importlib. Lo siguiente ayuda a ilustrar las diversas API que importlib "
"expone al proporcionar una implementación aproximada de :func:`importlib."
"import_module`::"
