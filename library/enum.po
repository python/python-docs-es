# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-05 12:54+0200\n"
"PO-Revision-Date: 2020-07-26 17:58-0500\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language: es\n"
"X-Generator: Poedit 2.4\n"

#: ../Doc/library/enum.rst:2
msgid ":mod:`enum` --- Support for enumerations"
msgstr ":mod:`enum` — Soporte para enumeraciones"

#: ../Doc/library/enum.rst:14
msgid "**Source code:** :source:`Lib/enum.py`"
msgstr "**Código fuente:** :source:`Lib/enum.py`"

#: ../Doc/library/enum.rst:18
msgid ""
"An enumeration is a set of symbolic names (members) bound to unique, "
"constant values.  Within an enumeration, the members can be compared by "
"identity, and the enumeration itself can be iterated over."
msgstr ""
"Una enumeración es un conjunto de nombres simbólicos (miembros) vinculados a "
"valores únicos y constantes. Dentro de una enumeración, los miembros se "
"pueden comparar por identidad, y la enumeración en sí se puede iterar."

#: ../Doc/library/enum.rst:24
msgid "Module Contents"
msgstr "Contenido del Módulo"

#: ../Doc/library/enum.rst:26
msgid ""
"This module defines four enumeration classes that can be used to define "
"unique sets of names and values: :class:`Enum`, :class:`IntEnum`, :class:"
"`Flag`, and :class:`IntFlag`.  It also defines one decorator, :func:"
"`unique`, and one helper, :class:`auto`."
msgstr ""
"Este módulo define cuatro clases de enumeración que se pueden usar para "
"definir conjuntos únicos de nombres y valores: :class:`Enum`, :class:"
"`IntEnum`, :class:`Flag`, and :class:`IntFlag`.  También define un "
"decorador, :func:`unique`, y un ayudante, :class:`auto`."

#: ../Doc/library/enum.rst:33
msgid ""
"Base class for creating enumerated constants.  See section `Functional API`_ "
"for an alternate construction syntax."
msgstr ""
"Clase base para crear constantes enumeradas.  Consulte la sección `API "
"Funcional`_ para obtener una sintaxis de construcción alternativa."

#: ../Doc/library/enum.rst:38
msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`int`."
msgstr ""
"Clase base para crear constantes enumeradas que también son sub clases de :"
"class:`int`."

#: ../Doc/library/enum.rst:43
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operators without losing their :class:`IntFlag` membership. :class:"
"`IntFlag` members are also subclasses of :class:`int`."
msgstr ""
"Clase base para crear constantes enumeradas que se pueden combinar usando "
"los operadores *bitwise* sin perder su membresía :class:`IntFlag`. Los "
"miembros de :class:`IntFlag` también son subclases de :class:`int`."

#: ../Doc/library/enum.rst:49
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operations without losing their :class:`Flag` membership."
msgstr ""
"Clase base para crear constantes enumeradas que se pueden combinar "
"utilizando las operaciones *bitwise* sin perder su membresía :class:`Flag`."

#: ../Doc/library/enum.rst:54
msgid ""
"Enum class decorator that ensures only one name is bound to any one value."
msgstr ""
"El decorador de clase Enum que garantiza que solo un nombre esté vinculado a "
"cualquier valor."

#: ../Doc/library/enum.rst:58
msgid ""
"Instances are replaced with an appropriate value for Enum members. Initial "
"value starts at 1."
msgstr ""
"Las instancias se reemplazan con un valor apropiado para los miembros de "
"Enum. El valor inicial comienza en 1."

#: ../Doc/library/enum.rst:60
msgid "``Flag``, ``IntFlag``, ``auto``"
msgstr "``Flag``, ``IntFlag``, ``auto``"

#: ../Doc/library/enum.rst:64
msgid "Creating an Enum"
msgstr "Creando un Enum"

#: ../Doc/library/enum.rst:66
msgid ""
"Enumerations are created using the :keyword:`class` syntax, which makes them "
"easy to read and write.  An alternative creation method is described in "
"`Functional API`_.  To define an enumeration, subclass :class:`Enum` as "
"follows::"
msgstr ""
"Las enumeraciones son creadas usando la sintaxis :keyword:`class`, lo que "
"las hace de fácil lectura y escritura. Un método de creación alternativo se "
"describe en `API Funcional`_. Para definir una enumeración,  hacer una "
"subclase :class:`Enum` de la siguiente manera::"

#: ../Doc/library/enum.rst:78
msgid "Enum member values"
msgstr "Valores de miembros de Enum"

#: ../Doc/library/enum.rst:80
msgid ""
"Member values can be anything: :class:`int`, :class:`str`, etc..  If the "
"exact value is unimportant you may use :class:`auto` instances and an "
"appropriate value will be chosen for you.  Care must be taken if you mix :"
"class:`auto` with other values."
msgstr ""
"Los valores de los miembros pueden ser cualquier cosa: :class:`int`, :class:"
"`str`, etc.. Si el valor exacto no es importante, puede usar instancias :"
"class:`auto` y se elegirá un valor apropiado para usted. Se debe tener "
"cuidado si se mezcla :class:`auto` con otros valores."

#: ../Doc/library/enum.rst:85
msgid "Nomenclature"
msgstr "Nomenclatura"

#: ../Doc/library/enum.rst:87
msgid "The class :class:`Color` is an *enumeration* (or *enum*)"
msgstr "La clase :class:`Color` es una *enumeración* (o *enum*)"

#: ../Doc/library/enum.rst:88
msgid ""
"The attributes :attr:`Color.RED`, :attr:`Color.GREEN`, etc., are "
"*enumeration members* (or *enum members*) and are functionally constants."
msgstr ""
"Los atributos :attr:`Color.RED`, :attr:`Color.GREEN`, etc., son *miembros de "
"enumeración* (o *miembros de enum*) y son funcionalmente constantes."

#: ../Doc/library/enum.rst:90
msgid ""
"The enum members have *names* and *values* (the name of :attr:`Color.RED` is "
"``RED``, the value of :attr:`Color.BLUE` is ``3``, etc.)"
msgstr ""
"Los miembros de la enumeración tienen *nombres* y *valores* (el nombre de :"
"attr:`Color.RED` es ``ROJO``, el valor de :attr:`Color.BLUE` es ``3``, etc. )"

#: ../Doc/library/enum.rst:96
msgid ""
"Even though we use the :keyword:`class` syntax to create Enums, Enums are "
"not normal Python classes.  See `How are Enums different?`_ for more details."
msgstr ""
"Aunque usamos la sintaxis :keyword:`class` para crear Enums, los Enums no "
"son clases normales de Python. Consulte `¿En qué se diferencian las "
"enumeraciones?`_ para obtener más detalles."

#: ../Doc/library/enum.rst:100
msgid "Enumeration members have human readable string representations::"
msgstr ""
"Los miembros de la enumeración tienen representaciones de cadenas legibles "
"para humanos ::"

#: ../Doc/library/enum.rst:105
msgid "...while their ``repr`` has more information::"
msgstr "…mientras que su ``repr`` tiene más información ::"

#: ../Doc/library/enum.rst:110
msgid "The *type* of an enumeration member is the enumeration it belongs to::"
msgstr ""
"El *tipo* de un miembro de enumeración es la enumeración a la que pertenece::"

#: ../Doc/library/enum.rst:118
msgid "Enum members also have a property that contains just their item name::"
msgstr ""
"Los miembros de Enum también tienen una propiedad que contiene solo su "
"nombre del elemento ::"

#: ../Doc/library/enum.rst:123
msgid "Enumerations support iteration, in definition order::"
msgstr "Las enumeraciones soportan iteración, en orden de definición::"

#: ../Doc/library/enum.rst:139
msgid ""
"Enumeration members are hashable, so they can be used in dictionaries and "
"sets::"
msgstr ""
"Los miembros de la enumeración son hasheables, por lo que pueden usarse en "
"diccionarios y conjuntos::"

#: ../Doc/library/enum.rst:149
msgid "Programmatic access to enumeration members and their attributes"
msgstr "Acceso programático a los miembros de la enumeración y sus atributos"

#: ../Doc/library/enum.rst:151
msgid ""
"Sometimes it's useful to access members in enumerations programmatically (i."
"e. situations where ``Color.RED`` won't do because the exact color is not "
"known at program-writing time).  ``Enum`` allows such access::"
msgstr ""
"A veces es útil acceder a los miembros en enumeraciones mediante "
"programación (es decir, situaciones en las que ``Color.RED`` no funcionará "
"porque no se conoce el color exacto al momento de escribir el programa). "
"``Enum`` permite dicho acceso::"

#: ../Doc/library/enum.rst:160
msgid "If you want to access enum members by *name*, use item access::"
msgstr ""
"Si desea acceder a los miembros de enumeración por *nombre*, use el acceso a "
"elementos::"

#: ../Doc/library/enum.rst:167
msgid "If you have an enum member and need its :attr:`name` or :attr:`value`::"
msgstr "Si tiene un miembro enum y necesita su :attr:`name` o :attr:`value`::"

#: ../Doc/library/enum.rst:177
msgid "Duplicating enum members and values"
msgstr "Duplicando miembros y valores enum"

#: ../Doc/library/enum.rst:179
msgid "Having two enum members with the same name is invalid::"
msgstr "Tener dos miembros enum con el mismo nombre no es válido::"

#: ../Doc/library/enum.rst:189
msgid ""
"However, two enum members are allowed to have the same value.  Given two "
"members A and B with the same value (and A defined first), B is an alias to "
"A.  By-value lookup of the value of A and B will return A.  By-name lookup "
"of B will also return A::"
msgstr ""
"Sin embargo, se permite que dos miembros enum tengan el mismo valor. Dado "
"que dos miembros A y B tienen el mismo valor (y A se definió primero), B es "
"un alias de A. La búsqueda por valor del valor de A y B retornará A. La "
"búsqueda por nombre de B también retornará A::"

#: ../Doc/library/enum.rst:209
msgid ""
"Attempting to create a member with the same name as an already defined "
"attribute (another member, a method, etc.) or attempting to create an "
"attribute with the same name as a member is not allowed."
msgstr ""
"Intentar crear un miembro con el mismo nombre que un atributo ya definido "
"(otro miembro, un método, etc.) o intentar crear un atributo con el mismo "
"nombre que un miembro no está permitido."

#: ../Doc/library/enum.rst:215
msgid "Ensuring unique enumeration values"
msgstr "Garantizando valores de enumeración únicos"

#: ../Doc/library/enum.rst:217
msgid ""
"By default, enumerations allow multiple names as aliases for the same value. "
"When this behavior isn't desired, the following decorator can be used to "
"ensure each value is used only once in the enumeration:"
msgstr ""
"Por defecto, las enumeraciones permiten múltiples nombres como alias para el "
"mismo valor. Cuando no se desea este comportamiento, se puede usar el "
"siguiente decorador para garantizar que cada valor se use solo una vez en la "
"enumeración:"

#: ../Doc/library/enum.rst:223
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  It searches an "
"enumeration's :attr:`__members__` gathering any aliases it finds; if any are "
"found :exc:`ValueError` is raised with the details::"
msgstr ""
"Un decorador de :keyword:`class` específicamente para enumeraciones. Busca "
"una enumeración :attr:`__members__` reuniendo cualquier alias que encuentre; "
"si no se encuentra alguno se genera un :exc:`ValueError` con los detalles::"

#: ../Doc/library/enum.rst:241
msgid "Using automatic values"
msgstr "Usando valores automáticos"

#: ../Doc/library/enum.rst:243
msgid "If the exact value is unimportant you can use :class:`auto`::"
msgstr "Si el valor exacto no es importante, puede usar :class:`auto`::"

#: ../Doc/library/enum.rst:254
msgid ""
"The values are chosen by :func:`_generate_next_value_`, which can be "
"overridden::"
msgstr ""
"Los valores se eligen por :func:`_generate_next_value_`, que se puede "
"invalidar::"

#: ../Doc/library/enum.rst:272
msgid ""
"The goal of the default :meth:`_generate_next_value_` methods is to provide "
"the next :class:`int` in sequence with the last :class:`int` provided, but "
"the way it does this is an implementation detail and may change."
msgstr ""
"El objetivo del método predeterminado :meth:`_generate_next_value_` es "
"proporcionar el siguiente :class:`int` en secuencia con el último :class:"
"`int` proporcionado, pero la forma en que lo hace es un detalle de "
"implementación y puede cambiar."

#: ../Doc/library/enum.rst:277
msgid "Iteration"
msgstr "Iteración"

#: ../Doc/library/enum.rst:279
msgid "Iterating over the members of an enum does not provide the aliases::"
msgstr ""
"Iterar sobre los miembros de una enumeración no proporciona los alias::"

#: ../Doc/library/enum.rst:284
msgid ""
"The special attribute ``__members__`` is a read-only ordered mapping of "
"names to members.  It includes all names defined in the enumeration, "
"including the aliases::"
msgstr ""
"El atributo especial ``__members__`` es una asignación ordenada de solo "
"lectura de nombres a miembros. Incluye todos los nombres definidos en la "
"enumeración, incluidos los alias::"

#: ../Doc/library/enum.rst:296
msgid ""
"The ``__members__`` attribute can be used for detailed programmatic access "
"to the enumeration members.  For example, finding all the aliases::"
msgstr ""
"El atributo ``__members__`` se puede usar para el acceso programático "
"detallado a los miembros de la enumeración. Por ejemplo, encontrar todos los "
"alias::"

#: ../Doc/library/enum.rst:304
msgid "Comparisons"
msgstr "Comparaciones"

#: ../Doc/library/enum.rst:306
msgid "Enumeration members are compared by identity::"
msgstr "Los miembros de la enumeración se comparan por identidad::"

#: ../Doc/library/enum.rst:315
msgid ""
"Ordered comparisons between enumeration values are *not* supported.  Enum "
"members are not integers (but see `IntEnum`_ below)::"
msgstr ""
"Las comparaciones ordenadas entre valores de enumeración *no* son "
"soportadas. Los miembros de Enum no son enteros (pero vea `IntEnum`_ a "
"continuación)::"

#: ../Doc/library/enum.rst:323
msgid "Equality comparisons are defined though::"
msgstr "Aunque, las comparaciones de igualdad se definen::"

#: ../Doc/library/enum.rst:332
msgid ""
"Comparisons against non-enumeration values will always compare not equal "
"(again, :class:`IntEnum` was explicitly designed to behave differently, see "
"below)::"
msgstr ""
"Las comparaciones con valores de no enumeración siempre se compararán no "
"iguales (de nuevo, :class:`IntEnum` fue diseñado explícitamente para "
"comportarse de manera diferente, ver más abajo)::"

#: ../Doc/library/enum.rst:341
msgid "Allowed members and attributes of enumerations"
msgstr "Miembros permitidos y atributos de enumeraciones"

#: ../Doc/library/enum.rst:343
msgid ""
"The examples above use integers for enumeration values.  Using integers is "
"short and handy (and provided by default by the `Functional API`_), but not "
"strictly enforced.  In the vast majority of use-cases, one doesn't care what "
"the actual value of an enumeration is.  But if the value *is* important, "
"enumerations can have arbitrary values."
msgstr ""
"Los ejemplos anteriores usan números enteros para los valores de "
"enumeración. El uso de enteros es breve y útil (y lo proporciona de forma "
"predeterminada la `API Funcional`_), pero no se aplica estrictamente. En la "
"gran mayoría de los casos de uso, a uno no le importa cuál es el valor real "
"de una enumeración. Pero si el valor *es* importante, las enumeraciones "
"pueden tener valores arbitrarios."

#: ../Doc/library/enum.rst:349
msgid ""
"Enumerations are Python classes, and can have methods and special methods as "
"usual.  If we have this enumeration::"
msgstr ""
"Las enumeraciones son clases de Python y pueden tener métodos y métodos "
"especiales como de costumbre. Si tenemos esta enumeración ::"

#: ../Doc/library/enum.rst:369
msgid "Then::"
msgstr "Después::"

#: ../Doc/library/enum.rst:378
msgid ""
"The rules for what is allowed are as follows: names that start and end with "
"a single underscore are reserved by enum and cannot be used; all other "
"attributes defined within an enumeration will become members of this "
"enumeration, with the exception of special methods (:meth:`__str__`, :meth:"
"`__add__`, etc.), descriptors (methods are also descriptors), and variable "
"names listed in :attr:`_ignore_`."
msgstr ""
"Las reglas para lo que está permitido son las siguientes: los nombres que "
"comienzan y terminan con un solo guión bajo están reservados por enum y no "
"se pueden usar; todos los demás atributos definidos dentro de una "
"enumeración se convertirán en miembros de esta enumeración, con la excepción "
"de métodos especiales (:meth:`__str__`, :meth:`__add__`, etc.), descriptores "
"(los métodos también son descriptores) y nombres de variables listado en :"
"attr:`_ignore_`."

#: ../Doc/library/enum.rst:385
msgid ""
"Note:  if your enumeration defines :meth:`__new__` and/or :meth:`__init__` "
"then whatever value(s) were given to the enum member will be passed into "
"those methods.  See `Planet`_ for an example."
msgstr ""
"Nota: si tu enumeración define :meth:`__new__` y/o :meth:`__init__`, los "
"valores que se hayan dado al miembro enum se pasarán a esos métodos. Ver "
"`Planeta`_ para un ejemplo."

#: ../Doc/library/enum.rst:391
msgid "Restricted Enum subclassing"
msgstr "Subclases restringidas de Enum"

#: ../Doc/library/enum.rst:393
msgid ""
"A new :class:`Enum` class must have one base Enum class, up to one concrete "
"data type, and as many :class:`object`-based mixin classes as needed.  The "
"order of these base classes is::"
msgstr ""
"Una nueva clase :class:`Enum` debe tener una clase base Enum, hasta un tipo "
"de datos concreto, y tantas clases mixin basadas en :class:`object` como "
"sean necesarias. El orden de estas clases base es::"

#: ../Doc/library/enum.rst:400
msgid ""
"Also, subclassing an enumeration is allowed only if the enumeration does not "
"define any members.  So this is forbidden::"
msgstr ""
"Además, la subclasificación de una enumeración solo está permitida si la "
"enumeración no define ningún miembro. Entonces esto está prohibido::"

#: ../Doc/library/enum.rst:410
msgid "But this is allowed::"
msgstr "Pero esto es permitido::"

#: ../Doc/library/enum.rst:421
msgid ""
"Allowing subclassing of enums that define members would lead to a violation "
"of some important invariants of types and instances.  On the other hand, it "
"makes sense to allow sharing some common behavior between a group of "
"enumerations. (See `OrderedEnum`_ for an example.)"
msgstr ""
"Permitir la subclasificación de enumeraciones que definen miembros "
"conduciría a una violación de algunos invariantes importantes de tipos e "
"instancias. Por otro lado, tiene sentido permitir compartir un "
"comportamiento común entre un grupo de enumeraciones. (Ver `OrderedEnum`_ "
"para un ejemplo.)"

#: ../Doc/library/enum.rst:428
msgid "Pickling"
msgstr "Serialización"

#: ../Doc/library/enum.rst:430
msgid "Enumerations can be pickled and unpickled::"
msgstr "Las enumeraciones se pueden serializar y desempaquetar::"

#: ../Doc/library/enum.rst:437
msgid ""
"The usual restrictions for pickling apply: picklable enums must be defined "
"in the top level of a module, since unpickling requires them to be "
"importable from that module."
msgstr ""
"Se aplican las restricciones habituales para la serialización (*pickling*): "
"las enum seleccionables se deben definir en el nivel superior de un módulo, "
"ya que el desempaquetado requiere que sean importables desde ese módulo."

#: ../Doc/library/enum.rst:443
msgid ""
"With pickle protocol version 4 it is possible to easily pickle enums nested "
"in other classes."
msgstr ""
"Con la versión 4 del protocolo de serialización (*pickle*), es posible "
"seleccionar fácilmente las enumeraciones anidadas en otras clases."

#: ../Doc/library/enum.rst:446
msgid ""
"It is possible to modify how Enum members are pickled/unpickled by defining :"
"meth:`__reduce_ex__` in the enumeration class."
msgstr ""
"Es posible modificar la forma en que los miembros de Enum se serializan/"
"desempaquetan definiendo :meth:`__reduce_ex__` en la clase de enumeración."

#: ../Doc/library/enum.rst:451
msgid "Functional API"
msgstr "API Funcional"

#: ../Doc/library/enum.rst:453
msgid ""
"The :class:`Enum` class is callable, providing the following functional API::"
msgstr ""
"La clase :class:`Enum` es invocable, proporcionando la siguiente API "
"funcional::"

#: ../Doc/library/enum.rst:465
msgid ""
"The semantics of this API resemble :class:`~collections.namedtuple`. The "
"first argument of the call to :class:`Enum` is the name of the enumeration."
msgstr ""
"La semántica de esta API se parece a :class:`~collections.namedtuple`. El "
"primer argumento de la llamada a :class:`Enum` es el nombre de la "
"enumeración."

#: ../Doc/library/enum.rst:468
msgid ""
"The second argument is the *source* of enumeration member names.  It can be "
"a whitespace-separated string of names, a sequence of names, a sequence of 2-"
"tuples with key/value pairs, or a mapping (e.g. dictionary) of names to "
"values.  The last two options enable assigning arbitrary values to "
"enumerations; the others auto-assign increasing integers starting with 1 "
"(use the ``start`` parameter to specify a different starting value).  A new "
"class derived from :class:`Enum` is returned.  In other words, the above "
"assignment to :class:`Animal` is equivalent to::"
msgstr ""
"El segundo argumento es la *fuente* de los nombres de los miembros de la "
"enumeración. Puede se una cadena de nombres separados por espacios en "
"blanco, una secuencia de 2 tuplas con pares de clave/valor, o un mapeo de "
"nombres y valores (ej. diccionario). Las últimas dos opciones permiten "
"asignar valores arbitrarios a las enumeraciones; los otros asignan "
"automáticamente enteros crecientes comenzando con 1 (use el parámetros "
"``start`` para especificar un valor de inicio diferente). Se regresa una "
"nueva clase derivada de :class:`Enum`. En otras palabras, la asignación de "
"arriba :class:`Animal` es equivalente a::"

#: ../Doc/library/enum.rst:484
msgid ""
"The reason for defaulting to ``1`` as the starting number and not ``0`` is "
"that ``0`` is ``False`` in a boolean sense, but enum members all evaluate to "
"``True``."
msgstr ""
"La razón por la que el valor predeterminado es ``1`` como numero inicial y "
"no ``0`` es que ``0`` es ``False`` en sentido booleano, pero todos los "
"miembros enum evalúan como ``True``."

#: ../Doc/library/enum.rst:488
msgid ""
"Pickling enums created with the functional API can be tricky as frame stack "
"implementation details are used to try and figure out which module the "
"enumeration is being created in (e.g. it will fail if you use a utility "
"function in separate module, and also may not work on IronPython or Jython). "
"The solution is to specify the module name explicitly as follows::"
msgstr ""
"Las enumeraciones serializadas creadas con la API funcional pueden ser "
"complicadas ya que los detalles de implementación de la pila se usan para "
"tratar de averiguar en qué módulo se está creando la enumeración (ej. "
"fallará si usa una función de utilidad en un módulo separado, y también "
"puede no funcionar en IronPython o Jython). La solución es especificar el "
"nombre del módulo explícitamente de la siguiente manera::"

#: ../Doc/library/enum.rst:498
msgid ""
"If ``module`` is not supplied, and Enum cannot determine what it is, the new "
"Enum members will not be unpicklable; to keep errors closer to the source, "
"pickling will be disabled."
msgstr ""
"Si no se suministra un ``module``, y Enum no puede determinar que es, los "
"miembros del nuevo Enum no se podrán desempaquetar; para mantener los "
"errores más cerca de la fuente, la serialización se deshabilitará."

#: ../Doc/library/enum.rst:502
msgid ""
"The new pickle protocol 4 also, in some circumstances, relies on :attr:"
"`~definition.__qualname__` being set to the location where pickle will be "
"able to find the class.  For example, if the class was made available in "
"class SomeData in the global scope::"
msgstr ""
"El nuevo protocolo 4 de serialización también, en ciertas circunstancias, se "
"basa en :attr:`~definition.__qualname__` se establece en la ubicación donde "
"la serialización podrá encontrar la clase. Por ejemplo, si la clase se hizo "
"disponible en la clase SomeData en el campo global::"

#: ../Doc/library/enum.rst:509
msgid "The complete signature is::"
msgstr "La firma completa es::"

#: ../Doc/library/enum.rst
msgid "value"
msgstr "valor"

#: ../Doc/library/enum.rst:513
msgid "What the new Enum class will record as its name."
msgstr "Lo que la nueva clase Enum registrará como su nombre."

#: ../Doc/library/enum.rst
msgid "names"
msgstr "nombres"

#: ../Doc/library/enum.rst:515
msgid ""
"The Enum members.  This can be a whitespace or comma separated string "
"(values will start at 1 unless otherwise specified)::"
msgstr ""
"Los miembros de Enum. Esto puede ser un espacio en blanco o una cadena "
"separada por comas (los valores empezarán en 1 a menos que se especifique lo "
"contrario)::"

#: ../Doc/library/enum.rst:520
msgid "or an iterator of names::"
msgstr "o un iterador de nombres::"

#: ../Doc/library/enum.rst:524
msgid "or an iterator of (name, value) pairs::"
msgstr "o un iterador de pares(nombre,valor)::"

#: ../Doc/library/enum.rst:528
msgid "or a mapping::"
msgstr "o un mapeo::"

#: ../Doc/library/enum.rst
msgid "module"
msgstr "módulo"

#: ../Doc/library/enum.rst:532
msgid "name of module where new Enum class can be found."
msgstr "nombre del módulo donde se puede encontrar la nueva clase Enum."

#: ../Doc/library/enum.rst
msgid "qualname"
msgstr "qualname"

#: ../Doc/library/enum.rst:534
msgid "where in module new Enum class can be found."
msgstr "donde en el módulo se puede encontrar la nueva clase Enum."

#: ../Doc/library/enum.rst
msgid "type"
msgstr "tipo"

#: ../Doc/library/enum.rst:536
msgid "type to mix in to new Enum class."
msgstr "escriba para mezclar en la nueva clase Enum."

#: ../Doc/library/enum.rst
msgid "start"
msgstr "inicio"

#: ../Doc/library/enum.rst:538
msgid "number to start counting at if only names are passed in."
msgstr "número para comenzar a contar sí solo se pasan nombres."

#: ../Doc/library/enum.rst:540
msgid "The *start* parameter was added."
msgstr "Se agregó el parámetro *start*."

#: ../Doc/library/enum.rst:545
msgid "Derived Enumerations"
msgstr "Enumeraciones derivadas"

#: ../Doc/library/enum.rst:548
msgid "IntEnum"
msgstr "IntEnum"

#: ../Doc/library/enum.rst:550
msgid ""
"The first variation of :class:`Enum` that is provided is also a subclass of :"
"class:`int`.  Members of an :class:`IntEnum` can be compared to integers; by "
"extension, integer enumerations of different types can also be compared to "
"each other::"
msgstr ""
"La primera variación de :class:`Enum` que se proporciona también es una "
"subclase de :class:`int`. Los miembros de :class:`IntEnum` se pueden "
"comparar con enteros; por extensión, las enumeraciones enteras de diferentes "
"tipos también se pueden comparar entre sí::"

#: ../Doc/library/enum.rst:571
msgid ""
"However, they still can't be compared to standard :class:`Enum` "
"enumerations::"
msgstr ""
"Sin embargo, todavía no se pueden comparar con las enumeraciones estándar :"
"class:`Enum`::"

#: ../Doc/library/enum.rst:584
msgid ""
":class:`IntEnum` values behave like integers in other ways you'd expect::"
msgstr ""
"los valores :class:`IntEnum` se comportan como enteros en otras maneras que "
"esperarías::"

#: ../Doc/library/enum.rst:595
msgid "IntFlag"
msgstr "IntFlag"

#: ../Doc/library/enum.rst:597
msgid ""
"The next variation of :class:`Enum` provided, :class:`IntFlag`, is also "
"based on :class:`int`.  The difference being :class:`IntFlag` members can be "
"combined using the bitwise operators (&, \\|, ^, ~) and the result is still "
"an :class:`IntFlag` member.  However, as the name implies, :class:`IntFlag` "
"members also subclass :class:`int` and can be used wherever an :class:`int` "
"is used.  Any operation on an :class:`IntFlag` member besides the bit-wise "
"operations will lose the :class:`IntFlag` membership."
msgstr ""
"La siguiente variación de :class:`Enum` proporcionada, :class:`IntFlag`, "
"también se basa en :class:`int`. La diferencia es que los miembros :class:"
"`IntFlag` se pueden combinar usando los operadores (&, \\|, ^, ~) y el "
"resultado es un miembro :class:`IntFlag`. Sin embargo, como su nombre lo "
"indica, los miembros de :class:`IntFlag` también son subclase :class:`int` y "
"pueden usarse siempre que :class:`int` se use. Cualquier operación en un "
"miembro :class:`IntFlag` además de las operaciones de bit perderán la "
"membresía :class:`IntFlag`."

#: ../Doc/library/enum.rst:607
msgid "Sample :class:`IntFlag` class::"
msgstr "Clase muestra :class:`IntFlag`::"

#: ../Doc/library/enum.rst:623
msgid "It is also possible to name the combinations::"
msgstr "También es posible nombrar las combinaciones::"

#: ../Doc/library/enum.rst:635
msgid ""
"Another important difference between :class:`IntFlag` and :class:`Enum` is "
"that if no flags are set (the value is 0), its boolean evaluation is :data:"
"`False`::"
msgstr ""
"Otra diferencia importante entre :class:`IntFlag` y :class:`Enum` es que si "
"no hay banderas establecidas (el valor es 0), su evaluación booleana es :"
"data:`False`::"

#: ../Doc/library/enum.rst:643
msgid ""
"Because :class:`IntFlag` members are also subclasses of :class:`int` they "
"can be combined with them::"
msgstr ""
"Porque los miembros :class:`IntFlag` también son subclases de :class:`int` "
"se pueden combinar con ellos::"

#: ../Doc/library/enum.rst:651
msgid "Flag"
msgstr "Bandera"

#: ../Doc/library/enum.rst:653
msgid ""
"The last variation is :class:`Flag`.  Like :class:`IntFlag`, :class:`Flag` "
"members can be combined using the bitwise operators (&, \\|, ^, ~).  Unlike :"
"class:`IntFlag`, they cannot be combined with, nor compared against, any "
"other :class:`Flag` enumeration, nor :class:`int`.  While it is possible to "
"specify the values directly it is recommended to use :class:`auto` as the "
"value and let :class:`Flag` select an appropriate value."
msgstr ""
"La última variación es :class:`Flag`. Al igual que :class:`IntFlag`, :class:"
"`Flag` los miembros se pueden combinar usando los operadores (&, \\|, ^, ~). "
"A diferencia de :class:`IntFlag`, no pueden combinar ni comparar con ninguna "
"otra enumeración :class:`Flag`, ni con :class:`int`. Es posible especificar "
"los valores directamente, se recomienda usar :class:`auto` como el valor y "
"dejar que :class:`Flag` seleccione el valor apropiado."

#: ../Doc/library/enum.rst:662
msgid ""
"Like :class:`IntFlag`, if a combination of :class:`Flag` members results in "
"no flags being set, the boolean evaluation is :data:`False`::"
msgstr ""
"Al igual que :class:`IntFlag`, si una combinación de miembros :class:`Flag` "
"resultan en que no se establezcan banderas, la evaluación booleana es :data:"
"`False`::"

#: ../Doc/library/enum.rst:676
msgid ""
"Individual flags should have values that are powers of two (1, 2, 4, "
"8, ...), while combinations of flags won't::"
msgstr ""
"Las banderas individuales deben tener valores que sean potencias de dos (1, "
"2, 4, 8, …), mientras que las combinaciones de banderas no::"

#: ../Doc/library/enum.rst:688
msgid ""
"Giving a name to the \"no flags set\" condition does not change its boolean "
"value::"
msgstr ""
"Dar un nombre a la condición \"sin banderas establecidas\" no cambia su "
"valor booleano::"

#: ../Doc/library/enum.rst:704
msgid ""
"For the majority of new code, :class:`Enum` and :class:`Flag` are strongly "
"recommended, since :class:`IntEnum` and :class:`IntFlag` break some semantic "
"promises of an enumeration (by being comparable to integers, and thus by "
"transitivity to other unrelated enumerations).  :class:`IntEnum` and :class:"
"`IntFlag` should be used only in cases where :class:`Enum` and :class:`Flag` "
"will not do; for example, when integer constants are replaced with "
"enumerations, or for interoperability with other systems."
msgstr ""
"Para la mayoría del código nuevo, :class:`Enum` y :class:`Flag` son muy "
"recomendables, ya que :class:`IntEnum` y :class:`IntFlag` rompen algunas "
"promesas semánticas de una enumeración (al ser comparables con enteros, y "
"por transitividad a otras enumeraciones no relacionadas). :class:`IntEnum` "
"y :class:`IntFlag` deben usarse solo en casos donde :class:`Enum` y :class:"
"`Flag` no son suficientes: por ejemplo, cuando las constantes enteras se "
"reemplazan por enumeraciones, o por interoperabilidad con otros sistemas."

#: ../Doc/library/enum.rst:714
msgid "Others"
msgstr "Otros"

#: ../Doc/library/enum.rst:716
msgid ""
"While :class:`IntEnum` is part of the :mod:`enum` module, it would be very "
"simple to implement independently::"
msgstr ""
"Mientras que :class:`IntEnum` es parte del módulo :mod:`enum`, sería muy "
"simple de implementar de forma independiente::"

#: ../Doc/library/enum.rst:722
msgid ""
"This demonstrates how similar derived enumerations can be defined; for "
"example a :class:`StrEnum` that mixes in :class:`str` instead of :class:"
"`int`."
msgstr ""
"Esto demuestra que similares pueden ser las enumeraciones derivadas; por "
"ejemplo una :class:`StrEnum` que se mezcla en :class:`str` en lugar de :"
"class:`int`."

#: ../Doc/library/enum.rst:725
msgid "Some rules:"
msgstr "Algunas reglas:"

#: ../Doc/library/enum.rst:727
msgid ""
"When subclassing :class:`Enum`, mix-in types must appear before :class:"
"`Enum` itself in the sequence of bases, as in the :class:`IntEnum` example "
"above."
msgstr ""
"Al subclasificar :class:`Enum`, los tipos mixtos deben aparecer antes :class:"
"`Enum` en la secuencia de bases, como en el ejemplo anterior :class:"
"`IntEnum`."

#: ../Doc/library/enum.rst:730
msgid ""
"While :class:`Enum` can have members of any type, once you mix in an "
"additional type, all the members must have values of that type, e.g. :class:"
"`int` above.  This restriction does not apply to mix-ins which only add "
"methods and don't specify another data type such as :class:`int` or :class:"
"`str`."
msgstr ""
"Mientras que :class:`Enum` puede tener miembros de cualquier tipo, una vez "
"que se mezcle tipos adicionales, todos los miembros deben de tener los "
"valores de ese tipo, ej. :class:`int` de arriba. Esta restricción no se "
"aplica a las mezclas que solo agregan métodos y no especifican otro tipo de "
"datos como :class:`int` o :class:`str`."

#: ../Doc/library/enum.rst:735
msgid ""
"When another data type is mixed in, the :attr:`value` attribute is *not the "
"same* as the enum member itself, although it is equivalent and will compare "
"equal."
msgstr ""
"Cuando se mezcla otro tipo de datos, el atributo :attr:`value` *no es el "
"mismo* que el mismo miembro enum, aunque es equivalente y se comparará igual."

#: ../Doc/library/enum.rst:738
#, python-format
msgid ""
"%-style formatting:  `%s` and `%r` call the :class:`Enum` class's :meth:"
"`__str__` and :meth:`__repr__` respectively; other codes (such as `%i` or `"
"%h` for IntEnum) treat the enum member as its mixed-in type."
msgstr ""
"Formato %-style: `%s` y `%r` llaman, respectivamente, a :meth:`__str__` y :"
"meth:`__repr__` de la clase :class:`Enum`; otros códigos (como `&i` o `%h` "
"para IntEnum) tratan al miembro enum como su tipo mixto."

#: ../Doc/library/enum.rst:741
msgid ""
":ref:`Formatted string literals <f-strings>`, :meth:`str.format`, and :func:"
"`format` will use the mixed-in type's :meth:`__format__`.  If the :class:"
"`Enum` class's :func:`str` or :func:`repr` is desired, use the `!s` or `!r` "
"format codes."
msgstr ""
":ref:`Formatted string literals <f-strings>`, :meth:`str.format`, y :func:"
"`format` usará el tipo mixto :meth:`__format__`. Si desea la :func:`str` de "
"la clase :class:`Enum` o :func:`repr`, use los códigos `!s` o `!r`."

#: ../Doc/library/enum.rst:747
msgid "When to use :meth:`__new__` vs. :meth:`__init__`"
msgstr "Cuándo usar :meth:`__new__` contra :meth:`__init__`"

#: ../Doc/library/enum.rst:749
msgid ""
":meth:`__new__` must be used whenever you want to customize the actual value "
"of the :class:`Enum` member.  Any other modifications may go in either :meth:"
"`__new__` or :meth:`__init__`, with :meth:`__init__` being preferred."
msgstr ""
":meth:`__new__` debe usarse siempre que desee personalizar el valor del "
"miembro real :class:`Emum`. Cualquier otra modificación puede ir en :meth:"
"`__new__` o :meth:`__init__`, prefiriendo siempre :meth:`__init__`."

#: ../Doc/library/enum.rst:753
msgid ""
"For example, if you want to pass several items to the constructor, but only "
"want one of them to be the value::"
msgstr ""
"Por ejemplo, si desea pasar varios elementos al constructor, pero solo desea "
"que uno de ellos sea el valor::"

#: ../Doc/library/enum.rst:779
msgid "Interesting examples"
msgstr "Ejemplos interesantes"

#: ../Doc/library/enum.rst:781
msgid ""
"While :class:`Enum`, :class:`IntEnum`, :class:`IntFlag`, and :class:`Flag` "
"are expected to cover the majority of use-cases, they cannot cover them "
"all.  Here are recipes for some different types of enumerations that can be "
"used directly, or as examples for creating one's own."
msgstr ""
"Si bien se espera que :class:`Enum`, :class:`IntEnum`, :class:`IntFlag`, y :"
"class:`Flag` cubran la mayoría de los casos de uso, no pueden cubrirlos a "
"todos. Aquí hay recetas para algunos tipos diferentes de enumeraciones que "
"puede usarse directamente, o como ejemplos para crear los propios."

#: ../Doc/library/enum.rst:788
msgid "Omitting values"
msgstr "Omitir valores"

#: ../Doc/library/enum.rst:790
msgid ""
"In many use-cases one doesn't care what the actual value of an enumeration "
"is. There are several ways to define this type of simple enumeration:"
msgstr ""
"En muchos casos de uso, a uno no le importa cuál es el valor real de una "
"enumeración. Hay varias formas de definir este tipo de enumeración simple:"

#: ../Doc/library/enum.rst:793
msgid "use instances of :class:`auto` for the value"
msgstr "use instancias de :class:`auto` para el valor"

#: ../Doc/library/enum.rst:794
msgid "use instances of :class:`object` as the value"
msgstr "use instancias de :class:`object` como el valor"

#: ../Doc/library/enum.rst:795
msgid "use a descriptive string as the value"
msgstr "use a descriptive string as the value"

#: ../Doc/library/enum.rst:796
msgid ""
"use a tuple as the value and a custom :meth:`__new__` to replace the tuple "
"with an :class:`int` value"
msgstr ""
"use una tupla como valor y un :meth:`__new__` personalizado para reemplazar "
"la tupla con un valor :class:`int`"

#: ../Doc/library/enum.rst:799
msgid ""
"Using any of these methods signifies to the user that these values are not "
"important, and also enables one to add, remove, or reorder members without "
"having to renumber the remaining members."
msgstr ""
"El uso de cualquiera de estos métodos significa para el usuario que estos "
"valores no son importantes y también permite agregar, eliminar o reordenar "
"miembros sin tener que volver a numerar los miembros restantes."

#: ../Doc/library/enum.rst:803
msgid ""
"Whichever method you choose, you should provide a :meth:`repr` that also "
"hides the (unimportant) value::"
msgstr ""
"Cualquiera que sea el método que elijas, debe proporcionar un :meth:`repr` "
"que también oculte el valor (sin importancia)::"

#: ../Doc/library/enum.rst:813
msgid "Using :class:`auto`"
msgstr "Usando :class:`auto`"

#: ../Doc/library/enum.rst:815
msgid "Using :class:`auto` would look like::"
msgstr "Usando :class:`auto` se vería como::"

#: ../Doc/library/enum.rst:827
msgid "Using :class:`object`"
msgstr "Usando :class:`object`"

#: ../Doc/library/enum.rst:829
msgid "Using :class:`object` would look like::"
msgstr "Usando :class:`object` se vería como::"

#: ../Doc/library/enum.rst:841
msgid "Using a descriptive string"
msgstr "Usando una cadena descriptiva"

#: ../Doc/library/enum.rst:843
msgid "Using a string as the value would look like::"
msgstr "Usar una cadena como valor se vería así::"

#: ../Doc/library/enum.rst:857
msgid "Using a custom :meth:`__new__`"
msgstr "Usando  :meth:`__new__` personalizados"

#: ../Doc/library/enum.rst:859
msgid "Using an auto-numbering :meth:`__new__` would look like::"
msgstr "Usando una numeración automática :meth:`__new__` se vería como::"

#: ../Doc/library/enum.rst:881
msgid ""
"The :meth:`__new__` method, if defined, is used during creation of the Enum "
"members; it is then replaced by Enum's :meth:`__new__` which is used after "
"class creation for lookup of existing members."
msgstr ""
"El método :meth:`__new__`, está definido, se usa durante la creación de los "
"miembros Enum; se remplaza entonces por el Enum :meth:`__new__` que se "
"utiliza después de la creación de la clase para buscar miembros existentes."

#: ../Doc/library/enum.rst:887
msgid "OrderedEnum"
msgstr "OrderedEnum"

#: ../Doc/library/enum.rst:889
msgid ""
"An ordered enumeration that is not based on :class:`IntEnum` and so "
"maintains the normal :class:`Enum` invariants (such as not being comparable "
"to other enumerations)::"
msgstr ""
"Una enumeración ordenada que no se basa en :class:`IntEnum` y, por lo tanto "
"mantiene los invariantes normales de :class:`Enum` (como no ser comparables "
"con otras enumeraciones)::"

#: ../Doc/library/enum.rst:923
msgid "DuplicateFreeEnum"
msgstr "DuplicateFreeEnum"

#: ../Doc/library/enum.rst:925
msgid ""
"Raises an error if a duplicate member name is found instead of creating an "
"alias::"
msgstr ""
"Levanta un error si se encuentra un nombre de miembro duplicado en lugar de "
"crear un alias::"

#: ../Doc/library/enum.rst:950
msgid ""
"This is a useful example for subclassing Enum to add or change other "
"behaviors as well as disallowing aliases.  If the only desired change is "
"disallowing aliases, the :func:`unique` decorator can be used instead."
msgstr ""
"Este es un ejemplo útil para subclasificar Enum para agregar o cambiar otros "
"comportamientos, así como no permitir alias. Si el único cambio deseado es "
"no permitir alias, el decorador :func:`unique` puede usarse en su lugar."

#: ../Doc/library/enum.rst:956
msgid "Planet"
msgstr "Planeta"

#: ../Doc/library/enum.rst:958
msgid ""
"If :meth:`__new__` or :meth:`__init__` is defined the value of the enum "
"member will be passed to those methods::"
msgstr ""
"Si :meth:`__new__` o :meth:`__init__` se definen el valor del miembro enum "
"se pasará a estos métodos::"

#: ../Doc/library/enum.rst:986
msgid "TimePeriod"
msgstr "Periodo de tiempo"

#: ../Doc/library/enum.rst:988
msgid "An example to show the :attr:`_ignore_` attribute in use::"
msgstr "Un ejemplo para mostrar el atributo :attr:`ignore` en uso::"

#: ../Doc/library/enum.rst:1005
msgid "How are Enums different?"
msgstr "¿Cómo son diferentes las Enums?"

#: ../Doc/library/enum.rst:1007
msgid ""
"Enums have a custom metaclass that affects many aspects of both derived Enum "
"classes and their instances (members)."
msgstr ""
"Los Enums tienen una metaclase personalizada que afecta  muchos aspectos, "
"tanto de las clases derivadas Enum como de sus instancias (miembros)."

#: ../Doc/library/enum.rst:1012
msgid "Enum Classes"
msgstr "Clases Enum"

#: ../Doc/library/enum.rst:1014
msgid ""
"The :class:`EnumMeta` metaclass is responsible for providing the :meth:"
"`__contains__`, :meth:`__dir__`, :meth:`__iter__` and other methods that "
"allow one to do things with an :class:`Enum` class that fail on a typical "
"class, such as `list(Color)` or `some_enum_var in Color`.  :class:`EnumMeta` "
"is responsible for ensuring that various other methods on the final :class:"
"`Enum` class are correct (such as :meth:`__new__`, :meth:`__getnewargs__`, :"
"meth:`__str__` and :meth:`__repr__`)."
msgstr ""
"La meta clase :class:`EnumMeta` es responsable de proveer los métodos :meth:"
"`__contains__`, :meth:`__dir__`, :meth:`__iter__` y cualquier otro que "
"permita hacer cosas con una clase :class:`Enum` que falla en una clase "
"típica, como `list(Color)` o `some_enum_var in Color`. :class:`EnumMeta` es "
"responsable de asegurar que los otro varios métodos en la clase final :class:"
"`Enum` sean correctos (como :meth:`__new__`, :meth:`__getnewargs__`, :meth:"
"`__str__` y :meth:`__repr__`)."

#: ../Doc/library/enum.rst:1024
msgid "Enum Members (aka instances)"
msgstr "Miembros de Enum (también conocidos como instancias)"

#: ../Doc/library/enum.rst:1026
msgid ""
"The most interesting thing about Enum members is that they are singletons. :"
"class:`EnumMeta` creates them all while it is creating the :class:`Enum` "
"class itself, and then puts a custom :meth:`__new__` in place to ensure that "
"no new ones are ever instantiated by returning only the existing member "
"instances."
msgstr ""
"Lo más interesante de los miembros de Enum es que son únicos. :class:`Enum` "
"los crea todos mientras está creando la clase :class:`Enum` misma, y después "
"un :meth:`__new__` personalizado para garantizar que nunca se creen "
"instancias nuevas retornando solo las instancias de miembros existentes."

#: ../Doc/library/enum.rst:1034
msgid "Finer Points"
msgstr "Puntos más finos"

#: ../Doc/library/enum.rst:1037
msgid "Supported ``__dunder__`` names"
msgstr "Nombres soportados ``__dunder__``"

#: ../Doc/library/enum.rst:1039
msgid ""
":attr:`__members__` is a read-only ordered mapping of ``member_name``:"
"``member`` items.  It is only available on the class."
msgstr ""
":attr:`__members__` es una asignación ordenada de solo lectura de artículos "
"``member_name``:``member``. Solo está disponible en la clase."

#: ../Doc/library/enum.rst:1042
msgid ""
":meth:`__new__`, if specified, must create and return the enum members; it "
"is also a very good idea to set the member's :attr:`_value_` appropriately.  "
"Once all the members are created it is no longer used."
msgstr ""
":meth:`__new__`, si se especifica, debe crear y retornar los miembros de "
"enumeración; también es una muy buena idea establecer el :attr:`_value_` del "
"miembro apropiadamente. Una vez que se crean todos los miembros, ya no se "
"usa."

#: ../Doc/library/enum.rst:1048
msgid "Supported ``_sunder_`` names"
msgstr "Nombres ``_sunder_`` compatibles"

#: ../Doc/library/enum.rst:1050
msgid "``_name_`` -- name of the member"
msgstr "``_name_``— nombre del miembro"

#: ../Doc/library/enum.rst:1051
msgid ""
"``_value_`` -- value of the member; can be set / modified in ``__new__``"
msgstr ""
"``_value_`` — valor del miembr0; se puede definir / modificar en ``__new__``"

#: ../Doc/library/enum.rst:1053
msgid ""
"``_missing_`` -- a lookup function used when a value is not found; may be "
"overridden"
msgstr ""
"``_missing_`` — una función de búsqueda utilizada cuando no se encuentra un "
"valor; puede ser anulado"

#: ../Doc/library/enum.rst:1055
msgid ""
"``_ignore_`` -- a list of names, either as a :func:`list` or a :func:`str`, "
"that will not be transformed into members, and will be removed from the "
"final class"
msgstr ""
"``_ignore_`` —  una lista de nombres, ya sea como una :func:`list` o una :"
"func:`str` que no será transformada en miembros, y que se eliminará de la "
"clase final"

#: ../Doc/library/enum.rst:1058
msgid ""
"``_order_`` -- used in Python 2/3 code to ensure member order is consistent "
"(class attribute, removed during class creation)"
msgstr ""
"``_order_`` — usado en código Python 2/3 para asegurar que el orden de los "
"miembros sea consistente (atributo de clase, eliminado durante la creación "
"de la clase)"

#: ../Doc/library/enum.rst:1060
msgid ""
"``_generate_next_value_`` -- used by the `Functional API`_ and by :class:"
"`auto` to get an appropriate value for an enum member; may be overridden"
msgstr ""
"``_generate_next_value_`` — usado por la `Funcional API`_ y por :class:"
"`auto` para obtener un valor apropiado para un miembro enum; puede ser "
"anulado"

#: ../Doc/library/enum.rst:1064
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

#: ../Doc/library/enum.rst:1065
msgid "``_ignore_``"
msgstr "``_ignore_``"

#: ../Doc/library/enum.rst:1067
msgid ""
"To help keep Python 2 / Python 3 code in sync an :attr:`_order_` attribute "
"can be provided.  It will be checked against the actual order of the "
"enumeration and raise an error if the two do not match::"
msgstr ""
"Para ayudar a mantener sincronizado el código Python 2 / Python 3 se puede "
"proporcionar un atributo :attr:`_order_`. Se verificará con el orden real de "
"la enumeración y generará un error si los dos no coinciden:"

#: ../Doc/library/enum.rst:1083
msgid ""
"In Python 2 code the :attr:`_order_` attribute is necessary as definition "
"order is lost before it can be recorded."
msgstr ""
"En código Python 2 el atributo :attr:`_order_` es necesario ya que el orden "
"de definición se pierde antes de que se pueda registrar."

#: ../Doc/library/enum.rst:1087
msgid "``Enum`` member type"
msgstr "Tipo de miembro ``Enum``"

#: ../Doc/library/enum.rst:1089
msgid ""
":class:`Enum` members are instances of their :class:`Enum` class, and are "
"normally accessed as ``EnumClass.member``.  Under certain circumstances they "
"can also be accessed as ``EnumClass.member.member``, but you should never do "
"this as that lookup may fail or, worse, return something besides the :class:"
"`Enum` member you are looking for (this is another good reason to use all-"
"uppercase names for members)::"
msgstr ""
"Los miembros :class:`Enum` son instancias de su clase :class:`Enum`, y "
"normalmente se accede a ellos como ``EnumClass.member``. Bajo ciertas "
"circunstancias también se puede acceder como ``EnumClass.member.member``, "
"pero nunca se debe hacer esto ya que esa búsqueda puede fallar, o peor aún, "
"retornar algo además del miembro :class:`Enum` que está buscando (esta es "
"otra buena razón para usar solo mayúsculas en los nombres para los "
"miembros)::"

#: ../Doc/library/enum.rst:1110
msgid "Boolean value of ``Enum`` classes and members"
msgstr "Valor booleano de las clases y miembros ``Enum``"

#: ../Doc/library/enum.rst:1112
msgid ""
":class:`Enum` members that are mixed with non-:class:`Enum` types (such as :"
"class:`int`, :class:`str`, etc.) are evaluated according to the mixed-in "
"type's rules; otherwise, all members evaluate as :data:`True`.  To make your "
"own Enum's boolean evaluation depend on the member's value add the following "
"to your class::"
msgstr ""
"Lo miembros :class:`Enum` que están mezclados con tipos sin-:class:`Enum` "
"(como :class:`int`, :class:`str`, etc.) se evalúan de acuerdo con las reglas "
"de tipo mixto; de lo contrario, todos los miembros evalúan como :data:"
"`True`. Para hacer que tu propia evaluación booleana de Enum dependa del "
"valor del miembro, agregue lo siguiente a su clase::"

#: ../Doc/library/enum.rst:1121
msgid ":class:`Enum` classes always evaluate as :data:`True`."
msgstr "las clases :class:`Enum` siempre evalúan como :data:`True`."

#: ../Doc/library/enum.rst:1125
msgid "``Enum`` classes with methods"
msgstr "``Enum`` clases con métodos"

#: ../Doc/library/enum.rst:1127
msgid ""
"If you give your :class:`Enum` subclass extra methods, like the `Planet`_ "
"class above, those methods will show up in a :func:`dir` of the member, but "
"not of the class::"
msgstr ""
"Si le da a su subclase :class:`Enum` métodos adicionales, como la clase "
"`Planet`_ anterior, esos métodos aparecerán en una :func:`dir` del miembro, "
"pero no de la clase ::"

#: ../Doc/library/enum.rst:1138
msgid "Combining members of ``Flag``"
msgstr "Combinando miembros de``Flag``"

#: ../Doc/library/enum.rst:1140
msgid ""
"If a combination of Flag members is not named, the :func:`repr` will include "
"all named flags and all named combinations of flags that are in the value::"
msgstr ""
"Si no se nombra una combinación de miembros de Flag, el :func:`repr` "
"incluirá todos los flags con nombre y todas las combinaciones de flags con "
"nombre que estén en el valor ::"
