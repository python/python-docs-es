# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-25 19:47+0200\n"
"PO-Revision-Date: 2021-08-07 18:56+0200\n"
"Last-Translator: Cristián Maureira-Fredes <cmaureirafredes@gmail.com>\n"
"Language-Team: python-doc-es\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.10.3\n"

#: ../Doc/library/enum.rst:2
msgid ":mod:`enum` --- Support for enumerations"
msgstr ":mod:`enum` — Soporte para enumeraciones"

#: ../Doc/library/enum.rst:14
msgid "**Source code:** :source:`Lib/enum.py`"
msgstr "**Código fuente:** :source:`Lib/enum.py`"

#: ../Doc/library/enum.rst:18
msgid ""
"This page contains the API reference information. For tutorial information "
"and discussion of more advanced topics, see"
msgstr ""
"Esta página contiene la información de referencia de la API. Para obtener "
"información sobre tutoriales y debates sobre temas más avanzados, consulte"

#: ../Doc/library/enum.rst:21
msgid ":ref:`Basic Tutorial <enum-basic-tutorial>`"
msgstr ":ref:`Tutorial básico <enum-basic-tutorial>`"

#: ../Doc/library/enum.rst:22
msgid ":ref:`Advanced Tutorial <enum-advanced-tutorial>`"
msgstr ":ref:`Tutorial avanzado <enum-advanced-tutorial>`"

#: ../Doc/library/enum.rst:23
msgid ":ref:`Enum Cookbook <enum-cookbook>`"
msgstr ":ref:`Libro de recetas Enum <enum-cookbook>`"

#: ../Doc/library/enum.rst:27
msgid "An enumeration:"
msgstr "Una enumeración:"

#: ../Doc/library/enum.rst:29
msgid "is a set of symbolic names (members) bound to unique values"
msgstr ""
"es un conjunto de nombres simbólicos (miembros) vinculados a valores únicos"

#: ../Doc/library/enum.rst:30
msgid "can be iterated over to return its members in definition order"
msgstr "se puede iterar para retornar sus miembros en orden de definición"

#: ../Doc/library/enum.rst:31
msgid "uses *call* syntax to return members by value"
msgstr "usa la sintaxis *call* para retornar miembros por valor"

#: ../Doc/library/enum.rst:32
msgid "uses *index* syntax to return members by name"
msgstr "usa la sintaxis *index* para retornar miembros por nombre"

#: ../Doc/library/enum.rst:34
msgid ""
"Enumerations are created either by using :keyword:`class` syntax, or by "
"using function-call syntax::"
msgstr ""
"Las enumeraciones se crean mediante la sintaxis :keyword:`class` o mediante "
"la sintaxis de llamadas a funciones:"

#: ../Doc/library/enum.rst:48
msgid ""
"Even though we can use :keyword:`class` syntax to create Enums, Enums are "
"not normal Python classes.  See :ref:`How are Enums different? <enum-class-"
"differences>` for more details."
msgstr ""
"Aunque podemos usar la sintaxis :keyword:`class` para crear enumeraciones, "
"las enumeraciones no son clases normales de Python. Ver :ref:`¿En qué se "
"diferencian las enumeraciones? <enum-class-differences>` para más detalles."

#: ../Doc/library/enum.rst:52
msgid "Nomenclature"
msgstr "Nomenclatura"

#: ../Doc/library/enum.rst:54
msgid "The class :class:`Color` is an *enumeration* (or *enum*)"
msgstr "La clase :class:`Color` es una *enumeración* (o *enum*)"

#: ../Doc/library/enum.rst:55
msgid ""
"The attributes :attr:`Color.RED`, :attr:`Color.GREEN`, etc., are "
"*enumeration members* (or *members*) and are functionally constants."
msgstr ""
"Los atributos :attr:`Color.RED`, :attr:`Color.GREEN`, etc., son "
"*enumeraciones miembros* (o *miembros*) y son funcionalmente constantes."

#: ../Doc/library/enum.rst:57
msgid ""
"The enum members have *names* and *values* (the name of :attr:`Color.RED` is "
"``RED``, the value of :attr:`Color.BLUE` is ``3``, etc.)"
msgstr ""
"Los miembros de la enumeración tienen *nombres* y *valores* (el nombre de :"
"attr:`Color.RED` es ``ROJO``, el valor de :attr:`Color.BLUE` es ``3``, etc. )"

#: ../Doc/library/enum.rst:64
msgid "Module Contents"
msgstr "Contenido del Módulo"

#: ../Doc/library/enum.rst:66
msgid ":class:`EnumType`"
msgstr ":class:`EnumType`"

#: ../Doc/library/enum.rst:68
msgid "The ``type`` for Enum and its subclasses."
msgstr "El ``type`` para Enum y sus subclases."

#: ../Doc/library/enum.rst:70
msgid ":class:`Enum`"
msgstr ":class:`Enum`"

#: ../Doc/library/enum.rst:72
msgid "Base class for creating enumerated constants."
msgstr "Clase base para crear constantes enumeradas."

#: ../Doc/library/enum.rst:74
msgid ":class:`IntEnum`"
msgstr ":class:`IntEnum`"

#: ../Doc/library/enum.rst:76
msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`int`. (`Notes`_)"
msgstr ""
"Clase base para crear constantes enumeradas que también son subclases de :"
"class:`int`. (`Notes`_)"

#: ../Doc/library/enum.rst:79
msgid ":class:`StrEnum`"
msgstr ":class:`StrEnum`"

#: ../Doc/library/enum.rst:81
msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`str`. (`Notes`_)"
msgstr ""
"Clase base para crear constantes enumeradas que también son subclases de :"
"class:`str`. (`Notes`_)"

#: ../Doc/library/enum.rst:84
msgid ":class:`Flag`"
msgstr ":class:`Flag`"

#: ../Doc/library/enum.rst:86
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operations without losing their :class:`Flag` membership."
msgstr ""
"Clase base para crear constantes enumeradas que se pueden combinar "
"utilizando las operaciones *bitwise* sin perder su membresía :class:`Flag`."

#: ../Doc/library/enum.rst:89
msgid ":class:`IntFlag`"
msgstr ":class:`IntFlag`"

#: ../Doc/library/enum.rst:91
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operators without losing their :class:`IntFlag` membership. :class:"
"`IntFlag` members are also subclasses of :class:`int`. (`Notes`_)"
msgstr ""
"Clase base para crear constantes enumeradas que se pueden combinar mediante "
"los operadores bit a bit sin perder su pertenencia a :class:`IntFlag`. Los "
"miembros :class:`IntFlag` también son subclases de :class:`int`. (`Notes`_)"

#: ../Doc/library/enum.rst:95
msgid ":class:`ReprEnum`"
msgstr ":class:`ReprEnum`"

#: ../Doc/library/enum.rst:97
msgid ""
"Used by :class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag` to keep "
"the :class:`str() <str>` of the mixed-in type."
msgstr ""
"Usado por :class:`IntEnum`, :class:`StrEnum` y :class:`IntFlag` para "
"mantener el :class:`str() <str>` del tipo mixto."

#: ../Doc/library/enum.rst:100
msgid ":class:`EnumCheck`"
msgstr ":class:`EnumCheck`"

#: ../Doc/library/enum.rst:102
msgid ""
"An enumeration with the values ``CONTINUOUS``, ``NAMED_FLAGS``, and "
"``UNIQUE``, for use with :func:`verify` to ensure various constraints are "
"met by a given enumeration."
msgstr ""
"Una enumeración con los valores ``CONTINUOUS``, ``NAMED_FLAGS`` y "
"``UNIQUE``, para usar con :func:`verify` para garantizar que una enumeración "
"determinada cumpla varias restricciones."

#: ../Doc/library/enum.rst:106
msgid ":class:`FlagBoundary`"
msgstr ":class:`FlagBoundary`"

#: ../Doc/library/enum.rst:108
msgid ""
"An enumeration with the values ``STRICT``, ``CONFORM``, ``EJECT``, and "
"``KEEP`` which allows for more fine-grained control over how invalid values "
"are dealt with in an enumeration."
msgstr ""
"Una enumeración con los valores ``STRICT``, ``CONFORM``, ``EJECT`` y "
"``KEEP`` que permite un control más detallado sobre cómo se tratan los "
"valores no válidos en una enumeración."

#: ../Doc/library/enum.rst:112
msgid ":class:`auto`"
msgstr ":class:`auto`"

#: ../Doc/library/enum.rst:114
msgid ""
"Instances are replaced with an appropriate value for Enum members. :class:"
"`StrEnum` defaults to the lower-cased version of the member name, while "
"other Enums default to 1 and increase from there."
msgstr ""
"Las instancias se reemplazan con un valor apropiado para los miembros de "
"Enum. :class:`StrEnum` usa de manera predeterminada la versión en minúsculas "
"del nombre del miembro, mientras que otras enumeraciones tienen el valor "
"predeterminado de 1 y aumentan a partir de ahí."

#: ../Doc/library/enum.rst:118
msgid ":func:`~enum.property`"
msgstr ":func:`~enum.property`"

#: ../Doc/library/enum.rst:120
msgid ""
"Allows :class:`Enum` members to have attributes without conflicting with "
"member names."
msgstr ""
"Permite que los miembros :class:`Enum` tengan atributos sin entrar en "
"conflicto con los nombres de los miembros."

#: ../Doc/library/enum.rst:123
msgid ":func:`unique`"
msgstr ":func:`unique`"

#: ../Doc/library/enum.rst:125
msgid ""
"Enum class decorator that ensures only one name is bound to any one value."
msgstr ""
"El decorador de clase Enum que garantiza que solo un nombre esté vinculado a "
"cualquier valor."

#: ../Doc/library/enum.rst:127
msgid ":func:`verify`"
msgstr ":func:`verify`"

#: ../Doc/library/enum.rst:129
msgid ""
"Enum class decorator that checks user-selectable constraints on an "
"enumeration."
msgstr ""
"Decorador de clase Enum que verifica las restricciones seleccionables por el "
"usuario en una enumeración."

#: ../Doc/library/enum.rst:132
msgid ":func:`member`"
msgstr ":func:`member`"

#: ../Doc/library/enum.rst:134
msgid "Make ``obj`` a member.  Can be used as a decorator."
msgstr "Convierta a ``obj`` en miembro. Se puede utilizar como decorador."

#: ../Doc/library/enum.rst:136
msgid ":func:`nonmember`"
msgstr ":func:`nonmember`"

#: ../Doc/library/enum.rst:138
msgid "Do not make ``obj`` a member.  Can be used as a decorator."
msgstr "No convierta a ``obj`` en miembro. Se puede utilizar como decorador."

#: ../Doc/library/enum.rst:140
msgid ":func:`global_enum`"
msgstr ":func:`global_enum`"

#: ../Doc/library/enum.rst:142
msgid ""
"Modify the :class:`str() <str>` and :func:`repr` of an enum to show its "
"members as belonging to the module instead of its class. Should only be used "
"if the enum members will be exported to the module global namespace."
msgstr ""
"Modifique :class:`str() <str>` y :func:`repr` de una enumeración para "
"mostrar sus miembros como pertenecientes al módulo en lugar de a su clase. "
"Solo debe usarse si los miembros de la enumeración se exportarán al espacio "
"de nombres global del módulo."

#: ../Doc/library/enum.rst:147
msgid ":func:`show_flag_values`"
msgstr ":func:`show_flag_values`"

#: ../Doc/library/enum.rst:149
msgid "Return a list of all power-of-two integers contained in a flag."
msgstr ""
"Retorna una lista de todos los enteros de potencia de dos contenidos en una "
"bandera."

#: ../Doc/library/enum.rst:152
msgid "``Flag``, ``IntFlag``, ``auto``"
msgstr "``Flag``, ``IntFlag``, ``auto``"

#: ../Doc/library/enum.rst:153
msgid ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"
msgstr ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"

#: ../Doc/library/enum.rst:158
msgid "Data Types"
msgstr "Tipos de datos"

#: ../Doc/library/enum.rst:163
msgid ""
"*EnumType* is the :term:`metaclass` for *enum* enumerations.  It is possible "
"to subclass *EnumType* -- see :ref:`Subclassing EnumType <enumtype-"
"examples>` for details."
msgstr ""
"*EnumType* es el :term:`metaclass` para enumeraciones *enum*. Es posible "
"subclasificar *EnumType*; consulte :ref:`Subclassing EnumType <enumtype-"
"examples>` para obtener más detalles."

#: ../Doc/library/enum.rst:167
msgid ""
"*EnumType* is responsible for setting the correct :meth:`__repr__`, :meth:"
"`__str__`, :meth:`__format__`, and :meth:`__reduce__` methods on the final "
"*enum*, as well as creating the enum members, properly handling duplicates, "
"providing iteration over the enum class, etc."
msgstr ""
"*EnumType* es responsable de configurar los métodos :meth:`__repr__`, :meth:"
"`__str__`, :meth:`__format__` y :meth:`__reduce__` correctos en el *enum* "
"final, así como de crear los miembros de enumeración, manejar correctamente "
"los duplicados, proporcionar iteración sobre la clase de enumeración, etc."

#: ../Doc/library/enum.rst:174
msgid "Returns ``True`` if member belongs to the ``cls``::"
msgstr "Retorna ``True`` si el miembro pertenece a ``cls``::"

#: ../Doc/library/enum.rst:182
msgid ""
"In Python 3.12 it will be possible to check for member values and not just "
"members; until then, a ``TypeError`` will be raised if a non-Enum-member is "
"used in a containment check."
msgstr ""
"En Python 3.12, será posible verificar los valores de los miembros y no solo "
"los miembros; hasta entonces, se generará un ``TypeError`` si se usa un "
"miembro que no sea Enum en una verificación de contención."

#: ../Doc/library/enum.rst:188
msgid ""
"Returns ``['__class__', '__doc__', '__members__', '__module__']`` and the "
"names of the members in *cls*::"
msgstr ""
"Retorna ``['__class__', '__doc__', '__members__', '__module__']`` y los "
"nombres de los miembros en *cls*::"

#: ../Doc/library/enum.rst:196
msgid ""
"Returns the Enum member in *cls* matching *name*, or raises an :exc:"
"`AttributeError`::"
msgstr ""
"Retorna el miembro Enum en *cls* que coincide con *name*, o genera un :exc:"
"`AttributeError`::"

#: ../Doc/library/enum.rst:203
msgid ""
"Returns the Enum member in *cls* matching *name*, or raises an :exc:"
"`KeyError`::"
msgstr ""
"Retorna el miembro Enum en *cls* que coincide con *name*, o genera un :exc:"
"`KeyError`::"

#: ../Doc/library/enum.rst:210
msgid "Returns each member in *cls* in definition order::"
msgstr "Retorna cada miembro en *cls* en orden de definición::"

#: ../Doc/library/enum.rst:217
msgid "Returns the number of member in *cls*::"
msgstr "Retorna el número de miembro en *cls*::"

#: ../Doc/library/enum.rst:224
msgid "Returns each member in *cls* in reverse definition order::"
msgstr "Retorna cada miembro en *cls* en orden de definición inverso:"

#: ../Doc/library/enum.rst:232
msgid "*Enum* is the base class for all *enum* enumerations."
msgstr "*Enum* es la clase base para todas las enumeraciones *enum*."

#: ../Doc/library/enum.rst:236
msgid "The name used to define the ``Enum`` member::"
msgstr "El nombre utilizado para definir el miembro ``Enum``::"

#: ../Doc/library/enum.rst:243
msgid "The value given to the ``Enum`` member::"
msgstr "El valor dado al miembro ``Enum``:"

#: ../Doc/library/enum.rst:248
msgid "Enum member values"
msgstr "Valores de miembros de Enum"

#: ../Doc/library/enum.rst:250
msgid ""
"Member values can be anything: :class:`int`, :class:`str`, etc..  If the "
"exact value is unimportant you may use :class:`auto` instances and an "
"appropriate value will be chosen for you.  Care must be taken if you mix :"
"class:`auto` with other values."
msgstr ""
"Los valores de los miembros pueden ser cualquier cosa: :class:`int`, :class:"
"`str`, etc.. Si el valor exacto no es importante, puede usar instancias :"
"class:`auto` y se elegirá un valor apropiado para usted. Se debe tener "
"cuidado si se mezcla :class:`auto` con otros valores."

#: ../Doc/library/enum.rst:257
msgid ""
"``_ignore_`` is only used during creation and is removed from the "
"enumeration once creation is complete."
msgstr ""
"``_ignore_`` solo se usa durante la creación y se elimina de la enumeración "
"una vez que se completa la creación."

#: ../Doc/library/enum.rst:260
msgid ""
"``_ignore_`` is a list of names that will not become members, and whose "
"names will also be removed from the completed enumeration.  See :ref:"
"`TimePeriod <enum-time-period>` for an example."
msgstr ""
"``_ignore_`` es una lista de nombres que no se convertirán en miembros y "
"cuyos nombres también se eliminarán de la enumeración completa. Consulte :"
"ref:`TimePeriod <enum-time-period>` para ver un ejemplo."

#: ../Doc/library/enum.rst:266
msgid "This method is called in two different ways:"
msgstr "Este método se llama de dos maneras diferentes:"

#: ../Doc/library/enum.rst:268
msgid "to look up an existing member:"
msgstr "para buscar un miembro existente:"

#: ../Doc/library/enum.rst
msgid "cls"
msgstr "cls"

#: ../Doc/library/enum.rst:270 ../Doc/library/enum.rst:275
msgid "The enum class being called."
msgstr "La clase de enumeración que se llama."

#: ../Doc/library/enum.rst
msgid "value"
msgstr "value"

#: ../Doc/library/enum.rst:271
msgid "The value to lookup."
msgstr "El valor a buscar."

#: ../Doc/library/enum.rst:273
msgid "to use the ``cls`` enum to create a new enum:"
msgstr "para usar la enumeración ``cls`` para crear una nueva enumeración:"

#: ../Doc/library/enum.rst:276
msgid "The name of the new Enum to create."
msgstr "El nombre del nuevo Enum para crear."

#: ../Doc/library/enum.rst
msgid "names"
msgstr "names"

#: ../Doc/library/enum.rst:277
msgid "The names/values of the members for the new Enum."
msgstr "Los nombres/valores de los miembros para el nuevo Enum."

#: ../Doc/library/enum.rst
msgid "module"
msgstr "module"

#: ../Doc/library/enum.rst:278
msgid "The name of the module the new Enum is created in."
msgstr "El nombre del módulo en el que se crea el nuevo Enum."

#: ../Doc/library/enum.rst
msgid "qualname"
msgstr "qualname"

#: ../Doc/library/enum.rst:279
msgid "The actual location in the module where this Enum can be found."
msgstr "La ubicación real en el módulo donde se puede encontrar este Enum."

#: ../Doc/library/enum.rst
msgid "type"
msgstr "type"

#: ../Doc/library/enum.rst:280
msgid "A mix-in type for the new Enum."
msgstr "Un tipo de mezcla para el nuevo Enum."

#: ../Doc/library/enum.rst
msgid "start"
msgstr "start"

#: ../Doc/library/enum.rst:281
msgid "The first integer value for the Enum (used by :class:`auto`)"
msgstr "El primer valor entero para Enum (usado por :class:`auto`)"

#: ../Doc/library/enum.rst
msgid "boundary"
msgstr "boundary"

#: ../Doc/library/enum.rst:282
msgid ""
"How to handle out-of-range values from bit operations (:class:`Flag` only)"
msgstr ""
"Cómo manejar valores fuera de rango de operaciones de bits (solo :class:"
"`Flag`)"

#: ../Doc/library/enum.rst:286
msgid ""
"Returns ``['__class__', '__doc__', '__module__', 'name', 'value']`` and any "
"public methods defined on *self.__class__*::"
msgstr ""
"Retorna ``['__class__', '__doc__', '__module__', 'name', 'value']`` y "
"cualquier método público definido en *self.__class__*:"

#: ../Doc/library/enum.rst
msgid "name"
msgstr "name"

#: ../Doc/library/enum.rst:306
msgid "The name of the member being defined (e.g. 'RED')."
msgstr "El nombre del miembro que se está definiendo (por ejemplo, 'RED')."

#: ../Doc/library/enum.rst:307
msgid "The start value for the Enum; the default is 1."
msgstr "El valor inicial de Enum; el valor predeterminado es 1."

#: ../Doc/library/enum.rst
msgid "count"
msgstr "count"

#: ../Doc/library/enum.rst:308
msgid "The number of members currently defined, not including this one."
msgstr "El número de miembros actualmente definidos, sin incluir este."

#: ../Doc/library/enum.rst
msgid "last_values"
msgstr "last_values"

#: ../Doc/library/enum.rst:309
msgid "A list of the previous values."
msgstr "Una lista de los valores anteriores."

#: ../Doc/library/enum.rst:311
msgid ""
"A *staticmethod* that is used to determine the next value returned by :class:"
"`auto`::"
msgstr ""
"Un *staticmethod* que se usa para determinar el siguiente valor retornado "
"por :class:`auto`:"

#: ../Doc/library/enum.rst:326
msgid ""
"A *classmethod* that is used to further configure subsequent subclasses. By "
"default, does nothing."
msgstr ""
"Un *classmethod* que se usa para configurar más subclases subsiguientes. Por "
"defecto, no hace nada."

#: ../Doc/library/enum.rst:331
msgid ""
"A *classmethod* for looking up values not found in *cls*.  By default it "
"does nothing, but can be overridden to implement custom search behavior::"
msgstr ""
"Un *classmethod* para buscar valores que no se encuentran en *cls*. De forma "
"predeterminada, no hace nada, pero se puede anular para implementar un "
"comportamiento de búsqueda personalizado:"

#: ../Doc/library/enum.rst:352
msgid ""
"Returns the string used for *repr()* calls.  By default, returns the *Enum* "
"name, member name, and value, but can be overridden::"
msgstr ""
"Retorna la cadena utilizada para las llamadas *repr()*. De forma "
"predeterminada, retorna el nombre *Enum*, el nombre del miembro y el valor, "
"pero se puede anular:"

#: ../Doc/library/enum.rst:367
msgid ""
"Returns the string used for *str()* calls.  By default, returns the *Enum* "
"name and member name, but can be overridden::"
msgstr ""
"Retorna la cadena utilizada para las llamadas *str()*. De forma "
"predeterminada, retorna el nombre *Enum* y el nombre del miembro, pero se "
"puede anular:"

#: ../Doc/library/enum.rst:381
msgid ""
"Returns the string used for *format()* and *f-string* calls.  By default, "
"returns :meth:`__str__` returns, but can be overridden::"
msgstr ""
"Retorna la cadena utilizada para las llamadas *format()* y *f-string*. De "
"forma predeterminada, retorna :meth:`__str__`, pero se puede anular:"

#: ../Doc/library/enum.rst:395
msgid ""
"Using :class:`auto` with :class:`Enum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""
"El uso de :class:`auto` con :class:`Enum` da como resultado números enteros "
"de valor creciente, comenzando con ``1``."

#: ../Doc/library/enum.rst:401
msgid ""
"*IntEnum* is the same as *Enum*, but its members are also integers and can "
"be used anywhere that an integer can be used.  If any integer operation is "
"performed with an *IntEnum* member, the resulting value loses its "
"enumeration status."
msgstr ""
"*IntEnum* es lo mismo que *Enum*, pero sus miembros también son números "
"enteros y se pueden usar en cualquier lugar donde se pueda usar un número "
"entero. Si se realiza alguna operación con enteros con un miembro *IntEnum*, "
"el valor resultante pierde su estado de enumeración."

#: ../Doc/library/enum.rst:421
msgid ""
"Using :class:`auto` with :class:`IntEnum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""
"El uso de :class:`auto` con :class:`IntEnum` da como resultado números "
"enteros de valor creciente, comenzando con ``1``."

#: ../Doc/library/enum.rst:424 ../Doc/library/enum.rst:595
msgid ""
":meth:`__str__` is now :func:`int.__str__` to better support the "
"*replacement of existing constants* use-case. :meth:`__format__` was "
"already :func:`int.__format__` for that same reason."
msgstr ""
":meth:`__str__` ahora es :func:`int.__str__` para admitir mejor el caso de "
"uso de *replacement of existing constants*. :meth:`__format__` ya era :func:"
"`int.__format__` por la misma razón."

#: ../Doc/library/enum.rst:431
msgid ""
"*StrEnum* is the same as *Enum*, but its members are also strings and can be "
"used in most of the same places that a string can be used.  The result of "
"any string operation performed on or with a *StrEnum* member is not part of "
"the enumeration."
msgstr ""
"*StrEnum* es lo mismo que *Enum*, pero sus miembros también son cadenas y se "
"pueden usar en la mayoría de los mismos lugares en los que se puede usar una "
"cadena. El resultado de cualquier operación de cadena realizada en o con un "
"miembro *StrEnum* no forma parte de la enumeración."

#: ../Doc/library/enum.rst:435
msgid ""
"There are places in the stdlib that check for an exact :class:`str` instead "
"of a :class:`str` subclass (i.e. ``type(unknown) == str`` instead of "
"``isinstance(unknown, str)``), and in those locations you will need to use "
"``str(StrEnum.member)``."
msgstr ""
"Hay lugares en stdlib que buscan un :class:`str` exacto en lugar de una "
"subclase :class:`str` (es decir, ``type(unknown) == str`` en lugar de "
"``isinstance(unknown, str)``), y en esos lugares necesitará usar "
"``str(StrEnum.member)``."

#: ../Doc/library/enum.rst:442
msgid ""
"Using :class:`auto` with :class:`StrEnum` results in the lower-cased member "
"name as the value."
msgstr ""
"El uso de :class:`auto` con :class:`StrEnum` da como resultado el nombre de "
"miembro en minúsculas como valor."

#: ../Doc/library/enum.rst:445
msgid ""
":meth:`__str__` is :func:`str.__str__` to better support the *replacement of "
"existing constants* use-case.  :meth:`__format__` is likewise :func:`str."
"__format__` for that same reason."
msgstr ""
":meth:`__str__` es :func:`str.__str__` para admitir mejor el caso de uso de "
"*replacement of existing constants*. :meth:`__format__` también es :func:"
"`str.__format__` por la misma razón."

#: ../Doc/library/enum.rst:453
msgid ""
"*Flag* members support the bitwise operators ``&`` (*AND*), ``|`` (*OR*), "
"``^`` (*XOR*), and ``~`` (*INVERT*); the results of those operators are "
"members of the enumeration."
msgstr ""
"Los miembros *Flag* admiten los operadores bit a bit ``&`` (*AND*), ``|`` "
"(*OR*), ``^`` (*XOR*) y ``~`` (*INVERT*); los resultados de esos operadores "
"son miembros de la enumeración."

#: ../Doc/library/enum.rst:459
msgid "Returns *True* if value is in self::"
msgstr "Retorna *True* si el valor está en sí mismo::"

#: ../Doc/library/enum.rst:479
msgid "Returns all contained members::"
msgstr "Retorna todos los miembros contenidos::"

#: ../Doc/library/enum.rst:488
msgid "Returns number of members in flag::"
msgstr "Retorna el número de miembros en la bandera::"

#: ../Doc/library/enum.rst:497
msgid "Returns *True* if any members in flag, *False* otherwise::"
msgstr ""
"Retorna *True* si hay algún miembro en la bandera, *False* de lo contrario:"

#: ../Doc/library/enum.rst:509
msgid "Returns current flag binary or'ed with other::"
msgstr "Retorna la bandera actual binaria o con otra:"

#: ../Doc/library/enum.rst:516
msgid "Returns current flag binary and'ed with other::"
msgstr "Retorna el binario de la bandera actual y se combina con otro::"

#: ../Doc/library/enum.rst:525
msgid "Returns current flag binary xor'ed with other::"
msgstr "Retorna la bandera actual binaria xor'ed con otra:"

#: ../Doc/library/enum.rst:534
msgid "Returns all the flags in *type(self)* that are not in self::"
msgstr "Retorna todas las banderas en *type(self)* que no están en uno mismo::"

#: ../Doc/library/enum.rst:545
msgid ""
"Function used to format any remaining unnamed numeric values.  Default is "
"the value's repr; common choices are :func:`hex` and :func:`oct`."
msgstr ""
"Función utilizada para dar formato a los valores numéricos restantes sin "
"nombre. El valor predeterminado es la repr del valor; las opciones comunes "
"son :func:`hex` y :func:`oct`."

#: ../Doc/library/enum.rst:550
msgid ""
"Using :class:`auto` with :class:`Flag` results in integers that are powers "
"of two, starting with ``1``."
msgstr ""
"El uso de :class:`auto` con :class:`Flag` da como resultado números enteros "
"que son potencias de dos, comenzando con ``1``."

#: ../Doc/library/enum.rst:553
msgid "The *repr()* of zero-valued flags has changed.  It is now::"
msgstr "El *repr()* de las banderas de valor cero ha cambiado. Esto es ahora::"

#: ../Doc/library/enum.rst:561
msgid ""
"*IntFlag* is the same as *Flag*, but its members are also integers and can "
"be used anywhere that an integer can be used."
msgstr ""
"*IntFlag* es lo mismo que *Flag*, pero sus miembros también son números "
"enteros y se pueden usar en cualquier lugar donde se pueda usar un número "
"entero."

#: ../Doc/library/enum.rst:574
msgid ""
"If any integer operation is performed with an *IntFlag* member, the result "
"is not an *IntFlag*::"
msgstr ""
"Si se realiza alguna operación con enteros con un miembro *IntFlag*, el "
"resultado no es un *IntFlag*::"

#: ../Doc/library/enum.rst:580
msgid "If a *Flag* operation is performed with an *IntFlag* member and:"
msgstr "Si se realiza una operación *Flag* con un miembro *IntFlag* y:"

#: ../Doc/library/enum.rst:582
msgid "the result is a valid *IntFlag*: an *IntFlag* is returned"
msgstr "el resultado es un *IntFlag* válido: se retorna un *IntFlag*"

#: ../Doc/library/enum.rst:583
msgid ""
"the result is not a valid *IntFlag*: the result depends on the "
"*FlagBoundary* setting"
msgstr ""
"el resultado no es un *IntFlag* válido: el resultado depende de la "
"configuración de *FlagBoundary*"

#: ../Doc/library/enum.rst:585
msgid "The *repr()* of unnamed zero-valued flags has changed.  It is now:"
msgstr ""
"El *repr()* de indicadores de valor cero sin nombre ha cambiado. Esto es "
"ahora:"

#: ../Doc/library/enum.rst:592
msgid ""
"Using :class:`auto` with :class:`IntFlag` results in integers that are "
"powers of two, starting with ``1``."
msgstr ""
"El uso de :class:`auto` con :class:`IntFlag` da como resultado números "
"enteros que son potencias de dos, comenzando con ``1``."

#: ../Doc/library/enum.rst:601
msgid ""
":class:`!ReprEum` uses the :meth:`repr() <Enum.__repr__>` of :class:`Enum`, "
"but the :class:`str() <str>` of the mixed-in data type:"
msgstr ""
":class:`!ReprEum` usa el :meth:`repr() <Enum.__repr__>` de :class:`Enum`, "
"pero el :class:`str() <str>` del tipo de datos mixto:"

#: ../Doc/library/enum.rst:604
msgid ":meth:`!int.__str__` for :class:`IntEnum` and :class:`IntFlag`"
msgstr ":meth:`!int.__str__` para :class:`IntEnum` y :class:`IntFlag`"

#: ../Doc/library/enum.rst:605
msgid ":meth:`!str.__str__` for :class:`StrEnum`"
msgstr ":meth:`!str.__str__` para :class:`StrEnum`"

#: ../Doc/library/enum.rst:607
msgid ""
"Inherit from :class:`!ReprEnum` to keep the :class:`str() <str> / :func:"
"`format` of the mixed-in data type instead of using the :class:`Enum`-"
"default :meth:`str() <Enum.__str__>`."
msgstr ""
"Heredar de :class:`!ReprEnum` para mantener :class:`str() <str> / :func:"
"`format` del tipo de datos mixto en lugar de utilizar el :class:`Enum` por "
"defecto :meth:`str() <Enum.__str__>`."

#: ../Doc/library/enum.rst:616
msgid ""
"*EnumCheck* contains the options used by the :func:`verify` decorator to "
"ensure various constraints; failed constraints result in a :exc:`ValueError`."
msgstr ""
"*EnumCheck* contiene las opciones utilizadas por el decorador :func:`verify` "
"para garantizar diversas restricciones; las restricciones fallidas dan como "
"resultado un :exc:`ValueError`."

#: ../Doc/library/enum.rst:621
msgid "Ensure that each value has only one name::"
msgstr "Asegúrese de que cada valor tenga un solo nombre:"

#: ../Doc/library/enum.rst:637
msgid ""
"Ensure that there are no missing values between the lowest-valued member and "
"the highest-valued member::"
msgstr ""
"Asegúrese de que no falten valores entre el miembro de menor valor y el "
"miembro de mayor valor::"

#: ../Doc/library/enum.rst:652
msgid ""
"Ensure that any flag groups/masks contain only named flags -- useful when "
"values are specified instead of being generated by :func:`auto`"
msgstr ""
"Asegúrese de que los grupos/máscaras de banderas contengan solo banderas con "
"nombre, lo cual es útil cuando se especifican valores en lugar de "
"generarlos :func:`auto`."

#: ../Doc/library/enum.rst:669
msgid ""
"CONTINUOUS and NAMED_FLAGS are designed to work with integer-valued members."
msgstr ""
"CONTINUOUS y NAMED_FLAGS están diseñados para funcionar con miembros con "
"valores enteros."

#: ../Doc/library/enum.rst:675
msgid ""
"*FlagBoundary* controls how out-of-range values are handled in *Flag* and "
"its subclasses."
msgstr ""
"*FlagBoundary* controla cómo se manejan los valores fuera de rango en *Flag* "
"y sus subclases."

#: ../Doc/library/enum.rst:680
msgid ""
"Out-of-range values cause a :exc:`ValueError` to be raised.  This is the "
"default for :class:`Flag`::"
msgstr ""
"Los valores fuera de rango hacen que se genere un :exc:`ValueError`. Este es "
"el valor predeterminado para :class:`Flag`::"

#: ../Doc/library/enum.rst:697
msgid ""
"Out-of-range values have invalid values removed, leaving a valid *Flag* "
"value::"
msgstr ""
"Los valores fuera de rango tienen valores no válidos eliminados, dejando un "
"valor *Flag* válido:"

#: ../Doc/library/enum.rst:710
msgid ""
"Out-of-range values lose their *Flag* membership and revert to :class:`int`. "
"This is the default for :class:`IntFlag`::"
msgstr ""
"Los valores fuera de rango pierden su pertenencia a *Flag* y vuelven a :"
"class:`int`. Este es el valor predeterminado para :class:`IntFlag`::"

#: ../Doc/library/enum.rst:723
msgid ""
"Out-of-range values are kept, and the *Flag* membership is kept.  This is "
"used for some stdlib flags:"
msgstr ""
"Se mantienen los valores fuera de rango y se mantiene la pertenencia a "
"*Flag*. Esto se usa para algunas banderas stdlib:"

#: ../Doc/library/enum.rst:739
msgid "Supported ``__dunder__`` names"
msgstr "Nombres soportados ``__dunder__``"

#: ../Doc/library/enum.rst:741
msgid ""
":attr:`__members__` is a read-only ordered mapping of ``member_name``:"
"``member`` items.  It is only available on the class."
msgstr ""
":attr:`__members__` es una asignación ordenada de solo lectura de artículos "
"``member_name``:``member``. Solo está disponible en la clase."

#: ../Doc/library/enum.rst:744
msgid ""
":meth:`__new__`, if specified, must create and return the enum members; it "
"is also a very good idea to set the member's :attr:`_value_` appropriately.  "
"Once all the members are created it is no longer used."
msgstr ""
":meth:`__new__`, si se especifica, debe crear y retornar los miembros de "
"enumeración; también es una muy buena idea establecer el :attr:`_value_` del "
"miembro apropiadamente. Una vez que se crean todos los miembros, ya no se "
"usa."

#: ../Doc/library/enum.rst:750
msgid "Supported ``_sunder_`` names"
msgstr "Nombres ``_sunder_`` compatibles"

#: ../Doc/library/enum.rst:752
msgid "``_name_`` -- name of the member"
msgstr "``_name_``— nombre del miembro"

#: ../Doc/library/enum.rst:753
msgid ""
"``_value_`` -- value of the member; can be set / modified in ``__new__``"
msgstr ""
"``_value_`` — valor del miembro; se puede definir / modificar en ``__new__``"

#: ../Doc/library/enum.rst:755
msgid ""
"``_missing_`` -- a lookup function used when a value is not found; may be "
"overridden"
msgstr ""
"``_missing_`` — una función de búsqueda utilizada cuando no se encuentra un "
"valor; puede ser anulado"

#: ../Doc/library/enum.rst:757
msgid ""
"``_ignore_`` -- a list of names, either as a :class:`list` or a :class:"
"`str`, that will not be transformed into members, and will be removed from "
"the final class"
msgstr ""
"``_ignore_`` -- una lista de nombres, ya sea como una :func:`list` o una :"
"func:`str` que no será transformada en miembros, y que se eliminará de la "
"clase final"

#: ../Doc/library/enum.rst:760
msgid ""
"``_order_`` -- used in Python 2/3 code to ensure member order is consistent "
"(class attribute, removed during class creation)"
msgstr ""
"``_order_`` — usado en código Python 2/3 para asegurar que el orden de los "
"miembros sea consistente (atributo de clase, eliminado durante la creación "
"de la clase)"

#: ../Doc/library/enum.rst:762
msgid ""
"``_generate_next_value_`` -- used to get an appropriate value for an enum "
"member; may be overridden"
msgstr ""
"``_generate_next_value_``: se usa para obtener un valor apropiado para un "
"miembro de enumeración; puede ser anulado"

#: ../Doc/library/enum.rst:767
msgid ""
"For standard :class:`Enum` classes the next value chosen is the last value "
"seen incremented by one."
msgstr ""
"Para las clases :class:`Enum` estándar, el siguiente valor elegido es el "
"último valor visto incrementado en uno."

#: ../Doc/library/enum.rst:770
msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two, regardless of the last value seen."
msgstr ""
"Para las clases :class:`Flag`, el siguiente valor elegido será la siguiente "
"potencia de dos más alta, independientemente del último valor visto."

#: ../Doc/library/enum.rst:773
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

#: ../Doc/library/enum.rst:774
msgid "``_ignore_``"
msgstr "``_ignore_``"

#: ../Doc/library/enum.rst:779
msgid "Utilities and Decorators"
msgstr "Utilidades y decoradores"

#: ../Doc/library/enum.rst:783
msgid ""
"*auto* can be used in place of a value.  If used, the *Enum* machinery will "
"call an *Enum*'s :meth:`_generate_next_value_` to get an appropriate value. "
"For *Enum* and *IntEnum* that appropriate value will be the last value plus "
"one; for *Flag* and *IntFlag* it will be the first power-of-two greater than "
"the last value; for *StrEnum* it will be the lower-cased version of the "
"member's name."
msgstr ""
"*auto* se puede utilizar en lugar de un valor. Si se usa, la maquinaria "
"*Enum* llamará a :meth:`_generate_next_value_` de *Enum* para obtener un "
"valor apropiado. Para *Enum* y *IntEnum*, ese valor apropiado será el último "
"valor más uno; para *Flag* y *IntFlag* será la primera potencia de dos mayor "
"que el último valor; para *StrEnum* será la versión en minúsculas del nombre "
"del miembro."

#: ../Doc/library/enum.rst:790
msgid ""
"``_generate_next_value_`` can be overridden to customize the values used by "
"*auto*."
msgstr ""
"``_generate_next_value_`` se puede anular para personalizar los valores "
"utilizados por *auto*."

#: ../Doc/library/enum.rst:793
msgid ""
"in 3.13 the default ``\"generate_next_value_`` will always return the "
"highest member value incremented by 1, and will fail if any member is an "
"incompatible type."
msgstr ""
"en 3.13, el ``\"generate_next_value_`` predeterminado siempre retornará el "
"valor de miembro más alto incrementado en 1 y fallará si algún miembro es de "
"un tipo incompatible."

#: ../Doc/library/enum.rst:799
msgid ""
"A decorator similar to the built-in *property*, but specifically for "
"enumerations.  It allows member attributes to have the same names as members "
"themselves."
msgstr ""
"Un decorador similar al *property* integrado, pero específico para "
"enumeraciones. Permite que los atributos de los miembros tengan los mismos "
"nombres que los propios miembros."

#: ../Doc/library/enum.rst:803
msgid ""
"the *property* and the member must be defined in separate classes; for "
"example, the *value* and *name* attributes are defined in the *Enum* class, "
"and *Enum* subclasses can define members with the names ``value`` and "
"``name``."
msgstr ""
"el *property* y el miembro deben definirse en clases separadas; por ejemplo, "
"los atributos *value* y *name* se definen en la clase *Enum* y las subclases "
"*Enum* pueden definir miembros con los nombres ``value`` y ``name``."

#: ../Doc/library/enum.rst:812
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  It searches an "
"enumeration's :attr:`__members__`, gathering any aliases it finds; if any "
"are found :exc:`ValueError` is raised with the details::"
msgstr ""
"Un decorador :keyword:`class` específicamente para enumeraciones. Busca el :"
"attr:`__members__` de una enumeración, recopilando cualquier alias que "
"encuentre; si se encuentra alguno, se genera :exc:`ValueError` con los "
"detalles:"

#: ../Doc/library/enum.rst:830
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  Members from :"
"class:`EnumCheck` are used to specify which constraints should be checked on "
"the decorated enumeration."
msgstr ""
"Un decorador :keyword:`class` específicamente para enumeraciones. Los "
"miembros de :class:`EnumCheck` se utilizan para especificar qué "
"restricciones deben verificarse en la enumeración decorada."

#: ../Doc/library/enum.rst:838
msgid "A decorator for use in enums: its target will become a member."
msgstr ""
"Un decorador para usar en enumeraciones: su objetivo se convertirá en "
"miembro."

#: ../Doc/library/enum.rst:844
msgid "A decorator for use in enums: its target will not become a member."
msgstr ""
"Un decorador para usar en enumeraciones: su destino no se convertirá en "
"miembro."

#: ../Doc/library/enum.rst:850
msgid ""
"A decorator to change the :class:`str() <str>` and :func:`repr` of an enum "
"to show its members as belonging to the module instead of its class. Should "
"only be used when the enum members are exported to the module global "
"namespace (see :class:`re.RegexFlag` for an example)."
msgstr ""
"Un decorador para cambiar el :class:`str() <str>` y :func:`repr` de una "
"enumeración para mostrar sus miembros como pertenecientes al módulo en lugar "
"de a su clase. Solo debe usarse cuando los miembros de la enumeración se "
"exportan al espacio de nombres global del módulo (consulte :class:`re."
"RegexFlag` para ver un ejemplo)."

#: ../Doc/library/enum.rst:860
msgid "Return a list of all power-of-two integers contained in a flag *value*."
msgstr ""
"Retorna una lista de todos los enteros de potencia de dos contenidos en un "
"indicador *value*."

#: ../Doc/library/enum.rst:867
msgid "Notes"
msgstr "Notas"

#: ../Doc/library/enum.rst:869
msgid ":class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag`"
msgstr ":class:`IntEnum`, :class:`StrEnum` y :class:`IntFlag`"

#: ../Doc/library/enum.rst:871
msgid ""
"These three enum types are designed to be drop-in replacements for existing "
"integer- and string-based values; as such, they have extra limitations:"
msgstr ""
"Estos tres tipos de enumeración están diseñados para ser reemplazos directos "
"de los valores existentes basados ​​en cadenas y enteros; como tales, tienen "
"limitaciones adicionales:"

#: ../Doc/library/enum.rst:874
msgid "``__str__`` uses the value and not the name of the enum member"
msgstr "``__str__`` usa el valor y no el nombre del miembro de enumeración"

#: ../Doc/library/enum.rst:876
msgid ""
"``__format__``, because it uses ``__str__``, will also use the value of the "
"enum member instead of its name"
msgstr ""
"``__format__``, debido a que usa ``__str__``, también usará el valor del "
"miembro de enumeración en lugar de su nombre"

#: ../Doc/library/enum.rst:879
msgid ""
"If you do not need/want those limitations, you can either create your own "
"base class by mixing in the ``int`` or ``str`` type yourself::"
msgstr ""
"Si no necesita/quiere esas limitaciones, puede crear su propia clase base "
"mezclando el tipo ``int`` o ``str`` usted mismo:"

#: ../Doc/library/enum.rst:886
msgid "or you can reassign the appropriate :meth:`str`, etc., in your enum::"
msgstr "o puede reasignar el :meth:`str` apropiado, etc., en su enumeración::"

#~ msgid ""
#~ "An enumeration is a set of symbolic names (members) bound to unique, "
#~ "constant values.  Within an enumeration, the members can be compared by "
#~ "identity, and the enumeration itself can be iterated over."
#~ msgstr ""
#~ "Una enumeración es un conjunto de nombres simbólicos (miembros) "
#~ "vinculados a valores únicos y constantes. Dentro de una enumeración, los "
#~ "miembros se pueden comparar por identidad, y la enumeración en sí se "
#~ "puede iterar."

#~ msgid "Case of Enum Members"
#~ msgstr "Caso de miembros de Enum"

#~ msgid ""
#~ "Because Enums are used to represent constants we recommend using "
#~ "UPPER_CASE names for enum members, and will be using that style in our "
#~ "examples."
#~ msgstr ""
#~ "Debido a que las enumeraciones se usan para representar constantes, "
#~ "recomendamos usar nombres UPPER_CASE para los miembros de enumeración, y "
#~ "usaremos ese estilo en nuestros ejemplos."

#~ msgid ""
#~ "This module defines four enumeration classes that can be used to define "
#~ "unique sets of names and values: :class:`Enum`, :class:`IntEnum`, :class:"
#~ "`Flag`, and :class:`IntFlag`.  It also defines one decorator, :func:"
#~ "`unique`, and one helper, :class:`auto`."
#~ msgstr ""
#~ "Este módulo define cuatro clases de enumeración que se pueden usar para "
#~ "definir conjuntos únicos de nombres y valores: :class:`Enum`, :class:"
#~ "`IntEnum`, :class:`Flag`, and :class:`IntFlag`.  También define un "
#~ "decorador, :func:`unique`, y un ayudante, :class:`auto`."

#~ msgid ""
#~ "Base class for creating enumerated constants.  See section `Functional "
#~ "API`_ for an alternate construction syntax."
#~ msgstr ""
#~ "Clase base para crear constantes enumeradas.  Consulte la sección `API "
#~ "Funcional`_ para obtener una sintaxis de construcción alternativa."

#~ msgid ""
#~ "Instances are replaced with an appropriate value for Enum members.  By "
#~ "default, the initial value starts at 1."
#~ msgstr ""
#~ "Las instancias se reemplazan con un valor apropiado para los miembros de "
#~ "Enum. El valor inicial comienza en 1."

#~ msgid "Creating an Enum"
#~ msgstr "Creando un Enum"

#~ msgid ""
#~ "Enumerations are created using the :keyword:`class` syntax, which makes "
#~ "them easy to read and write.  An alternative creation method is described "
#~ "in `Functional API`_.  To define an enumeration, subclass :class:`Enum` "
#~ "as follows::"
#~ msgstr ""
#~ "Las enumeraciones son creadas usando la sintaxis :keyword:`class`, lo que "
#~ "las hace de fácil lectura y escritura. Un método de creación alternativo "
#~ "se describe en `API Funcional`_. Para definir una enumeración,  hacer una "
#~ "subclase :class:`Enum` de la siguiente manera::"

#~ msgid "Enumeration members have human readable string representations::"
#~ msgstr ""
#~ "Los miembros de la enumeración tienen representaciones de cadenas "
#~ "legibles para humanos ::"

#~ msgid "...while their ``repr`` has more information::"
#~ msgstr "…mientras que su ``repr`` tiene más información ::"

#~ msgid ""
#~ "The *type* of an enumeration member is the enumeration it belongs to::"
#~ msgstr ""
#~ "El *tipo* de un miembro de enumeración es la enumeración a la que "
#~ "pertenece::"

#~ msgid ""
#~ "Enum members also have a property that contains just their item name::"
#~ msgstr ""
#~ "Los miembros de Enum también tienen una propiedad que contiene solo su "
#~ "nombre del elemento ::"

#~ msgid ""
#~ "Enumeration members are hashable, so they can be used in dictionaries and "
#~ "sets::"
#~ msgstr ""
#~ "Los miembros de la enumeración son hasheables, por lo que pueden usarse "
#~ "en diccionarios y conjuntos::"

#~ msgid "Programmatic access to enumeration members and their attributes"
#~ msgstr ""
#~ "Acceso programático a los miembros de la enumeración y sus atributos"

#~ msgid ""
#~ "Sometimes it's useful to access members in enumerations programmatically "
#~ "(i.e. situations where ``Color.RED`` won't do because the exact color is "
#~ "not known at program-writing time).  ``Enum`` allows such access::"
#~ msgstr ""
#~ "A veces es útil acceder a los miembros en enumeraciones mediante "
#~ "programación (es decir, situaciones en las que ``Color.RED`` no "
#~ "funcionará porque no se conoce el color exacto al momento de escribir el "
#~ "programa). ``Enum`` permite dicho acceso::"

#~ msgid "If you want to access enum members by *name*, use item access::"
#~ msgstr ""
#~ "Si desea acceder a los miembros de enumeración por *nombre*, use el "
#~ "acceso a elementos::"

#~ msgid ""
#~ "If you have an enum member and need its :attr:`name` or :attr:`value`::"
#~ msgstr ""
#~ "Si tiene un miembro enum y necesita su :attr:`name` o :attr:`value`::"

#~ msgid "Duplicating enum members and values"
#~ msgstr "Duplicando miembros y valores enum"

#~ msgid "Having two enum members with the same name is invalid::"
#~ msgstr "Tener dos miembros enum con el mismo nombre no es válido::"

#~ msgid ""
#~ "However, two enum members are allowed to have the same value.  Given two "
#~ "members A and B with the same value (and A defined first), B is an alias "
#~ "to A.  By-value lookup of the value of A and B will return A.  By-name "
#~ "lookup of B will also return A::"
#~ msgstr ""
#~ "Sin embargo, se permite que dos miembros enum tengan el mismo valor. Dado "
#~ "que dos miembros A y B tienen el mismo valor (y A se definió primero), B "
#~ "es un alias de A. La búsqueda por valor del valor de A y B retornará A. "
#~ "La búsqueda por nombre de B también retornará A::"

#~ msgid ""
#~ "Attempting to create a member with the same name as an already defined "
#~ "attribute (another member, a method, etc.) or attempting to create an "
#~ "attribute with the same name as a member is not allowed."
#~ msgstr ""
#~ "Intentar crear un miembro con el mismo nombre que un atributo ya definido "
#~ "(otro miembro, un método, etc.) o intentar crear un atributo con el mismo "
#~ "nombre que un miembro no está permitido."

#~ msgid "Ensuring unique enumeration values"
#~ msgstr "Garantizando valores de enumeración únicos"

#~ msgid ""
#~ "By default, enumerations allow multiple names as aliases for the same "
#~ "value. When this behavior isn't desired, the following decorator can be "
#~ "used to ensure each value is used only once in the enumeration:"
#~ msgstr ""
#~ "Por defecto, las enumeraciones permiten múltiples nombres como alias para "
#~ "el mismo valor. Cuando no se desea este comportamiento, se puede usar el "
#~ "siguiente decorador para garantizar que cada valor se use solo una vez en "
#~ "la enumeración:"

#~ msgid "Using automatic values"
#~ msgstr "Usando valores automáticos"

#~ msgid "If the exact value is unimportant you can use :class:`auto`::"
#~ msgstr "Si el valor exacto no es importante, puede usar :class:`auto`::"

#~ msgid ""
#~ "The values are chosen by :func:`_generate_next_value_`, which can be "
#~ "overridden::"
#~ msgstr ""
#~ "Los valores se eligen por :func:`_generate_next_value_`, que se puede "
#~ "invalidar::"

#~ msgid ""
#~ "The goal of the default :meth:`_generate_next_value_` method is to "
#~ "provide the next :class:`int` in sequence with the last :class:`int` "
#~ "provided, but the way it does this is an implementation detail and may "
#~ "change."
#~ msgstr ""
#~ "El objetivo del método predeterminado :meth:`_generate_next_value_` es "
#~ "proporcionar el siguiente :class:`int` en secuencia con el último :class:"
#~ "`int` proporcionado, pero la forma en que lo hace es un detalle de "
#~ "implementación y puede cambiar."

#~ msgid ""
#~ "The :meth:`_generate_next_value_` method must be defined before any "
#~ "members."
#~ msgstr ""
#~ "El método :meth:`_generate_next_value_` debe definirse antes que "
#~ "cualquier miembro."

#~ msgid "Iteration"
#~ msgstr "Iteración"

#~ msgid "Iterating over the members of an enum does not provide the aliases::"
#~ msgstr ""
#~ "Iterar sobre los miembros de una enumeración no proporciona los alias::"

#~ msgid ""
#~ "The special attribute ``__members__`` is a read-only ordered mapping of "
#~ "names to members.  It includes all names defined in the enumeration, "
#~ "including the aliases::"
#~ msgstr ""
#~ "El atributo especial ``__members__`` es una asignación ordenada de solo "
#~ "lectura de nombres a miembros. Incluye todos los nombres definidos en la "
#~ "enumeración, incluidos los alias::"

#~ msgid ""
#~ "The ``__members__`` attribute can be used for detailed programmatic "
#~ "access to the enumeration members.  For example, finding all the aliases::"
#~ msgstr ""
#~ "El atributo ``__members__`` se puede usar para el acceso programático "
#~ "detallado a los miembros de la enumeración. Por ejemplo, encontrar todos "
#~ "los alias::"

#~ msgid "Comparisons"
#~ msgstr "Comparaciones"

#~ msgid "Enumeration members are compared by identity::"
#~ msgstr "Los miembros de la enumeración se comparan por identidad::"

#~ msgid ""
#~ "Ordered comparisons between enumeration values are *not* supported.  Enum "
#~ "members are not integers (but see `IntEnum`_ below)::"
#~ msgstr ""
#~ "Las comparaciones ordenadas entre valores de enumeración *no* son "
#~ "soportadas. Los miembros de Enum no son enteros (pero vea `IntEnum`_ a "
#~ "continuación)::"

#~ msgid "Equality comparisons are defined though::"
#~ msgstr "Aunque, las comparaciones de igualdad se definen::"

#~ msgid ""
#~ "Comparisons against non-enumeration values will always compare not equal "
#~ "(again, :class:`IntEnum` was explicitly designed to behave differently, "
#~ "see below)::"
#~ msgstr ""
#~ "Las comparaciones con valores de no enumeración siempre se compararán no "
#~ "iguales (de nuevo, :class:`IntEnum` fue diseñado explícitamente para "
#~ "comportarse de manera diferente, ver más abajo)::"

#~ msgid "Allowed members and attributes of enumerations"
#~ msgstr "Miembros permitidos y atributos de enumeraciones"

#~ msgid ""
#~ "The examples above use integers for enumeration values.  Using integers "
#~ "is short and handy (and provided by default by the `Functional API`_), "
#~ "but not strictly enforced.  In the vast majority of use-cases, one "
#~ "doesn't care what the actual value of an enumeration is.  But if the "
#~ "value *is* important, enumerations can have arbitrary values."
#~ msgstr ""
#~ "Los ejemplos anteriores usan números enteros para los valores de "
#~ "enumeración. El uso de enteros es breve y útil (y lo proporciona de forma "
#~ "predeterminada la `API Funcional`_), pero no se aplica estrictamente. En "
#~ "la gran mayoría de los casos de uso, a uno no le importa cuál es el valor "
#~ "real de una enumeración. Pero si el valor *es* importante, las "
#~ "enumeraciones pueden tener valores arbitrarios."

#~ msgid ""
#~ "Enumerations are Python classes, and can have methods and special methods "
#~ "as usual.  If we have this enumeration::"
#~ msgstr ""
#~ "Las enumeraciones son clases de Python y pueden tener métodos y métodos "
#~ "especiales como de costumbre. Si tenemos esta enumeración ::"

#~ msgid "Then::"
#~ msgstr "Después::"

#~ msgid ""
#~ "The rules for what is allowed are as follows: names that start and end "
#~ "with a single underscore are reserved by enum and cannot be used; all "
#~ "other attributes defined within an enumeration will become members of "
#~ "this enumeration, with the exception of special methods (:meth:"
#~ "`__str__`, :meth:`__add__`, etc.), descriptors (methods are also "
#~ "descriptors), and variable names listed in :attr:`_ignore_`."
#~ msgstr ""
#~ "Las reglas para lo que está permitido son las siguientes: los nombres que "
#~ "comienzan y terminan con un solo guión bajo están reservados por enum y "
#~ "no se pueden usar; todos los demás atributos definidos dentro de una "
#~ "enumeración se convertirán en miembros de esta enumeración, con la "
#~ "excepción de métodos especiales (:meth:`__str__`, :meth:`__add__`, etc.), "
#~ "descriptores (los métodos también son descriptores) y nombres de "
#~ "variables listado en :attr:`_ignore_`."

#~ msgid ""
#~ "Note:  if your enumeration defines :meth:`__new__` and/or :meth:"
#~ "`__init__` then any value(s) given to the enum member will be passed into "
#~ "those methods. See `Planet`_ for an example."
#~ msgstr ""
#~ "Nota: si tu enumeración define :meth:`__new__` o :meth:`__init__`, los "
#~ "valores que se hayan dado al miembro enum se pasarán a esos métodos. Ver "
#~ "`Planet`_ para un ejemplo."

#~ msgid "Restricted Enum subclassing"
#~ msgstr "Subclases restringidas de Enum"

#~ msgid ""
#~ "A new :class:`Enum` class must have one base Enum class, up to one "
#~ "concrete data type, and as many :class:`object`-based mixin classes as "
#~ "needed.  The order of these base classes is::"
#~ msgstr ""
#~ "Una nueva clase :class:`Enum` debe tener una clase base Enum, hasta un "
#~ "tipo de datos concreto, y tantas clases mixin basadas en :class:`object` "
#~ "como sean necesarias. El orden de estas clases base es::"

#~ msgid ""
#~ "Also, subclassing an enumeration is allowed only if the enumeration does "
#~ "not define any members.  So this is forbidden::"
#~ msgstr ""
#~ "Además, la subclasificación de una enumeración solo está permitida si la "
#~ "enumeración no define ningún miembro. Entonces esto está prohibido::"

#~ msgid "But this is allowed::"
#~ msgstr "Pero esto es permitido::"

#~ msgid ""
#~ "Allowing subclassing of enums that define members would lead to a "
#~ "violation of some important invariants of types and instances.  On the "
#~ "other hand, it makes sense to allow sharing some common behavior between "
#~ "a group of enumerations. (See `OrderedEnum`_ for an example.)"
#~ msgstr ""
#~ "Permitir la subclasificación de enumeraciones que definen miembros "
#~ "conduciría a una violación de algunos invariantes importantes de tipos e "
#~ "instancias. Por otro lado, tiene sentido permitir compartir un "
#~ "comportamiento común entre un grupo de enumeraciones. (Ver `OrderedEnum`_ "
#~ "para un ejemplo.)"

#~ msgid "Pickling"
#~ msgstr "Serialización"

#~ msgid "Enumerations can be pickled and unpickled::"
#~ msgstr "Las enumeraciones se pueden serializar y desempaquetar::"

#~ msgid ""
#~ "The usual restrictions for pickling apply: picklable enums must be "
#~ "defined in the top level of a module, since unpickling requires them to "
#~ "be importable from that module."
#~ msgstr ""
#~ "Se aplican las restricciones habituales para la serialización "
#~ "(*pickling*): las enum seleccionables se deben definir en el nivel "
#~ "superior de un módulo, ya que el desempaquetado requiere que sean "
#~ "importables desde ese módulo."

#~ msgid ""
#~ "With pickle protocol version 4 it is possible to easily pickle enums "
#~ "nested in other classes."
#~ msgstr ""
#~ "Con la versión 4 del protocolo de serialización (*pickle*), es posible "
#~ "seleccionar fácilmente las enumeraciones anidadas en otras clases."

#~ msgid ""
#~ "It is possible to modify how Enum members are pickled/unpickled by "
#~ "defining :meth:`__reduce_ex__` in the enumeration class."
#~ msgstr ""
#~ "Es posible modificar la forma en que los miembros de Enum se serializan/"
#~ "desempaquetan definiendo :meth:`__reduce_ex__` en la clase de enumeración."

#~ msgid "Functional API"
#~ msgstr "API Funcional"

#~ msgid ""
#~ "The :class:`Enum` class is callable, providing the following functional "
#~ "API::"
#~ msgstr ""
#~ "La clase :class:`Enum` es invocable, proporcionando la siguiente API "
#~ "funcional::"

#~ msgid ""
#~ "The semantics of this API resemble :class:`~collections.namedtuple`. The "
#~ "first argument of the call to :class:`Enum` is the name of the "
#~ "enumeration."
#~ msgstr ""
#~ "La semántica de esta API se parece a :class:`~collections.namedtuple`. El "
#~ "primer argumento de la llamada a :class:`Enum` es el nombre de la "
#~ "enumeración."

#~ msgid ""
#~ "The second argument is the *source* of enumeration member names.  It can "
#~ "be a whitespace-separated string of names, a sequence of names, a "
#~ "sequence of 2-tuples with key/value pairs, or a mapping (e.g. dictionary) "
#~ "of names to values.  The last two options enable assigning arbitrary "
#~ "values to enumerations; the others auto-assign increasing integers "
#~ "starting with 1 (use the ``start`` parameter to specify a different "
#~ "starting value).  A new class derived from :class:`Enum` is returned.  In "
#~ "other words, the above assignment to :class:`Animal` is equivalent to::"
#~ msgstr ""
#~ "El segundo argumento es la *fuente* de los nombres de los miembros de la "
#~ "enumeración. Puede se una cadena de nombres separados por espacios en "
#~ "blanco, una secuencia de 2 tuplas con pares de clave/valor, o un mapeo de "
#~ "nombres y valores (ej. diccionario). Las últimas dos opciones permiten "
#~ "asignar valores arbitrarios a las enumeraciones; los otros asignan "
#~ "automáticamente enteros crecientes comenzando con 1 (use el parámetros "
#~ "``start`` para especificar un valor de inicio diferente). Se regresa una "
#~ "nueva clase derivada de :class:`Enum`. En otras palabras, la asignación "
#~ "de arriba :class:`Animal` es equivalente a::"

#~ msgid ""
#~ "The reason for defaulting to ``1`` as the starting number and not ``0`` "
#~ "is that ``0`` is ``False`` in a boolean sense, but enum members all "
#~ "evaluate to ``True``."
#~ msgstr ""
#~ "La razón por la que el valor predeterminado es ``1`` como numero inicial "
#~ "y no ``0`` es que ``0`` es ``False`` en sentido booleano, pero todos los "
#~ "miembros enum evalúan como ``True``."

#~ msgid ""
#~ "Pickling enums created with the functional API can be tricky as frame "
#~ "stack implementation details are used to try and figure out which module "
#~ "the enumeration is being created in (e.g. it will fail if you use a "
#~ "utility function in separate module, and also may not work on IronPython "
#~ "or Jython). The solution is to specify the module name explicitly as "
#~ "follows::"
#~ msgstr ""
#~ "Las enumeraciones serializadas creadas con la API funcional pueden ser "
#~ "complicadas ya que los detalles de implementación de la pila se usan para "
#~ "tratar de averiguar en qué módulo se está creando la enumeración (ej. "
#~ "fallará si usa una función de utilidad en un módulo separado, y también "
#~ "puede no funcionar en IronPython o Jython). La solución es especificar el "
#~ "nombre del módulo explícitamente de la siguiente manera::"

#~ msgid ""
#~ "If ``module`` is not supplied, and Enum cannot determine what it is, the "
#~ "new Enum members will not be unpicklable; to keep errors closer to the "
#~ "source, pickling will be disabled."
#~ msgstr ""
#~ "Si no se suministra un ``module``, y Enum no puede determinar que es, los "
#~ "miembros del nuevo Enum no se podrán desempaquetar; para mantener los "
#~ "errores más cerca de la fuente, la serialización se deshabilitará."

#~ msgid ""
#~ "The new pickle protocol 4 also, in some circumstances, relies on :attr:"
#~ "`~definition.__qualname__` being set to the location where pickle will be "
#~ "able to find the class.  For example, if the class was made available in "
#~ "class SomeData in the global scope::"
#~ msgstr ""
#~ "El nuevo protocolo 4 de serialización también, en ciertas circunstancias, "
#~ "se basa en :attr:`~definition.__qualname__` se establece en la ubicación "
#~ "donde la serialización podrá encontrar la clase. Por ejemplo, si la clase "
#~ "se hizo disponible en la clase SomeData en el campo global::"

#~ msgid "The complete signature is::"
#~ msgstr "La firma completa es::"

#~ msgid "What the new Enum class will record as its name."
#~ msgstr "Lo que la nueva clase Enum registrará como su nombre."

#~ msgid ""
#~ "The Enum members.  This can be a whitespace or comma separated string "
#~ "(values will start at 1 unless otherwise specified)::"
#~ msgstr ""
#~ "Los miembros de Enum. Esto puede ser un espacio en blanco o una cadena "
#~ "separada por comas (los valores empezarán en 1 a menos que se especifique "
#~ "lo contrario)::"

#~ msgid "or an iterator of names::"
#~ msgstr "o un iterador de nombres::"

#~ msgid "or an iterator of (name, value) pairs::"
#~ msgstr "o un iterador de pares(nombre,valor)::"

#~ msgid "or a mapping::"
#~ msgstr "o un mapeo::"

#~ msgid "where in module new Enum class can be found."
#~ msgstr "donde en el módulo se puede encontrar la nueva clase Enum."

#~ msgid "type to mix in to new Enum class."
#~ msgstr "escriba para mezclar en la nueva clase Enum."

#~ msgid "number to start counting at if only names are passed in."
#~ msgstr "número para comenzar a contar sí solo se pasan nombres."

#~ msgid "The *start* parameter was added."
#~ msgstr "Se agregó el parámetro *start*."

#~ msgid "IntEnum"
#~ msgstr "IntEnum"

#~ msgid ""
#~ "The first variation of :class:`Enum` that is provided is also a subclass "
#~ "of :class:`int`.  Members of an :class:`IntEnum` can be compared to "
#~ "integers; by extension, integer enumerations of different types can also "
#~ "be compared to each other::"
#~ msgstr ""
#~ "La primera variación de :class:`Enum` que se proporciona también es una "
#~ "subclase de :class:`int`. Los miembros de :class:`IntEnum` se pueden "
#~ "comparar con enteros; por extensión, las enumeraciones enteras de "
#~ "diferentes tipos también se pueden comparar entre sí::"

#~ msgid ""
#~ "However, they still can't be compared to standard :class:`Enum` "
#~ "enumerations::"
#~ msgstr ""
#~ "Sin embargo, todavía no se pueden comparar con las enumeraciones "
#~ "estándar :class:`Enum`::"

#~ msgid ""
#~ ":class:`IntEnum` values behave like integers in other ways you'd expect::"
#~ msgstr ""
#~ "los valores :class:`IntEnum` se comportan como enteros en otras maneras "
#~ "que esperarías::"

#~ msgid "IntFlag"
#~ msgstr "IntFlag"

#~ msgid ""
#~ "The next variation of :class:`Enum` provided, :class:`IntFlag`, is also "
#~ "based on :class:`int`.  The difference being :class:`IntFlag` members can "
#~ "be combined using the bitwise operators (&, \\|, ^, ~) and the result is "
#~ "still an :class:`IntFlag` member.  However, as the name implies, :class:"
#~ "`IntFlag` members also subclass :class:`int` and can be used wherever an :"
#~ "class:`int` is used.  Any operation on an :class:`IntFlag` member besides "
#~ "the bit-wise operations will lose the :class:`IntFlag` membership."
#~ msgstr ""
#~ "La siguiente variación de :class:`Enum` proporcionada, :class:`IntFlag`, "
#~ "también se basa en :class:`int`. La diferencia es que los miembros :class:"
#~ "`IntFlag` se pueden combinar usando los operadores (&, \\|, ^, ~) y el "
#~ "resultado es un miembro :class:`IntFlag`. Sin embargo, como su nombre lo "
#~ "indica, los miembros de :class:`IntFlag` también son subclase :class:"
#~ "`int` y pueden usarse siempre que :class:`int` se use. Cualquier "
#~ "operación en un miembro :class:`IntFlag` además de las operaciones de bit "
#~ "perderán la membresía :class:`IntFlag`."

#~ msgid "Sample :class:`IntFlag` class::"
#~ msgstr "Clase muestra :class:`IntFlag`::"

#~ msgid "It is also possible to name the combinations::"
#~ msgstr "También es posible nombrar las combinaciones::"

#~ msgid ""
#~ "Another important difference between :class:`IntFlag` and :class:`Enum` "
#~ "is that if no flags are set (the value is 0), its boolean evaluation is :"
#~ "data:`False`::"
#~ msgstr ""
#~ "Otra diferencia importante entre :class:`IntFlag` y :class:`Enum` es que "
#~ "si no hay banderas establecidas (el valor es 0), su evaluación booleana "
#~ "es :data:`False`::"

#~ msgid ""
#~ "Because :class:`IntFlag` members are also subclasses of :class:`int` they "
#~ "can be combined with them::"
#~ msgstr ""
#~ "Porque los miembros :class:`IntFlag` también son subclases de :class:"
#~ "`int` se pueden combinar con ellos::"

#~ msgid "Flag"
#~ msgstr "Bandera"

#~ msgid ""
#~ "The last variation is :class:`Flag`.  Like :class:`IntFlag`, :class:"
#~ "`Flag` members can be combined using the bitwise operators (&, \\|, ^, "
#~ "~).  Unlike :class:`IntFlag`, they cannot be combined with, nor compared "
#~ "against, any other :class:`Flag` enumeration, nor :class:`int`.  While it "
#~ "is possible to specify the values directly it is recommended to use :"
#~ "class:`auto` as the value and let :class:`Flag` select an appropriate "
#~ "value."
#~ msgstr ""
#~ "La última variación es :class:`Flag`. Al igual que :class:`IntFlag`, :"
#~ "class:`Flag` los miembros se pueden combinar usando los operadores (&, "
#~ "\\|, ^, ~). A diferencia de :class:`IntFlag`, no pueden combinar ni "
#~ "comparar con ninguna otra enumeración :class:`Flag`, ni con :class:`int`. "
#~ "Es posible especificar los valores directamente, se recomienda usar :"
#~ "class:`auto` como el valor y dejar que :class:`Flag` seleccione el valor "
#~ "apropiado."

#~ msgid ""
#~ "Like :class:`IntFlag`, if a combination of :class:`Flag` members results "
#~ "in no flags being set, the boolean evaluation is :data:`False`::"
#~ msgstr ""
#~ "Al igual que :class:`IntFlag`, si una combinación de miembros :class:"
#~ "`Flag` resultan en que no se establezcan banderas, la evaluación booleana "
#~ "es :data:`False`::"

#~ msgid ""
#~ "Individual flags should have values that are powers of two (1, 2, 4, "
#~ "8, ...), while combinations of flags won't::"
#~ msgstr ""
#~ "Las banderas individuales deben tener valores que sean potencias de dos "
#~ "(1, 2, 4, 8, …), mientras que las combinaciones de banderas no::"

#~ msgid ""
#~ "Giving a name to the \"no flags set\" condition does not change its "
#~ "boolean value::"
#~ msgstr ""
#~ "Dar un nombre a la condición \"sin banderas establecidas\" no cambia su "
#~ "valor booleano::"

#~ msgid ""
#~ "For the majority of new code, :class:`Enum` and :class:`Flag` are "
#~ "strongly recommended, since :class:`IntEnum` and :class:`IntFlag` break "
#~ "some semantic promises of an enumeration (by being comparable to "
#~ "integers, and thus by transitivity to other unrelated enumerations).  :"
#~ "class:`IntEnum` and :class:`IntFlag` should be used only in cases where :"
#~ "class:`Enum` and :class:`Flag` will not do; for example, when integer "
#~ "constants are replaced with enumerations, or for interoperability with "
#~ "other systems."
#~ msgstr ""
#~ "Para la mayoría del código nuevo, :class:`Enum` y :class:`Flag` son muy "
#~ "recomendables, ya que :class:`IntEnum` y :class:`IntFlag` rompen algunas "
#~ "promesas semánticas de una enumeración (al ser comparables con enteros, y "
#~ "por transitividad a otras enumeraciones no relacionadas). :class:"
#~ "`IntEnum` y :class:`IntFlag` deben usarse solo en casos donde :class:"
#~ "`Enum` y :class:`Flag` no son suficientes: por ejemplo, cuando las "
#~ "constantes enteras se reemplazan por enumeraciones, o por "
#~ "interoperabilidad con otros sistemas."

#~ msgid "Others"
#~ msgstr "Otros"

#~ msgid ""
#~ "While :class:`IntEnum` is part of the :mod:`enum` module, it would be "
#~ "very simple to implement independently::"
#~ msgstr ""
#~ "Mientras que :class:`IntEnum` es parte del módulo :mod:`enum`, sería muy "
#~ "simple de implementar de forma independiente::"

#~ msgid ""
#~ "This demonstrates how similar derived enumerations can be defined; for "
#~ "example a :class:`StrEnum` that mixes in :class:`str` instead of :class:"
#~ "`int`."
#~ msgstr ""
#~ "Esto demuestra que similares pueden ser las enumeraciones derivadas; por "
#~ "ejemplo una :class:`StrEnum` que se mezcla en :class:`str` en lugar de :"
#~ "class:`int`."

#~ msgid "Some rules:"
#~ msgstr "Algunas reglas:"

#~ msgid ""
#~ "When subclassing :class:`Enum`, mix-in types must appear before :class:"
#~ "`Enum` itself in the sequence of bases, as in the :class:`IntEnum` "
#~ "example above."
#~ msgstr ""
#~ "Al subclasificar :class:`Enum`, los tipos mixtos deben aparecer antes :"
#~ "class:`Enum` en la secuencia de bases, como en el ejemplo anterior :class:"
#~ "`IntEnum`."

#~ msgid ""
#~ "While :class:`Enum` can have members of any type, once you mix in an "
#~ "additional type, all the members must have values of that type, e.g. :"
#~ "class:`int` above.  This restriction does not apply to mix-ins which only "
#~ "add methods and don't specify another type."
#~ msgstr ""
#~ "Mientras que :class:`Enum` puede tener miembros de cualquier tipo, una "
#~ "vez que se mezcle tipos adicionales, todos los miembros deben de tener "
#~ "los valores de ese tipo, por ejemplo, :class:`int` de arriba. Esta "
#~ "restricción no se aplica a las mezclas que solo agregan métodos y no "
#~ "especifican otro tipo."

#~ msgid ""
#~ "When another data type is mixed in, the :attr:`value` attribute is *not "
#~ "the same* as the enum member itself, although it is equivalent and will "
#~ "compare equal."
#~ msgstr ""
#~ "Cuando se mezcla otro tipo de datos, el atributo :attr:`value` *no es el "
#~ "mismo* que el mismo miembro enum, aunque es equivalente y se comparará "
#~ "igual."

#~ msgid ""
#~ "%-style formatting:  `%s` and `%r` call the :class:`Enum` class's :meth:"
#~ "`__str__` and :meth:`__repr__` respectively; other codes (such as `%i` or "
#~ "`%h` for IntEnum) treat the enum member as its mixed-in type."
#~ msgstr ""
#~ "Formato %-style: `%s` y `%r` llaman, respectivamente, a :meth:`__str__` "
#~ "y :meth:`__repr__` de la clase :class:`Enum`; otros códigos (como `&i` o "
#~ "`%h` para IntEnum) tratan al miembro enum como su tipo mixto."

#~ msgid ""
#~ ":ref:`Formatted string literals <f-strings>`, :meth:`str.format`, and :"
#~ "func:`format` will use the mixed-in type's :meth:`__format__` unless :"
#~ "meth:`__str__` or :meth:`__format__` is overridden in the subclass, in "
#~ "which case the overridden methods or :class:`Enum` methods will be used. "
#~ "Use the !s and !r format codes to force usage of the :class:`Enum` "
#~ "class's :meth:`__str__` and :meth:`__repr__` methods."
#~ msgstr ""
#~ ":ref:`Cadenas de caracteres literales formateadas <f-strings>`, :meth:"
#~ "`str.format`, y :func:`format` usará el tipo mixto :meth:`__format__` a "
#~ "menos que :meth:`__str__` o :meth:`__format__` se sobreescriba en la "
#~ "subclase, en cuyo caso se utilizarán los métodos anulados o :class:"
#~ "`Enum`. Use los códigos de formato !s y !r para forzar el uso de los "
#~ "métodos :class:`Enum` de las clases :meth:`__str__` y :meth:`__repr__`."

#~ msgid "When to use :meth:`__new__` vs. :meth:`__init__`"
#~ msgstr "Cuándo usar :meth:`__new__` contra :meth:`__init__`"

#~ msgid ""
#~ ":meth:`__new__` must be used whenever you want to customize the actual "
#~ "value of the :class:`Enum` member.  Any other modifications may go in "
#~ "either :meth:`__new__` or :meth:`__init__`, with :meth:`__init__` being "
#~ "preferred."
#~ msgstr ""
#~ ":meth:`__new__` debe usarse siempre que desee personalizar el valor del "
#~ "miembro real :class:`Emum`. Cualquier otra modificación puede ir en :meth:"
#~ "`__new__` o :meth:`__init__`, prefiriendo siempre :meth:`__init__`."

#~ msgid ""
#~ "For example, if you want to pass several items to the constructor, but "
#~ "only want one of them to be the value::"
#~ msgstr ""
#~ "Por ejemplo, si desea pasar varios elementos al constructor, pero solo "
#~ "desea que uno de ellos sea el valor::"

#~ msgid "Interesting examples"
#~ msgstr "Ejemplos interesantes"

#~ msgid ""
#~ "While :class:`Enum`, :class:`IntEnum`, :class:`IntFlag`, and :class:"
#~ "`Flag` are expected to cover the majority of use-cases, they cannot cover "
#~ "them all.  Here are recipes for some different types of enumerations that "
#~ "can be used directly, or as examples for creating one's own."
#~ msgstr ""
#~ "Si bien se espera que :class:`Enum`, :class:`IntEnum`, :class:`IntFlag`, "
#~ "y :class:`Flag` cubran la mayoría de los casos de uso, no pueden "
#~ "cubrirlos a todos. Aquí hay recetas para algunos tipos diferentes de "
#~ "enumeraciones que puede usarse directamente, o como ejemplos para crear "
#~ "los propios."

#~ msgid "Omitting values"
#~ msgstr "Omitir valores"

#~ msgid ""
#~ "In many use-cases one doesn't care what the actual value of an "
#~ "enumeration is. There are several ways to define this type of simple "
#~ "enumeration:"
#~ msgstr ""
#~ "En muchos casos de uso, a uno no le importa cuál es el valor real de una "
#~ "enumeración. Hay varias formas de definir este tipo de enumeración simple:"

#~ msgid "use instances of :class:`auto` for the value"
#~ msgstr "use instancias de :class:`auto` para el valor"

#~ msgid "use instances of :class:`object` as the value"
#~ msgstr "use instancias de :class:`object` como el valor"

#~ msgid "use a descriptive string as the value"
#~ msgstr "use a descriptive string as the value"

#~ msgid ""
#~ "use a tuple as the value and a custom :meth:`__new__` to replace the "
#~ "tuple with an :class:`int` value"
#~ msgstr ""
#~ "use una tupla como valor y un :meth:`__new__` personalizado para "
#~ "reemplazar la tupla con un valor :class:`int`"

#~ msgid ""
#~ "Using any of these methods signifies to the user that these values are "
#~ "not important, and also enables one to add, remove, or reorder members "
#~ "without having to renumber the remaining members."
#~ msgstr ""
#~ "El uso de cualquiera de estos métodos significa para el usuario que estos "
#~ "valores no son importantes y también permite agregar, eliminar o "
#~ "reordenar miembros sin tener que volver a numerar los miembros restantes."

#~ msgid ""
#~ "Whichever method you choose, you should provide a :meth:`repr` that also "
#~ "hides the (unimportant) value::"
#~ msgstr ""
#~ "Cualquiera que sea el método que elijas, debe proporcionar un :meth:"
#~ "`repr` que también oculte el valor (sin importancia)::"

#~ msgid "Using :class:`auto` would look like::"
#~ msgstr "Usando :class:`auto` se vería como::"

#~ msgid "Using :class:`object`"
#~ msgstr "Usando :class:`object`"

#~ msgid "Using :class:`object` would look like::"
#~ msgstr "Usando :class:`object` se vería como::"

#~ msgid "Using a descriptive string"
#~ msgstr "Usando una cadena descriptiva"

#~ msgid "Using a string as the value would look like::"
#~ msgstr "Usar una cadena como valor se vería así::"

#~ msgid "Using a custom :meth:`__new__`"
#~ msgstr "Usando  :meth:`__new__` personalizados"

#~ msgid "Using an auto-numbering :meth:`__new__` would look like::"
#~ msgstr "Usando una numeración automática :meth:`__new__` se vería como::"

#~ msgid ""
#~ "To make a more general purpose ``AutoNumber``, add ``*args`` to the "
#~ "signature::"
#~ msgstr ""
#~ "Para hacer un ``AutoNumber`` de propósito más general, agregue ``*args`` "
#~ "a la firma::"

#~ msgid ""
#~ "Then when you inherit from ``AutoNumber`` you can write your own "
#~ "``__init__`` to handle any extra arguments::"
#~ msgstr ""
#~ "Luego, cuando hereda de ``AutoNumber``, puede escribir su propio "
#~ "``__init__`` para manejar cualquier argumento adicional::"

#~ msgid ""
#~ "The :meth:`__new__` method, if defined, is used during creation of the "
#~ "Enum members; it is then replaced by Enum's :meth:`__new__` which is used "
#~ "after class creation for lookup of existing members."
#~ msgstr ""
#~ "El método :meth:`__new__`, está definido, se usa durante la creación de "
#~ "los miembros Enum; se remplaza entonces por el Enum :meth:`__new__` que "
#~ "se utiliza después de la creación de la clase para buscar miembros "
#~ "existentes."

#~ msgid "OrderedEnum"
#~ msgstr "OrderedEnum"

#~ msgid ""
#~ "An ordered enumeration that is not based on :class:`IntEnum` and so "
#~ "maintains the normal :class:`Enum` invariants (such as not being "
#~ "comparable to other enumerations)::"
#~ msgstr ""
#~ "Una enumeración ordenada que no se basa en :class:`IntEnum` y, por lo "
#~ "tanto mantiene los invariantes normales de :class:`Enum` (como no ser "
#~ "comparables con otras enumeraciones)::"

#~ msgid "DuplicateFreeEnum"
#~ msgstr "DuplicateFreeEnum"

#~ msgid ""
#~ "Raises an error if a duplicate member name is found instead of creating "
#~ "an alias::"
#~ msgstr ""
#~ "Levanta un error si se encuentra un nombre de miembro duplicado en lugar "
#~ "de crear un alias::"

#~ msgid ""
#~ "This is a useful example for subclassing Enum to add or change other "
#~ "behaviors as well as disallowing aliases.  If the only desired change is "
#~ "disallowing aliases, the :func:`unique` decorator can be used instead."
#~ msgstr ""
#~ "Este es un ejemplo útil para subclasificar Enum para agregar o cambiar "
#~ "otros comportamientos, así como no permitir alias. Si el único cambio "
#~ "deseado es no permitir alias, el decorador :func:`unique` puede usarse en "
#~ "su lugar."

#~ msgid "Planet"
#~ msgstr "Planeta"

#~ msgid ""
#~ "If :meth:`__new__` or :meth:`__init__` is defined the value of the enum "
#~ "member will be passed to those methods::"
#~ msgstr ""
#~ "Si :meth:`__new__` o :meth:`__init__` se definen el valor del miembro "
#~ "enum se pasará a estos métodos::"

#~ msgid "TimePeriod"
#~ msgstr "Periodo de tiempo"

#~ msgid "An example to show the :attr:`_ignore_` attribute in use::"
#~ msgstr "Un ejemplo para mostrar el atributo :attr:`ignore` en uso::"

#~ msgid "How are Enums different?"
#~ msgstr "¿Cómo son diferentes las Enums?"

#~ msgid ""
#~ "Enums have a custom metaclass that affects many aspects of both derived "
#~ "Enum classes and their instances (members)."
#~ msgstr ""
#~ "Los Enums tienen una metaclase personalizada que afecta  muchos aspectos, "
#~ "tanto de las clases derivadas Enum como de sus instancias (miembros)."

#~ msgid "Enum Classes"
#~ msgstr "Clases Enum"

#~ msgid ""
#~ "The :class:`EnumMeta` metaclass is responsible for providing the :meth:"
#~ "`__contains__`, :meth:`__dir__`, :meth:`__iter__` and other methods that "
#~ "allow one to do things with an :class:`Enum` class that fail on a typical "
#~ "class, such as `list(Color)` or `some_enum_var in Color`.  :class:"
#~ "`EnumMeta` is responsible for ensuring that various other methods on the "
#~ "final :class:`Enum` class are correct (such as :meth:`__new__`, :meth:"
#~ "`__getnewargs__`, :meth:`__str__` and :meth:`__repr__`)."
#~ msgstr ""
#~ "La meta clase :class:`EnumMeta` es responsable de proveer los métodos :"
#~ "meth:`__contains__`, :meth:`__dir__`, :meth:`__iter__` y cualquier otro "
#~ "que permita hacer cosas con una clase :class:`Enum` que falla en una "
#~ "clase típica, como `list(Color)` o `some_enum_var in Color`. :class:"
#~ "`EnumMeta` es responsable de asegurar que los otro varios métodos en la "
#~ "clase final :class:`Enum` sean correctos (como :meth:`__new__`, :meth:"
#~ "`__getnewargs__`, :meth:`__str__` y :meth:`__repr__`)."

#~ msgid "Enum Members (aka instances)"
#~ msgstr "Miembros de Enum (también conocidos como instancias)"

#~ msgid ""
#~ "The most interesting thing about Enum members is that they are "
#~ "singletons. :class:`EnumMeta` creates them all while it is creating the :"
#~ "class:`Enum` class itself, and then puts a custom :meth:`__new__` in "
#~ "place to ensure that no new ones are ever instantiated by returning only "
#~ "the existing member instances."
#~ msgstr ""
#~ "Lo más interesante de los miembros de Enum es que son únicos. :class:"
#~ "`Enum` los crea todos mientras está creando la clase :class:`Enum` misma, "
#~ "y después un :meth:`__new__` personalizado para garantizar que nunca se "
#~ "creen instancias nuevas retornando solo las instancias de miembros "
#~ "existentes."

#~ msgid "Finer Points"
#~ msgstr "Puntos más finos"

#~ msgid ""
#~ "To help keep Python 2 / Python 3 code in sync an :attr:`_order_` "
#~ "attribute can be provided.  It will be checked against the actual order "
#~ "of the enumeration and raise an error if the two do not match::"
#~ msgstr ""
#~ "Para ayudar a mantener sincronizado el código Python 2 / Python 3 se "
#~ "puede proporcionar un atributo :attr:`_order_`. Se verificará con el "
#~ "orden real de la enumeración y lanzará un error si los dos no coinciden:"

#~ msgid ""
#~ "In Python 2 code the :attr:`_order_` attribute is necessary as definition "
#~ "order is lost before it can be recorded."
#~ msgstr ""
#~ "En código Python 2 el atributo :attr:`_order_` es necesario ya que el "
#~ "orden de definición se pierde antes de que se pueda registrar."

#~ msgid "_Private__names"
#~ msgstr "_Private__names"

#~ msgid ""
#~ "Private names will be normal attributes in Python 3.10 instead of either "
#~ "an error or a member (depending on if the name ends with an underscore). "
#~ "Using these names in 3.9 will issue a :exc:`DeprecationWarning`."
#~ msgstr ""
#~ "Los nombres privados serán atributos normales en Python 3.10 en lugar de "
#~ "un error o un miembro (dependiendo de si el nombre termina con un guión "
#~ "bajo). El uso de estos nombres en 3.9 emitirá un :exc:"
#~ "`DeprecationWarning`."

#~ msgid "``Enum`` member type"
#~ msgstr "Tipo de miembro ``Enum``"

#~ msgid ""
#~ ":class:`Enum` members are instances of their :class:`Enum` class, and are "
#~ "normally accessed as ``EnumClass.member``.  Under certain circumstances "
#~ "they can also be accessed as ``EnumClass.member.member``, but you should "
#~ "never do this as that lookup may fail or, worse, return something besides "
#~ "the :class:`Enum` member you are looking for (this is another good reason "
#~ "to use all-uppercase names for members)::"
#~ msgstr ""
#~ "Los miembros :class:`Enum` son instancias de su clase :class:`Enum`, y "
#~ "normalmente se accede a ellos como ``EnumClass.member``. Bajo ciertas "
#~ "circunstancias también se puede acceder como ``EnumClass.member.member``, "
#~ "pero nunca se debe hacer esto ya que esa búsqueda puede fallar, o peor "
#~ "aún, retornar algo además del miembro :class:`Enum` que está buscando "
#~ "(esta es otra buena razón para usar solo mayúsculas en los nombres para "
#~ "los miembros)::"

#~ msgid "Boolean value of ``Enum`` classes and members"
#~ msgstr "Valor booleano de las clases y miembros ``Enum``"

#~ msgid ""
#~ ":class:`Enum` members that are mixed with non-:class:`Enum` types (such "
#~ "as :class:`int`, :class:`str`, etc.) are evaluated according to the mixed-"
#~ "in type's rules; otherwise, all members evaluate as :data:`True`.  To "
#~ "make your own Enum's boolean evaluation depend on the member's value add "
#~ "the following to your class::"
#~ msgstr ""
#~ "Lo miembros :class:`Enum` que están mezclados con tipos sin-:class:`Enum` "
#~ "(como :class:`int`, :class:`str`, etc.) se evalúan de acuerdo con las "
#~ "reglas de tipo mixto; de lo contrario, todos los miembros evalúan como :"
#~ "data:`True`. Para hacer que tu propia evaluación booleana de Enum dependa "
#~ "del valor del miembro, agregue lo siguiente a su clase::"

#~ msgid ":class:`Enum` classes always evaluate as :data:`True`."
#~ msgstr "las clases :class:`Enum` siempre evalúan como :data:`True`."

#~ msgid "``Enum`` classes with methods"
#~ msgstr "``Enum`` clases con métodos"

#~ msgid ""
#~ "If you give your :class:`Enum` subclass extra methods, like the `Planet`_ "
#~ "class above, those methods will show up in a :func:`dir` of the member, "
#~ "but not of the class::"
#~ msgstr ""
#~ "Si le da a su subclase :class:`Enum` métodos adicionales, como la clase "
#~ "`Planet`_ anterior, esos métodos aparecerán en una :func:`dir` del "
#~ "miembro, pero no de la clase ::"

#~ msgid "Combining members of ``Flag``"
#~ msgstr "Combinando miembros de``Flag``"

#~ msgid ""
#~ "If a combination of Flag members is not named, the :func:`repr` will "
#~ "include all named flags and all named combinations of flags that are in "
#~ "the value::"
#~ msgstr ""
#~ "Si no se nombra una combinación de miembros de Flag, el :func:`repr` "
#~ "incluirá todos los flags con nombre y todas las combinaciones de flags "
#~ "con nombre que estén en el valor ::"
