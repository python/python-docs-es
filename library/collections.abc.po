# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get
# the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-25 19:47+0200\n"
"PO-Revision-Date: 2022-12-08 16:15-0300\n"
"Last-Translator: Sofía Denner <sofi.denner@gmail.com>\n"
"Language-Team: python-doc-es\n"
"Language: es_AR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.10.3\n"
"X-Generator: Poedit 3.2.2\n"

#: ../Doc/library/collections.abc.rst:2
msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ":mod:`collections.abc` --- Clases Base Abstractas para Contenedores"

#: ../Doc/library/collections.abc.rst:10
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr ""
"Anteriormente, este módulo formaba parte del módulo :mod:`collections`."

#: ../Doc/library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr "**Código fuente:** :source:`Lib/_collections_abc.py`"

#: ../Doc/library/collections.abc.rst:23
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is hashable or whether it is a mapping."
msgstr ""
"Este módulo proporciona :term:`clases base abstractas <abstract base class>` "
"que pueden usarse para probar si una clase proporciona una interfaz "
"específica; por ejemplo, si es hashable o si es un mapeo."

#: ../Doc/library/collections.abc.rst:27
msgid ""
"An :func:`issubclass` or :func:`isinstance` test for an interface works in "
"one of three ways."
msgstr ""
"Una prueba :func:`issubclass` o :func:`isinstance` para una interfaz "
"funciona de tres formas."

#: ../Doc/library/collections.abc.rst:30
msgid ""
"1) A newly written class can inherit directly from one of the abstract base "
"classes.  The class must supply the required abstract methods.  The "
"remaining mixin methods come from inheritance and can be overridden if "
"desired.  Other methods may be added as needed:"
msgstr ""
"1) Una clase recién escrita puede heredar directamente de una de las clases "
"base abstractas. La clase debe proporcionar los métodos abstractos "
"requeridos. Los métodos mixin restantes provienen de la herencia y se pueden "
"anular si se desea. Se pueden agregar otros métodos según sea necesario:"

#: ../Doc/library/collections.abc.rst:50
msgid ""
"2) Existing classes and built-in classes can be registered as \"virtual "
"subclasses\" of the ABCs.  Those classes should define the full API "
"including all of the abstract methods and all of the mixin methods. This "
"lets users rely on :func:`issubclass` or :func:`isinstance` tests to "
"determine whether the full interface is supported.  The exception to this "
"rule is for methods that are automatically inferred from the rest of the API:"
msgstr ""
"2) Las clases existentes y las clases integradas se pueden registrar como "
"\"subclases virtuales\" de los ABC. Esas clases deben definir la API "
"completa, incluidos todos los métodos abstractos y todos los métodos mixin. "
"Esto permite a los usuarios confiar en las pruebas :func:`issubclass` o :"
"func:`isinstance` para determinar si se admite la interfaz completa. La "
"excepción a esta regla es para los métodos que se infieren automáticamente "
"del resto de la API:"

#: ../Doc/library/collections.abc.rst:76
msgid ""
"In this example, class :class:`D` does not need to define ``__contains__``, "
"``__iter__``, and ``__reversed__`` because the :ref:`in-operator "
"<comparisons>`, the :term:`iteration <iterable>` logic, and the :func:"
"`reversed` function automatically fall back to using ``__getitem__`` and "
"``__len__``."
msgstr ""
"En este ejemplo, la clase :class:`D` no necesita definir ``__contains__``, "
"``__iter__`` y ``__reversed__`` porque el :ref:`operador in <comparisons>`, "
"la lógica de :term:`iteración <iterable>` y la función :func:`reversed` "
"recurren automáticamente al uso de ``__getitem__`` y ``__len__``."

#: ../Doc/library/collections.abc.rst:82
msgid ""
"3) Some simple interfaces are directly recognizable by the presence of the "
"required methods (unless those methods have been set to :const:`None`):"
msgstr ""
"3) Algunas interfaces simples son directamente reconocibles por la presencia "
"de los métodos requeridos (a menos que esos métodos se hayan configurado en :"
"const:`None`):"

#: ../Doc/library/collections.abc.rst:99
msgid ""
"Complex interfaces do not support this last technique because an interface "
"is more than just the presence of method names.  Interfaces specify "
"semantics and relationships between methods that cannot be inferred solely "
"from the presence of specific method names.  For example, knowing that a "
"class supplies ``__getitem__``, ``__len__``, and ``__iter__`` is "
"insufficient for distinguishing a :class:`Sequence` from a :class:`Mapping`."
msgstr ""
"Las interfaces complejas no admiten esta última técnica porque una interfaz "
"es más que la simple presencia de nombres de métodos. Las interfaces "
"especifican la semántica y las relaciones entre métodos que no se pueden "
"inferir únicamente de la presencia de nombres de métodos específicos. Por "
"ejemplo, saber que una clase proporciona ``__getitem__``, ``__len__`` y "
"``__iter__`` no es suficiente para distinguir un :class:`Sequence` de un :"
"class:`Mapping`."

#: ../Doc/library/collections.abc.rst:107
msgid ""
"These abstract classes now support ``[]``. See :ref:`types-genericalias` "
"and :pep:`585`."
msgstr ""
"Estas clases abstractas ahora soportan ``[]``. Vea :ref:`types-genericalias` "
"y :pep:`585`."

#: ../Doc/library/collections.abc.rst:114
msgid "Collections Abstract Base Classes"
msgstr "Colecciones clases base abstractas"

#: ../Doc/library/collections.abc.rst:116
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr ""
"El módulo de colecciones ofrece lo siguiente :term:`ABCs <abstract base "
"class>`:"

#: ../Doc/library/collections.abc.rst:121
msgid "ABC"
msgstr "ABC"

#: ../Doc/library/collections.abc.rst:121
msgid "Inherits from"
msgstr "Hereda de"

#: ../Doc/library/collections.abc.rst:121
msgid "Abstract Methods"
msgstr "Métodos abstractos"

#: ../Doc/library/collections.abc.rst:121
msgid "Mixin Methods"
msgstr "Métodos mixin"

#: ../Doc/library/collections.abc.rst:123
msgid ":class:`Container` [1]_"
msgstr ":class:`Container` [1]_"

#: ../Doc/library/collections.abc.rst:123
msgid "``__contains__``"
msgstr "``__contains__``"

#: ../Doc/library/collections.abc.rst:124
msgid ":class:`Hashable` [1]_"
msgstr ":class:`Hashable` [1]_"

#: ../Doc/library/collections.abc.rst:124
msgid "``__hash__``"
msgstr "``__hash__``"

#: ../Doc/library/collections.abc.rst:125
msgid ":class:`Iterable` [1]_ [2]_"
msgstr ":class:`Iterable` [1]_ [2]_"

#: ../Doc/library/collections.abc.rst:125
#: ../Doc/library/collections.abc.rst:126
msgid "``__iter__``"
msgstr "``__iter__``"

#: ../Doc/library/collections.abc.rst:126
msgid ":class:`Iterator` [1]_"
msgstr ":class:`Iterator` [1]_"

#: ../Doc/library/collections.abc.rst:126
#: ../Doc/library/collections.abc.rst:127
msgid ":class:`Iterable`"
msgstr ":class:`Iterable`"

#: ../Doc/library/collections.abc.rst:126
msgid "``__next__``"
msgstr "``__next__``"

#: ../Doc/library/collections.abc.rst:127
msgid ":class:`Reversible` [1]_"
msgstr ":class:`Reversible` [1]_"

#: ../Doc/library/collections.abc.rst:127
msgid "``__reversed__``"
msgstr "``__reversed__``"

#: ../Doc/library/collections.abc.rst:128
msgid ":class:`Generator`  [1]_"
msgstr ":class:`Generator` [1]_"

#: ../Doc/library/collections.abc.rst:128
msgid ":class:`Iterator`"
msgstr ":class:`Iterator`"

#: ../Doc/library/collections.abc.rst:128
#: ../Doc/library/collections.abc.rst:176
msgid "``send``, ``throw``"
msgstr "``send``, ``throw``"

#: ../Doc/library/collections.abc.rst:128
msgid "``close``, ``__iter__``, ``__next__``"
msgstr "``close``, ``__iter__``, ``__next__``"

#: ../Doc/library/collections.abc.rst:129
msgid ":class:`Sized`  [1]_"
msgstr ":class:`Sized` [1]_"

#: ../Doc/library/collections.abc.rst:129
#: ../Doc/library/collections.abc.rst:168
msgid "``__len__``"
msgstr "``__len__``"

#: ../Doc/library/collections.abc.rst:130
msgid ":class:`Callable`  [1]_"
msgstr ":class:`Callable` [1]_"

#: ../Doc/library/collections.abc.rst:130
msgid "``__call__``"
msgstr "``__call__``"

#: ../Doc/library/collections.abc.rst:131
msgid ":class:`Collection`  [1]_"
msgstr ":class:`Collection` [1]_"

#: ../Doc/library/collections.abc.rst:131
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ":class:`Sized`, :class:`Iterable`, :class:`Container`"

#: ../Doc/library/collections.abc.rst:131
#: ../Doc/library/collections.abc.rst:147
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr "``__contains__``, ``__iter__``, ``__len__``"

#: ../Doc/library/collections.abc.rst:135
#: ../Doc/library/collections.abc.rst:138
#: ../Doc/library/collections.abc.rst:144
msgid ":class:`Sequence`"
msgstr ":class:`Sequence`"

#: ../Doc/library/collections.abc.rst:135
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ":class:`Reversible`, :class:`Collection`"

#: ../Doc/library/collections.abc.rst:135
#: ../Doc/library/collections.abc.rst:144
msgid "``__getitem__``, ``__len__``"
msgstr "``__getitem__``, ``__len__``"

#: ../Doc/library/collections.abc.rst:135
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"

#: ../Doc/library/collections.abc.rst:138
msgid ":class:`MutableSequence`"
msgstr ":class:`MutableSequence`"

#: ../Doc/library/collections.abc.rst:138
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"

#: ../Doc/library/collections.abc.rst:138
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``reverse``, ``extend``, "
"``pop``, ``remove``, and ``__iadd__``"
msgstr ""
"Métodos heredados :class:`Sequence` y ``append``, ``reverse``, ``extend``, "
"``pop``, ``remove``, and ``__iadd__``"

#: ../Doc/library/collections.abc.rst:144
msgid ":class:`ByteString`"
msgstr ":class:`ByteString`"

#: ../Doc/library/collections.abc.rst:144
msgid "Inherited :class:`Sequence` methods"
msgstr "Métodos heredados :class:`Sequence`"

#: ../Doc/library/collections.abc.rst:147
#: ../Doc/library/collections.abc.rst:151
msgid ":class:`Set`"
msgstr ":class:`Set`"

#: ../Doc/library/collections.abc.rst:147
#: ../Doc/library/collections.abc.rst:157
msgid ":class:`Collection`"
msgstr ":class:`Collection`"

#: ../Doc/library/collections.abc.rst:147
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"

#: ../Doc/library/collections.abc.rst:151
msgid ":class:`MutableSet`"
msgstr ":class:`MutableSet`"

#: ../Doc/library/collections.abc.rst:151
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"

#: ../Doc/library/collections.abc.rst:151
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""
"Métodos heredados :class:`Set` y ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"

#: ../Doc/library/collections.abc.rst:157
#: ../Doc/library/collections.abc.rst:161
msgid ":class:`Mapping`"
msgstr ":class:`Mapping`"

#: ../Doc/library/collections.abc.rst:157
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr "``__getitem__``, ``__iter__``, ``__len__``"

#: ../Doc/library/collections.abc.rst:157
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"

#: ../Doc/library/collections.abc.rst:161
msgid ":class:`MutableMapping`"
msgstr ":class:`MutableMapping`"

#: ../Doc/library/collections.abc.rst:161
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"

#: ../Doc/library/collections.abc.rst:161
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""
"Métodos heredados :class:`Mapping` y ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"

#: ../Doc/library/collections.abc.rst:168
msgid ":class:`MappingView`"
msgstr ":class:`MappingView`"

#: ../Doc/library/collections.abc.rst:168
msgid ":class:`Sized`"
msgstr ":class:`Sized`"

#: ../Doc/library/collections.abc.rst:169
msgid ":class:`ItemsView`"
msgstr ":class:`ItemsView`"

#: ../Doc/library/collections.abc.rst:169
#: ../Doc/library/collections.abc.rst:171
msgid ":class:`MappingView`, :class:`Set`"
msgstr ":class:`MappingView`, :class:`Set`"

#: ../Doc/library/collections.abc.rst:169
#: ../Doc/library/collections.abc.rst:171
#: ../Doc/library/collections.abc.rst:173
msgid "``__contains__``, ``__iter__``"
msgstr "``__contains__``, ``__iter__``"

#: ../Doc/library/collections.abc.rst:171
msgid ":class:`KeysView`"
msgstr ":class:`KeysView`"

#: ../Doc/library/collections.abc.rst:173
msgid ":class:`ValuesView`"
msgstr ":class:`ValuesView`"

#: ../Doc/library/collections.abc.rst:173
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ":class:`MappingView`, :class:`Collection`"

#: ../Doc/library/collections.abc.rst:175
msgid ":class:`Awaitable` [1]_"
msgstr ":class:`Awaitable` [1]_"

#: ../Doc/library/collections.abc.rst:175
msgid "``__await__``"
msgstr "``__await__``"

#: ../Doc/library/collections.abc.rst:176
msgid ":class:`Coroutine` [1]_"
msgstr ":class:`Coroutine` [1]_"

#: ../Doc/library/collections.abc.rst:176
msgid ":class:`Awaitable`"
msgstr ":class:`Awaitable`"

#: ../Doc/library/collections.abc.rst:176
msgid "``close``"
msgstr "``close``"

#: ../Doc/library/collections.abc.rst:177
msgid ":class:`AsyncIterable` [1]_"
msgstr ":class:`AsyncIterable` [1]_"

#: ../Doc/library/collections.abc.rst:177
#: ../Doc/library/collections.abc.rst:178
msgid "``__aiter__``"
msgstr "``__aiter__``"

#: ../Doc/library/collections.abc.rst:178
msgid ":class:`AsyncIterator` [1]_"
msgstr ":class:`AsyncIterator` [1]_"

#: ../Doc/library/collections.abc.rst:178
msgid ":class:`AsyncIterable`"
msgstr ":class:`AsyncIterable`"

#: ../Doc/library/collections.abc.rst:178
msgid "``__anext__``"
msgstr "``__anext__``"

#: ../Doc/library/collections.abc.rst:179
msgid ":class:`AsyncGenerator` [1]_"
msgstr ":class:`AsyncGenerator` [1]_"

#: ../Doc/library/collections.abc.rst:179
msgid ":class:`AsyncIterator`"
msgstr ":class:`AsyncIterator`"

#: ../Doc/library/collections.abc.rst:179
msgid "``asend``, ``athrow``"
msgstr "``asend``, ``athrow``"

#: ../Doc/library/collections.abc.rst:179
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr "``aclose``, ``__aiter__``, ``__anext__``"

#: ../Doc/library/collections.abc.rst:184
msgid "Footnotes"
msgstr "Notas al pie"

#: ../Doc/library/collections.abc.rst:185
msgid ""
"These ABCs override :meth:`object.__subclasshook__` to support testing an "
"interface by verifying the required methods are present and have not been "
"set to :const:`None`.  This only works for simple interfaces.  More complex "
"interfaces require registration or direct subclassing."
msgstr ""
"Estos ABC anulan :meth:`object.__subclasshook__` para admitir la prueba de "
"una interfaz verificando que los métodos requeridos estén presentes y no se "
"hayan configurado en :const:`None`. Esto solo funciona para interfaces "
"simples. Las interfaces más complejas requieren registro o herencia directa."

#: ../Doc/library/collections.abc.rst:191
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`__iter__` method, but it does "
"not detect classes that iterate with the :meth:`__getitem__` method.  The "
"only reliable way to determine whether an object is :term:`iterable` is to "
"call ``iter(obj)``."
msgstr ""
"La verificación de ``isinstance(obj, Iterable)`` detecta clases que están "
"registradas como :class:`Iterable` o que tienen un método :meth:`__iter__`, "
"pero no detecta clases que iteran con el método :meth:`__getitem__`. La "
"única forma confiable de determinar si un objeto es :term:`iterable` es "
"llamar a ``iter(obj)``."

#: ../Doc/library/collections.abc.rst:199
msgid "Collections Abstract Base Classes -- Detailed Descriptions"
msgstr "Colecciones Clases base abstractas - Descripciones detalladas"

#: ../Doc/library/collections.abc.rst:204
msgid "ABC for classes that provide the :meth:`__contains__` method."
msgstr "ABC para clases que proporcionan el método :meth:`__contains__`."

#: ../Doc/library/collections.abc.rst:208
msgid "ABC for classes that provide the :meth:`__hash__` method."
msgstr "ABC para clases que proporcionan el método :meth:`__hash__`."

#: ../Doc/library/collections.abc.rst:212
msgid "ABC for classes that provide the :meth:`__len__` method."
msgstr "ABC para clases que proporcionan el método :meth:`__len__`."

#: ../Doc/library/collections.abc.rst:216
msgid "ABC for classes that provide the :meth:`__call__` method."
msgstr "ABC para clases que proporcionan el método :meth:`__call__`."

#: ../Doc/library/collections.abc.rst:220
msgid "ABC for classes that provide the :meth:`__iter__` method."
msgstr "ABC para clases que proporcionan el método :meth:`__iter__`."

#: ../Doc/library/collections.abc.rst:222
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`__iter__` method, but it does "
"not detect classes that iterate with the :meth:`__getitem__` method. The "
"only reliable way to determine whether an object is :term:`iterable` is to "
"call ``iter(obj)``."
msgstr ""
"Al marcar ``isinstance(obj, Iterable)`` se detectan las clases que están "
"registradas como :class:`Iterable` o que tienen un método :meth:`__iter__`, "
"pero no detecta clases que iteran con el método :meth:`__getitem__`. La "
"única forma confiable de determinar si un objeto es :term:`iterable` es "
"llamar a ``iter(obj)``."

#: ../Doc/library/collections.abc.rst:230
msgid "ABC for sized iterable container classes."
msgstr "ABC para clases de contenedor iterables de tamaño."

#: ../Doc/library/collections.abc.rst:236
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and :meth:"
"`~iterator.__next__` methods.  See also the definition of :term:`iterator`."
msgstr ""
"ABC para clases que proporcionan el método :meth:`~iterator.__iter__` y :"
"meth:`~iterator.__next__`. Ver también la definición de :term:`iterator`."

#: ../Doc/library/collections.abc.rst:242
msgid ""
"ABC for iterable classes that also provide the :meth:`__reversed__` method."
msgstr ""
"ABC para clases iterables que también proporcionan :meth:`__reversed__` "
"method."

#: ../Doc/library/collections.abc.rst:249
msgid ""
"ABC for generator classes that implement the protocol defined in :pep:`342` "
"that extends iterators with the :meth:`~generator.send`, :meth:`~generator."
"throw` and :meth:`~generator.close` methods. See also the definition of :"
"term:`generator`."
msgstr ""
"ABC para clases generadoras que implementan el protocolo definido en :pep:"
"`342` que extiende los iteradores con los métodos :meth:`~generator.send`, :"
"meth:`~generator.throw` and :meth:`~generator.close`. Ver también la "
"definición de :term:`generator`."

#: ../Doc/library/collections.abc.rst:260
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr "ABC para solo lectura y mutable :term:`secuencias <sequence>`."

#: ../Doc/library/collections.abc.rst:262
msgid ""
"Implementation note: Some of the mixin methods, such as :meth:`__iter__`, :"
"meth:`__reversed__` and :meth:`index`, make repeated calls to the "
"underlying :meth:`__getitem__` method. Consequently, if :meth:`__getitem__` "
"is implemented with constant access speed, the mixin methods will have "
"linear performance; however, if the underlying method is linear (as it would "
"be with a linked list), the mixins will have quadratic performance and will "
"likely need to be overridden."
msgstr ""
"Nota de implementación: algunos de los métodos mixin, tales como :meth:"
"`__iter__`, :meth:`__reversed__` and :meth:`index`, hacen llamadas repetidas "
"al subyacente :meth:`__getitem__` method. En consecuencia, si :meth:"
"`__getitem__` se implementa con velocidad de acceso constante, los métodos "
"mixin tendrán un rendimiento lineal; sin embargo, si el método subyacente es "
"lineal (como lo sería con una lista vinculada), los mixins tendrán un "
"rendimiento cuadrático y probablemente deberán ser anulados."

#: ../Doc/library/collections.abc.rst:271
msgid "The index() method added support for *stop* and *start* arguments."
msgstr "El método index() agregó soporte para los argumentos *stop* y *start*."

#: ../Doc/library/collections.abc.rst:278
msgid "ABCs for read-only and mutable sets."
msgstr "ABC para conjuntos de solo lectura y mutables."

#: ../Doc/library/collections.abc.rst:283
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr "ABC para solo lectura y mutable :term:`mapeos <mapping>`."

#: ../Doc/library/collections.abc.rst:290
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr ""
"ABC para mapeo, elementos, claves y valores :term:`vistas <dictionary view>`."

#: ../Doc/library/collections.abc.rst:294
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the :meth:`__await__` "
"method."
msgstr ""
"ABC para objetos :term:`awaitable`, que pueden ser usados en expresiones :"
"keyword:`await`. Las implementaciones personalizadas deben proporcionar el "
"método :meth:`__await__`."

#: ../Doc/library/collections.abc.rst:298
msgid ""
":term:`Coroutine <coroutine>` objects and instances of the :class:"
"`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""
":term:`Coroutine <coroutine>` objetos e instancias de la clase :class:"
"`~collections.abc.Coroutine` ABC son todas las instancias de este ABC."

#: ../Doc/library/collections.abc.rst:302
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine`) are *awaitables*, even though they do not have an :meth:"
"`__await__` method. Using ``isinstance(gencoro, Awaitable)`` for them will "
"return ``False``. Use :func:`inspect.isawaitable` to detect them."
msgstr ""
"En CPython, las corrutinas basadas en generador (generadores decorados con :"
"func:`types.coroutine`) son *awaitables*, a pesar de que no tienen un "
"método :meth:`__await__`. El uso de ``isinstance(gencoro, Awaitable)`` para "
"ellas retornará ``False``. Use :func:`inspect.isawaitable` para detectarlas."

#: ../Doc/library/collections.abc.rst:312
msgid ""
"ABC for coroutine compatible classes.  These implement the following "
"methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, :meth:"
"`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom implementations "
"must also implement :meth:`__await__`.  All :class:`Coroutine` instances are "
"also instances of :class:`Awaitable`.  See also the definition of :term:"
"`coroutine`."
msgstr ""
"ABC para clases corrutinas compatibles. Estos implementan los siguientes "
"métodos, definidos en :ref:`coroutine-objects`: :meth:`~coroutine.send`, :"
"meth:`~coroutine.throw`, and :meth:`~coroutine.close`. Las implementaciones "
"personalizadas también deben implementar :meth:`__await__`. Todas las "
"instancias de :class:`Coroutine` también son instancias de :class:"
"`Awaitable`. Ver también la definición de :term:`coroutine`."

#: ../Doc/library/collections.abc.rst:320
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine`) are *awaitables*, even though they do not have an :meth:"
"`__await__` method. Using ``isinstance(gencoro, Coroutine)`` for them will "
"return ``False``. Use :func:`inspect.isawaitable` to detect them."
msgstr ""
"En CPython, las corrutinas basadas en generador (generadores decorados con :"
"func:`types.coroutine`) son *awaitables*, a pesar de que no tienen un "
"método :meth:`__await__`. El uso de ``isinstance(gencoro, Coroutine)`` para "
"ellas retornará ``False``. Use :func:`inspect.isawaitable` para detectarlas."

#: ../Doc/library/collections.abc.rst:330
msgid ""
"ABC for classes that provide ``__aiter__`` method.  See also the definition "
"of :term:`asynchronous iterable`."
msgstr ""
"ABC para las clases que proporcionan el método ``__aiter__``. Ver también la "
"definición de :term:`asynchronous iterable`."

#: ../Doc/library/collections.abc.rst:337
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""
"ABC para clases que proveen métodos ``__aiter__`` and ``__anext__``. Ver "
"también la definición de :term:`asynchronous iterator`."

#: ../Doc/library/collections.abc.rst:344
msgid ""
"ABC for asynchronous generator classes that implement the protocol defined "
"in :pep:`525` and :pep:`492`."
msgstr ""
"ABC para clases generadoras asincrónicas que implementan el protocolo "
"definido en :pep:`525` y :pep:`492`."

#: ../Doc/library/collections.abc.rst:350
msgid "Examples and Recipes"
msgstr "Ejemplos y Recetas"

#: ../Doc/library/collections.abc.rst:352
msgid ""
"ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr ""
"Los ABC nos permiten preguntar a las clases o instancias si brindan una "
"funcionalidad particular, por ejemplo:"

#: ../Doc/library/collections.abc.rst:359
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop "
"classes supporting container APIs.  For example, to write a class supporting "
"the full :class:`Set` API, it is only necessary to supply the three "
"underlying abstract methods: :meth:`__contains__`, :meth:`__iter__`, and :"
"meth:`__len__`. The ABC supplies the remaining methods such as :meth:"
"`__and__` and :meth:`isdisjoint`::"
msgstr ""
"Varios ABCs también son útiles como mixins que facilitan el desarrollo de "
"clases que admiten APIs de contenedor. Por ejemplo, para escribir una clase "
"que admita toda la API :class:`Set`, solo es necesario proporcionar los tres "
"métodos abstractos subyacentes: :meth:`__contains__`, :meth:`__iter__`, y :"
"meth:`__len__`. El ABC proporciona los métodos restantes, como :meth:"
"`__and__` y :meth:`isdisjoint`::"

#: ../Doc/library/collections.abc.rst:388
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr ""
"Notas sobre el uso de :class:`Set` y :class:`MutableSet` como un mixin:"

#: ../Doc/library/collections.abc.rst:391
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an iterable. The class constructor is "
"assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal classmethod called :meth:"
"`_from_iterable` which calls ``cls(iterable)`` to produce a new set. If the :"
"class:`Set` mixin is being used in a class with a different constructor "
"signature, you will need to override :meth:`_from_iterable` with a "
"classmethod or regular method that can construct new instances from an "
"iterable argument."
msgstr ""
"Dado que algunas operaciones de conjuntos crean nuevos conjuntos, los "
"métodos mixin predeterminados necesitan una forma de crear nuevas instancias "
"a partir de un iterable. Se supone que el constructor de la clase tiene una "
"firma con el formato ``ClassName(iterable)``. Esa suposición se factoriza en "
"un método de clase interno llamado :meth:`_from_iterable` que llama a "
"``cls(iterable)`` para producir un nuevo conjunto. Si el mixin :class:`Set` "
"se está usando en una clase con una firma de constructor diferente, "
"necesitarás anular :meth:`_from_iterable` con un método de clase o método "
"regular que pueda construir nuevas instancias a partir de un argumento "
"iterable."

#: ../Doc/library/collections.abc.rst:402
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`__le__` and :meth:`__ge__`, then the other "
"operations will automatically follow suit."
msgstr ""
"Para reemplazar las comparaciones (presumiblemente para la velocidad, ya que "
"las semánticas son fijas), redefinir :meth:`__le__` y :meth:`__ge__`, luego "
"las otras operaciones seguirán automáticamente su ejemplo."

#: ../Doc/library/collections.abc.rst:407
msgid ""
"The :class:`Set` mixin provides a :meth:`_hash` method to compute a hash "
"value for the set; however, :meth:`__hash__` is not defined because not all "
"sets are hashable or immutable.  To add set hashability using mixins, "
"inherit from both :meth:`Set` and :meth:`Hashable`, then define ``__hash__ = "
"Set._hash``."
msgstr ""
"El mixin :class:`Set` proporciona un método :meth:`_hash` para calcular un "
"valor hash para el conjunto; sin embargo, :meth:`__hash__` no está definido "
"porque no todos los conjuntos son encadenados o inmutables. Para agregar "
"capacidad de encadenamiento en conjuntos que usan mixin, herede de ambos :"
"meth:`Set` y :meth:`Hashable`, luego defina ``__hash__ = Set._hash``."

#: ../Doc/library/collections.abc.rst:415
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""
"`OrderedSet receta <https://code.activestate.com/recipes/576694/>`_ para un "
"ejemplo basado en :class:`MutableSet`."

#: ../Doc/library/collections.abc.rst:418
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr ""
"Para obtener más información sobre ABCs, ver el módulo :mod:`abc` y :pep:"
"`3119`."
