# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-19 11:16+0100\n"
"PO-Revision-Date: 2020-07-25 14:37-0500\n"
"Last-Translator: Adolfo Hristo David Roque Gámez <hristo.roqueg@gmail.com>\n"
"Language: es_PE\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../Doc/library/weakref.rst:2
msgid ":mod:`weakref` --- Weak references"
msgstr ":mod:`weakref` --- Referencias débiles"

#: ../Doc/library/weakref.rst:12
msgid "**Source code:** :source:`Lib/weakref.py`"
msgstr "**Código Fuente:** :source:`Lib/weakref.py`"

#: ../Doc/library/weakref.rst:16
msgid ""
"The :mod:`weakref` module allows the Python programmer to create :dfn:`weak "
"references` to objects."
msgstr ""
"El módulo :mod:`weakref` le permite al programador de Python crear :dfn:"
"`referencias débiles<weak references>` a objetos."

#: ../Doc/library/weakref.rst:22
msgid ""
"In the following, the term :dfn:`referent` means the object which is "
"referred to by a weak reference."
msgstr ""
"A continuación, el término :dfn:`referente` alude al objeto que es "
"referenciado por una referencia débil."

#: ../Doc/library/weakref.rst:25
msgid ""
"A weak reference to an object is not enough to keep the object alive: when "
"the only remaining references to a referent are weak references, :term:"
"`garbage collection` is free to destroy the referent and reuse its memory "
"for something else.  However, until the object is actually destroyed the "
"weak reference may return the object even if there are no strong references "
"to it."
msgstr ""
"Una referencia débil a un objeto no es suficiente para mantener al objeto "
"con vida: cuando las únicas referencias que le queden a un referente son "
"referencias débiles, la (:term:`recolección de basura<garbage collection>`) "
"es libre de destruir al referente y reusar su memoria para algo más.  Sin "
"embargo, hasta que el objeto no sea realmente destruido, la referencia débil "
"puede retornar el objeto incluso si no tiene referencias fuertes."

#: ../Doc/library/weakref.rst:31
msgid ""
"A primary use for weak references is to implement caches or mappings holding "
"large objects, where it's desired that a large object not be kept alive "
"solely because it appears in a cache or mapping."
msgstr ""
"Un uso principal para las referencias débiles es para implementar caches o "
"mapeados que mantienen objetos grandes, cuando no se desea que un objeto "
"grande no sea mantenido con vida sólo porque aparece en un cache o mapeado."

#: ../Doc/library/weakref.rst:35
msgid ""
"For example, if you have a number of large binary image objects, you may "
"wish to associate a name with each.  If you used a Python dictionary to map "
"names to images, or images to names, the image objects would remain alive "
"just because they appeared as values or keys in the dictionaries.  The :"
"class:`WeakKeyDictionary` and :class:`WeakValueDictionary` classes supplied "
"by the :mod:`weakref` module are an alternative, using weak references to "
"construct mappings that don't keep objects alive solely because they appear "
"in the mapping objects.  If, for example, an image object is a value in a :"
"class:`WeakValueDictionary`, then when the last remaining references to that "
"image object are the weak references held by weak mappings, garbage "
"collection can reclaim the object, and its corresponding entries in weak "
"mappings are simply deleted."
msgstr ""
"Por ejemplo, si tienes un número de grandes objetos de imágenes binarias, "
"puedes desear asociar un nombre con cada uno. Si usaras un diccionario de "
"Python para mapear los nombres a imágenes, o imágenes a nombres, los objetos "
"imagen quedarían con vida sólo porque aparecen como valores o llaves en los "
"diccionarios.  Las clases :class:`WeakKeyDictionary` y :class:"
"`WeakValueDictionary` que se proporcionan por el módulo :mod:`weakref` son "
"una alternativa, usando referencias débiles para construir mapeados que no "
"mantengan con vida el objeto sólo porque aparecen en el mapeado de objetos.  "
"Si, por ejemplo, un objeto imagen es un valor en un :class:"
"`WeakValueDictionary`, entonces cuando las últimas referencias que queden de "
"ese objeto imagen sean las referencias débiles guardadas por mapeados "
"débiles, la recolección de basura puede reclamar el objeto, y sus entradas "
"correspondientes en mapeados débiles son simplemente eliminadas."

#: ../Doc/library/weakref.rst:48
msgid ""
":class:`WeakKeyDictionary` and :class:`WeakValueDictionary` use weak "
"references in their implementation, setting up callback functions on the "
"weak references that notify the weak dictionaries when a key or value has "
"been reclaimed by garbage collection.  :class:`WeakSet` implements the :"
"class:`set` interface, but keeps weak references to its elements, just like "
"a :class:`WeakKeyDictionary` does."
msgstr ""
":class:`WeakKeyDictionary` y :class:`WeakValueDictionary` usan referencias "
"débiles en sus implementaciones, estableciendo retrollamadas (*callback*) en "
"las referencias débiles que notifiquen a los diccionarios débiles cuando una "
"llave o valor ha sido reclamado por la recolección de basura. :class:"
"`WeakSet` implementa la interfaz :class:`set`, pero mantiene referencias "
"débiles de sus elementos, justo como lo hace :class:`WeakKeyDictionary`."

#: ../Doc/library/weakref.rst:55
msgid ""
":class:`finalize` provides a straight forward way to register a cleanup "
"function to be called when an object is garbage collected. This is simpler "
"to use than setting up a callback function on a raw weak reference, since "
"the module automatically ensures that the finalizer remains alive until the "
"object is collected."
msgstr ""
":class:`finalize` provee una forma directa de registrar una función de "
"limpieza que se llame cuando un objeto es recogido por la recolección de "
"basura. Esto es más simple que configurar una retrollamada en una referencia "
"débil pura, ya que el módulo automáticamente se asegura que el finalizador "
"se mantenga con vida hasta que el objeto sea recolectado."

#: ../Doc/library/weakref.rst:61
msgid ""
"Most programs should find that using one of these weak container types or :"
"class:`finalize` is all they need -- it's not usually necessary to create "
"your own weak references directly.  The low-level machinery is exposed by "
"the :mod:`weakref` module for the benefit of advanced uses."
msgstr ""
"La mayoría de programas deben descubrir que usar uno de estos tipos de "
"contenedores débiles o la clase :class:`finalize` es todo lo que necesitan "
"-- usualmente no es necesario crear tus propias referencias débiles "
"directamente.  La maquinaria de bajo nivel está expuesta por el módulo :mod:"
"`weakref` para el beneficio de usuarios avanzados."

#: ../Doc/library/weakref.rst:66
msgid ""
"Not all objects can be weakly referenced; those objects which can include "
"class instances, functions written in Python (but not in C), instance "
"methods, sets, frozensets, some :term:`file objects <file object>`, :term:"
"`generators <generator>`, type objects, sockets, arrays, deques, regular "
"expression pattern objects, and code objects."
msgstr ""
"No todos los objetos pueden ser débilmente referenciados; esos objetos que "
"pueden incluir instancias de clases, funciones escritas en Python (pero no "
"en C), métodos de instancia, conjuntos, conjuntos congelados (*frozensets*), "
"algunos :term:`objetos de archivo <file object>`, :term:`generadores "
"<generator>`, objetos de tipos, sockets, arreglos, *deques*, objetos de "
"patrones de expresiones regulares, y objetos código."

#: ../Doc/library/weakref.rst:72
msgid "Added support for thread.lock, threading.Lock, and code objects."
msgstr ""
"Se añadió el soporte para thread.lock, threading.Lock, y objetos código."

#: ../Doc/library/weakref.rst:75
msgid ""
"Several built-in types such as :class:`list` and :class:`dict` do not "
"directly support weak references but can add support through subclassing::"
msgstr ""
"Varios tipos incorporados como :class:`list` y :class:`dict` no soportan "
"directamente referencias débiles pero pueden añadir soporte al crear una "
"subclase:"

#: ../Doc/library/weakref.rst:85
msgid ""
"Other built-in types such as :class:`tuple` and :class:`int` do not support "
"weak references even when subclassed."
msgstr ""
"Otros tipos incorporados como :class:`tuple` y :class:`int` no soportan "
"referencias débiles incluso cuando son usadas como clase base."

#: ../Doc/library/weakref.rst:88
msgid ""
"Extension types can easily be made to support weak references; see :ref:"
"`weakref-support`."
msgstr ""
"Los tipos de extensiones se pueden hacer para soportar referencias débiles; "
"véase :ref:`weakref-support`."

#: ../Doc/library/weakref.rst:94
msgid ""
"Return a weak reference to *object*.  The original object can be retrieved "
"by calling the reference object if the referent is still alive; if the "
"referent is no longer alive, calling the reference object will cause :const:"
"`None` to be returned.  If *callback* is provided and not :const:`None`, and "
"the returned weakref object is still alive, the callback will be called when "
"the object is about to be finalized; the weak reference object will be "
"passed as the only parameter to the callback; the referent will no longer be "
"available."
msgstr ""
"Retorna una referencia débil de *object*.  El objeto original puede ser "
"recuperado al llamar la referencia del objeto si el referente sigue con "
"vida; si el referente ya no está con vida, llamar a la  referencia del "
"objeto causará que se retorne un :const:`None`.  Si se proporciona "
"*callback* y no :const:`None`, y el objeto *weakref* retornado aún sigue con "
"vida, el *callback* será llamado cuando el objeto esté a punto de ser "
"finalizado; el objeto de la referencia débil será pasado como el único "
"parámetro a la retrollamada, el referente ya no estará disponible."

#: ../Doc/library/weakref.rst:102
msgid ""
"It is allowable for many weak references to be constructed for the same "
"object. Callbacks registered for each weak reference will be called from the "
"most recently registered callback to the oldest registered callback."
msgstr ""
"Se permite que muchas referencias débiles sean construidas por el mismo "
"objeto. Las retrollamadas registradas por cada referencia débil serán "
"llamados desde la retrollamada registrada más recientemente hasta la "
"retrollamada registrada más antigua."

#: ../Doc/library/weakref.rst:106
msgid ""
"Exceptions raised by the callback will be noted on the standard error "
"output, but cannot be propagated; they are handled in exactly the same way "
"as exceptions raised from an object's :meth:`__del__` method."
msgstr ""
"Las excepciones lanzadas por el *callback* serán anotadas en la salida de "
"error estándar, pero no pueden ser propagadas; son manejadas igual que las "
"excepciones lanzadas por el método :meth:`__del__` de un objeto."

#: ../Doc/library/weakref.rst:110
msgid ""
"Weak references are :term:`hashable` if the *object* is hashable.  They will "
"maintain their hash value even after the *object* was deleted.  If :func:"
"`hash` is called the first time only after the *object* was deleted, the "
"call will raise :exc:`TypeError`."
msgstr ""
"Las referencias débiles son :term:`hashable` si el *objet* es mapeable.  "
"Ellos mantendrán su valor del hash incluso cuando el *objet* haya sido "
"eliminado.  Si :func:`hash` es llamado por primera vez sólo después de que "
"*object* sea eliminado, la llamada lanzará un :exc:`TypeError`."

#: ../Doc/library/weakref.rst:115
msgid ""
"Weak references support tests for equality, but not ordering.  If the "
"referents are still alive, two references have the same equality "
"relationship as their referents (regardless of the *callback*).  If either "
"referent has been deleted, the references are equal only if the reference "
"objects are the same object."
msgstr ""
"Las referencias débiles soportan pruebas para igualdad, pero no para "
"ordenación.  Si los referentes están todavía con vida, dos referencias tiene "
"la misma relación de igualdad como sus referentes (sin importar el "
"*callback*).  Si un referente ha sido eliminado, las referencias son iguales "
"sólo si el objetos de referencia son el mismo objeto."

#: ../Doc/library/weakref.rst:120
msgid "This is a subclassable type rather than a factory function."
msgstr ""
"Es un tipo del que se puede crear una subclase en vez de una función de "
"fábrica."

#: ../Doc/library/weakref.rst:124
msgid ""
"This read-only attribute returns the callback currently associated to the "
"weakref.  If there is no callback or if the referent of the weakref is no "
"longer alive then this attribute will have value ``None``."
msgstr ""
"Este atributo de sólo lectura retorna la llamada que está asociada "
"actualmente con el *weakref*.  Si no hay retrollamadas o si el referente del "
"*weakref* no está con vida entonces este atributo tendrá de valor ``None``."

#: ../Doc/library/weakref.rst:128
msgid "Added the :attr:`__callback__` attribute."
msgstr "Se añadió el atributo :attr:`__callback__`."

#: ../Doc/library/weakref.rst:134
msgid ""
"Return a proxy to *object* which uses a weak reference.  This supports use "
"of the proxy in most contexts instead of requiring the explicit "
"dereferencing used with weak reference objects.  The returned object will "
"have a type of either ``ProxyType`` or ``CallableProxyType``, depending on "
"whether *object* is callable.  Proxy objects are not :term:`hashable` "
"regardless of the referent; this avoids a number of problems related to "
"their fundamentally mutable nature, and prevent their use as dictionary "
"keys.  *callback* is the same as the parameter of the same name to the :func:"
"`ref` function."
msgstr ""
"Retorna un proxy a *object* que usa una referencia débil.  Esto soporta el "
"uso del proxy en la mayoría de los contextos en vez de requerir la "
"dereferencia explícita usada con los objetos de referencia débil. El objeto "
"retornado tendrá un tipo ``ProxyType`` o ``CallableProxyType``, dependiendo "
"si *object* es invocable. Objetos Proxy no son :term:`hashable` "
"independiente de la referencia; esto evita un número de problemas "
"relacionados a su naturaleza mutable fundamental, y previene su uso como "
"claves de diccionario. *callback* es el mismo como el parámetro del mismo "
"nombre de la función :func:`ref`."

#: ../Doc/library/weakref.rst:143
msgid ""
"Extended the operator support on proxy objects to include the matrix "
"multiplication operators ``@`` and ``@=``."
msgstr ""
"Se extendió el soporto de operadores en objetos proxy para incluir los "
"operadores de multiplicación de matrices ``@`` and ``@=``."

#: ../Doc/library/weakref.rst:150
msgid ""
"Return the number of weak references and proxies which refer to *object*."
msgstr ""
"Retorna el número de referencias débiles y proxies que refieren a *object*."

#: ../Doc/library/weakref.rst:155
msgid ""
"Return a list of all weak reference and proxy objects which refer to "
"*object*."
msgstr ""
"Retorna una lista de todas las referencias débiles y objetos proxy que "
"refieren a *object*."

#: ../Doc/library/weakref.rst:160
msgid ""
"Mapping class that references keys weakly.  Entries in the dictionary will "
"be discarded when there is no longer a strong reference to the key.  This "
"can be used to associate additional data with an object owned by other parts "
"of an application without adding attributes to those objects.  This can be "
"especially useful with objects that override attribute accesses."
msgstr ""
"Clase de mapeado que referencia llaves débilmente.  Las entradas en el "
"diccionario serán descartadas cuando no haya una referencia fuerte a la "
"llave.  Esto puede ser usado para asociar datos con un objeto apropiado por "
"otras partes de una aplicación sin añadir atributos a esos objetos.  Esto "
"puede ser especialmente útil con objetos que sobre escriben atributos de "
"acceso."

#: ../Doc/library/weakref.rst:166
msgid "Added support for ``|`` and ``|=`` operators, specified in :pep:`584`."
msgstr ""

#: ../Doc/library/weakref.rst:169
msgid ""
":class:`WeakKeyDictionary` objects have an additional method that exposes "
"the internal references directly.  The references are not guaranteed to be "
"\"live\" at the time they are used, so the result of calling the references "
"needs to be checked before being used.  This can be used to avoid creating "
"references that will cause the garbage collector to keep the keys around "
"longer than needed."
msgstr ""
"Los objetos :class:`WeakKeyDictionary` tiene un método adicional que expone "
"las referencias internas directamente.  Las referencias no tienen garantía "
"de estar con \"vida\" en el momento en que son usadas, por lo que el "
"resultado de llamar las referencias necesita ser revisado antes de ser "
"usado. Esto puede ser usado para evitar crear referencias que causen que "
"recolector de basura mantenga las llaves en existencia más tiempo del que "
"necesitan."

#: ../Doc/library/weakref.rst:179
msgid "Return an iterable of the weak references to the keys."
msgstr "Retorna un iterable de las referencias débiles a las llaves."

#: ../Doc/library/weakref.rst:184
msgid ""
"Mapping class that references values weakly.  Entries in the dictionary will "
"be discarded when no strong reference to the value exists any more."
msgstr ""
"Clase de mapeado que referencia valores débilmente.  Las entradas en el "
"diccionario serán descartadas cuando ya no existan las referencias fuertes a "
"los valores."

#: ../Doc/library/weakref.rst:187
msgid ""
"Added support for ``|`` and ``|=`` operators, as specified in :pep:`584`."
msgstr ""

#: ../Doc/library/weakref.rst:190
msgid ""
":class:`WeakValueDictionary` objects have an additional method that has the "
"same issues as the :meth:`keyrefs` method of :class:`WeakKeyDictionary` "
"objects."
msgstr ""
"Los objetos :class:`WeakValueDictionary` tienen un método adicional que "
"tiene los mismos problemas que el método :meth:`keyrefs` de los objetos :"
"class:`WeakyKeyDictionary`."

#: ../Doc/library/weakref.rst:197
msgid "Return an iterable of the weak references to the values."
msgstr "Retorna un iterable de las referencias débiles a los valores."

#: ../Doc/library/weakref.rst:202
msgid ""
"Set class that keeps weak references to its elements.  An element will be "
"discarded when no strong reference to it exists any more."
msgstr ""
"Clase Conjunto que mantiene referencias débiles a sus elementos.  Un "
"elemento será descartado cuando ya no existan referencias fuertes."

#: ../Doc/library/weakref.rst:208
msgid ""
"A custom :class:`ref` subclass which simulates a weak reference to a bound "
"method (i.e., a method defined on a class and looked up on an instance). "
"Since a bound method is ephemeral, a standard weak reference cannot keep "
"hold of it.  :class:`WeakMethod` has special code to recreate the bound "
"method until either the object or the original function dies::"
msgstr ""
"Una subclase :class:`ref` personalizada que simula una referencia débil a un "
"método vinculado (i.e., un método definido en una clase y visto en una "
"instancia). Ya que un método atado es efímero, una referencia débil estándar "
"no puede mantenerlo.  El :class:`WeakMethod` tiene un código especial para "
"recrear el método atado hasta que o el objeto o la función original muera::"

#: ../Doc/library/weakref.rst:236
msgid ""
"Return a callable finalizer object which will be called when *obj* is "
"garbage collected. Unlike an ordinary weak reference, a finalizer will "
"always survive until the reference object is collected, greatly simplifying "
"lifecycle management."
msgstr ""
"Retorna un objeto finalizador invocable que será llamado cuando *obj* sea "
"recolectado por el recolector de basura. A diferencia de referencias débiles "
"ordinarias, un finalizador siempre sobrevivirá hasta que el objeto de "
"referencia sea recolectado, simplificando enormemente la gestión del ciclo "
"de vida."

#: ../Doc/library/weakref.rst:241
msgid ""
"A finalizer is considered *alive* until it is called (either explicitly or "
"at garbage collection), and after that it is *dead*.  Calling a live "
"finalizer returns the result of evaluating ``func(*arg, **kwargs)``, whereas "
"calling a dead finalizer returns :const:`None`."
msgstr ""
"Se considera a un finalizador como *vivo* hasta que sea llamado (o "
"explícitamente o en la recolección de basura), y después que esté *muerto*.  "
"Llamar a un finalizador vivo retorna el resultado de evaluar ``func(*arg,"
"**kwargs)``, mientras que llamar a un finalizador muerto retorna :const:"
"`None`."

#: ../Doc/library/weakref.rst:246
msgid ""
"Exceptions raised by finalizer callbacks during garbage collection will be "
"shown on the standard error output, but cannot be propagated.  They are "
"handled in the same way as exceptions raised from an object's :meth:"
"`__del__` method or a weak reference's callback."
msgstr ""
"Las excepciones lanzadas por retrollamadas de finalizadores durante la "
"recolección de basura serán mostradas en la salida de error estándar, pero "
"no pueden ser propagadas.  Son gestionados de la misma forma que las "
"excepciones lanzadas del método :meth:`__del__` de un objeto o la "
"retrollamada de una referencia débil."

#: ../Doc/library/weakref.rst:252
msgid ""
"When the program exits, each remaining live finalizer is called unless its :"
"attr:`atexit` attribute has been set to false.  They are called in reverse "
"order of creation."
msgstr ""
"Cuando el programa sale, cada finalizador vivo que quede es llamado a menos "
"que su atributo :attr:`atexit` sea falso.  Son llamados en el orden reverso "
"de creación."

#: ../Doc/library/weakref.rst:256
msgid ""
"A finalizer will never invoke its callback during the later part of the :"
"term:`interpreter shutdown` when module globals are liable to have been "
"replaced by :const:`None`."
msgstr ""
"Un finalizador nunca invocará su retrollamada durante la última parte del :"
"term:`interpreter shutdown <apagado del intérprete>` cuando los módulos "
"globales están sujetos a ser reemplazados por :const:`None`."

#: ../Doc/library/weakref.rst:262
msgid ""
"If *self* is alive then mark it as dead and return the result of calling "
"``func(*args, **kwargs)``.  If *self* is dead then return :const:`None`."
msgstr ""
"Si *self* está vivo entonces lo marca como muerto y retorna el resultado de "
"llamar a ``func(*args,**kwargs)``.  Si *self* está muerto entonces retorna :"
"const:`None`."

#: ../Doc/library/weakref.rst:268
msgid ""
"If *self* is alive then mark it as dead and return the tuple ``(obj, func, "
"args, kwargs)``.  If *self* is dead then return :const:`None`."
msgstr ""
"Si *self* está vivo entonces lo marca como muerto y retorna la tupla ``(obj, "
"func, args, kwargs)``.  Si *self* está muerto entonces retorna :const:`None`."

#: ../Doc/library/weakref.rst:274
msgid ""
"If *self* is alive then return the tuple ``(obj, func, args, kwargs)``.  If "
"*self* is dead then return :const:`None`."
msgstr ""
"Si *self* está vivo entonces retorna la tupla ``(obj, func, args, "
"kwargs)``.  Si *self* está muerto entonces retorna :const:`None`."

#: ../Doc/library/weakref.rst:279
msgid "Property which is true if the finalizer is alive, false otherwise."
msgstr ""
"Propiedad que es verdadera si el finalizador está vivo, caso contrario, "
"falso."

#: ../Doc/library/weakref.rst:283
msgid ""
"A writable boolean property which by default is true.  When the program "
"exits, it calls all remaining live finalizers for which :attr:`.atexit` is "
"true.  They are called in reverse order of creation."
msgstr ""
"Una propiedad booleana con permisos de escritura que por defecto es "
"verdadero.  Cuando el programa sale, llama a todos los finalizadores vivos "
"que queden para los cuales :attr:`atexit` es verdadero.  Ellos son llamados "
"en el orden reverso de creación."

#: ../Doc/library/weakref.rst:290
msgid ""
"It is important to ensure that *func*, *args* and *kwargs* do not own any "
"references to *obj*, either directly or indirectly, since otherwise *obj* "
"will never be garbage collected.  In particular, *func* should not be a "
"bound method of *obj*."
msgstr ""
"Es importante asegurar que *func*, *args* y *kwargs* no sean dueños de "
"ninguna referencia a *obj*, o directamente o indirectamente, ya que de otra "
"manera *obj* nunca será recolectado por el recolector de basura.  En "
"particular, *func* no debe ser un método vinculado de *obj*."

#: ../Doc/library/weakref.rst:300
msgid "The type object for weak references objects."
msgstr "El objeto de tipo para objetos de referencias débiles."

#: ../Doc/library/weakref.rst:305
msgid "The type object for proxies of objects which are not callable."
msgstr "El objeto de tipo para proxies de objetos que no son invocables."

#: ../Doc/library/weakref.rst:310
msgid "The type object for proxies of callable objects."
msgstr "El objeto de tipo para proxies de objetos invocables."

#: ../Doc/library/weakref.rst:315
msgid ""
"Sequence containing all the type objects for proxies.  This can make it "
"simpler to test if an object is a proxy without being dependent on naming "
"both proxy types."
msgstr ""
"Una secuencia que contiene todos los objetos de tipo para los proxies. Esto "
"puede hacerlo más simple para pruebas si un objeto es un proxy sin ser "
"dependiente en nombrar a ambos tipos proxy."

#: ../Doc/library/weakref.rst:323
msgid ":pep:`205` - Weak References"
msgstr ":pep:`205` - Referencias Débiles"

#: ../Doc/library/weakref.rst:323
msgid ""
"The proposal and rationale for this feature, including links to earlier "
"implementations and information about similar features in other languages."
msgstr ""
"La propuesta y lógica de esta característica, incluyendo los enlaces a "
"implementaciones tempranas e información acerca de características similares "
"en otros lenguajes."

#: ../Doc/library/weakref.rst:330
msgid "Weak Reference Objects"
msgstr "Objetos de Referencias Débiles"

#: ../Doc/library/weakref.rst:332
msgid ""
"Weak reference objects have no methods and no attributes besides :attr:`ref."
"__callback__`. A weak reference object allows the referent to be obtained, "
"if it still exists, by calling it:"
msgstr ""
"Los objetos de referencias débiles no tiene métodos y atributos aparte de :"
"attr:`ref.__calback__`. Un objeto de referencia débil permite que el "
"referente sea obtenido, si todavía existe, al llamarlo:"

#: ../Doc/library/weakref.rst:346
msgid ""
"If the referent no longer exists, calling the reference object returns :"
"const:`None`:"
msgstr ""
"Si el referente no existe, llamar al objeto de referencia retorna :const:"
"`None`:"

#: ../Doc/library/weakref.rst:353
msgid ""
"Testing that a weak reference object is still live should be done using the "
"expression ``ref() is not None``.  Normally, application code that needs to "
"use a reference object should follow this pattern::"
msgstr ""
"Probar que un objeto de referencia débil está todavía con vida debe ser "
"hecho usando la expresión ``ref() is not None``.  Normalmente, el código de "
"aplicación que necesite usar un objeto de referencia debe seguir este "
"patrón::"

#: ../Doc/library/weakref.rst:366
msgid ""
"Using a separate test for \"liveness\" creates race conditions in threaded "
"applications; another thread can cause a weak reference to become "
"invalidated before the weak reference is called; the idiom shown above is "
"safe in threaded applications as well as single-threaded applications."
msgstr ""
"Usar una prueba separada para \"vividad\" crea una condición de carrera en "
"aplicaciones con hilos; otro hilo puede hacer que una referencia débil sea "
"invalidada antes de que la referencia débil sea llamada; El modismo mostrado "
"arriba es seguro en aplicaciones con hilos también como aplicaciones de un "
"sólo hilo."

#: ../Doc/library/weakref.rst:371
msgid ""
"Specialized versions of :class:`ref` objects can be created through "
"subclassing. This is used in the implementation of the :class:"
"`WeakValueDictionary` to reduce the memory overhead for each entry in the "
"mapping.  This may be most useful to associate additional information with a "
"reference, but could also be used to insert additional processing on calls "
"to retrieve the referent."
msgstr ""
"Versiones especializadas de objetos :class:`ref` pueden ser creadas a través "
"de creación por subclase. Esto es usado en la implementación de :class:"
"`WeakValueDictionary` para reducir la memoria elevada por cada entrada en el "
"mapeado.  Esto puede ser lo más útil para asociar información adicional con "
"un referencia, pero también puede ser usado para insertar procesamiento "
"adicional en llamadas para recuperar el referente."

#: ../Doc/library/weakref.rst:377
msgid ""
"This example shows how a subclass of :class:`ref` can be used to store "
"additional information about an object and affect the value that's returned "
"when the referent is accessed::"
msgstr ""
"Este ejemplo muestra como una subclase de :class:`ref` puede ser usado para "
"guardar información adicional sobre un objeto y afectar el valor que se "
"retorna cuando el referente es accedido::"

#: ../Doc/library/weakref.rst:404
msgid "Example"
msgstr "Ejemplo"

#: ../Doc/library/weakref.rst:406
msgid ""
"This simple example shows how an application can use object IDs to retrieve "
"objects that it has seen before.  The IDs of the objects can then be used in "
"other data structures without forcing the objects to remain alive, but the "
"objects can still be retrieved by ID if they do."
msgstr ""
"Este simple ejemplo muestra como una aplicación puede usar objetos ID para "
"recuperar objetos que han sido visto antes.  Los ID de los objetos pueden "
"ser usados en otras estructuras de datos sin forzar que los objetos "
"permanezcan con vida, pero los objetos pueden aún pueden ser recuperados por "
"el ID si lo hacen."

#: ../Doc/library/weakref.rst:431
msgid "Finalizer Objects"
msgstr "Objetos Finalizadores"

#: ../Doc/library/weakref.rst:433
msgid ""
"The main benefit of using :class:`finalize` is that it makes it simple to "
"register a callback without needing to preserve the returned finalizer "
"object.  For instance"
msgstr ""
"El principal beneficio de usar :class:`finalize` es que hace simple "
"registrar una retrollamada sin necesitar preservar el objeto finalizador "
"retornado.  Por ejemplo"

#: ../Doc/library/weakref.rst:447
msgid ""
"The finalizer can be called directly as well.  However the finalizer will "
"invoke the callback at most once."
msgstr ""
"El finalizador puede ser llamado directamente también.  Sin embargo, el "
"finalizador invocará la retrollamada como máximo una vez."

#: ../Doc/library/weakref.rst:463
msgid ""
"You can unregister a finalizer using its :meth:`~finalize.detach` method.  "
"This kills the finalizer and returns the arguments passed to the constructor "
"when it was created."
msgstr ""
"Puedes de-registrar un finalizador usando su método :meth:`~finalize."
"detach`. Esto mata el finalizador y retorna los argumentos pasados al "
"constructor cuando fue creado."

#: ../Doc/library/weakref.rst:477
msgid ""
"Unless you set the :attr:`~finalize.atexit` attribute to :const:`False`, a "
"finalizer will be called when the program exits if it is still alive.  For "
"instance"
msgstr ""
"A menos que pongas el atributo :attr:`~finalize.atexit` a :const:`False`, un "
"finalizador será llamado cuando el programa salga si todavía está con vida.  "
"Por ejemplo"

#: ../Doc/library/weakref.rst:492
msgid "Comparing finalizers with :meth:`__del__` methods"
msgstr "Comparando finalizadores con los métodos :meth:`__del__`"

#: ../Doc/library/weakref.rst:494
msgid ""
"Suppose we want to create a class whose instances represent temporary "
"directories.  The directories should be deleted with their contents when the "
"first of the following events occurs:"
msgstr ""
"Suponga que queremos crear una clase cuyas instancias representan "
"directorios temporales.  Los directorios deben ser eliminados con sus "
"contenidos cuando el primero de los siguiente eventos ocurre:"

#: ../Doc/library/weakref.rst:498
msgid "the object is garbage collected,"
msgstr "el objeto es recolectado por el recolector de basura,"

#: ../Doc/library/weakref.rst:499
msgid "the object's :meth:`remove` method is called, or"
msgstr "el método :meth:`remove` del objeto es llamado, o"

#: ../Doc/library/weakref.rst:500
msgid "the program exits."
msgstr "el programa sale."

#: ../Doc/library/weakref.rst:502
msgid ""
"We might try to implement the class using a :meth:`__del__` method as "
"follows::"
msgstr ""
"Nosotros podemos intentar implementar la clase usando el método :meth:"
"`__del__` como sigue::"

#: ../Doc/library/weakref.rst:521
msgid ""
"Starting with Python 3.4, :meth:`__del__` methods no longer prevent "
"reference cycles from being garbage collected, and module globals are no "
"longer forced to :const:`None` during :term:`interpreter shutdown`. So this "
"code should work without any issues on CPython."
msgstr ""
"Empezando con Python 3.4, Los métodos :meth:`__del__` ya no previenen ciclos "
"de referencia de ser recolectado como basura, y los módulos globales ya no "
"fuerzan :const:`None` durante :term:`interpreter shutdown`. Por lo que este "
"código debe trabajar sin ningún problema en CPython."

#: ../Doc/library/weakref.rst:526
msgid ""
"However, handling of :meth:`__del__` methods is notoriously implementation "
"specific, since it depends on internal details of the interpreter's garbage "
"collector implementation."
msgstr ""
"Sin embargo, la gestión de métodos :meth:`__del__` es notoriamente "
"específico por la implementación, ya que depende de detalles internos de la "
"implementación del recolector de basura del intérprete."

#: ../Doc/library/weakref.rst:530
msgid ""
"A more robust alternative can be to define a finalizer which only references "
"the specific functions and objects that it needs, rather than having access "
"to the full state of the object::"
msgstr ""
"Una alternativa más robusta puede ser para definir un finalizador que sólo "
"hace referencia a funciones específicas y objetos que necesite, en vez de "
"tener acceso al estado completo del objeto::"

#: ../Doc/library/weakref.rst:546
msgid ""
"Defined like this, our finalizer only receives a reference to the details it "
"needs to clean up the directory appropriately. If the object never gets "
"garbage collected the finalizer will still be called at exit."
msgstr ""
"Definido así, nuestro finalizador sólo recibe una referencia a los detalles "
"que necesita limpiar los directorios apropiadamente. Si el objeto nueva "
"llega a ser recolectado como basura el finalizador aún será llamado al salir."

#: ../Doc/library/weakref.rst:550
msgid ""
"The other advantage of weakref based finalizers is that they can be used to "
"register finalizers for classes where the definition is controlled by a "
"third party, such as running code when a module is unloaded::"
msgstr ""
"La otra ventaja de *weakref* basados en finalizadores es que ellos pueden "
"ser usados para registrar finalizadores para clases donde la definición es "
"controlado por terceros, como un código que corre cuando un módulo es "
"*unloaded*::"

#: ../Doc/library/weakref.rst:562
msgid ""
"If you create a finalizer object in a daemonic thread just as the program "
"exits then there is the possibility that the finalizer does not get called "
"at exit.  However, in a daemonic thread :func:`atexit.register`, ``try: ... "
"finally: ...`` and ``with: ...`` do not guarantee that cleanup occurs either."
msgstr ""
"Si creas un objeto finalizador en un hilo *daemon* sólo como el programa "
"sale entonces hay la posibilidad de que el finalizador no llegue a ser "
"llamado.  Sin embargo, en un hilo demoníaco :func:`atexit.register`, "
"``try: ... finally: ...`` y ``with: ...`` no garantizan que la limpieza "
"ocurra tampoco."

#~ msgid ""
#~ "Caution: Because a :class:`WeakKeyDictionary` is built on top of a Python "
#~ "dictionary, it must not change size when iterating over it.  This can be "
#~ "difficult to ensure for a :class:`WeakKeyDictionary` because actions "
#~ "performed by the program during iteration may cause items in the "
#~ "dictionary to vanish \"by magic\" (as a side effect of garbage "
#~ "collection)."
#~ msgstr ""
#~ "Precaución:  Porque un :class:`WeakKeyDictionary` está construido en cima "
#~ "de un diccionario de Python, este no debe cambiar de tamaño cuando se "
#~ "itera en él.  Esto puede ser difícil de asegurar para un :class:"
#~ "`WeakKeyDictionary` porque las acciones hechas por el programa durante la "
#~ "iteración pueden causar que los objetos en el objeto se desvanezcan \"por "
#~ "arte de magia\" (como un efecto secundario de la recolección de basura)."

#~ msgid ""
#~ "Caution:  Because a :class:`WeakValueDictionary` is built on top of a "
#~ "Python dictionary, it must not change size when iterating over it.  This "
#~ "can be difficult to ensure for a :class:`WeakValueDictionary` because "
#~ "actions performed by the program during iteration may cause items in the "
#~ "dictionary to vanish \"by magic\" (as a side effect of garbage "
#~ "collection)."
#~ msgstr ""
#~ "Precaución: Porque un :class:`WeakValueDictionary` está construido por "
#~ "encima de un diccionario de Python, no debe cambiar el tamaño cuando se "
#~ "itere sobre él.  Esto puede ser difícil de asegurar para un :class:"
#~ "`WeakValueDictionary` porque las acciones hechas por el programa durante "
#~ "la iteración pueden causar que los objetos en el diccionario se "
#~ "desvanezcan \"por arte de magia\" (como un efecto secundario de la "
#~ "recolección de basura)."
