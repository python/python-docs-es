# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-19 11:16+0100\n"
"PO-Revision-Date: 2020-10-17 19:44+0200\n"
"Last-Translator: Francisco Jesús Sevilla García <fjsevilla.dev@gmail.com>\n"
"Language: es_ES\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../Doc/library/math.rst:2
msgid ":mod:`math` --- Mathematical functions"
msgstr ":mod:`math` --- Funciones matemáticas"

#: ../Doc/library/math.rst:13
msgid ""
"This module provides access to the mathematical functions defined by the C "
"standard."
msgstr ""
"Este módulo proporciona acceso a las funciones matemáticas definidas en el "
"estándar de C."

#: ../Doc/library/math.rst:16
msgid ""
"These functions cannot be used with complex numbers; use the functions of "
"the same name from the :mod:`cmath` module if you require support for "
"complex numbers.  The distinction between functions which support complex "
"numbers and those which don't is made since most users do not want to learn "
"quite as much mathematics as required to understand complex numbers.  "
"Receiving an exception instead of a complex result allows earlier detection "
"of the unexpected complex number used as a parameter, so that the programmer "
"can determine how and why it was generated in the first place."
msgstr ""
"Estas funciones no pueden ser usadas con números complejos; usa las "
"funciones con el mismo nombre del módulo :mod:`cmath` si requieres soporte "
"para números complejos. La distinción entre las funciones que admiten "
"números complejos y las que no se hace debido a que la mayoría de los "
"usuarios no quieren aprender tantas matemáticas como se requiere para "
"comprender los números complejos. Recibir una excepción en lugar de un "
"resultado complejo permite la detección temprana del número complejo "
"inesperado utilizado como parámetro, de modo que el programador pueda "
"determinar cómo y porqué se generó en primer lugar."

#: ../Doc/library/math.rst:25
msgid ""
"The following functions are provided by this module.  Except when explicitly "
"noted otherwise, all return values are floats."
msgstr ""
"Este módulo proporciona las funciones descritas a continuación. Excepto "
"cuando se indique lo contrario explícitamente, todos los valores retornados "
"son flotantes."

#: ../Doc/library/math.rst:30
msgid "Number-theoretic and representation functions"
msgstr "Teoría de números y funciones de representación"

#: ../Doc/library/math.rst:34
msgid ""
"Return the ceiling of *x*, the smallest integer greater than or equal to "
"*x*. If *x* is not a float, delegates to ``x.__ceil__()``, which should "
"return an :class:`~numbers.Integral` value."
msgstr ""
"Retorna el \"techo\" de *x*, el número entero más pequeño que es mayor o "
"igual que *x*. Si *x* no es un flotante, delega en ``x.__ceil__()``, que "
"debería retornar un valor :class:`~numbers.Integral`."

#: ../Doc/library/math.rst:41
msgid ""
"Return the number of ways to choose *k* items from *n* items without "
"repetition and without order."
msgstr ""
"Retorna el número de formas posibles de elegir *k* elementos de *n*, de "
"forma ordenada y sin repetición."

#: ../Doc/library/math.rst:44
msgid ""
"Evaluates to ``n! / (k! * (n - k)!)`` when ``k <= n`` and evaluates to zero "
"when ``k > n``."
msgstr ""
"Se evalúa como ``n! / (k! * (n - k)!)`` cuando ``k <= n`` y como cero cuando "
"``k > n``."

#: ../Doc/library/math.rst:47
msgid ""
"Also called the binomial coefficient because it is equivalent to the "
"coefficient of k-th term in polynomial expansion of the expression ``(1 + x) "
"** n``."
msgstr ""
"También se llama coeficiente binomial porque es equivalente al coeficiente "
"del k-ésimo término en el desarrollo polinomial de la expresión ``(1 + x) ** "
"n``."

#: ../Doc/library/math.rst:51 ../Doc/library/math.rst:260
msgid ""
"Raises :exc:`TypeError` if either of the arguments are not integers. Raises :"
"exc:`ValueError` if either of the arguments are negative."
msgstr ""
"Lanza una excepción :exc:`TypeError` si alguno de los argumentos no es un "
"entero. Lanza una excepción :exc:`ValueError` si alguno de los argumentos es "
"negativo."

#: ../Doc/library/math.rst:59
msgid ""
"Return a float with the magnitude (absolute value) of *x* but the sign of "
"*y*.  On platforms that support signed zeros, ``copysign(1.0, -0.0)`` "
"returns *-1.0*."
msgstr ""
"Retorna un flotante con la magnitud (valor absoluto) de *x* pero el signo de "
"*y*. En plataformas que admiten ceros con signo, ``copysign(1.0, -0.0)`` "
"retorna *-1.0*."

#: ../Doc/library/math.rst:66
msgid "Return the absolute value of *x*."
msgstr "Retorna el valor absoluto de *x*."

#: ../Doc/library/math.rst:71
msgid ""
"Return *x* factorial as an integer.  Raises :exc:`ValueError` if *x* is not "
"integral or is negative."
msgstr ""
"Retorna el factorial de *x* como un número entero. Lanza una excepción :exc:"
"`ValueError` si *x* no es un entero o es negativo."

#: ../Doc/library/math.rst:74
msgid "Accepting floats with integral values (like ``5.0``) is deprecated."
msgstr ""

#: ../Doc/library/math.rst:80
msgid ""
"Return the floor of *x*, the largest integer less than or equal to *x*. If "
"*x* is not a float, delegates to ``x.__floor__()``, which should return an :"
"class:`~numbers.Integral` value."
msgstr ""
"Retorna el \"suelo\" de *x*, el primer número entero mayor o igual que *x*. "
"Si *x* no es un flotante, delega en ``x .__floor__()``, que debería retornar "
"un valor :class:`~numbers.Integral`."

#: ../Doc/library/math.rst:87
#, python-format
msgid ""
"Return ``fmod(x, y)``, as defined by the platform C library. Note that the "
"Python expression ``x % y`` may not return the same result.  The intent of "
"the C standard is that ``fmod(x, y)`` be exactly (mathematically; to "
"infinite precision) equal to ``x - n*y`` for some integer *n* such that the "
"result has the same sign as *x* and magnitude less than ``abs(y)``.  "
"Python's ``x % y`` returns a result with the sign of *y* instead, and may "
"not be exactly computable for float arguments. For example, ``fmod(-1e-100, "
"1e100)`` is ``-1e-100``, but the result of Python's ``-1e-100 % 1e100`` is "
"``1e100-1e-100``, which cannot be represented exactly as a float, and rounds "
"to the surprising ``1e100``.  For this reason, function :func:`fmod` is "
"generally preferred when working with floats, while Python's ``x % y`` is "
"preferred when working with integers."
msgstr ""
"Retorna ``fmod(x, y)``, tal como se define en la biblioteca de C de la "
"plataforma. Ten en cuenta que la expresión ``x % y`` de Python puede no "
"retornar el mismo resultado. La intención del estándar de C es que ``fmod(x, "
"y)`` sea exactamente (matemáticamente; con precisión infinita) igual a ``x - "
"n*y`` para algún número entero *n* tal que el resultado tenga el mismo signo "
"que *x* y magnitud menor que ``abs(y)``. La expresión ``x % y`` de Python "
"retorna un resultado con el signo de *y* en su lugar, y es posible que no "
"pueda calcularse con exactitud para argumentos flotantes. Por ejemplo, "
"``fmod(-1e-100, 1e100)`` es ``-1e-100``, pero el resultado de ``-1e-100 % "
"1e100`` en Python es ``1e100-1e-100``, que no se puede representar "
"exactamente como un flotante, y se redondea sorprendentemente a ``1e100``. "
"Por esta razón, generalmente se prefiere la función :func:`fmod` cuando se "
"trabaja con flotantes, mientras que se prefiere el uso de ``x % y`` de "
"Python cuando se trabaja con enteros."

#: ../Doc/library/math.rst:102
msgid ""
"Return the mantissa and exponent of *x* as the pair ``(m, e)``.  *m* is a "
"float and *e* is an integer such that ``x == m * 2**e`` exactly. If *x* is "
"zero, returns ``(0.0, 0)``, otherwise ``0.5 <= abs(m) < 1``.  This is used "
"to \"pick apart\" the internal representation of a float in a portable way."
msgstr ""
"Retorna la mantisa y el exponente de *x* como el par ``(m, e)``. *m* es un "
"flotante y *e* es un número entero tal que ``x == m * 2**e`` exactamente. Si "
"*x* es cero, retorna ``(0.0, 0)``, y retorna ``0.5 <= abs(m) < 1`` en caso "
"contrario. Se utiliza como una forma portable de \"extraer\" la "
"representación interna de un flotante."

#: ../Doc/library/math.rst:110
msgid ""
"Return an accurate floating point sum of values in the iterable.  Avoids "
"loss of precision by tracking multiple intermediate partial sums::"
msgstr ""
"Retorna una suma precisa en coma flotante de los valores de un iterable. "
"Evita la pérdida de precisión mediante el seguimiento de múltiples sumas "
"parciales intermedias::"

#: ../Doc/library/math.rst:118
msgid ""
"The algorithm's accuracy depends on IEEE-754 arithmetic guarantees and the "
"typical case where the rounding mode is half-even.  On some non-Windows "
"builds, the underlying C library uses extended precision addition and may "
"occasionally double-round an intermediate sum causing it to be off in its "
"least significant bit."
msgstr ""
"La precisión del algoritmo depende de las garantías aritméticas de IEEE-754 "
"y del caso típico en el que se usa el \"medio redondo a par\" (half-even) "
"como método de redondeo. En algunas compilaciones que no son de Windows, la "
"biblioteca de C subyacente utiliza la adición de precisión extendida y, "
"ocasionalmente, puede realizar un doble redondeo en una suma intermedia, "
"haciendo que el bit menos significativo tome el valor incorrecto."

#: ../Doc/library/math.rst:124
msgid ""
"For further discussion and two alternative approaches, see the `ASPN "
"cookbook recipes for accurate floating point summation <https://code."
"activestate.com/recipes/393090/>`_\\."
msgstr ""
"Para una discusión más amplia y dos enfoques alternativos, consultar `ASPN "
"cookbook recipes for accurate floating point summation <https://code."
"activestate.com/recipes/393090/>`_\\."

#: ../Doc/library/math.rst:131
msgid ""
"Return the greatest common divisor of the specified integer arguments. If "
"any of the arguments is nonzero, then the returned value is the largest "
"positive integer that is a divisor of all arguments.  If all arguments are "
"zero, then the returned value is ``0``.  ``gcd()`` without arguments returns "
"``0``."
msgstr ""

#: ../Doc/library/math.rst:139
#, fuzzy
msgid ""
"Added support for an arbitrary number of arguments. Formerly, only two "
"arguments were supported."
msgstr ""
"Agregado soporte para puntos n-dimensionales. Anteriormente, solo se admitía "
"el caso bidimensional."

#: ../Doc/library/math.rst:146
msgid ""
"Return ``True`` if the values *a* and *b* are close to each other and "
"``False`` otherwise."
msgstr ""
"Retorna ``True`` si los valores *a* y *b* están cerca el uno del otro y "
"``False`` en caso contrario."

#: ../Doc/library/math.rst:149
msgid ""
"Whether or not two values are considered close is determined according to "
"given absolute and relative tolerances."
msgstr ""
"Que dos valores se consideren cercanos o no, se determina de acuerdo con las "
"tolerancias absolutas y relativas dadas."

#: ../Doc/library/math.rst:152
msgid ""
"*rel_tol* is the relative tolerance -- it is the maximum allowed difference "
"between *a* and *b*, relative to the larger absolute value of *a* or *b*. "
"For example, to set a tolerance of 5%, pass ``rel_tol=0.05``.  The default "
"tolerance is ``1e-09``, which assures that the two values are the same "
"within about 9 decimal digits.  *rel_tol* must be greater than zero."
msgstr ""
"*rel_tol* es la tolerancia relativa: esta es la diferencia máxima permitida "
"entre *a* y *b*, en relación con el valor absoluto mayor de *a* o *b*. Por "
"ejemplo, para establecer una tolerancia del 5%, pasa ``rel_tol=0.05``. La "
"tolerancia predeterminada es ``1e-09``, lo que garantiza que los dos valores "
"sean iguales considerando 9 dígitos decimales aproximadamente. *rel_tol* "
"debe ser mayor que cero."

#: ../Doc/library/math.rst:158
msgid ""
"*abs_tol* is the minimum absolute tolerance -- useful for comparisons near "
"zero. *abs_tol* must be at least zero."
msgstr ""
"*abs_tol* es la tolerancia absoluta mínima, útil para las comparaciones "
"cercanas a cero. *abs_tol* debe valer al menos cero."

#: ../Doc/library/math.rst:161
msgid ""
"If no errors occur, the result will be: ``abs(a-b) <= max(rel_tol * "
"max(abs(a), abs(b)), abs_tol)``."
msgstr ""
"Si no se encuentran errores, el resultado será: ``abs(a-b) <= max(rel_tol * "
"max(abs(a), abs(b)), abs_tol)``."

#: ../Doc/library/math.rst:164
msgid ""
"The IEEE 754 special values of ``NaN``, ``inf``, and ``-inf`` will be "
"handled according to IEEE rules.  Specifically, ``NaN`` is not considered "
"close to any other value, including ``NaN``.  ``inf`` and ``-inf`` are only "
"considered close to themselves."
msgstr ""
"Los valores especiales de IEEE 754 ``NaN``, ``inf`` e ``-inf`` se manejarán "
"de acuerdo con las reglas del IEEE. Concretamente, ``NaN`` no se considera "
"cercano a ningún otro valor, incluido ``NaN``. Por su parte, ``inf`` e ``-"
"inf`` solo se consideran cercanos a sí mismos."

#: ../Doc/library/math.rst:173
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ":pep:`485` -- Una función para comprobar la igualdad aproximada"

#: ../Doc/library/math.rst:178
msgid ""
"Return ``True`` if *x* is neither an infinity nor a NaN, and ``False`` "
"otherwise.  (Note that ``0.0`` *is* considered finite.)"
msgstr ""
"Retorna ``True`` si *x* no es infinito ni NaN, o ``False`` en caso "
"contrario. (Ten en cuenta que ``0.0`` *es* considerado finito.)"

#: ../Doc/library/math.rst:186
msgid ""
"Return ``True`` if *x* is a positive or negative infinity, and ``False`` "
"otherwise."
msgstr ""
"Retorna ``True`` si *x* es infinito positivo o negativo, o ``False`` en caso "
"contrario."

#: ../Doc/library/math.rst:192
msgid ""
"Return ``True`` if *x* is a NaN (not a number), and ``False`` otherwise."
msgstr ""
"Retorna ``True`` si *x* es NaN (not a number, en español: no es un número), "
"o ``False`` en caso contrario."

#: ../Doc/library/math.rst:197
msgid ""
"Return the integer square root of the nonnegative integer *n*. This is the "
"floor of the exact square root of *n*, or equivalently the greatest integer "
"*a* such that *a*\\ ² |nbsp| ≤ |nbsp| *n*."
msgstr ""
"Retorna la raíz cuadrada del número entero no negativo *n*. Es el resultado "
"de aplicar la función suelo al valor exacto de la raíz cuadrada de *n*, o de "
"forma equivalente, el mayor entero *a* tal que *a*\\ ² |nbsp| ≤ |nbsp| *n*."

#: ../Doc/library/math.rst:201
msgid ""
"For some applications, it may be more convenient to have the least integer "
"*a* such that *n* |nbsp| ≤ |nbsp| *a*\\ ², or in other words the ceiling of "
"the exact square root of *n*. For positive *n*, this can be computed using "
"``a = 1 + isqrt(n - 1)``."
msgstr ""
"Para algunas aplicaciones, puede ser más conveniente tener el menor número "
"entero *a* tal que *n* |nbsp| ≤ |nbsp| *a*\\ ², en otras palabras, el "
"resultado de aplicar la función techo a la raíz cuadrada exacta de *n*. Para "
"*n* positivo, esto se puede calcular usando ``a = 1 + isqrt(n - 1)``."

#: ../Doc/library/math.rst:211
msgid ""
"Return the least common multiple of the specified integer arguments. If all "
"arguments are nonzero, then the returned value is the smallest positive "
"integer that is a multiple of all arguments.  If any of the arguments is "
"zero, then the returned value is ``0``.  ``lcm()`` without arguments returns "
"``1``."
msgstr ""

#: ../Doc/library/math.rst:222
msgid ""
"Return ``x * (2**i)``.  This is essentially the inverse of function :func:"
"`frexp`."
msgstr ""
"Retorna ``x * (2**i)``. Esta es esencialmente la función inversa de :func:"
"`frexp`."

#: ../Doc/library/math.rst:228
msgid ""
"Return the fractional and integer parts of *x*.  Both results carry the sign "
"of *x* and are floats."
msgstr ""
"Retorna la parte fraccionaria y entera de *x*. Ambos resultados son "
"flotantes y tienen el mismo signo que *x* ."

#: ../Doc/library/math.rst:234
msgid "Return the next floating-point value after *x* towards *y*."
msgstr ""

#: ../Doc/library/math.rst:236
msgid "If *x* is equal to *y*, return *y*."
msgstr ""

#: ../Doc/library/math.rst:238
msgid "Examples:"
msgstr ""

#: ../Doc/library/math.rst:240
msgid "``math.nextafter(x, math.inf)`` goes up: towards positive infinity."
msgstr ""

#: ../Doc/library/math.rst:241
msgid "``math.nextafter(x, -math.inf)`` goes down: towards minus infinity."
msgstr ""

#: ../Doc/library/math.rst:242
msgid "``math.nextafter(x, 0.0)`` goes towards zero."
msgstr ""

#: ../Doc/library/math.rst:243
msgid "``math.nextafter(x, math.copysign(math.inf, x))`` goes away from zero."
msgstr ""

#: ../Doc/library/math.rst:245
msgid "See also :func:`math.ulp`."
msgstr ""

#: ../Doc/library/math.rst:251
msgid ""
"Return the number of ways to choose *k* items from *n* items without "
"repetition and with order."
msgstr ""
"Retorna el número de formas posibles de elegir *k* elementos de *n* "
"elementos, sin repetición y en orden."

#: ../Doc/library/math.rst:254
msgid ""
"Evaluates to ``n! / (n - k)!`` when ``k <= n`` and evaluates to zero when "
"``k > n``."
msgstr ""
"Se evalúa como ``n! / (n - k)!`` cuando ``k <= n`` y como cero cuando ``k > "
"n``."

#: ../Doc/library/math.rst:257
msgid ""
"If *k* is not specified or is None, then *k* defaults to *n* and the "
"function returns ``n!``."
msgstr ""
"Si *k* no se especifica o es None, *k* será igual a *n* por defecto y la "
"función retornará ``n!``."

#: ../Doc/library/math.rst:268
msgid ""
"Calculate the product of all the elements in the input *iterable*. The "
"default *start* value for the product is ``1``."
msgstr ""
"Calcula el producto de todos los elementos en la entrada *iterable*. El "
"valor *start* predeterminado para el producto es ``1``."

#: ../Doc/library/math.rst:271
msgid ""
"When the iterable is empty, return the start value.  This function is "
"intended specifically for use with numeric values and may reject non-numeric "
"types."
msgstr ""
"Cuando el iterable está vacío, retorna el valor inicial. Esta función está "
"diseñada específicamente para su uso con valores numéricos y puede rechazar "
"tipos no numéricos."

#: ../Doc/library/math.rst:280
msgid ""
"Return the IEEE 754-style remainder of *x* with respect to *y*.  For finite "
"*x* and finite nonzero *y*, this is the difference ``x - n*y``, where ``n`` "
"is the closest integer to the exact value of the quotient ``x / y``.  If "
"``x / y`` is exactly halfway between two consecutive integers, the nearest "
"*even* integer is used for ``n``.  The remainder ``r = remainder(x, y)`` "
"thus always satisfies ``abs(r) <= 0.5 * abs(y)``."
msgstr ""
"Retorna el resto o residuo según la norma IEEE 754 de *x* con respecto a "
"*y*. Para un valor *x* finito y un valor *y* finito distinto de cero, es la "
"diferencia ``x - n * y``, donde ``n`` es el número entero más cercano al "
"valor exacto del cociente ``x / y``. Si ``x / y`` está exactamente en mitad "
"de dos enteros consecutivos, el entero *par* más cercano se utiliza para "
"``n``. Por lo tanto, el residuo ``r = remainder(x, y)`` siempre satisface "
"``abs(r) <= 0.5 * abs(y)``."

#: ../Doc/library/math.rst:287
msgid ""
"Special cases follow IEEE 754: in particular, ``remainder(x, math.inf)`` is "
"*x* for any finite *x*, and ``remainder(x, 0)`` and ``remainder(math.inf, "
"x)`` raise :exc:`ValueError` for any non-NaN *x*. If the result of the "
"remainder operation is zero, that zero will have the same sign as *x*."
msgstr ""
"Los casos especiales siguen el estándar IEEE 754: en particular, "
"``remainder(x, math.inf)`` es *x* para todo *x* finito, y ``remainder(x, "
"0)`` junto a ``remainder(math.inf, x)`` lanzan una excepción :exc:"
"`ValueError` para todo *x* que no sea NaN. Si el resultado de la operación "
"residuo es cero, este cero tendrá el mismo signo que *x*."

#: ../Doc/library/math.rst:293
msgid ""
"On platforms using IEEE 754 binary floating-point, the result of this "
"operation is always exactly representable: no rounding error is introduced."
msgstr ""
"En plataformas que utilizan la norma IEEE 754 para números en coma flotante "
"binarios, el resultado de esta operación siempre es exactamente "
"representable: no se introduce ningún error de redondeo."

#: ../Doc/library/math.rst:301
msgid ""
"Return the :class:`~numbers.Real` value *x* truncated to an :class:`~numbers."
"Integral` (usually an integer). Delegates to :meth:`x.__trunc__() <object."
"__trunc__>`."
msgstr ""
"Retorna el valor :class:`~numbers.Real` *x* truncado a un :class:`~numbers."
"Integral` (generalmente un entero). Delega en :meth:`x.__trunc__() <object."
"__trunc__>`."

#: ../Doc/library/math.rst:307
msgid "Return the value of the least significant bit of the float *x*:"
msgstr ""

#: ../Doc/library/math.rst:309
msgid "If *x* is a NaN (not a number), return *x*."
msgstr ""

#: ../Doc/library/math.rst:310
msgid "If *x* is negative, return ``ulp(-x)``."
msgstr ""

#: ../Doc/library/math.rst:311
msgid "If *x* is a positive infinity, return *x*."
msgstr ""

#: ../Doc/library/math.rst:312
msgid ""
"If *x* is equal to zero, return the smallest positive *denormalized* "
"representable float (smaller than the minimum positive *normalized* float, :"
"data:`sys.float_info.min <sys.float_info>`)."
msgstr ""

#: ../Doc/library/math.rst:315
msgid ""
"If *x* is equal to the largest positive representable float, return the "
"value of the least significant bit of *x*, such that the first float smaller "
"than *x* is ``x - ulp(x)``."
msgstr ""

#: ../Doc/library/math.rst:318
msgid ""
"Otherwise (*x* is a positive finite number), return the value of the least "
"significant bit of *x*, such that the first float bigger than *x* is ``x + "
"ulp(x)``."
msgstr ""

#: ../Doc/library/math.rst:322
msgid "ULP stands for \"Unit in the Last Place\"."
msgstr ""

#: ../Doc/library/math.rst:324
msgid ""
"See also :func:`math.nextafter` and :data:`sys.float_info.epsilon <sys."
"float_info>`."
msgstr ""

#: ../Doc/library/math.rst:330
msgid ""
"Note that :func:`frexp` and :func:`modf` have a different call/return "
"pattern than their C equivalents: they take a single argument and return a "
"pair of values, rather than returning their second return value through an "
"'output parameter' (there is no such thing in Python)."
msgstr ""
"Ten en cuenta que :func:`frexp` y :func:`modf` tienen un patrón de llamada/"
"retorno diferente al de sus equivalentes en C: toman un solo argumento y "
"retornan un par de valores, en lugar de retornar su segundo valor de retorno "
"a través de un `parámetro de salida` (no existe tal cosa en Python)."

#: ../Doc/library/math.rst:335
msgid ""
"For the :func:`ceil`, :func:`floor`, and :func:`modf` functions, note that "
"*all* floating-point numbers of sufficiently large magnitude are exact "
"integers. Python floats typically carry no more than 53 bits of precision "
"(the same as the platform C double type), in which case any float *x* with "
"``abs(x) >= 2**52`` necessarily has no fractional bits."
msgstr ""
"Para las funciones :func:`ceil`, :func:`floor` y :func:`modf`, ten en cuenta "
"que *todos* los números de coma flotante de magnitud suficientemente grande "
"son enteros exactos. Los flotantes de Python normalmente no tienen más de 53 "
"bits de precisión (lo mismo que el tipo double de C en la plataforma), en "
"cuyo caso cualquier flotante *x* con ``abs(x) >= 2**52`` no necesariamente "
"tiene bits fraccionarios."

#: ../Doc/library/math.rst:343
msgid "Power and logarithmic functions"
msgstr "Funciones logarítmicas y exponenciales"

#: ../Doc/library/math.rst:347
msgid ""
"Return *e* raised to the power *x*, where *e* = 2.718281... is the base of "
"natural logarithms.  This is usually more accurate than ``math.e ** x`` or "
"``pow(math.e, x)``."
msgstr ""
"Retorna *e* elevado a la *x* potencia, dónde *e* = 2.718281... es la base de "
"los logaritmos naturales. Esto generalmente es más preciso que ``math.e ** "
"x`` o ``pow(math.e, x)``."

#: ../Doc/library/math.rst:354
msgid ""
"Return *e* raised to the power *x*, minus 1.  Here *e* is the base of "
"natural logarithms.  For small floats *x*, the subtraction in ``exp(x) - 1`` "
"can result in a `significant loss of precision <https://en.wikipedia.org/"
"wiki/Loss_of_significance>`_\\; the :func:`expm1` function provides a way to "
"compute this quantity to full precision::"
msgstr ""
"Retorna *e* elevado a la *x* potencia, menos 1. Aquí *e* es la base de los "
"logaritmos naturales. Para flotantes *x* pequeños, la resta en ``exp(x) - "
"1`` puede resultar en una `pérdida significativa de precisión <https://en."
"wikipedia.org/wiki/Loss_of_significance>`_\\; la función :func:`expm1` "
"proporciona una forma de calcular este valor con una precisión total::"

#: ../Doc/library/math.rst:371
msgid "With one argument, return the natural logarithm of *x* (to base *e*)."
msgstr "Con un argumento, retorna el logaritmo natural de *x* (en base *e*)."

#: ../Doc/library/math.rst:373
msgid ""
"With two arguments, return the logarithm of *x* to the given *base*, "
"calculated as ``log(x)/log(base)``."
msgstr ""
"Con dos argumentos, retorna el logaritmo de *x* en la *base* dada, calculado "
"como ``log(x)/log(base)``."

#: ../Doc/library/math.rst:379
msgid ""
"Return the natural logarithm of *1+x* (base *e*). The result is calculated "
"in a way which is accurate for *x* near zero."
msgstr ""
"Retorna el logaritmo natural de *1+x* (base *e*). El resultado se calcula de "
"forma precisa para *x* cercano a cero."

#: ../Doc/library/math.rst:385
msgid ""
"Return the base-2 logarithm of *x*. This is usually more accurate than "
"``log(x, 2)``."
msgstr ""
"Retorna el logaritmo en base 2 de *x*. Esto suele ser más preciso que "
"``log(x, 2)``."

#: ../Doc/library/math.rst:392
msgid ""
":meth:`int.bit_length` returns the number of bits necessary to represent an "
"integer in binary, excluding the sign and leading zeros."
msgstr ""
":meth:`int.bit_length` retorna el número de bits necesarios para representar "
"un entero en binario, excluyendo el signo y los ceros iniciales."

#: ../Doc/library/math.rst:398
msgid ""
"Return the base-10 logarithm of *x*.  This is usually more accurate than "
"``log(x, 10)``."
msgstr ""
"Retorna el logaritmo en base 10 de *x*. Esto suele ser más preciso que "
"``log(x, 10)``."

#: ../Doc/library/math.rst:404
msgid ""
"Return ``x`` raised to the power ``y``.  Exceptional cases follow Annex 'F' "
"of the C99 standard as far as possible.  In particular, ``pow(1.0, x)`` and "
"``pow(x, 0.0)`` always return ``1.0``, even when ``x`` is a zero or a NaN.  "
"If both ``x`` and ``y`` are finite, ``x`` is negative, and ``y`` is not an "
"integer then ``pow(x, y)`` is undefined, and raises :exc:`ValueError`."
msgstr ""
"Retorna ``x`` elevado a la potencia ``y``. Los casos excepcionales siguen el "
"Anexo 'F' del estándar C99 en la medida de lo posible. En particular, "
"``pow(1.0, x)`` y ``pow(x, 0.0)`` siempre retornan ``1.0``, incluso cuando "
"``x`` es cero o NaN. Si tanto ``x`` como ``y`` son finitos, ``x`` es "
"negativo e ``y`` no es un número entero, entonces ``pow(x, y)`` no está "
"definido y se lanza una excepción :exc:`ValueError`."

#: ../Doc/library/math.rst:411
msgid ""
"Unlike the built-in ``**`` operator, :func:`math.pow` converts both its "
"arguments to type :class:`float`.  Use ``**`` or the built-in :func:`pow` "
"function for computing exact integer powers."
msgstr ""
"A diferencia del operador incorporado ``**``, :func:`math.pow` convierte "
"ambos argumentos al tipo :class:`float`. Utiliza ``**`` o la función "
"incorporada :func:`pow` para calcular potencias enteras exactas."

#: ../Doc/library/math.rst:418
msgid "Return the square root of *x*."
msgstr "Retorna la raíz cuadrada de *x*."

#: ../Doc/library/math.rst:422
msgid "Trigonometric functions"
msgstr "Funciones trigonométricas"

#: ../Doc/library/math.rst:426
#, fuzzy
msgid ""
"Return the arc cosine of *x*, in radians. The result is between ``0`` and "
"``pi``."
msgstr "Retorna el arcocoseno de *x*, en radianes."

#: ../Doc/library/math.rst:432
#, fuzzy
msgid ""
"Return the arc sine of *x*, in radians. The result is between ``-pi/2`` and "
"``pi/2``."
msgstr "Retorna el arcoseno de *x*, en radianes."

#: ../Doc/library/math.rst:438
#, fuzzy
msgid ""
"Return the arc tangent of *x*, in radians. The result is between ``-pi/2`` "
"and ``pi/2``."
msgstr "Retorna la arcotangente de *x*, en radianes."

#: ../Doc/library/math.rst:444
msgid ""
"Return ``atan(y / x)``, in radians. The result is between ``-pi`` and "
"``pi``. The vector in the plane from the origin to point ``(x, y)`` makes "
"this angle with the positive X axis. The point of :func:`atan2` is that the "
"signs of both inputs are known to it, so it can compute the correct quadrant "
"for the angle. For example, ``atan(1)`` and ``atan2(1, 1)`` are both "
"``pi/4``, but ``atan2(-1, -1)`` is ``-3*pi/4``."
msgstr ""
"Retorna ``atan(y / x)``, en radianes. El resultado está entre ``-pi`` y "
"``pi``. El vector del plano que va del origen al punto ``(x, y)``, forma "
"este ángulo con el eje X positivo. La ventaja de :func:`atan2` es que el "
"signo de ambas entradas es conocido, por lo que se puede calcular el "
"cuadrante correcto para el ángulo. Por ejemplo, ``atan(1)`` y ``atan2(1, "
"1)`` son ambas ``pi/4``, pero ``atan2(-1, -1)`` es ``-3*pi/4``."

#: ../Doc/library/math.rst:454
msgid "Return the cosine of *x* radians."
msgstr "Retorna el coseno de *x* radianes."

#: ../Doc/library/math.rst:459
msgid ""
"Return the Euclidean distance between two points *p* and *q*, each given as "
"a sequence (or iterable) of coordinates.  The two points must have the same "
"dimension."
msgstr ""
"Retorna la distancia euclidiana entre dos puntos *p* y *q*, cada uno de "
"ellos dado como una secuencia (o iterable) de coordenadas. Los dos puntos "
"deben tener la misma dimensión."

#: ../Doc/library/math.rst:463
msgid "Roughly equivalent to::"
msgstr "Aproximadamente equivalente a::"

#: ../Doc/library/math.rst:472
msgid ""
"Return the Euclidean norm, ``sqrt(sum(x**2 for x in coordinates))``. This is "
"the length of the vector from the origin to the point given by the "
"coordinates."
msgstr ""
"Retorna la norma euclidiana, ``sqrt(sum(x**2 for x in coordinates))``. Esta "
"es la longitud del vector que va desde el origen hasta el punto dado por las "
"coordenadas."

#: ../Doc/library/math.rst:476
msgid ""
"For a two dimensional point ``(x, y)``, this is equivalent to computing the "
"hypotenuse of a right triangle using the Pythagorean theorem, ``sqrt(x*x + "
"y*y)``."
msgstr ""
"Para un punto bidimensional ``(x, y)``, esto equivale a calcular la "
"hipotenusa de un triángulo rectángulo usando el teorema de Pitágoras, "
"``sqrt(x*x + y*y)``."

#: ../Doc/library/math.rst:480
msgid ""
"Added support for n-dimensional points. Formerly, only the two dimensional "
"case was supported."
msgstr ""
"Agregado soporte para puntos n-dimensionales. Anteriormente, solo se admitía "
"el caso bidimensional."

#: ../Doc/library/math.rst:487
msgid "Return the sine of *x* radians."
msgstr "Retorna el seno de *x* radianes."

#: ../Doc/library/math.rst:492
msgid "Return the tangent of *x* radians."
msgstr "Retorna la tangente de *x* radianes."

#: ../Doc/library/math.rst:496
msgid "Angular conversion"
msgstr "Conversión angular"

#: ../Doc/library/math.rst:500
msgid "Convert angle *x* from radians to degrees."
msgstr "Convierte el ángulo *x* de radianes a grados."

#: ../Doc/library/math.rst:505
msgid "Convert angle *x* from degrees to radians."
msgstr "Convierte el ángulo *x* de grados a radianes."

#: ../Doc/library/math.rst:509
msgid "Hyperbolic functions"
msgstr "Funciones hiperbólicas"

#: ../Doc/library/math.rst:511
msgid ""
"`Hyperbolic functions <https://en.wikipedia.org/wiki/Hyperbolic_function>`_ "
"are analogs of trigonometric functions that are based on hyperbolas instead "
"of circles."
msgstr ""
"`Las funciones hiperbólicas <https://es.wikipedia.org/wiki/Funci"
"%C3%B3n_hiperb%C3%B3lica>`_ son análogas a las funciones trigonométricas "
"pero basadas en hipérbolas en lugar de en círculos."

#: ../Doc/library/math.rst:517
msgid "Return the inverse hyperbolic cosine of *x*."
msgstr "Retorna el coseno hiperbólico inverso de *x*."

#: ../Doc/library/math.rst:522
msgid "Return the inverse hyperbolic sine of *x*."
msgstr "Retorna el seno hiperbólico inverso de *x*."

#: ../Doc/library/math.rst:527
msgid "Return the inverse hyperbolic tangent of *x*."
msgstr "Retorna la tangente hiperbólica inversa de *x*."

#: ../Doc/library/math.rst:532
msgid "Return the hyperbolic cosine of *x*."
msgstr "Retorna el coseno hiperbólico de *x*."

#: ../Doc/library/math.rst:537
msgid "Return the hyperbolic sine of *x*."
msgstr "Retorna el seno hiperbólico de *x*."

#: ../Doc/library/math.rst:542
msgid "Return the hyperbolic tangent of *x*."
msgstr "Retorna la tangente hiperbólica de *x*."

#: ../Doc/library/math.rst:546
msgid "Special functions"
msgstr "Funciones especiales"

#: ../Doc/library/math.rst:550
msgid ""
"Return the `error function <https://en.wikipedia.org/wiki/Error_function>`_ "
"at *x*."
msgstr ""
"Retorna la `función error <https://es.wikipedia.org/wiki/Funci"
"%C3%B3n_error>`_ en *x*."

#: ../Doc/library/math.rst:553
msgid ""
"The :func:`erf` function can be used to compute traditional statistical "
"functions such as the `cumulative standard normal distribution <https://en."
"wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function>`_::"
msgstr ""
"La función :func:`erf` se puede utilizar para calcular funciones "
"estadísticas tradicionales como la `distribución normal estándar acumulativa "
"<https://en.wikipedia.org/wiki/"
"Normal_distribution#Cumulative_distribution_function>`_::"

#: ../Doc/library/math.rst:566
msgid ""
"Return the complementary error function at *x*.  The `complementary error "
"function <https://en.wikipedia.org/wiki/Error_function>`_ is defined as "
"``1.0 - erf(x)``.  It is used for large values of *x* where a subtraction "
"from one would cause a `loss of significance <https://en.wikipedia.org/wiki/"
"Loss_of_significance>`_\\."
msgstr ""
"Retorna la función error complementaria en *x*. La `función error "
"complementaria <https://es.wikipedia.org/wiki/Funci%C3%B3n_error>`_ se "
"define como ``1.0 - erf(x)``. Se usa para valores grandes de *x* donde una "
"resta de 1 causaría una `pérdida de presición <https://en.wikipedia.org/wiki/"
"Loss_of_significance>`_\\."

#: ../Doc/library/math.rst:577
msgid ""
"Return the `Gamma function <https://en.wikipedia.org/wiki/Gamma_function>`_ "
"at *x*."
msgstr ""
"Retorna la `función gamma <https://es.wikipedia.org/wiki/Funci"
"%C3%B3n_gamma>`_ en *x*."

#: ../Doc/library/math.rst:585
msgid ""
"Return the natural logarithm of the absolute value of the Gamma function at "
"*x*."
msgstr ""
"Retorna el logaritmo natural del valor absoluto de la función gamma en *x*."

#: ../Doc/library/math.rst:592
msgid "Constants"
msgstr "Constantes"

#: ../Doc/library/math.rst:596
msgid "The mathematical constant *π* = 3.141592..., to available precision."
msgstr ""
"La constante matemática *π* = 3.141592..., hasta la precisión disponible."

#: ../Doc/library/math.rst:601
msgid "The mathematical constant *e* = 2.718281..., to available precision."
msgstr ""
"La constante matemática *e* = 2.718281..., hasta la precisión disponible."

#: ../Doc/library/math.rst:606
msgid ""
"The mathematical constant *τ* = 6.283185..., to available precision. Tau is "
"a circle constant equal to 2\\ *π*, the ratio of a circle's circumference to "
"its radius. To learn more about Tau, check out Vi Hart's video `Pi is "
"(still) Wrong <https://www.youtube.com/watch?v=jG7vhMMXagQ>`_, and start "
"celebrating `Tau day <https://tauday.com/>`_ by eating twice as much pie!"
msgstr ""
"La constante matemática *τ* = 6.283185..., hasta la precisión disponible. "
"Tau es una constante del círculo igual a 2\\ *π*, la razón entre la "
"circunferencia de un círculo y su radio. Para obtener más información sobre "
"Tau, consulta el video de Vi Hart, `Pi is (still) Wrong <https://www.youtube."
"com/watch?v=jG7vhMMXagQ>`_, y comienza a celebrar el `el día de Tau <https://"
"tauday.com/>`_ ¡comiendo el doble de tarta!"

#: ../Doc/library/math.rst:617
msgid ""
"A floating-point positive infinity.  (For negative infinity, use ``-math."
"inf``.)  Equivalent to the output of ``float('inf')``."
msgstr ""
"Un valor infinito positivo en punto flotante. (Para un valor infinito "
"negativo, usa ``-math.inf``.) Equivalente a la salida de ``float('inf')``."

#: ../Doc/library/math.rst:625
msgid ""
"A floating-point \"not a number\" (NaN) value.  Equivalent to the output of "
"``float('nan')``."
msgstr ""
"Un valor de punto flotante que \"no es un número\" (NaN). Equivalente a la "
"salida de ``float('nan')``."

#: ../Doc/library/math.rst:633
msgid ""
"The :mod:`math` module consists mostly of thin wrappers around the platform "
"C math library functions.  Behavior in exceptional cases follows Annex F of "
"the C99 standard where appropriate.  The current implementation will raise :"
"exc:`ValueError` for invalid operations like ``sqrt(-1.0)`` or ``log(0.0)`` "
"(where C99 Annex F recommends signaling invalid operation or divide-by-"
"zero), and :exc:`OverflowError` for results that overflow (for example, "
"``exp(1000.0)``).  A NaN will not be returned from any of the functions "
"above unless one or more of the input arguments was a NaN; in that case, "
"most functions will return a NaN, but (again following C99 Annex F) there "
"are some exceptions to this rule, for example ``pow(float('nan'), 0.0)`` or "
"``hypot(float('nan'), float('inf'))``."
msgstr ""
"El módulo :mod:`math` consiste principalmente en delgados envoltorios "
"alrededor de las funciones matemáticas de la biblioteca de C de la "
"plataforma. El comportamiento en casos excepcionales sigue el Anexo F del "
"estándar C99 cuando corresponda. La implementación actual lanzará un :exc:"
"`ValueError` para operaciones no válidas como ``sqrt(-1.0)`` o ``log(0.0)`` "
"(donde el estándar C99 recomienda señalar que la operación no es válida o "
"que hay división entre cero), y un :exc:`OverflowError` para aquellos "
"resultados de desbordamiento (por ejemplo, ``exp(1000.0)``). No se retornará "
"NaN para ninguna de las funciones anteriores, a no ser que al menos uno de "
"los argumentos de la función sea NaN. En este caso, la mayoría de las "
"funciones retornan NaN, pero de nuevo (de acuerdo con el apéndice F del "
"estándar C99) hay algunas excepciones a esta regla, por ejemplo "
"``pow(float('nan'), 0.0)`` o ``hypot(float('nan'), float('inf'))``."

#: ../Doc/library/math.rst:645
msgid ""
"Note that Python makes no effort to distinguish signaling NaNs from quiet "
"NaNs, and behavior for signaling NaNs remains unspecified. Typical behavior "
"is to treat all NaNs as though they were quiet."
msgstr ""
"Ten en cuenta que Python no hace ningún esfuerzo por distinguir los NaN de "
"señalización de los NaN silenciosos, y el comportamiento de señalización de "
"los NaN permanece sin especificar. El comportamiento estándar es tratar a "
"todos los NaN como silenciosos."

#: ../Doc/library/math.rst:652
msgid "Module :mod:`cmath`"
msgstr "Módulo :mod:`cmath`"

#: ../Doc/library/math.rst:653
msgid "Complex number versions of many of these functions."
msgstr "Versiones de muchas de estas funciones para números complejos."

#~ msgid ""
#~ "Return the greatest common divisor of the integers *a* and *b*.  If "
#~ "either *a* or *b* is nonzero, then the value of ``gcd(a, b)`` is the "
#~ "largest positive integer that divides both *a* and *b*.  ``gcd(0, 0)`` "
#~ "returns ``0``."
#~ msgstr ""
#~ "Retorna el máximo común divisor de los números enteros *a* y *b*. Si *a* "
#~ "o *b* son distintos de cero, el valor de ``gcd(a, b)`` es el mayor entero "
#~ "positivo que divide a ambos, *a* y *b*. ``gcd(0, 0)`` retorna ``0``."
