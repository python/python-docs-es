# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-25 19:47+0200\n"
"PO-Revision-Date: 2021-11-29 20:32+0100\n"
"Last-Translator: Diego Cristóbal Herreros <diecristher@gmail.com>\n"
"Language: es\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../Doc/library/sqlite3.rst:2
msgid ":mod:`sqlite3` --- DB-API 2.0 interface for SQLite databases"
msgstr ":mod:`sqlite3` --- DB-API 2.0 interfaz para bases de datos SQLite"

#: ../Doc/library/sqlite3.rst:9
msgid "**Source code:** :source:`Lib/sqlite3/`"
msgstr "**Código fuente:** :source:`Lib/sqlite3/`"

#: ../Doc/library/sqlite3.rst:23
msgid ""
"SQLite is a C library that provides a lightweight disk-based database that "
"doesn't require a separate server process and allows accessing the database "
"using a nonstandard variant of the SQL query language. Some applications can "
"use SQLite for internal data storage.  It's also possible to prototype an "
"application using SQLite and then port the code to a larger database such as "
"PostgreSQL or Oracle."
msgstr ""
"SQLite es una biblioteca de C que provee una base de datos ligera basada en "
"disco que no requiere un proceso de servidor separado y permite acceder a la "
"base de datos usando una variación no estándar del lenguaje de consulta SQL. "
"Algunas aplicaciones pueden usar SQLite para almacenamiento interno. También "
"es posible prototipar una aplicación usando SQLite y luego transferir el "
"código a una base de datos más grande como PostgreSQL u Oracle."

#: ../Doc/library/sqlite3.rst:30
#, fuzzy
msgid ""
"The :mod:`!sqlite3` module was written by Gerhard Häring.  It provides an "
"SQL interface compliant with the DB-API 2.0 specification described by :pep:"
"`249`, and requires SQLite 3.7.15 or newer."
msgstr ""
"El módulo sqlite3 fue escrito por Gerhard Häring. Proporciona una interfaz "
"SQL compatible con la especificación DB-API 2.0 descrita por :pep:`249` y "
"requiere SQLite 3.7.15 o posterior."

#: ../Doc/library/sqlite3.rst:34
msgid "This document includes four main sections:"
msgstr ""

#: ../Doc/library/sqlite3.rst:36
msgid ":ref:`sqlite3-tutorial` teaches how to use the :mod:`!sqlite3` module."
msgstr ""

#: ../Doc/library/sqlite3.rst:37
msgid ""
":ref:`sqlite3-reference` describes the classes and functions this module "
"defines."
msgstr ""

#: ../Doc/library/sqlite3.rst:39
msgid ":ref:`sqlite3-howtos` details how to handle specific tasks."
msgstr ""

#: ../Doc/library/sqlite3.rst:40
msgid ""
":ref:`sqlite3-explanation` provides in-depth background on transaction "
"control."
msgstr ""

#: ../Doc/library/sqlite3.rst:47
msgid "https://www.sqlite.org"
msgstr "https://www.sqlite.org"

#: ../Doc/library/sqlite3.rst:46
msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr ""
"La página web SQLite; la documentación describe la sintaxis y los tipos de "
"datos disponibles para el lenguaje SQL soportado."

#: ../Doc/library/sqlite3.rst:50
msgid "https://www.w3schools.com/sql/"
msgstr "https://www.w3schools.com/sql/"

#: ../Doc/library/sqlite3.rst:50
msgid "Tutorial, reference and examples for learning SQL syntax."
msgstr "Tutorial, referencia y ejemplos para aprender sintaxis SQL."

#: ../Doc/library/sqlite3.rst:52
msgid ":pep:`249` - Database API Specification 2.0"
msgstr ":pep:`249` - Especificación de la API 2.0 de base de datos"

#: ../Doc/library/sqlite3.rst:53
msgid "PEP written by Marc-André Lemburg."
msgstr "PEP escrito por Marc-André Lemburg."

#: ../Doc/library/sqlite3.rst:66
msgid "Tutorial"
msgstr ""

#: ../Doc/library/sqlite3.rst:68
msgid ""
"In this tutorial, you will create a database of Monty Python movies using "
"basic :mod:`!sqlite3` functionality. It assumes a fundamental understanding "
"of database concepts, including `cursors`_ and `transactions`_."
msgstr ""

#: ../Doc/library/sqlite3.rst:73
msgid ""
"First, we need to create a new database and open a database connection to "
"allow :mod:`!sqlite3` to work with it. Call :func:`sqlite3.connect` to to "
"create a connection to the database :file:`tutorial.db` in the current "
"working directory, implicitly creating it if it does not exist:"
msgstr ""

#: ../Doc/library/sqlite3.rst:84
msgid ""
"The returned :class:`Connection` object ``con`` represents the connection to "
"the on-disk database."
msgstr ""

#: ../Doc/library/sqlite3.rst:87
msgid ""
"In order to execute SQL statements and fetch results from SQL queries, we "
"will need to use a database cursor. Call :meth:`con.cursor() <Connection."
"cursor>` to create the :class:`Cursor`:"
msgstr ""

#: ../Doc/library/sqlite3.rst:95
msgid ""
"Now that we've got a database connection and a cursor, we can create a "
"database table ``movie`` with columns for title, release year, and review "
"score. For simplicity, we can just use column names in the table declaration "
"-- thanks to the `flexible typing`_ feature of SQLite, specifying the data "
"types is optional. Execute the ``CREATE TABLE`` statement by calling :meth:"
"`cur.execute(...) <Cursor.execute>`:"
msgstr ""

#: ../Doc/library/sqlite3.rst:111
msgid ""
"We can verify that the new table has been created by querying the "
"``sqlite_master`` table built-in to SQLite, which should now contain an "
"entry for the ``movie`` table definition (see `The Schema Table`_ for "
"details). Execute that query by calling :meth:`cur.execute(...) <Cursor."
"execute>`, assign the result to ``res``, and call :meth:`res.fetchone() "
"<Cursor.fetchone>` to fetch the resulting row:"
msgstr ""

#: ../Doc/library/sqlite3.rst:125
msgid ""
"We can see that the table has been created, as the query returns a :class:"
"`tuple` containing the table's name. If we query ``sqlite_master`` for a non-"
"existent table ``spam``, :meth:`!res.fetchone()` will return ``None``:"
msgstr ""

#: ../Doc/library/sqlite3.rst:136
msgid ""
"Now, add two rows of data supplied as SQL literals by executing an "
"``INSERT`` statement, once again by calling :meth:`cur.execute(...) <Cursor."
"execute>`:"
msgstr ""

#: ../Doc/library/sqlite3.rst:148
msgid ""
"The ``INSERT`` statement implicitly opens a transaction, which needs to be "
"committed before changes are saved in the database (see :ref:`sqlite3-"
"controlling-transactions` for details). Call :meth:`con.commit() <Connection."
"commit>` on the connection object to commit the transaction:"
msgstr ""

#: ../Doc/library/sqlite3.rst:158
msgid ""
"We can verify that the data was inserted correctly by executing a ``SELECT`` "
"query. Use the now-familiar :meth:`cur.execute(...) <Cursor.execute>` to "
"assign the result to ``res``, and call :meth:`res.fetchall() <Cursor."
"fetchall>` to return all resulting rows:"
msgstr ""

#: ../Doc/library/sqlite3.rst:170
msgid ""
"The result is a :class:`list` of two :class:`!tuple`\\s, one per row, each "
"containing that row's ``score`` value."
msgstr ""

#: ../Doc/library/sqlite3.rst:173
msgid ""
"Now, insert three more rows by calling :meth:`cur.executemany(...) <Cursor."
"executemany>`:"
msgstr ""

#: ../Doc/library/sqlite3.rst:186
msgid ""
"Notice that ``?`` placeholders are used to bind ``data`` to the query. "
"Always use placeholders instead of :ref:`string formatting <tut-formatting>` "
"to bind Python values to SQL statements, to avoid `SQL injection attacks`_ "
"(see :ref:`sqlite3-placeholders` for more details)."
msgstr ""

#: ../Doc/library/sqlite3.rst:192
msgid ""
"We can verify that the new rows were inserted by executing a ``SELECT`` "
"query, this time iterating over the results of the query:"
msgstr ""

#: ../Doc/library/sqlite3.rst:206
msgid ""
"Each row is a two-item :class:`tuple` of ``(year, title)``, matching the "
"columns selected in the query."
msgstr ""

#: ../Doc/library/sqlite3.rst:209
msgid ""
"Finally, verify that the database has been written to disk by calling :meth:"
"`con.close() <Connection.close>` to close the existing connection, opening a "
"new one, creating a new cursor, then querying the database:"
msgstr ""

#: ../Doc/library/sqlite3.rst:224
msgid ""
"You've now created an SQLite database using the :mod:`!sqlite3` module, "
"inserted data and retrieved values from it in multiple ways."
msgstr ""

#: ../Doc/library/sqlite3.rst:236
msgid ":ref:`sqlite3-howtos` for further reading:"
msgstr ""

#: ../Doc/library/sqlite3.rst:238
msgid ":ref:`sqlite3-placeholders`"
msgstr ""

#: ../Doc/library/sqlite3.rst:239
msgid ":ref:`sqlite3-adapters`"
msgstr ""

#: ../Doc/library/sqlite3.rst:240
msgid ":ref:`sqlite3-converters`"
msgstr ""

#: ../Doc/library/sqlite3.rst:241 ../Doc/library/sqlite3.rst:556
#, fuzzy
msgid ":ref:`sqlite3-connection-context-manager`"
msgstr "Usando la conexión como un administrador de contexto"

#: ../Doc/library/sqlite3.rst:243
msgid ""
":ref:`sqlite3-explanation` for in-depth background on transaction control."
msgstr ""

#: ../Doc/library/sqlite3.rst:248
msgid "Reference"
msgstr ""

#: ../Doc/library/sqlite3.rst:256
#, fuzzy
msgid "Module functions"
msgstr "Funciones y constantes del módulo"

#: ../Doc/library/sqlite3.rst:263
msgid "Open a connection to an SQLite database."
msgstr ""

#: ../Doc/library/sqlite3.rst
msgid "Parameters"
msgstr ""

#: ../Doc/library/sqlite3.rst:265
#, fuzzy
msgid ""
"The path to the database file to be opened. Pass ``\":memory:\"`` to open a "
"connection to a database that is in RAM instead of on disk."
msgstr ""
"*database* es un :term:`path-like object` indicando el nombre de ruta "
"(absoluta o relativa al directorio de trabajo actual) del archivo de base de "
"datos abierto. Se puede usar ``\":memory:\"`` para abrir una conexión de "
"base de datos a una base de datos que reside en memoria RAM en lugar que "
"disco."

#: ../Doc/library/sqlite3.rst:271
msgid ""
"How many seconds the connection should wait before raising an exception, if "
"the database is locked by another connection. If another connection opens a "
"transaction to modify the database, it will be locked until that transaction "
"is committed. Default five seconds."
msgstr ""

#: ../Doc/library/sqlite3.rst:278
msgid ""
"Control whether and how data types not :ref:`natively supported by SQLite "
"<sqlite3-types>` are looked up to be converted to Python types, using the "
"converters registered with :func:`register_converter`. Set it to any "
"combination (using ``|``, bitwise or) of :const:`PARSE_DECLTYPES` and :const:"
"`PARSE_COLNAMES` to enable this. Column names takes precedence over declared "
"types if both flags are set. Types cannot be detected for generated fields "
"(for example ``max(data)``), even when the *detect_types* parameter is set; :"
"class:`str` will be returned instead. By default (``0``), type detection is "
"disabled."
msgstr ""

#: ../Doc/library/sqlite3.rst:292
msgid ""
"The :attr:`~Connection.isolation_level` of the connection, controlling "
"whether and how transactions are implicitly opened. Can be ``\"DEFERRED\"`` "
"(default), ``\"EXCLUSIVE\"`` or ``\"IMMEDIATE\"``; or ``None`` to disable "
"opening transactions implicitly. See :ref:`sqlite3-controlling-transactions` "
"for more."
msgstr ""

#: ../Doc/library/sqlite3.rst:300
msgid ""
"If ``True`` (default), only the creating thread may use the connection. If "
"``False``, the connection may be shared across multiple threads; if so, "
"write operations should be serialized by the user to avoid data corruption."
msgstr ""

#: ../Doc/library/sqlite3.rst:306
msgid ""
"A custom subclass of :class:`Connection` to create the connection with, if "
"not the default :class:`Connection` class."
msgstr ""

#: ../Doc/library/sqlite3.rst:310
msgid ""
"The number of statements that :mod:`!sqlite3` should internally cache for "
"this connection, to avoid parsing overhead. By default, 128 statements."
msgstr ""

#: ../Doc/library/sqlite3.rst:315
msgid ""
"If set to ``True``, *database* is interpreted as a :abbr:`URI (Uniform "
"Resource Identifier)` with a file path and an optional query string. The "
"scheme part *must* be ``\"file:\"``, and the path can be relative or "
"absolute. The query string allows passing parameters to SQLite, enabling "
"various :ref:`sqlite3-uri-tricks`."
msgstr ""

#: ../Doc/library/sqlite3.rst
#, fuzzy
msgid "Return type"
msgstr "Tipo de Python"

#: ../Doc/library/sqlite3.rst:326
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.connect`` with argument "
"``database``."
msgstr ""
"Lanza un :ref:`evento de auditoría <auditing>` ``sqlite3.connect`` con "
"argumento ``database``."

#: ../Doc/library/sqlite3.rst:327
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.connect/handle`` with "
"argument ``connection_handle``."
msgstr ""
"Lanza un :ref:`auditing event <auditing>` ``sqlite3.connect/handle`` con el "
"argumento ``connection_handle``."

#: ../Doc/library/sqlite3.rst:329
#, fuzzy
msgid "The *uri* parameter."
msgstr "Agregado el parámetro *uri*."

#: ../Doc/library/sqlite3.rst:332
msgid ""
"*database* can now also be a :term:`path-like object`, not only a string."
msgstr ""
"*database* ahora también puede ser un :term:`path-like object`, no solo una "
"cadena de caracteres."

#: ../Doc/library/sqlite3.rst:335
#, fuzzy
msgid "The ``sqlite3.connect/handle`` auditing event."
msgstr "Añadido el evento de auditoría ``sqlite3.connect/handle``"

#: ../Doc/library/sqlite3.rst:340
msgid ""
"Return ``True`` if the string *statement* appears to contain one or more "
"complete SQL statements. No syntactic verification or parsing of any kind is "
"performed, other than checking that there are no unclosed string literals "
"and the statement is terminated by a semicolon."
msgstr ""

#: ../Doc/library/sqlite3.rst:346
#, fuzzy
msgid "For example:"
msgstr "Ejemplo:"

#: ../Doc/library/sqlite3.rst:355
msgid ""
"This function may be useful during command-line input to determine if the "
"entered text seems to form a complete SQL statement, or if additional input "
"is needed before calling :meth:`~Cursor.execute`."
msgstr ""

#: ../Doc/library/sqlite3.rst:361
#, fuzzy
msgid ""
"Enable or disable callback tracebacks. By default you will not get any "
"tracebacks in user-defined functions, aggregates, converters, authorizer "
"callbacks etc. If you want to debug them, you can call this function with "
"*flag* set to ``True``. Afterwards, you will get tracebacks from callbacks "
"on :data:`sys.stderr`. Use ``False`` to disable the feature again."
msgstr ""
"Por defecto no se obtendrá ningún *tracebacks* en funciones definidas por el "
"usuario, agregaciones, *converters*, autorizador de *callbacks* etc. si se "
"quiere depurarlas, se puede llamar esta función con *flag* configurado a "
"``True``. Después se obtendrán *tracebacks* de los *callbacks* en ``sys."
"stderr``. Usar :const:`False` para deshabilitar la característica de nuevo."

#: ../Doc/library/sqlite3.rst:368
msgid ""
"Register an :func:`unraisable hook handler <sys.unraisablehook>` for an "
"improved debug experience:"
msgstr ""

#: ../Doc/library/sqlite3.rst:393
msgid ""
"Register an *adapter* callable to adapt the Python type *type* into an "
"SQLite type. The adapter is called with a Python object of type *type* as "
"its sole argument, and must return a value of a :ref:`type that SQLite "
"natively understands <sqlite3-types>`."
msgstr ""

#: ../Doc/library/sqlite3.rst:401
msgid ""
"Register the *converter* callable to convert SQLite objects of type "
"*typename* into a Python object of a specific type. The converter is invoked "
"for all SQLite values of type *typename*; it is passed a :class:`bytes` "
"object and should return an object of the desired Python type. Consult the "
"parameter *detect_types* of :func:`connect` for information regarding how "
"type detection works."
msgstr ""

#: ../Doc/library/sqlite3.rst:409
msgid ""
"Note: *typename* and the name of the type in your query are matched case-"
"insensitively."
msgstr ""

#: ../Doc/library/sqlite3.rst:416
#, fuzzy
msgid "Module constants"
msgstr "Funciones y constantes del módulo"

#: ../Doc/library/sqlite3.rst:420
msgid ""
"Pass this flag value to the *detect_types* parameter of :func:`connect` to "
"look up a converter function by using the type name, parsed from the query "
"column name, as the converter dictionary key. The type name must be wrapped "
"in square brackets (``[]``)."
msgstr ""

#: ../Doc/library/sqlite3.rst:430
msgid ""
"This flag may be combined with :const:`PARSE_DECLTYPES` using the ``|`` "
"(bitwise or) operator."
msgstr ""

#: ../Doc/library/sqlite3.rst:435
msgid ""
"Pass this flag value to the *detect_types* parameter of :func:`connect` to "
"look up a converter function using the declared types for each column. The "
"types are declared when the database table is created. :mod:`!sqlite3` will "
"look up a converter function using the first word of the declared type as "
"the converter dictionary key. For example:"
msgstr ""

#: ../Doc/library/sqlite3.rst:451
msgid ""
"This flag may be combined with :const:`PARSE_COLNAMES` using the ``|`` "
"(bitwise or) operator."
msgstr ""

#: ../Doc/library/sqlite3.rst:458
msgid ""
"Flags that should be returned by the *authorizer_callback* callable passed "
"to :meth:`Connection.set_authorizer`, to indicate whether:"
msgstr ""

#: ../Doc/library/sqlite3.rst:461
msgid "Access is allowed (:const:`!SQLITE_OK`),"
msgstr ""

#: ../Doc/library/sqlite3.rst:462
msgid ""
"The SQL statement should be aborted with an error (:const:`!SQLITE_DENY`)"
msgstr ""

#: ../Doc/library/sqlite3.rst:463
msgid ""
"The column should be treated as a ``NULL`` value (:const:`!SQLITE_IGNORE`)"
msgstr ""

#: ../Doc/library/sqlite3.rst:467
msgid ""
"String constant stating the supported DB-API level. Required by the DB-API. "
"Hard-coded to ``\"2.0\"``."
msgstr ""

#: ../Doc/library/sqlite3.rst:472
msgid ""
"String constant stating the type of parameter marker formatting expected by "
"the :mod:`!sqlite3` module. Required by the DB-API. Hard-coded to "
"``\"qmark\"``."
msgstr ""

#: ../Doc/library/sqlite3.rst:478
msgid ""
"The :mod:`!sqlite3` module supports both ``qmark`` and ``numeric`` DB-API "
"parameter styles, because that is what the underlying SQLite library "
"supports. However, the DB-API does not allow multiple values for the "
"``paramstyle`` attribute."
msgstr ""

#: ../Doc/library/sqlite3.rst:485
#, fuzzy
msgid ""
"Version number of the runtime SQLite library as a :class:`string <str>`."
msgstr ""
"El número de versión de la librería SQLite en tiempo de ejecución, como una "
"cadena de caracteres."

#: ../Doc/library/sqlite3.rst:489
#, fuzzy
msgid ""
"Version number of the runtime SQLite library as a :class:`tuple` of :class:"
"`integers <int>`."
msgstr ""
"El número de versión de la librería SQLite en tiempo de ejecución, como una "
"tupla de enteros."

#: ../Doc/library/sqlite3.rst:494
msgid ""
"Integer constant required by the DB-API 2.0, stating the level of thread "
"safety the :mod:`!sqlite3` module supports. This attribute is set based on "
"the default `threading mode <https://sqlite.org/threadsafe.html>`_ the "
"underlying SQLite library is compiled with. The SQLite threading modes are:"
msgstr ""

#: ../Doc/library/sqlite3.rst:499
msgid ""
"**Single-thread**: In this mode, all mutexes are disabled and SQLite is "
"unsafe to use in more than a single thread at once."
msgstr ""

#: ../Doc/library/sqlite3.rst:501
msgid ""
"**Multi-thread**: In this mode, SQLite can be safely used by multiple "
"threads provided that no single database connection is used simultaneously "
"in two or more threads."
msgstr ""

#: ../Doc/library/sqlite3.rst:504
msgid ""
"**Serialized**: In serialized mode, SQLite can be safely used by multiple "
"threads with no restriction."
msgstr ""

#: ../Doc/library/sqlite3.rst:507
msgid ""
"The mappings from SQLite threading modes to DB-API 2.0 threadsafety levels "
"are as follows:"
msgstr ""

#: ../Doc/library/sqlite3.rst:511
msgid "SQLite threading mode"
msgstr ""

#: ../Doc/library/sqlite3.rst:511
msgid "`threadsafety`_"
msgstr ""

#: ../Doc/library/sqlite3.rst:511
msgid "`SQLITE_THREADSAFE`_"
msgstr ""

#: ../Doc/library/sqlite3.rst:511
msgid "DB-API 2.0 meaning"
msgstr ""

#: ../Doc/library/sqlite3.rst:514
msgid "single-thread"
msgstr ""

#: ../Doc/library/sqlite3.rst:514
msgid "0"
msgstr ""

#: ../Doc/library/sqlite3.rst:514
msgid "Threads may not share the module"
msgstr ""

#: ../Doc/library/sqlite3.rst:517
msgid "multi-thread"
msgstr ""

#: ../Doc/library/sqlite3.rst:517 ../Doc/library/sqlite3.rst:520
msgid "1"
msgstr ""

#: ../Doc/library/sqlite3.rst:517
msgid "2"
msgstr ""

#: ../Doc/library/sqlite3.rst:517
msgid "Threads may share the module, but not connections"
msgstr ""

#: ../Doc/library/sqlite3.rst:520
msgid "serialized"
msgstr ""

#: ../Doc/library/sqlite3.rst:520
msgid "3"
msgstr ""

#: ../Doc/library/sqlite3.rst:520
msgid "Threads may share the module, connections and cursors"
msgstr ""

#: ../Doc/library/sqlite3.rst:527
msgid "Set *threadsafety* dynamically instead of hard-coding it to ``1``."
msgstr ""

#: ../Doc/library/sqlite3.rst:532
#, fuzzy
msgid ""
"Version number of this module as a :class:`string <str>`. This is not the "
"version of the SQLite library."
msgstr ""
"El número de versión de este módulo, como una cadena de caracteres. Este no "
"es la versión de la librería SQLite."

#: ../Doc/library/sqlite3.rst:537
#, fuzzy
msgid ""
"Version number of this module as a :class:`tuple` of :class:`integers "
"<int>`. This is not the version of the SQLite library."
msgstr ""
"El número de versión de este módulo, como una tupla de enteros. Este no es "
"la versión de la librería SQLite."

#: ../Doc/library/sqlite3.rst:544
#, fuzzy
msgid "Connection objects"
msgstr "Objetos de conexión"

#: ../Doc/library/sqlite3.rst:548
msgid ""
"Each open SQLite database is represented by a ``Connection`` object, which "
"is created using :func:`sqlite3.connect`. Their main purpose is creating :"
"class:`Cursor` objects, and :ref:`sqlite3-controlling-transactions`."
msgstr ""

#: ../Doc/library/sqlite3.rst:555
msgid ":ref:`sqlite3-connection-shortcuts`"
msgstr ""

#: ../Doc/library/sqlite3.rst:558
#, fuzzy
msgid "An SQLite database connection has the following attributes and methods:"
msgstr ""
"Una conexión a base de datos SQLite tiene los siguientes atributos y métodos:"

#: ../Doc/library/sqlite3.rst:562
#, fuzzy
msgid ""
"Create and return a :class:`Cursor` object. The cursor method accepts a "
"single optional parameter *factory*. If supplied, this must be a callable "
"returning an instance of :class:`Cursor` or its subclasses."
msgstr ""
"El método cursor acepta un único parámetro opcional *factory*. Si es "
"agregado, éste debe ser un invocable que retorna una instancia de :class:"
"`Cursor` o sus subclases."

#: ../Doc/library/sqlite3.rst:569
msgid ""
"Open a :class:`Blob` handle to an existing :abbr:`BLOB (Binary Large "
"OBject)`."
msgstr ""

#: ../Doc/library/sqlite3.rst:572
msgid "The name of the table where the blob is located."
msgstr ""

#: ../Doc/library/sqlite3.rst:575
msgid "The name of the column where the blob is located."
msgstr ""

#: ../Doc/library/sqlite3.rst:578
msgid "The name of the row where the blob is located."
msgstr ""

#: ../Doc/library/sqlite3.rst:581
msgid ""
"Set to ``True`` if the blob should be opened without write permissions. "
"Defaults to ``False``."
msgstr ""

#: ../Doc/library/sqlite3.rst:586
msgid ""
"The name of the database where the blob is located. Defaults to ``\"main\"``."
msgstr ""

#: ../Doc/library/sqlite3.rst
msgid "Raises"
msgstr ""

#: ../Doc/library/sqlite3.rst:590
msgid "When trying to open a blob in a ``WITHOUT ROWID`` table."
msgstr ""

#: ../Doc/library/sqlite3.rst:597
msgid ""
"The blob size cannot be changed using the :class:`Blob` class. Use the SQL "
"function ``zeroblob`` to create a blob with a fixed size."
msgstr ""

#: ../Doc/library/sqlite3.rst:604
msgid ""
"Commit any pending transaction to the database. If there is no open "
"transaction, this method is a no-op."
msgstr ""

#: ../Doc/library/sqlite3.rst:609
msgid ""
"Roll back to the start of any pending transaction. If there is no open "
"transaction, this method is a no-op."
msgstr ""

#: ../Doc/library/sqlite3.rst:614
msgid ""
"Close the database connection. Any pending transaction is not committed "
"implicitly; make sure to :meth:`commit` before closing to avoid losing "
"pending changes."
msgstr ""

#: ../Doc/library/sqlite3.rst:621
msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.execute` on it "
"with the given *sql* and *parameters*. Return the new cursor object."
msgstr ""

#: ../Doc/library/sqlite3.rst:627
msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.executemany` on "
"it with the given *sql* and *parameters*. Return the new cursor object."
msgstr ""

#: ../Doc/library/sqlite3.rst:633
msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.executescript` "
"on it with the given *sql_script*. Return the new cursor object."
msgstr ""

#: ../Doc/library/sqlite3.rst:639
#, fuzzy
msgid "Create or remove a user-defined SQL function."
msgstr "Crea una función agregada definida por el usuario."

#: ../Doc/library/sqlite3.rst:641
msgid "The name of the SQL function."
msgstr ""

#: ../Doc/library/sqlite3.rst:644
msgid ""
"The number of arguments the SQL function can accept. If ``-1``, it may take "
"any number of arguments."
msgstr ""

#: ../Doc/library/sqlite3.rst:648
msgid ""
"A callable that is called when the SQL function is invoked. The callable "
"must return :ref:`a type natively supported by SQLite <sqlite3-types>`. Set "
"to ``None`` to remove an existing SQL function."
msgstr ""

#: ../Doc/library/sqlite3.rst:655
msgid ""
"If ``True``, the created SQL function is marked as `deterministic <https://"
"sqlite.org/deterministic.html>`_, which allows SQLite to perform additional "
"optimizations."
msgstr ""

#: ../Doc/library/sqlite3.rst:660
msgid "If *deterministic* is used with SQLite versions older than 3.8.3."
msgstr ""

#: ../Doc/library/sqlite3.rst:663
#, fuzzy
msgid "The *deterministic* parameter."
msgstr "El parámetro *deterministic* fue agregado."

#: ../Doc/library/sqlite3.rst:666 ../Doc/library/sqlite3.rst:704
#: ../Doc/library/sqlite3.rst:767 ../Doc/library/sqlite3.rst:1018
#: ../Doc/library/sqlite3.rst:1242 ../Doc/library/sqlite3.rst:1272
#: ../Doc/library/sqlite3.rst:1378 ../Doc/library/sqlite3.rst:1399
#: ../Doc/library/sqlite3.rst:1538
msgid "Example:"
msgstr "Ejemplo:"

#: ../Doc/library/sqlite3.rst:682
#, fuzzy
msgid "Create or remove a user-defined SQL aggregate function."
msgstr "Crea una función agregada definida por el usuario."

#: ../Doc/library/sqlite3.rst:684
#, fuzzy
msgid "The name of the SQL aggregate function."
msgstr "Crea una función agregada definida por el usuario."

#: ../Doc/library/sqlite3.rst:687
msgid ""
"The number of arguments the SQL aggregate function can accept. If ``-1``, it "
"may take any number of arguments."
msgstr ""

#: ../Doc/library/sqlite3.rst:691
msgid ""
"A class must implement the following methods:  * ``step()``: Add a row to "
"the aggregate. * ``finalize()``: Return the final result of the aggregate "
"as   :ref:`a type natively supported by SQLite <sqlite3-types>`.  The number "
"of arguments that the ``step()`` method must accept is controlled by "
"*n_arg*.  Set to ``None`` to remove an existing SQL aggregate function."
msgstr ""

#: ../Doc/library/sqlite3.rst:692
#, fuzzy
msgid "A class must implement the following methods:"
msgstr ""
"Una instancia de :class:`Cursor` tiene los siguientes atributos y métodos."

#: ../Doc/library/sqlite3.rst:694
msgid "``step()``: Add a row to the aggregate."
msgstr ""

#: ../Doc/library/sqlite3.rst:695 ../Doc/library/sqlite3.rst:751
msgid ""
"``finalize()``: Return the final result of the aggregate as :ref:`a type "
"natively supported by SQLite <sqlite3-types>`."
msgstr ""

#: ../Doc/library/sqlite3.rst:698
msgid ""
"The number of arguments that the ``step()`` method must accept is controlled "
"by *n_arg*."
msgstr ""

#: ../Doc/library/sqlite3.rst:701
msgid "Set to ``None`` to remove an existing SQL aggregate function."
msgstr ""

#: ../Doc/library/sqlite3.rst:736
#, fuzzy
msgid "Create or remove a user-defined aggregate window function."
msgstr "Crea una función agregada definida por el usuario."

#: ../Doc/library/sqlite3.rst:738
msgid "The name of the SQL aggregate window function to create or remove."
msgstr ""

#: ../Doc/library/sqlite3.rst:741
msgid ""
"The number of arguments the SQL aggregate window function can accept. If "
"``-1``, it may take any number of arguments."
msgstr ""

#: ../Doc/library/sqlite3.rst:745
msgid ""
"A class that must implement the following methods:  * ``step()``: Add a row "
"to the current window. * ``value()``: Return the current value of the "
"aggregate. * ``inverse()``: Remove a row from the current window. * "
"``finalize()``: Return the final result of the aggregate as   :ref:`a type "
"natively supported by SQLite <sqlite3-types>`.  The number of arguments that "
"the ``step()`` and ``value()`` methods must accept is controlled by "
"*num_params*.  Set to ``None`` to remove an existing SQL aggregate window "
"function."
msgstr ""

#: ../Doc/library/sqlite3.rst:746
msgid "A class that must implement the following methods:"
msgstr ""

#: ../Doc/library/sqlite3.rst:748
msgid "``step()``: Add a row to the current window."
msgstr ""

#: ../Doc/library/sqlite3.rst:749
msgid "``value()``: Return the current value of the aggregate."
msgstr ""

#: ../Doc/library/sqlite3.rst:750
msgid "``inverse()``: Remove a row from the current window."
msgstr ""

#: ../Doc/library/sqlite3.rst:754
msgid ""
"The number of arguments that the ``step()`` and ``value()`` methods must "
"accept is controlled by *num_params*."
msgstr ""

#: ../Doc/library/sqlite3.rst:757
msgid "Set to ``None`` to remove an existing SQL aggregate window function."
msgstr ""

#: ../Doc/library/sqlite3.rst:759
msgid ""
"If used with a version of SQLite older than 3.25.0, which does not support "
"aggregate window functions."
msgstr ""

#: ../Doc/library/sqlite3.rst:822
msgid ""
"Create a collation named *name* using the collating function *callable*. "
"*callable* is passed two :class:`string <str>` arguments, and it should "
"return an :class:`integer <int>`:"
msgstr ""

#: ../Doc/library/sqlite3.rst:826
msgid "``1`` if the first is ordered higher than the second"
msgstr ""

#: ../Doc/library/sqlite3.rst:827
msgid "``-1`` if the first is ordered lower than the second"
msgstr ""

#: ../Doc/library/sqlite3.rst:828
msgid "``0`` if they are ordered equal"
msgstr ""

#: ../Doc/library/sqlite3.rst:830
#, fuzzy
msgid "The following example shows a reverse sorting collation:"
msgstr ""
"El siguiente ejemplo muestra una *collation* personalizada que ordena \"La "
"forma incorrecta\":"

#: ../Doc/library/sqlite3.rst:858
msgid "Remove a collation function by setting *callable* to ``None``."
msgstr ""

#: ../Doc/library/sqlite3.rst:860
msgid ""
"The collation name can contain any Unicode character.  Earlier, only ASCII "
"characters were allowed."
msgstr ""

#: ../Doc/library/sqlite3.rst:867
#, fuzzy
msgid ""
"Call this method from a different thread to abort any queries that might be "
"executing on the connection. Aborted queries will raise an exception."
msgstr ""
"Se puede llamar este método desde un hilo diferente para abortar cualquier "
"consulta que pueda estar ejecutándose en la conexión. La consulta será "
"abortada y quien realiza la llamada obtendrá una excepción."

#: ../Doc/library/sqlite3.rst:874
msgid ""
"Register callable *authorizer_callback* to be invoked for each attempt to "
"access a column of a table in the database. The callback should return one "
"of :const:`SQLITE_OK`, :const:`SQLITE_DENY`, or :const:`SQLITE_IGNORE` to "
"signal how access to the column should be handled by the underlying SQLite "
"library."
msgstr ""

#: ../Doc/library/sqlite3.rst:880
#, fuzzy
msgid ""
"The first argument to the callback signifies what kind of operation is to be "
"authorized. The second and third argument will be arguments or ``None`` "
"depending on the first argument. The 4th argument is the name of the "
"database (\"main\", \"temp\", etc.) if applicable. The 5th argument is the "
"name of the inner-most trigger or view that is responsible for the access "
"attempt or ``None`` if this access attempt is directly from input SQL code."
msgstr ""
"El primer argumento del callback significa que tipo de operación será "
"autorizada. El segundo y tercer argumento serán argumentos o :const:`None` "
"dependiendo del primer argumento. El cuarto argumento es el nombre de la "
"base de datos (\"main\", \"temp\", etc.) si aplica. El quinto argumento es "
"el nombre del disparador más interno o vista que es responsable por los "
"intentos de acceso o :const:`None` si este intento de acceso es directo "
"desde el código SQL de entrada."

#: ../Doc/library/sqlite3.rst:887
#, fuzzy
msgid ""
"Please consult the SQLite documentation about the possible values for the "
"first argument and the meaning of the second and third argument depending on "
"the first one. All necessary constants are available in the :mod:`!sqlite3` "
"module."
msgstr ""
"Por favor consulte la documentación de SQLite sobre los posibles valores "
"para el primer argumento y el significado del segundo y tercer argumento "
"dependiendo del primero. Todas las constantes necesarias están disponibles "
"en el módulo :mod:`sqlite3`."

#: ../Doc/library/sqlite3.rst:891
#, fuzzy
msgid "Passing ``None`` as *authorizer_callback* will disable the authorizer."
msgstr ""
"Pasando :const:`None` como *trace_callback* deshabilitara el *trace "
"callback*."

#: ../Doc/library/sqlite3.rst:893
msgid "Added support for disabling the authorizer using ``None``."
msgstr ""

#: ../Doc/library/sqlite3.rst:899
msgid ""
"Register callable *progress_handler* to be invoked for every *n* "
"instructions of the SQLite virtual machine. This is useful if you want to "
"get called from SQLite during long-running operations, for example to update "
"a GUI."
msgstr ""

#: ../Doc/library/sqlite3.rst:904
#, fuzzy
msgid ""
"If you want to clear any previously installed progress handler, call the "
"method with ``None`` for *progress_handler*."
msgstr ""
"Si se desea limpiar cualquier *progress handler* instalado previamente, "
"llame el método con :const:`None` para *handler*."

#: ../Doc/library/sqlite3.rst:907
msgid ""
"Returning a non-zero value from the handler function will terminate the "
"currently executing query and cause it to raise an :exc:`OperationalError` "
"exception."
msgstr ""
"Retornando un valor diferente a 0 de la función gestora terminará la actual "
"consulta en ejecución y causará lanzar una excepción :exc:`OperationalError`."

#: ../Doc/library/sqlite3.rst:914
#, fuzzy
msgid ""
"Register callable *trace_callback* to be invoked for each SQL statement that "
"is actually executed by the SQLite backend."
msgstr ""
"Registra *trace_callback* para ser llamado por cada sentencia SQL que "
"realmente se ejecute por el *backend* de SQLite."

#: ../Doc/library/sqlite3.rst:917
#, fuzzy
msgid ""
"The only argument passed to the callback is the statement (as :class:`str`) "
"that is being executed. The return value of the callback is ignored. Note "
"that the backend does not only run statements passed to the :meth:`Cursor."
"execute` methods.  Other sources include the :ref:`transaction management "
"<sqlite3-controlling-transactions>` of the :mod:`!sqlite3` module and the "
"execution of triggers defined in the current database."
msgstr ""
"El único argumento que se pasa a la devolución de llamada es la declaración "
"(como :class:`str`) que se está ejecutando. El valor de retorno de la "
"devolución de llamada se ignora. Tenga en cuenta que el backend no solo "
"ejecuta declaraciones pasadas a los métodos :meth:`Cursor.execute`. Otras "
"fuentes incluyen el :ref:`transaction management <sqlite3-controlling-"
"transactions>` del módulo sqlite3 y la ejecución de disparadores definidos "
"en la base de datos actual."

#: ../Doc/library/sqlite3.rst:925
#, fuzzy
msgid "Passing ``None`` as *trace_callback* will disable the trace callback."
msgstr ""
"Pasando :const:`None` como *trace_callback* deshabilitara el *trace "
"callback*."

#: ../Doc/library/sqlite3.rst:928
msgid ""
"Exceptions raised in the trace callback are not propagated. As a development "
"and debugging aid, use :meth:`~sqlite3.enable_callback_tracebacks` to enable "
"printing tracebacks from exceptions raised in the trace callback."
msgstr ""
"Las excepciones que se producen en la llamada de retorno no se propagan. "
"Como ayuda para el desarrollo y la depuración, utilice :meth:`~sqlite3."
"enable_callback_tracebacks` para habilitar la impresión de las trazas de las "
"excepciones que se producen en la llamada de retorno."

#: ../Doc/library/sqlite3.rst:938
#, fuzzy
msgid ""
"Enable the SQLite engine to load SQLite extensions from shared libraries if "
"*enabled* is ``True``; else, disallow loading SQLite extensions. SQLite "
"extensions can define new functions, aggregates or whole new virtual table "
"implementations.  One well-known extension is the fulltext-search extension "
"distributed with SQLite."
msgstr ""
"Esta rutina habilita/deshabilita el motor de SQLite para cargar extensiones "
"SQLite desde bibliotecas compartidas. Las extensiones SQLite pueden definir "
"nuevas funciones, agregaciones o una completa nueva implementación de tablas "
"virtuales. Una bien conocida extensión es *fulltext-search* distribuida con "
"SQLite."

#: ../Doc/library/sqlite3.rst:947
#, fuzzy
msgid ""
"The :mod:`!sqlite3` module is not built with loadable extension support by "
"default, because some platforms (notably macOS) have SQLite libraries which "
"are compiled without this feature. To get loadable extension support, you "
"must pass the :option:`--enable-loadable-sqlite-extensions` option to :"
"program:`configure`."
msgstr ""
"El módulo sqlite3 no está construido con soporte de extensión cargable de "
"forma predeterminada, porque algunas plataformas (especialmente macOS) "
"tienen bibliotecas SQLite que se compilan sin esta función. Para obtener "
"soporte de extensión cargable, debe pasar la opción :option:`--enable-"
"loadable-sqlite-extensions` para configurar."

#: ../Doc/library/sqlite3.rst:954
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.enable_load_extension`` "
"with arguments ``connection``, ``enabled``."
msgstr ""
"Lanza un :ref:`auditing event <auditing>` ``sqlite3.enable_load_extension`` "
"con argumentos ``connection``, ``enabled``."

#: ../Doc/library/sqlite3.rst:958
msgid "Added the ``sqlite3.enable_load_extension`` auditing event."
msgstr "Añadido el evento de auditoría ``sqlite3.enable_load_extension``"

#: ../Doc/library/sqlite3.rst:1001
#, fuzzy
msgid ""
"Load an SQLite extension from a shared library located at *path*. Enable "
"extension loading with :meth:`enable_load_extension` before calling this "
"method."
msgstr ""
"Esta rutina carga una extensión SQLite de una biblioteca compartida. Se debe "
"habilitar la carga de extensiones con :meth:`enable_load_extension` antes de "
"usar esta rutina."

#: ../Doc/library/sqlite3.rst:1005
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.load_extension`` with "
"arguments ``connection``, ``path``."
msgstr ""
"Lanza un :ref:`auditing event <auditing>` ``sqlite3.load_extension`` con "
"argumentos ``connection``, ``path``."

#: ../Doc/library/sqlite3.rst:1009
msgid "Added the ``sqlite3.load_extension`` auditing event."
msgstr "Añadido el evento de auditoría ``sqlite3.load_extension``"

#: ../Doc/library/sqlite3.rst:1014
#, fuzzy
msgid ""
"Return an :term:`iterator` to dump the database as SQL source code. Useful "
"when saving an in-memory database for later restoration. Similar to the ``."
"dump`` command in the :program:`sqlite3` shell."
msgstr ""
"Regresa un iterador para volcar la base de datos en un texto de formato SQL. "
"Es útil cuando guardamos una base de datos en memoria para posterior "
"restauración. Esta función provee las mismas capacidades que el comando :kbd:"
"`dump` en el *shell* :program:`sqlite3`."

#: ../Doc/library/sqlite3.rst:1032
msgid "Create a backup of an SQLite database."
msgstr ""

#: ../Doc/library/sqlite3.rst:1034
msgid ""
"Works even if the database is being accessed by other clients or "
"concurrently by the same connection."
msgstr ""

#: ../Doc/library/sqlite3.rst:1037
msgid "The database connection to save the backup to."
msgstr ""

#: ../Doc/library/sqlite3.rst:1040
msgid ""
"The number of pages to copy at a time. If equal to or less than ``0``, the "
"entire database is copied in a single step. Defaults to ``-1``."
msgstr ""

#: ../Doc/library/sqlite3.rst:1046
msgid ""
"If set to a callable, it is invoked with three integer arguments for every "
"backup iteration: the *status* of the last iteration, the *remaining* number "
"of pages still to be copied, and the *total* number of pages. Defaults to "
"``None``."
msgstr ""

#: ../Doc/library/sqlite3.rst:1055
msgid ""
"The name of the database to back up. Either ``\"main\"`` (the default) for "
"the main database, ``\"temp\"`` for the temporary database, or the name of a "
"custom database as attached using the ``ATTACH DATABASE`` SQL statement."
msgstr ""

#: ../Doc/library/sqlite3.rst:1062
#, fuzzy
msgid ""
"The number of seconds to sleep between successive attempts to back up "
"remaining pages."
msgstr ""
"El argumento *sleep* especifica el número de segundos a dormir entre "
"sucesivos intentos de respaldar páginas restantes, puede ser especificado "
"como un entero o un valor de punto flotante."

#: ../Doc/library/sqlite3.rst:1066
#, fuzzy
msgid "Example 1, copy an existing database into another:"
msgstr "Ejemplo 1, copiar una base de datos existente en otra::"

#: ../Doc/library/sqlite3.rst:1085
#, fuzzy
msgid "Example 2, copy an existing database into a transient copy:"
msgstr ""
"Ejemplo 2: copiar una base de datos existente en una copia transitoria::"

#: ../Doc/library/sqlite3.rst:1097
msgid "Get a connection runtime limit."
msgstr ""

#: ../Doc/library/sqlite3.rst:1099
msgid "The `SQLite limit category`_ to be queried."
msgstr ""

#: ../Doc/library/sqlite3.rst:1104 ../Doc/library/sqlite3.rst:1141
msgid "If *category* is not recognised by the underlying SQLite library."
msgstr ""

#: ../Doc/library/sqlite3.rst:1107
msgid ""
"Example, query the maximum length of an SQL statement for :class:"
"`Connection` ``con`` (the default is 1000000000):"
msgstr ""

#: ../Doc/library/sqlite3.rst:1127
msgid ""
"Set a connection runtime limit. Attempts to increase a limit above its hard "
"upper bound are silently truncated to the hard upper bound. Regardless of "
"whether or not the limit was changed, the prior value of the limit is "
"returned."
msgstr ""

#: ../Doc/library/sqlite3.rst:1132
msgid "The `SQLite limit category`_ to be set."
msgstr ""

#: ../Doc/library/sqlite3.rst:1135
msgid ""
"The value of the new limit. If negative, the current limit is unchanged."
msgstr ""

#: ../Doc/library/sqlite3.rst:1144
msgid ""
"Example, limit the number of attached databases to 1 for :class:`Connection` "
"``con`` (the default limit is 10):"
msgstr ""

#: ../Doc/library/sqlite3.rst:1161
msgid ""
"Serialize a database into a :class:`bytes` object.  For an ordinary on-disk "
"database file, the serialization is just a copy of the disk file.  For an in-"
"memory database or a \"temp\" database, the serialization is the same "
"sequence of bytes which would be written to disk if that database were "
"backed up to disk."
msgstr ""

#: ../Doc/library/sqlite3.rst:1167
msgid "The database name to be serialized. Defaults to ``\"main\"``."
msgstr ""

#: ../Doc/library/sqlite3.rst:1175
msgid ""
"This method is only available if the underlying SQLite library has the "
"serialize API."
msgstr ""

#: ../Doc/library/sqlite3.rst:1183
msgid ""
"Deserialize a :meth:`serialized <serialize>` database into a :class:"
"`Connection`. This method causes the database connection to disconnect from "
"database *name*, and reopen *name* as an in-memory database based on the "
"serialization contained in *data*."
msgstr ""

#: ../Doc/library/sqlite3.rst:1189
msgid "A serialized database."
msgstr ""

#: ../Doc/library/sqlite3.rst:1192
msgid "The database name to deserialize into. Defaults to ``\"main\"``."
msgstr ""

#: ../Doc/library/sqlite3.rst:1196
msgid ""
"If the database connection is currently involved in a read transaction or a "
"backup operation."
msgstr ""

#: ../Doc/library/sqlite3.rst:1200
msgid "If *data* does not contain a valid SQLite database."
msgstr ""

#: ../Doc/library/sqlite3.rst:1203
msgid "If :func:`len(data) <len>` is larger than ``2**63 - 1``."
msgstr ""

#: ../Doc/library/sqlite3.rst:1208
msgid ""
"This method is only available if the underlying SQLite library has the "
"deserialize API."
msgstr ""

#: ../Doc/library/sqlite3.rst:1215
msgid ""
"This read-only attribute corresponds to the low-level SQLite `autocommit "
"mode`_."
msgstr ""

#: ../Doc/library/sqlite3.rst:1218
#, fuzzy
msgid ""
"``True`` if a transaction is active (there are uncommitted changes), "
"``False`` otherwise."
msgstr ""
":const:`True` si una transacción está activa (existen cambios "
"*uncommitted*), :const:`False` en sentido contrario. Atributo de solo "
"lectura."

#: ../Doc/library/sqlite3.rst:1225
msgid ""
"This attribute controls the :ref:`transaction handling <sqlite3-controlling-"
"transactions>` performed by :mod:`!sqlite3`. If set to ``None``, "
"transactions are never implicitly opened. If set to one of ``\"DEFERRED\"``, "
"``\"IMMEDIATE\"``, or ``\"EXCLUSIVE\"``, corresponding to the underlying "
"`SQLite transaction behaviour`_, implicit :ref:`transaction management "
"<sqlite3-controlling-transactions>` is performed."
msgstr ""

#: ../Doc/library/sqlite3.rst:1233
msgid ""
"If not overridden by the *isolation_level* parameter of :func:`connect`, the "
"default is ``\"\"``, which is an alias for ``\"DEFERRED\"``."
msgstr ""

#: ../Doc/library/sqlite3.rst:1238
msgid ""
"A callable that accepts two arguments, a :class:`Cursor` object and the raw "
"row results as a :class:`tuple`, and returns a custom object representing an "
"SQLite row."
msgstr ""

#: ../Doc/library/sqlite3.rst:1255
#, fuzzy
msgid ""
"If returning a tuple doesn't suffice and you want name-based access to "
"columns, you should consider setting :attr:`row_factory` to the highly "
"optimized :class:`sqlite3.Row` type. :class:`Row` provides both index-based "
"and case-insensitive name-based access to columns with almost no memory "
"overhead. It will probably be better than your own custom dictionary-based "
"approach or even a db_row based solution."
msgstr ""
"Si retornado una tupla no es suficiente y se quiere acceder a las columnas "
"basadas en nombre, se debe considerar configurar :attr:`row_factory` a la "
"altamente optimizada tipo :class:`sqlite3.Row`. :class:`Row` provee ambos "
"accesos a columnas basada en índice y tipado insensible con casi nada de "
"sobrecoste de memoria. Será probablemente mejor que tú propio enfoque de "
"basado en diccionario personalizado o incluso mejor que una solución basada "
"en *db_row*."

#: ../Doc/library/sqlite3.rst:1266
msgid ""
"A callable that accepts a :class:`bytes` parameter and returns a text "
"representation of it. The callable is invoked for SQLite values with the "
"``TEXT`` data type. By default, this attribute is set to :class:`str`. If "
"you want to return ``bytes`` instead, set *text_factory* to ``bytes``."
msgstr ""

#: ../Doc/library/sqlite3.rst:1306
#, fuzzy
msgid ""
"Return the total number of database rows that have been modified, inserted, "
"or deleted since the database connection was opened."
msgstr ""
"Regresa el número total de filas de la base de datos que han sido "
"modificadas, insertadas o borradas desde que la conexión a la base de datos "
"fue abierta."

#: ../Doc/library/sqlite3.rst:1313
#, fuzzy
msgid "Cursor objects"
msgstr "Objetos cursor"

#: ../Doc/library/sqlite3.rst:1315
msgid ""
"A ``Cursor`` object represents a `database cursor`_ which is used to execute "
"SQL statements, and manage the context of a fetch operation. Cursors are "
"created using :meth:`Connection.cursor`, or by using any of the :ref:"
"`connection shortcut methods <sqlite3-connection-shortcuts>`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1322
msgid ""
"Cursor objects are :term:`iterators <iterator>`, meaning that if you :meth:"
"`~Cursor.execute` a ``SELECT`` query, you can simply iterate over the cursor "
"to fetch the resulting rows:"
msgstr ""

#: ../Doc/library/sqlite3.rst:1347
msgid "A :class:`Cursor` instance has the following attributes and methods."
msgstr ""
"Una instancia de :class:`Cursor` tiene los siguientes atributos y métodos."

#: ../Doc/library/sqlite3.rst:1354
#, fuzzy
msgid ""
"Execute SQL statement *sql*. Bind values to the statement using :ref:"
"`placeholders <sqlite3-placeholders>` that map to the :term:`sequence` or :"
"class:`dict` *parameters*."
msgstr ""
"Ejecuta una sentencia SQL. Los valores pueden vincularse a la sentencia "
"utilizando :ref:`placeholders <sqlite3-placeholders>`."

#: ../Doc/library/sqlite3.rst:1359
msgid ""
":meth:`execute` will only execute a single SQL statement. If you try to "
"execute more than one statement with it, it will raise a :exc:"
"`ProgrammingError`. Use :meth:`executescript` if you want to execute "
"multiple SQL statements with one call."
msgstr ""

#: ../Doc/library/sqlite3.rst:1364
msgid ""
"If :attr:`~Connection.isolation_level` is not ``None``, *sql* is an "
"``INSERT``, ``UPDATE``, ``DELETE``, or ``REPLACE`` statement, and there is "
"no open transaction, a transaction is implicitly opened before executing "
"*sql*."
msgstr ""

#: ../Doc/library/sqlite3.rst:1372
msgid ""
"Execute :ref:`parameterized <sqlite3-placeholders>` SQL statement *sql* "
"against all parameter sequences or mappings found in the sequence "
"*parameters*.  It is also possible to use an :term:`iterator` yielding "
"parameters instead of a sequence. Uses the same implicit transaction "
"handling as :meth:`~Cursor.execute`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1391
msgid ""
"Execute the SQL statements in *sql_script*. If there is a pending "
"transaction, an implicit ``COMMIT`` statement is executed first. No other "
"implicit transaction control is performed; any transaction control must be "
"added to *sql_script*."
msgstr ""

#: ../Doc/library/sqlite3.rst:1397
#, fuzzy
msgid "*sql_script* must be a :class:`string <str>`."
msgstr "*sql_script* puede ser una instancia de :class:`str`."

#: ../Doc/library/sqlite3.rst:1415
msgid ""
"If :attr:`~Connection.row_factory` is ``None``, return the next row query "
"result set as a :class:`tuple`. Else, pass it to the row factory and return "
"its result. Return ``None`` if no more data is available."
msgstr ""

#: ../Doc/library/sqlite3.rst:1423
#, fuzzy
msgid ""
"Return the next set of rows of a query result as a :class:`list`. Return an "
"empty list if no more rows are available."
msgstr ""
"Obtiene el siguiente conjunto de filas del resultado de una consulta, "
"retornando una lista. Una lista vacía es retornada cuando no hay más filas "
"disponibles."

#: ../Doc/library/sqlite3.rst:1426
msgid ""
"The number of rows to fetch per call is specified by the *size* parameter. "
"If *size* is not given, :attr:`arraysize` determines the number of rows to "
"be fetched. If fewer than *size* rows are available, as many rows as are "
"available are returned."
msgstr ""

#: ../Doc/library/sqlite3.rst:1432
msgid ""
"Note there are performance considerations involved with the *size* "
"parameter. For optimal performance, it is usually best to use the arraysize "
"attribute. If the *size* parameter is used, then it is best for it to retain "
"the same value from one :meth:`fetchmany` call to the next."
msgstr ""
"Nótese que hay consideraciones de desempeño involucradas con el parámetro "
"*size*. Para un optimo desempeño, es usualmente mejor usar el atributo "
"*arraysize*. Si el parámetro *size* es usado, entonces es mejor retener el "
"mismo valor de una llamada :meth:`fetchmany` a la siguiente."

#: ../Doc/library/sqlite3.rst:1439
msgid ""
"Return all (remaining) rows of a query result as a :class:`list`. Return an "
"empty list if no rows are available. Note that the :attr:`arraysize` "
"attribute can affect the performance of this operation."
msgstr ""

#: ../Doc/library/sqlite3.rst:1446
msgid "Close the cursor now (rather than whenever ``__del__`` is called)."
msgstr "Cierra el cursor ahora (en lugar que cuando ``__del__`` es llamado)"

#: ../Doc/library/sqlite3.rst:1448
msgid ""
"The cursor will be unusable from this point forward; a :exc:"
"`ProgrammingError` exception will be raised if any operation is attempted "
"with the cursor."
msgstr ""
"El cursor no será usable de este punto en adelante; una excepción :exc:"
"`ProgrammingError` será lanzada si se intenta cualquier operación con el "
"cursor."

#: ../Doc/library/sqlite3.rst:1453 ../Doc/library/sqlite3.rst:1457
msgid "Required by the DB-API. Does nothing in :mod:`!sqlite3`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1461
msgid ""
"Read/write attribute that controls the number of rows returned by :meth:"
"`fetchmany`. The default value is 1 which means a single row would be "
"fetched per call."
msgstr ""
"Atributo de lectura/escritura que controla el número de filas retornadas "
"por :meth:`fetchmany`. El valor por defecto es 1, lo cual significa que una "
"única fila será obtenida por llamada."

#: ../Doc/library/sqlite3.rst:1466
#, fuzzy
msgid ""
"Read-only attribute that provides the SQLite database :class:`Connection` "
"belonging to the cursor.  A :class:`Cursor` object created by calling :meth:"
"`con.cursor() <Connection.cursor>` will have a :attr:`connection` attribute "
"that refers to *con*:"
msgstr ""
"Este atributo de solo lectura provee la :class:`Connection` de la base de "
"datos SQLite usada por el objeto :class:`Cursor`. Un objeto :class:`Cursor` "
"creado por la llamada de :meth:`con.cursor() <Connection.cursor>` tendrá un "
"atributo :attr:`connection` que se refiere a *con*::"

#: ../Doc/library/sqlite3.rst:1480
#, fuzzy
msgid ""
"Read-only attribute that provides the column names of the last query. To "
"remain compatible with the Python DB API, it returns a 7-tuple for each "
"column where the last six items of each tuple are ``None``."
msgstr ""
"Este atributo de solo lectura provee el nombre de las columnas de la última "
"consulta. Para ser compatible con Python DB API, retorna una 7-tupla para "
"cada columna en donde los últimos seis ítems de cada tupla son :const:`None`."

#: ../Doc/library/sqlite3.rst:1484
msgid "It is set for ``SELECT`` statements without any matching rows as well."
msgstr ""
"También es configurado para sentencias ``SELECT`` sin ninguna fila "
"coincidente."

#: ../Doc/library/sqlite3.rst:1488
msgid ""
"Read-only attribute that provides the row id of the last inserted row. It is "
"only updated after successful ``INSERT`` or ``REPLACE`` statements using "
"the :meth:`execute` method.  For other statements, after :meth:`executemany` "
"or :meth:`executescript`, or if the insertion failed, the value of "
"``lastrowid`` is left unchanged.  The initial value of ``lastrowid`` is "
"``None``."
msgstr ""

#: ../Doc/library/sqlite3.rst:1496
msgid "Inserts into ``WITHOUT ROWID`` tables are not recorded."
msgstr ""

#: ../Doc/library/sqlite3.rst:1498
msgid "Added support for the ``REPLACE`` statement."
msgstr "Se agregó soporte para sentencias ``REPLACE``."

#: ../Doc/library/sqlite3.rst:1503
msgid ""
"Read-only attribute that provides the number of modified rows for "
"``INSERT``, ``UPDATE``, ``DELETE``, and ``REPLACE`` statements; is ``-1`` "
"for other statements, including :abbr:`CTE (Common Table Expression)` "
"queries. It is only updated by the :meth:`execute` and :meth:`executemany` "
"methods."
msgstr ""

#: ../Doc/library/sqlite3.rst:1518
#, fuzzy
msgid "Row objects"
msgstr "Objetos fila (*Row*)"

#: ../Doc/library/sqlite3.rst:1522
msgid ""
"A :class:`!Row` instance serves as a highly optimized :attr:`~Connection."
"row_factory` for :class:`Connection` objects. It supports iteration, "
"equality testing, :func:`len`, and :term:`mapping` access by column name and "
"index."
msgstr ""

#: ../Doc/library/sqlite3.rst:1527
msgid "Two row objects compare equal if have equal columns and equal members."
msgstr ""

#: ../Doc/library/sqlite3.rst:1531
#, fuzzy
msgid ""
"Return a :class:`list` of column names as :class:`strings <str>`. "
"Immediately after a query, it is the first member of each tuple in :attr:"
"`Cursor.description`."
msgstr ""
"Este método retorna una lista con los nombre de columnas. Inmediatamente "
"después de una consulta, es el primer miembro de cada tupla en :attr:`Cursor."
"description`."

#: ../Doc/library/sqlite3.rst:1535
msgid "Added support of slicing."
msgstr "Agrega soporte de segmentación."

#: ../Doc/library/sqlite3.rst:1557
#, fuzzy
msgid "Blob objects"
msgstr "Objetos fila (*Row*)"

#: ../Doc/library/sqlite3.rst:1563
msgid ""
"A :class:`Blob` instance is a :term:`file-like object` that can read and "
"write data in an SQLite :abbr:`BLOB (Binary Large OBject)`. Call :func:"
"`len(blob) <len>` to get the size (number of bytes) of the blob. Use indices "
"and :term:`slices <slice>` for direct access to the blob data."
msgstr ""

#: ../Doc/library/sqlite3.rst:1568
msgid ""
"Use the :class:`Blob` as a :term:`context manager` to ensure that the blob "
"handle is closed after use."
msgstr ""

#: ../Doc/library/sqlite3.rst:1598
msgid "Close the blob."
msgstr ""

#: ../Doc/library/sqlite3.rst:1600
#, fuzzy
msgid ""
"The blob will be unusable from this point onward.  An :class:`~sqlite3."
"Error` (or subclass) exception will be raised if any further operation is "
"attempted with the blob."
msgstr ""
"El cursor no será usable de este punto en adelante; una excepción :exc:"
"`ProgrammingError` será lanzada si se intenta cualquier operación con el "
"cursor."

#: ../Doc/library/sqlite3.rst:1606
msgid ""
"Read *length* bytes of data from the blob at the current offset position. If "
"the end of the blob is reached, the data up to :abbr:`EOF (End of File)` "
"will be returned.  When *length* is not specified, or is negative, :meth:"
"`~Blob.read` will read until the end of the blob."
msgstr ""

#: ../Doc/library/sqlite3.rst:1614
msgid ""
"Write *data* to the blob at the current offset.  This function cannot change "
"the blob length.  Writing beyond the end of the blob will raise :exc:"
"`ValueError`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1620
msgid "Return the current access position of the blob."
msgstr ""

#: ../Doc/library/sqlite3.rst:1624
msgid ""
"Set the current access position of the blob to *offset*.  The *origin* "
"argument defaults to :data:`os.SEEK_SET` (absolute blob positioning). Other "
"values for *origin* are :data:`os.SEEK_CUR` (seek relative to the current "
"position) and :data:`os.SEEK_END` (seek relative to the blob’s end)."
msgstr ""

#: ../Doc/library/sqlite3.rst:1632
msgid "PrepareProtocol objects"
msgstr ""

#: ../Doc/library/sqlite3.rst:1636
msgid ""
"The PrepareProtocol type's single purpose is to act as a :pep:`246` style "
"adaption protocol for objects that can :ref:`adapt themselves <sqlite3-"
"conform>` to :ref:`native SQLite types <sqlite3-types>`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1644
msgid "Exceptions"
msgstr "Excepciones"

#: ../Doc/library/sqlite3.rst:1646
msgid "The exception hierarchy is defined by the DB-API 2.0 (:pep:`249`)."
msgstr ""

#: ../Doc/library/sqlite3.rst:1650
msgid ""
"This exception is not currently raised by the :mod:`!sqlite3` module, but "
"may be raised by applications using :mod:`!sqlite3`, for example if a user-"
"defined function truncates data while inserting. ``Warning`` is a subclass "
"of :exc:`Exception`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1657
#, fuzzy
msgid ""
"The base class of the other exceptions in this module. Use this to catch all "
"errors with one single :keyword:`except` statement. ``Error`` is a subclass "
"of :exc:`Exception`."
msgstr ""
"La clase base de otras excepciones en este módulo. Es una subclase de :exc:"
"`Exception`."

#: ../Doc/library/sqlite3.rst:1661
msgid ""
"If the exception originated from within the SQLite library, the following "
"two attributes are added to the exception:"
msgstr ""

#: ../Doc/library/sqlite3.rst:1666
msgid ""
"The numeric error code from the `SQLite API <https://sqlite.org/rescode."
"html>`_"
msgstr ""

#: ../Doc/library/sqlite3.rst:1673
msgid ""
"The symbolic name of the numeric error code from the `SQLite API <https://"
"sqlite.org/rescode.html>`_"
msgstr ""

#: ../Doc/library/sqlite3.rst:1680
msgid ""
"Exception raised for misuse of the low-level SQLite C API. In other words, "
"if this exception is raised, it probably indicates a bug in the :mod:`!"
"sqlite3` module. ``InterfaceError`` is a subclass of :exc:`Error`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1687
msgid ""
"Exception raised for errors that are related to the database. This serves as "
"the base exception for several types of database errors. It is only raised "
"implicitly through the specialised subclasses. ``DatabaseError`` is a "
"subclass of :exc:`Error`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1694
msgid ""
"Exception raised for errors caused by problems with the processed data, like "
"numeric values out of range, and strings which are too long. ``DataError`` "
"is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1700
msgid ""
"Exception raised for errors that are related to the database's operation, "
"and not necessarily under the control of the programmer. For example, the "
"database path is not found, or a transaction could not be processed. "
"``OperationalError`` is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1708
msgid ""
"Exception raised when the relational integrity of the database is affected, "
"e.g. a foreign key check fails.  It is a subclass of :exc:`DatabaseError`."
msgstr ""
"Excepción lanzada cuando la integridad de la base de datos es afectada, por "
"ejemplo la comprobación de una llave foránea falla. Es una subclase de :exc:"
"`DatabaseError`."

#: ../Doc/library/sqlite3.rst:1713
msgid ""
"Exception raised when SQLite encounters an internal error. If this is "
"raised, it may indicate that there is a problem with the runtime SQLite "
"library. ``InternalError`` is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1720
msgid ""
"Exception raised for :mod:`!sqlite3` API programming errors, for example "
"supplying the wrong number of bindings to a query, or trying to operate on a "
"closed :class:`Connection`. ``ProgrammingError`` is a subclass of :exc:"
"`DatabaseError`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1727
msgid ""
"Exception raised in case a method or database API is not supported by the "
"underlying SQLite library. For example, setting *deterministic* to ``True`` "
"in :meth:`~Connection.create_function`, if the underlying SQLite library "
"does not support deterministic functions. ``NotSupportedError`` is a "
"subclass of :exc:`DatabaseError`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1737
msgid "SQLite and Python types"
msgstr "SQLite y tipos de Python"

#: ../Doc/library/sqlite3.rst:1739
msgid ""
"SQLite natively supports the following types: ``NULL``, ``INTEGER``, "
"``REAL``, ``TEXT``, ``BLOB``."
msgstr ""
"SQLite soporta de forma nativa los siguientes tipos: ``NULL``, ``INTEGER``, "
"``REAL``, ``TEXT``, ``BLOB``."

#: ../Doc/library/sqlite3.rst:1742
msgid ""
"The following Python types can thus be sent to SQLite without any problem:"
msgstr ""
"Los siguientes tipos de Python se pueden enviar a SQLite sin problema alguno:"

#: ../Doc/library/sqlite3.rst:1745 ../Doc/library/sqlite3.rst:1762
msgid "Python type"
msgstr "Tipo de Python"

#: ../Doc/library/sqlite3.rst:1745 ../Doc/library/sqlite3.rst:1762
msgid "SQLite type"
msgstr "Tipo de SQLite"

#: ../Doc/library/sqlite3.rst:1747 ../Doc/library/sqlite3.rst:1764
msgid "``None``"
msgstr ""

#: ../Doc/library/sqlite3.rst:1747 ../Doc/library/sqlite3.rst:1764
msgid "``NULL``"
msgstr "``NULL``"

#: ../Doc/library/sqlite3.rst:1749 ../Doc/library/sqlite3.rst:1766
msgid ":class:`int`"
msgstr ":class:`int`"

#: ../Doc/library/sqlite3.rst:1749 ../Doc/library/sqlite3.rst:1766
msgid "``INTEGER``"
msgstr "``INTEGER``"

#: ../Doc/library/sqlite3.rst:1751 ../Doc/library/sqlite3.rst:1768
msgid ":class:`float`"
msgstr ":class:`float`"

#: ../Doc/library/sqlite3.rst:1751 ../Doc/library/sqlite3.rst:1768
msgid "``REAL``"
msgstr "``REAL``"

#: ../Doc/library/sqlite3.rst:1753
msgid ":class:`str`"
msgstr ":class:`str`"

#: ../Doc/library/sqlite3.rst:1753 ../Doc/library/sqlite3.rst:1770
msgid "``TEXT``"
msgstr "``TEXT``"

#: ../Doc/library/sqlite3.rst:1755 ../Doc/library/sqlite3.rst:1773
msgid ":class:`bytes`"
msgstr ":class:`bytes`"

#: ../Doc/library/sqlite3.rst:1755 ../Doc/library/sqlite3.rst:1773
msgid "``BLOB``"
msgstr "``BLOB``"

#: ../Doc/library/sqlite3.rst:1759
msgid "This is how SQLite types are converted to Python types by default:"
msgstr ""
"De esta forma es como los tipos de SQLite son convertidos a tipos de Python "
"por defecto:"

#: ../Doc/library/sqlite3.rst:1770
msgid "depends on :attr:`~Connection.text_factory`, :class:`str` by default"
msgstr "depende de :attr:`~Connection.text_factory`, :class:`str` por defecto"

#: ../Doc/library/sqlite3.rst:1776
#, fuzzy
msgid ""
"The type system of the :mod:`!sqlite3` module is extensible in two ways: you "
"can store additional Python types in an SQLite database via :ref:`object "
"adapters <sqlite3-adapters>`, and you can let the :mod:`!sqlite3` module "
"convert SQLite types to Python types via :ref:`converters <sqlite3-"
"converters>`."
msgstr ""
"El sistema de tipos del módulo :mod:`sqlite3` es extensible en dos formas: "
"se puede almacenar tipos de Python adicionales en una base de datos SQLite "
"vía adaptación de objetos, y se puede permitir que el módulo :mod:`sqlite3` "
"convierta tipos SQLite a diferentes tipos de Python vía convertidores."

#: ../Doc/library/sqlite3.rst:1786
msgid "Default adapters and converters"
msgstr "Adaptadores y convertidores por defecto"

#: ../Doc/library/sqlite3.rst:1788
msgid ""
"There are default adapters for the date and datetime types in the datetime "
"module. They will be sent as ISO dates/ISO timestamps to SQLite."
msgstr ""
"Hay adaptadores por defecto para los tipos date y datetime en el módulo "
"datetime. Éstos serán enviados como fechas/marcas de tiempo ISO a SQLite."

#: ../Doc/library/sqlite3.rst:1791
msgid ""
"The default converters are registered under the name \"date\" for :class:"
"`datetime.date` and under the name \"timestamp\" for :class:`datetime."
"datetime`."
msgstr ""
"Los convertidores por defecto están registrados bajo el nombre \"date\" "
"para :class:`datetime.date` y bajo el mismo nombre para \"timestamp\" para :"
"class:`datetime.datetime`."

#: ../Doc/library/sqlite3.rst:1795
msgid ""
"This way, you can use date/timestamps from Python without any additional "
"fiddling in most cases. The format of the adapters is also compatible with "
"the experimental SQLite date/time functions."
msgstr ""
"De esta forma, se puede usar date/timestamps para Python sin ajuste "
"adicional en la mayoría de los casos. El formato de los adaptadores también "
"es compatible con las funciones experimentales de SQLite date/time."

#: ../Doc/library/sqlite3.rst:1799
msgid "The following example demonstrates this."
msgstr "El siguiente ejemplo demuestra esto."

#: ../Doc/library/sqlite3.rst:1803
msgid ""
"If a timestamp stored in SQLite has a fractional part longer than 6 numbers, "
"its value will be truncated to microsecond precision by the timestamp "
"converter."
msgstr ""
"Si un *timestamp* almacenado en SQLite tiene una parte fraccional mayor a 6 "
"números, este valor será truncado a precisión de microsegundos por el "
"convertidor de *timestamp*."

#: ../Doc/library/sqlite3.rst:1809
msgid ""
"The default \"timestamp\" converter ignores UTC offsets in the database and "
"always returns a naive :class:`datetime.datetime` object. To preserve UTC "
"offsets in timestamps, either leave converters disabled, or register an "
"offset-aware converter with :func:`register_converter`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1818
msgid "How-to guides"
msgstr ""

#: ../Doc/library/sqlite3.rst:1823
msgid "How to use placeholders to bind values in SQL queries"
msgstr ""

#: ../Doc/library/sqlite3.rst:1825
msgid ""
"SQL operations usually need to use values from Python variables. However, "
"beware of using Python's string operations to assemble queries, as they are "
"vulnerable to `SQL injection attacks`_ (see the `xkcd webcomic <https://xkcd."
"com/327/>`_ for a humorous example of what can go wrong)::"
msgstr ""

#: ../Doc/library/sqlite3.rst:1834
#, fuzzy
msgid ""
"Instead, use the DB-API's parameter substitution. To insert a variable into "
"a query string, use a placeholder in the string, and substitute the actual "
"values into the query by providing them as a :class:`tuple` of values to the "
"second argument of the cursor's :meth:`~Cursor.execute` method. An SQL "
"statement may use one of two kinds of placeholders: question marks (qmark "
"style) or named placeholders (named style). For the qmark style, "
"``parameters`` must be a :term:`sequence <sequence>`. For the named style, "
"it can be either a :term:`sequence <sequence>` or :class:`dict` instance. "
"The length of the :term:`sequence <sequence>` must match the number of "
"placeholders, or a :exc:`ProgrammingError` is raised. If a :class:`dict` is "
"given, it must contain keys for all named parameters. Any extra items are "
"ignored. Here's an example of both styles:"
msgstr ""
"En su lugar, utilice la sustitución de parámetros de la DB-API. Ponga un "
"marcador de posición donde quiera usar un valor, y luego proporcione una "
"tupla de valores como segundo argumento al método :meth:`~Cursor.execute` "
"del cursor. Una sentencia SQL puede utilizar uno de los dos tipos de "
"marcadores de posición: signos de interrogación (estilo qmark) o marcadores "
"de posición con nombre (estilo nombrado). Para el estilo qmark, "
"``parameters`` debe ser un :term:`sequence <sequence>`. Para el estilo con "
"nombre, puede ser una instancia de :term:`sequence <sequence>` o de :class:"
"`dict`. La longitud de :term:`sequence <sequence>` debe coincidir con el "
"número de marcadores de posición, o se producirá un :exc:`ProgrammingError`. "
"Si se da un :class:`dict`, debe contener las claves de todos los parámetros "
"nombrados. Cualquier elemento extra se ignora. Aquí hay un ejemplo de ambos "
"estilos:"

#: ../Doc/library/sqlite3.rst:1876
msgid "How to adapt custom Python types to SQLite values"
msgstr ""

#: ../Doc/library/sqlite3.rst:1878
msgid ""
"SQLite supports only a limited set of data types natively. To store custom "
"Python types in SQLite databases, *adapt* them to one of the :ref:`Python "
"types SQLite natively understands <sqlite3-types>`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1882
msgid ""
"There are two ways to adapt Python objects to SQLite types: letting your "
"object adapt itself, or using an *adapter callable*. The latter will take "
"precedence above the former. For a library that exports a custom type, it "
"may make sense to enable that type to adapt itself. As an application "
"developer, it may make more sense to take direct control by registering "
"custom adapter functions."
msgstr ""

#: ../Doc/library/sqlite3.rst:1894
msgid "How to write adaptable objects"
msgstr ""

#: ../Doc/library/sqlite3.rst:1896
msgid ""
"Suppose we have a :class:`!Point` class that represents a pair of "
"coordinates, ``x`` and ``y``, in a Cartesian coordinate system. The "
"coordinate pair will be stored as a text string in the database, using a "
"semicolon to separate the coordinates. This can be implemented by adding a "
"``__conform__(self, protocol)`` method which returns the adapted value. The "
"object passed to *protocol* will be of type :class:`PrepareProtocol`."
msgstr ""

#: ../Doc/library/sqlite3.rst:1927
#, fuzzy
msgid "How to register adapter callables"
msgstr "Registrando un adaptador invocable"

#: ../Doc/library/sqlite3.rst:1929
#, fuzzy
msgid ""
"The other possibility is to create a function that converts the Python "
"object to an SQLite-compatible type. This function can then be registered "
"using :func:`register_adapter`."
msgstr ""
"La otra posibilidad es crear una función que convierta el escrito a "
"representación de cadena de texto y registrar la función con :meth:"
"`register_adapter`."

#: ../Doc/library/sqlite3.rst:1959
#, fuzzy
msgid "How to convert SQLite values to custom Python types"
msgstr "Convertir valores SQLite a tipos de Python personalizados"

#: ../Doc/library/sqlite3.rst:1961
msgid ""
"Writing an adapter lets you convert *from* custom Python types *to* SQLite "
"values. To be able to convert *from* SQLite values *to* custom Python types, "
"we use *converters*."
msgstr ""

#: ../Doc/library/sqlite3.rst:1966
#, fuzzy
msgid ""
"Let's go back to the :class:`!Point` class. We stored the x and y "
"coordinates separated via semicolons as strings in SQLite."
msgstr ""
"Regresemos a la clase :class:`Point`. Se almacena las coordenadas x e y de "
"forma separada por punto y coma como una cadena de texto en SQLite."

#: ../Doc/library/sqlite3.rst:1969
#, fuzzy
msgid ""
"First, we'll define a converter function that accepts the string as a "
"parameter and constructs a :class:`!Point` object from it."
msgstr ""
"Primero, se define una función de conversión que acepta la cadena de texto "
"como un parámetro y construye un objeto :class:`Point` de ahí."

#: ../Doc/library/sqlite3.rst:1974
#, fuzzy
msgid ""
"Converter functions are **always** passed a :class:`bytes` object, no matter "
"the underlying SQLite data type."
msgstr ""
"Las funciones de conversión  **siempre** son llamadas con un objeto :class:"
"`bytes`, no importa bajo qué tipo de dato se envió el valor a SQLite."

#: ../Doc/library/sqlite3.rst:1983
msgid ""
"We now need to tell :mod:`!sqlite3` when it should convert a given SQLite "
"value. This is done when connecting to a database, using the *detect_types* "
"parameter of :func:`connect`. There are three options:"
msgstr ""

#: ../Doc/library/sqlite3.rst:1987
msgid "Implicit: set *detect_types* to :const:`PARSE_DECLTYPES`"
msgstr ""

#: ../Doc/library/sqlite3.rst:1988
msgid "Explicit: set *detect_types* to :const:`PARSE_COLNAMES`"
msgstr ""

#: ../Doc/library/sqlite3.rst:1989
msgid ""
"Both: set *detect_types* to ``sqlite3.PARSE_DECLTYPES | sqlite3."
"PARSE_COLNAMES``. Column names take precedence over declared types."
msgstr ""

#: ../Doc/library/sqlite3.rst:1993
#, fuzzy
msgid "The following example illustrates the implicit and explicit approaches:"
msgstr "El siguiente ejemplo ilustra ambos enfoques."

#: ../Doc/library/sqlite3.rst:2044
#, fuzzy
msgid "Adapter and converter recipes"
msgstr "Adaptadores y convertidores por defecto"

#: ../Doc/library/sqlite3.rst:2046
msgid "This section shows recipes for common adapters and converters."
msgstr ""

#: ../Doc/library/sqlite3.rst:2089
#, fuzzy
msgid "How to use connection shortcut methods"
msgstr "Usando métodos atajo"

#: ../Doc/library/sqlite3.rst:2091
msgid ""
"Using the :meth:`~Connection.execute`, :meth:`~Connection.executemany`, and :"
"meth:`~Connection.executescript` methods of the :class:`Connection` class, "
"your code can be written more concisely because you don't have to create the "
"(often superfluous) :class:`Cursor` objects explicitly. Instead, the :class:"
"`Cursor` objects are created implicitly and these shortcut methods return "
"the cursor objects. This way, you can execute a ``SELECT`` statement and "
"iterate over it directly using only a single call on the :class:`Connection` "
"object."
msgstr ""

#: ../Doc/library/sqlite3.rst:2132
#, fuzzy
msgid "How to use the connection context manager"
msgstr "Usando la conexión como un administrador de contexto"

#: ../Doc/library/sqlite3.rst:2134
msgid ""
"A :class:`Connection` object can be used as a context manager that "
"automatically commits or rolls back open transactions when leaving the body "
"of the context manager. If the body of the :keyword:`with` statement "
"finishes without exceptions, the transaction is committed. If this commit "
"fails, or if the body of the ``with`` statement raises an uncaught "
"exception, the transaction is rolled back."
msgstr ""

#: ../Doc/library/sqlite3.rst:2143
msgid ""
"If there is no open transaction upon leaving the body of the ``with`` "
"statement, the context manager is a no-op."
msgstr ""

#: ../Doc/library/sqlite3.rst:2148
msgid ""
"The context manager neither implicitly opens a new transaction nor closes "
"the connection."
msgstr ""

#: ../Doc/library/sqlite3.rst:2181
msgid "How to work with SQLite URIs"
msgstr ""

#: ../Doc/library/sqlite3.rst:2183
msgid "Some useful URI tricks include:"
msgstr ""

#: ../Doc/library/sqlite3.rst:2185
msgid "Open a database in read-only mode:"
msgstr ""

#: ../Doc/library/sqlite3.rst:2194
msgid ""
"Do not implicitly create a new database file if it does not already exist; "
"will raise :exc:`~sqlite3.OperationalError` if unable to create a new file:"
msgstr ""

#: ../Doc/library/sqlite3.rst:2204
msgid "Create a shared named in-memory database:"
msgstr ""

#: ../Doc/library/sqlite3.rst:2218
#, fuzzy
msgid ""
"More information about this feature, including a list of parameters, can be "
"found in the `SQLite URI documentation`_."
msgstr ""
"Más información sobre esta característica, incluyendo una lista de opciones "
"reconocidas, pueden encontrarse en `la documentación de SQLite URI <https://"
"www.sqlite.org/uri.html>`_."

#: ../Doc/library/sqlite3.rst:2227
msgid "Explanation"
msgstr ""

#: ../Doc/library/sqlite3.rst:2232
msgid "Transaction control"
msgstr ""

#: ../Doc/library/sqlite3.rst:2234
msgid ""
"The :mod:`!sqlite3` module does not adhere to the transaction handling "
"recommended by :pep:`249`."
msgstr ""

#: ../Doc/library/sqlite3.rst:2237
msgid ""
"If the connection attribute :attr:`~Connection.isolation_level` is not "
"``None``, new transactions are implicitly opened before :meth:`~Cursor."
"execute` and :meth:`~Cursor.executemany` executes ``INSERT``, ``UPDATE``, "
"``DELETE``, or ``REPLACE`` statements; for other statements, no implicit "
"transaction handling is performed. Use the :meth:`~Connection.commit` and :"
"meth:`~Connection.rollback` methods to respectively commit and roll back "
"pending transactions. You can choose the underlying `SQLite transaction "
"behaviour`_ — that is, whether and what type of ``BEGIN`` statements :mod:`!"
"sqlite3` implicitly executes – via the :attr:`~Connection.isolation_level` "
"attribute."
msgstr ""

#: ../Doc/library/sqlite3.rst:2250
msgid ""
"If :attr:`~Connection.isolation_level` is set to ``None``, no transactions "
"are implicitly opened at all. This leaves the underlying SQLite library in "
"`autocommit mode`_, but also allows the user to perform their own "
"transaction handling using explicit SQL statements. The underlying SQLite "
"library autocommit mode can be queried using the :attr:`~Connection."
"in_transaction` attribute."
msgstr ""

#: ../Doc/library/sqlite3.rst:2258
msgid ""
"The :meth:`~Cursor.executescript` method implicitly commits any pending "
"transaction before execution of the given SQL script, regardless of the "
"value of :attr:`~Connection.isolation_level`."
msgstr ""

#: ../Doc/library/sqlite3.rst:2262
#, fuzzy
msgid ""
":mod:`!sqlite3` used to implicitly commit an open transaction before DDL "
"statements.  This is no longer the case."
msgstr ""
":mod:`sqlite3` solía realizar commit en transacciones implícitamente antes "
"de sentencias DDL. Este ya no es el caso."

#~ msgid ""
#~ "To use the module, you must first create a :class:`Connection` object "
#~ "that represents the database.  Here the data will be stored in the :file:"
#~ "`example.db` file::"
#~ msgstr ""
#~ "Para usar el módulo, primero se debe crear un objeto :class:`Connection` "
#~ "que representa la base de datos. Aquí los datos serán almacenados en el "
#~ "archivo :file:`example.db`:"

#~ msgid ""
#~ "You can also supply the special name ``:memory:`` to create a database in "
#~ "RAM."
#~ msgstr ""
#~ "También se puede agregar el nombre especial ``:memory:`` para crear una "
#~ "base de datos en memoria RAM."

#~ msgid ""
#~ "Once you have a :class:`Connection`, you can create a :class:`Cursor`  "
#~ "object and call its :meth:`~Cursor.execute` method to perform SQL "
#~ "commands::"
#~ msgstr ""
#~ "Una vez se tenga una :class:`Connection`, se puede crear un objeto :class:"
#~ "`Cursor` y llamar su método :meth:`~Cursor.execute` para ejecutar "
#~ "comandos SQL:"

#~ msgid ""
#~ "The data you've saved is persistent and is available in subsequent "
#~ "sessions::"
#~ msgstr ""
#~ "Los datos guardados son persistidos y están disponibles en sesiones "
#~ "posteriores::"

#~ msgid ""
#~ "To retrieve data after executing a SELECT statement, you can either treat "
#~ "the cursor as an :term:`iterator`, call the cursor's :meth:`~Cursor."
#~ "fetchone` method to retrieve a single matching row, or call :meth:"
#~ "`~Cursor.fetchall` to get a list of the matching rows."
#~ msgstr ""
#~ "Para obtener los datos luego de ejecutar una sentencia SELECT, se puede "
#~ "tratar el cursor como un :term:`iterator`, llamar el método del cursor :"
#~ "meth:`~Cursor.fetchone` para obtener un solo registro, o llamar :meth:"
#~ "`~Cursor.fetchall` para obtener una lista de todos los registros."

#~ msgid "This example uses the iterator form::"
#~ msgstr "Este ejemplo usa la forma con el iterador::"

#~ msgid ""
#~ "Usually your SQL operations will need to use values from Python "
#~ "variables.  You shouldn't assemble your query using Python's string "
#~ "operations because doing so is insecure; it makes your program vulnerable "
#~ "to an SQL injection attack (see the `xkcd webcomic <https://xkcd.com/327/"
#~ ">`_ for a humorous example of what can go wrong)::"
#~ msgstr ""
#~ "Por lo general, sus operaciones de SQL necesitarán usar valores de "
#~ "variables de Python. No debe ensamblar su consulta usando las operaciones "
#~ "de cadena de Python porque hacerlo es inseguro; hace que su programa sea "
#~ "vulnerable a un ataque de inyección SQL (consulte el `xkcd webcomic "
#~ "<https://xkcd.com/327/>`_ para ver un ejemplo humorístico de lo que puede "
#~ "salir mal):"

#~ msgid ""
#~ "This constant is meant to be used with the *detect_types* parameter of "
#~ "the :func:`connect` function."
#~ msgstr ""
#~ "Esta constante se usa con el parámetro *detect_types* de la función :func:"
#~ "`connect`."

#~ msgid ""
#~ "Setting it makes the :mod:`sqlite3` module parse the declared type for "
#~ "each column it returns.  It will parse out the first word of the declared "
#~ "type, i. e.  for \"integer primary key\", it will parse out \"integer\", "
#~ "or for \"number(10)\" it will parse out \"number\". Then for that column, "
#~ "it will look into the converters dictionary and use the converter "
#~ "function registered for that type there."
#~ msgstr ""
#~ "Configurarla hace que el módulo :mod:`sqlite3` analice el tipo declarado "
#~ "para cada columna que retorna. Este convertirá la primera palabra del "
#~ "tipo declarado, i. e. para *\"integer primary key\"*, será convertido a "
#~ "*\"integer\"*, o para \"*number(10)*\" será convertido a \"*number*\". "
#~ "Entonces para esa columna, revisará el diccionario de conversiones y "
#~ "usará la función de conversión registrada para ese tipo."

#~ msgid ""
#~ "Setting this makes the SQLite interface parse the column name for each "
#~ "column it returns.  It will look for a string formed [mytype] in there, "
#~ "and then decide that 'mytype' is the type of the column. It will try to "
#~ "find an entry of 'mytype' in the converters dictionary and then use the "
#~ "converter function found there to return the value. The column name found "
#~ "in :attr:`Cursor.description` does not include the type, i. e. if you use "
#~ "something like ``'as \"Expiration date [datetime]\"'`` in your SQL, then "
#~ "we will parse out everything until the first ``'['`` for the column name "
#~ "and strip the preceding space: the column name would simply be "
#~ "\"Expiration date\"."
#~ msgstr ""
#~ "Establecer esto hace que la interfaz SQLite analice el nombre de la "
#~ "columna para cada columna que retorna. Buscará una cadena formada "
#~ "[mytype] allí, y luego decidirá que 'mytype' es el tipo de columna. "
#~ "Intentará encontrar una entrada de 'mytype' en el diccionario de "
#~ "convertidores y luego usará la función de convertidor que se encuentra "
#~ "allí para devolver el valor. El nombre de la columna que se encuentra en :"
#~ "attr:`Cursor.description` no incluye el tipo i. mi. Si usa algo como "
#~ "``'as \"Expiration date [datetime]\"'`` en su SQL, analizaremos todo "
#~ "hasta el primer ``'['`` para el nombre de la columna y eliminaremos el "
#~ "espacio anterior: el nombre de la columna sería simplemente \"Fecha de "
#~ "vencimiento\"."

#~ msgid ""
#~ "Opens a connection to the SQLite database file *database*. By default "
#~ "returns a :class:`Connection` object, unless a custom *factory* is given."
#~ msgstr ""
#~ "Abre una conexión al archivo de base de datos SQLite *database*. Por "
#~ "defecto retorna un objeto :class:`Connection`, a menos que se indique un "
#~ "*factory* personalizado."

#~ msgid ""
#~ "When a database is accessed by multiple connections, and one of the "
#~ "processes modifies the database, the SQLite database is locked until that "
#~ "transaction is committed. The *timeout* parameter specifies how long the "
#~ "connection should wait for the lock to go away until raising an "
#~ "exception. The default for the timeout parameter is 5.0 (five seconds)."
#~ msgstr ""
#~ "Cuando una base de datos es accedida por múltiples conexiones, y uno de "
#~ "los procesos modifica la base de datos, la base de datos SQLite se "
#~ "bloquea hasta que la transacción se confirme. El parámetro *timeout* "
#~ "especifica que tanto debe esperar la conexión para que el bloqueo "
#~ "desaparezca antes de lanzar una excepción. Por defecto el parámetro "
#~ "*timeout* es de 5.0 (cinco segundos)."

#~ msgid ""
#~ "For the *isolation_level* parameter, please see the :attr:`~Connection."
#~ "isolation_level` property of :class:`Connection` objects."
#~ msgstr ""
#~ "Para el parámetro *isolation_level*, por favor ver la propiedad :attr:"
#~ "`~Connection.isolation_level` del objeto :class:`Connection`."

#~ msgid ""
#~ "SQLite natively supports only the types TEXT, INTEGER, REAL, BLOB and "
#~ "NULL. If you want to use other types you must add support for them "
#~ "yourself. The *detect_types* parameter and the using custom "
#~ "**converters** registered with the module-level :func:"
#~ "`register_converter` function allow you to easily do that."
#~ msgstr ""
#~ "De forma nativa SQLite soporta solo los tipos *TEXT*, *INTEGER*,*REAL*,"
#~ "*BLOB* y *NULL*. Si se quiere usar otros tipos, debe soportarlos usted "
#~ "mismo. El parámetro *detect_types* y el uso de **converters** "
#~ "personalizados registrados con la función a nivel del módulo :func:"
#~ "`register_converter` permite hacerlo fácilmente."

#~ msgid ""
#~ "*detect_types* defaults to 0 (i. e. off, no type detection), you can set "
#~ "it to any combination of :const:`PARSE_DECLTYPES` and :const:"
#~ "`PARSE_COLNAMES` to turn type detection on. Due to SQLite behaviour, "
#~ "types can't be detected for generated fields (for example ``max(data)``), "
#~ "even when *detect_types* parameter is set. In such case, the returned "
#~ "type is :class:`str`."
#~ msgstr ""
#~ "*detect_types* por defecto es 0 (es decir, desactivado, sin detección de "
#~ "tipo), puede configurarlo en cualquier combinación de :const:"
#~ "`PARSE_DECLTYPES` y :const:`PARSE_COLNAMES` para activar la detección de "
#~ "tipo. Debido al comportamiento de SQLite, los tipos no se pueden detectar "
#~ "para los campos generados (por ejemplo, ``max(data)``), incluso cuando se "
#~ "establece el parámetro *detect_types*. En tal caso, el tipo devuelto es :"
#~ "class:`str`."

#~ msgid ""
#~ "By default, *check_same_thread* is :const:`True` and only the creating "
#~ "thread may use the connection. If set :const:`False`, the returned "
#~ "connection may be shared across multiple threads. When using multiple "
#~ "threads with the same connection writing operations should be serialized "
#~ "by the user to avoid data corruption."
#~ msgstr ""
#~ "Por defecto, *check_same_thread* es :const:`True` y únicamente el hilo "
#~ "creado puede utilizar la conexión. Si se configura :const:`False`, la "
#~ "conexión retornada podrá ser compartida con múltiples hilos. Cuando se "
#~ "utilizan múltiples hilos con la misma conexión, las operaciones de "
#~ "escritura deberán ser serializadas por el usuario para evitar corrupción "
#~ "de datos."

#~ msgid ""
#~ "By default, the :mod:`sqlite3` module uses its :class:`Connection` class "
#~ "for the connect call.  You can, however, subclass the :class:`Connection` "
#~ "class and make :func:`connect` use your class instead by providing your "
#~ "class for the *factory* parameter."
#~ msgstr ""
#~ "Por defecto el módulo :mod:`sqlite3` utiliza su propia clase :class:"
#~ "`Connection` para la llamada de conexión. Sin embargo se puede crear una "
#~ "subclase de :class:`Connection` y hacer que :func:`connect` use su clase "
#~ "en lugar de proveer la suya en el parámetro *factory*."

#~ msgid "Consult the section :ref:`sqlite3-types` of this manual for details."
#~ msgstr ""
#~ "Consulte la sección :ref:`sqlite3-types` de este manual para más detalles."

#~ msgid ""
#~ "The :mod:`sqlite3` module internally uses a statement cache to avoid SQL "
#~ "parsing overhead. If you want to explicitly set the number of statements "
#~ "that are cached for the connection, you can set the *cached_statements* "
#~ "parameter. The currently implemented default is to cache 100 statements."
#~ msgstr ""
#~ "El módulo :mod:`sqlite3` internamente usa cache de declaraciones para "
#~ "evitar un análisis SQL costoso. Si se desea especificar el número de "
#~ "sentencias que estarán en memoria caché para la conexión, se puede "
#~ "configurar el parámetro *cached_statements*. Por defecto están "
#~ "configurado para 100 sentencias en memoria caché."

#~ msgid ""
#~ "If *uri* is true, *database* is interpreted as a URI. This allows you to "
#~ "specify options. For example, to open a database in read-only mode you "
#~ "can use::"
#~ msgstr ""
#~ "Si *uri* es verdadero, la *database* se interpreta como una *URI*. Esto "
#~ "permite especificar opciones. Por ejemplo, para abrir la base de datos en "
#~ "modo solo lectura puedes usar::"

#~ msgid ""
#~ "Registers a callable to convert a bytestring from the database into a "
#~ "custom Python type. The callable will be invoked for all database values "
#~ "that are of the type *typename*. Confer the parameter *detect_types* of "
#~ "the :func:`connect` function for how the type detection works. Note that "
#~ "*typename* and the name of the type in your query are matched in case-"
#~ "insensitive manner."
#~ msgstr ""
#~ "Registra un invocable para convertir un *bytestring* de la base de datos "
#~ "en un tipo Python personalizado. El invocable será invocado por todos los "
#~ "valores de la base de datos que son del tipo *typename*. Conceder el "
#~ "parámetro *detect_types* de la función :func:`connect` para el "
#~ "funcionamiento de la detección de tipo. Se debe notar que *typename* y el "
#~ "nombre del tipo en la consulta son comparados insensiblemente a "
#~ "mayúsculas y minúsculas."

#~ msgid ""
#~ "Registers a callable to convert the custom Python type *type* into one of "
#~ "SQLite's supported types. The callable *callable* accepts as single "
#~ "parameter the Python value, and must return a value of the following "
#~ "types: int, float, str or bytes."
#~ msgstr ""
#~ "Registra un invocable para convertir el tipo Python personalizado *type* "
#~ "a uno de los tipos soportados por SQLite's. El invocable *callable* "
#~ "acepta un único parámetro de valor Python, y debe retornar un valor de "
#~ "los siguientes tipos: *int*, *float*, *str* or *bytes*."

#~ msgid ""
#~ "Returns :const:`True` if the string *sql* contains one or more complete "
#~ "SQL statements terminated by semicolons. It does not verify that the SQL "
#~ "is syntactically correct, only that there are no unclosed string literals "
#~ "and the statement is terminated by a semicolon."
#~ msgstr ""
#~ "Retorna :const:`True` si la cadena *sql* contiene una o más sentencias "
#~ "SQL completas terminadas con punto y coma. No se verifica que la "
#~ "sentencia SQL sea sintácticamente correcta, solo que no existan literales "
#~ "de cadenas no cerradas y que la sentencia termine por un punto y coma."

#~ msgid ""
#~ "This can be used to build a shell for SQLite, as in the following example:"
#~ msgstr ""
#~ "Esto puede ser usado para construir un *shell* para SQLite, como en el "
#~ "siguiente ejemplo:"

#~ msgid ""
#~ "Get or set the current default isolation level. :const:`None` for "
#~ "autocommit mode or one of \"DEFERRED\", \"IMMEDIATE\" or \"EXCLUSIVE\". "
#~ "See section :ref:`sqlite3-controlling-transactions` for a more detailed "
#~ "explanation."
#~ msgstr ""
#~ "Obtener o configurar el actual nivel de insolación. :const:`None` para "
#~ "modo *autocommit* o uno de \"DEFERRED\", \"IMMEDIATE\" o \"EXCLUSIVO\". "
#~ "Ver sección :ref:`sqlite3-controlling-transactions` para una explicación "
#~ "detallada."

#~ msgid ""
#~ "This method commits the current transaction. If you don't call this "
#~ "method, anything you did since the last call to ``commit()`` is not "
#~ "visible from other database connections. If you wonder why you don't see "
#~ "the data you've written to the database, please check you didn't forget "
#~ "to call this method."
#~ msgstr ""
#~ "Este método asigna la transacción actual. Si no se llama este método, "
#~ "cualquier cosa hecha desde la última llamada de ``commit()`` no es "
#~ "visible para otras conexiones de bases de datos. Si se pregunta el porqué "
#~ "no se ven los datos que escribiste, por favor verifica que no olvidaste "
#~ "llamar este método."

#~ msgid ""
#~ "This method rolls back any changes to the database since the last call "
#~ "to :meth:`commit`."
#~ msgstr ""
#~ "Este método retrocede cualquier cambio en la base de datos desde la "
#~ "llamada del último :meth:`commit`."

#~ msgid ""
#~ "This closes the database connection. Note that this does not "
#~ "automatically call :meth:`commit`. If you just close your database "
#~ "connection without calling :meth:`commit` first, your changes will be "
#~ "lost!"
#~ msgstr ""
#~ "Este método cierra la conexión a la base de datos. Nótese que éste no "
#~ "llama automáticamente :meth:`commit`. Si se cierra la conexión a la base "
#~ "de datos sin llamar primero :meth:`commit`, los cambios se perderán!"

#~ msgid ""
#~ "This is a nonstandard shortcut that creates a cursor object by calling "
#~ "the :meth:`~Connection.cursor` method, calls the cursor's :meth:`~Cursor."
#~ "execute` method with the *parameters* given, and returns the cursor."
#~ msgstr ""
#~ "Este es un atajo no estándar que crea un objeto cursor llamando el "
#~ "método :meth:`~Connection.cursor`, llama su método :meth:`~Cursor."
#~ "execute` con los *parameters* dados, y retorna el cursor."

#~ msgid ""
#~ "This is a nonstandard shortcut that creates a cursor object by calling "
#~ "the :meth:`~Connection.cursor` method, calls the cursor's :meth:`~Cursor."
#~ "executemany` method with the *parameters* given, and returns the cursor."
#~ msgstr ""
#~ "Este es un atajo no estándar que crea un objeto cursor llamando el "
#~ "método :meth:`~Connection.cursor`, llama su método :meth:`~Cursor."
#~ "executemany` con los *parameters* dados, y retorna el cursor."

#~ msgid ""
#~ "This is a nonstandard shortcut that creates a cursor object by calling "
#~ "the :meth:`~Connection.cursor` method, calls the cursor's :meth:`~Cursor."
#~ "executescript` method with the given *sql_script*, and returns the cursor."
#~ msgstr ""
#~ "Este es un atajo no estándar que crea un objeto cursor llamando el "
#~ "método :meth:`~Connection.cursor`, llama su método :meth:`~Cursor."
#~ "executescript` con el *sql_script*, y retorna el cursor."

#~ msgid ""
#~ "Creates a user-defined function that you can later use from within SQL "
#~ "statements under the function name *name*. *num_params* is the number of "
#~ "parameters the function accepts (if *num_params* is -1, the function may "
#~ "take any number of arguments), and *func* is a Python callable that is "
#~ "called as the SQL function. If *deterministic* is true, the created "
#~ "function is marked as `deterministic <https://sqlite.org/deterministic."
#~ "html>`_, which allows SQLite to perform additional optimizations. This "
#~ "flag is supported by SQLite 3.8.3 or higher, :exc:`NotSupportedError` "
#~ "will be raised if used with older versions."
#~ msgstr ""
#~ "Crea un función definida de usuario que se puede usar después desde "
#~ "declaraciones SQL con el nombre de función *name*. *num_params* es el "
#~ "número de parámetros que la función acepta (si *num_params* is -1, la "
#~ "función puede tomar cualquier número de argumentos), y *func* es un "
#~ "invocable de Python que es llamado como la función SQL. Si "
#~ "*deterministic* es verdadero, la función creada es marcada como "
#~ "`deterministic <https://sqlite.org/deterministic.html>`_, lo cual permite "
#~ "a SQLite hacer optimizaciones adicionales. Esta marca es soportada por "
#~ "SQLite 3.8.3 o superior, será lanzado :exc:`NotSupportedError` si se usa "
#~ "con versiones antiguas."

#~ msgid ""
#~ "The function can return any of the types supported by SQLite: bytes, str, "
#~ "int, float and ``None``."
#~ msgstr ""
#~ "La función puede retornar cualquier tipo soportado por SQLite: bytes, "
#~ "str, int, float y ``None``."

#~ msgid ""
#~ "The aggregate class must implement a ``step`` method, which accepts the "
#~ "number of parameters *num_params* (if *num_params* is -1, the function "
#~ "may take any number of arguments), and a ``finalize`` method which will "
#~ "return the final result of the aggregate."
#~ msgstr ""
#~ "La clase agregada debe implementar un método ``step``, el cual acepta el "
#~ "número de parámetros *num_params* (si *num_params* es -1, la función "
#~ "puede tomar cualquier número de argumentos), y un método ``finalize`` el "
#~ "cual retornará el resultado final del agregado."

#~ msgid ""
#~ "The ``finalize`` method can return any of the types supported by SQLite: "
#~ "bytes, str, int, float and ``None``."
#~ msgstr ""
#~ "El método ``finalize`` puede retornar cualquiera de los tipos soportados "
#~ "por SQLite: bytes, str, int, float and ``None``."

#~ msgid ""
#~ "Creates a collation with the specified *name* and *callable*. The "
#~ "callable will be passed two string arguments. It should return -1 if the "
#~ "first is ordered lower than the second, 0 if they are ordered equal and 1 "
#~ "if the first is ordered higher than the second.  Note that this controls "
#~ "sorting (ORDER BY in SQL) so your comparisons don't affect other SQL "
#~ "operations."
#~ msgstr ""
#~ "Crea una collation con el *name* y *callable* especificado. El invocable "
#~ "será pasado con dos cadenas de texto como argumentos. Se retornará -1 si "
#~ "el primero esta ordenado menor que el segundo, 0 si están ordenados igual "
#~ "y 1 si el primero está ordenado mayor que el segundo. Nótese que esto "
#~ "controla la ordenación (ORDER BY en SQL) por lo tanto sus comparaciones "
#~ "no afectan otras comparaciones SQL."

#~ msgid ""
#~ "Note that the callable will get its parameters as Python bytestrings, "
#~ "which will normally be encoded in UTF-8."
#~ msgstr ""
#~ "Note que el invocable obtiene sus parámetros como Python bytestrings, lo "
#~ "cual normalmente será codificado en UTF-8."

#~ msgid ""
#~ "To remove a collation, call ``create_collation`` with ``None`` as "
#~ "callable::"
#~ msgstr ""
#~ "Para remover una collation, llama ``create_collation`` con ``None`` como "
#~ "invocable::"

#~ msgid ""
#~ "This routine registers a callback. The callback is invoked for each "
#~ "attempt to access a column of a table in the database. The callback "
#~ "should return :const:`SQLITE_OK` if access is allowed, :const:"
#~ "`SQLITE_DENY` if the entire SQL statement should be aborted with an error "
#~ "and :const:`SQLITE_IGNORE` if the column should be treated as a NULL "
#~ "value. These constants are available in the :mod:`sqlite3` module."
#~ msgstr ""
#~ "Esta rutina registra un callback. El callback es invocado para cada "
#~ "intento de acceso a un columna de una tabla en la base de datos. El "
#~ "callback deberá retornar :const:`SQLITE_OK` si el acceso esta permitido, :"
#~ "const:`SQLITE_DENY` si la completa declaración SQL deberá ser abortada "
#~ "con un error y :const:`SQLITE_IGNORE` si la columna deberá ser tratada "
#~ "como un valor NULL. Estas constantes están disponibles en el módulo :mod:"
#~ "`sqlite3`."

#~ msgid ""
#~ "This routine registers a callback. The callback is invoked for every *n* "
#~ "instructions of the SQLite virtual machine. This is useful if you want to "
#~ "get called from SQLite during long-running operations, for example to "
#~ "update a GUI."
#~ msgstr ""
#~ "Esta rutina registra un *callback*. El *callback* es invocado para cada "
#~ "*n* instrucciones de la máquina virtual SQLite. Esto es útil si se quiere "
#~ "tener llamado a SQLite durante operaciones de larga duración, por ejemplo "
#~ "para actualizar una GUI."

#~ msgid "Loadable extensions are disabled by default. See [#f1]_."
#~ msgstr ""
#~ "Las extensiones cargables están deshabilitadas por defecto. Ver [#f1]_."

#~ msgid ""
#~ "You can change this attribute to a callable that accepts the cursor and "
#~ "the original row as a tuple and will return the real result row.  This "
#~ "way, you can implement more advanced ways of returning results, such  as "
#~ "returning an object that can also access columns by name."
#~ msgstr ""
#~ "Se puede cambiar este atributo a un invocable que acepta el cursor y la "
#~ "fila original como una tupla y retornará la fila con el resultado real. "
#~ "De esta forma, se puede implementar más avanzadas formas de retornar "
#~ "resultados, tales como retornar un objeto que puede también acceder a las "
#~ "columnas por su nombre."

#~ msgid ""
#~ "Using this attribute you can control what objects are returned for the "
#~ "``TEXT`` data type. By default, this attribute is set to :class:`str` and "
#~ "the :mod:`sqlite3` module will return :class:`str` objects for ``TEXT``. "
#~ "If you want to return :class:`bytes` instead, you can set it to :class:"
#~ "`bytes`."
#~ msgstr ""
#~ "Con este atributo, puede controlar qué objetos se retornan para el tipo "
#~ "de datos ``TEXT``. De forma predeterminada, este atributo se establece "
#~ "en :class:`str` y el módulo :mod:`sqlite3` devolverá objetos :class:`str` "
#~ "para ``TEXT``. Si desea devolver :class:`bytes` en su lugar, puede "
#~ "configurarlo en :class:`bytes`."

#~ msgid ""
#~ "You can also set it to any other callable that accepts a single "
#~ "bytestring parameter and returns the resulting object."
#~ msgstr ""
#~ "También se puede configurar a cualquier otro *callable* que acepte un "
#~ "único parámetro *bytestring* y retorne el objeto resultante."

#~ msgid "See the following example code for illustration:"
#~ msgstr "Ver el siguiente ejemplo de código para ilustración:"

#~ msgid "Example::"
#~ msgstr "Ejemplo::"

#~ msgid ""
#~ "This method makes a backup of a SQLite database even while it's being "
#~ "accessed by other clients, or concurrently by the same connection.  The "
#~ "copy will be written into the mandatory argument *target*, that must be "
#~ "another :class:`Connection` instance."
#~ msgstr ""
#~ "Este método crea un respaldo de una base de datos SQLite incluso mientras "
#~ "está siendo accedida por otros clientes, o concurrente por la misma "
#~ "conexión. La copia será escrita dentro del argumento obligatorio "
#~ "*target*, que deberá ser otra instancia de :class:`Connection`."

#~ msgid ""
#~ "By default, or when *pages* is either ``0`` or a negative integer, the "
#~ "entire database is copied in a single step; otherwise the method performs "
#~ "a loop copying up to *pages* pages at a time."
#~ msgstr ""
#~ "Por defecto, o cuando *pages* es ``0`` o un entero negativo, la base de "
#~ "datos completa es copiada en un solo paso; de otra forma el método "
#~ "realiza un bucle copiando hasta el número de *pages* a la vez."

#~ msgid ""
#~ "If *progress* is specified, it must either be ``None`` or a callable "
#~ "object that will be executed at each iteration with three integer "
#~ "arguments, respectively the *status* of the last iteration, the "
#~ "*remaining* number of pages still to be copied and the *total* number of "
#~ "pages."
#~ msgstr ""
#~ "Si *progress* es especificado, deberá ser ``None`` o un objeto *callable* "
#~ "que será ejecutado en cada iteración con los tres argumentos enteros, "
#~ "respectivamente el estado *status* de la última iteración, el restante "
#~ "*remaining* numero de páginas presentes para ser copiadas y el número "
#~ "total *total* de páginas."

#~ msgid ""
#~ "The *name* argument specifies the database name that will be copied: it "
#~ "must be a string containing either ``\"main\"``, the default, to indicate "
#~ "the main database, ``\"temp\"`` to indicate the temporary database or the "
#~ "name specified after the ``AS`` keyword in an ``ATTACH DATABASE`` "
#~ "statement for an attached database."
#~ msgstr ""
#~ "El argumento *name* especifica el nombre de la base de datos que será "
#~ "copiada: deberá ser una cadena de texto que contenga el por defecto "
#~ "``\"main\"``, que indica la base de datos principal, ``\"temp\"`` que "
#~ "indica la base de datos temporal o el nombre especificado después de la "
#~ "palabra clave ``AS`` en una sentencia ``ATTACH DATABASE`` para una base "
#~ "de datos adjunta."

#~ msgid ""
#~ ":meth:`execute` will only execute a single SQL statement. If you try to "
#~ "execute more than one statement with it, it will raise a :exc:`.Warning`. "
#~ "Use :meth:`executescript` if you want to execute multiple SQL statements "
#~ "with one call."
#~ msgstr ""
#~ ":meth:`execute` solo ejecutará una única sentencia SQL. Si se trata de "
#~ "ejecutar más de una sentencia con el, lanzará un :exc:`.Warning`. Usar :"
#~ "meth:`executescript` si se quiere ejecutar múltiples sentencias SQL con "
#~ "una llamada."

#~ msgid ""
#~ "Executes a :ref:`parameterized <sqlite3-placeholders>` SQL command "
#~ "against all parameter sequences or mappings found in the sequence "
#~ "*seq_of_parameters*. The :mod:`sqlite3` module also allows using an :term:"
#~ "`iterator` yielding parameters instead of a sequence."
#~ msgstr ""
#~ "Ejecuta un comando SQL :ref:`parameterized <sqlite3-placeholders>` contra "
#~ "todas las secuencias o asignaciones de parámetros que se encuentran en la "
#~ "secuencia *seq_of_parameters*. El módulo :mod:`sqlite3` también permite "
#~ "usar un :term:`iterator` que produce parámetros en lugar de una secuencia."

#~ msgid "Here's a shorter example using a :term:`generator`:"
#~ msgstr "Acá un corto ejemplo usando un :term:`generator`:"

#~ msgid ""
#~ "This is a nonstandard convenience method for executing multiple SQL "
#~ "statements at once. It issues a ``COMMIT`` statement first, then executes "
#~ "the SQL script it gets as a parameter.  This method disregards :attr:"
#~ "`isolation_level`; any transaction control must be added to *sql_script*."
#~ msgstr ""
#~ "Este es un método de conveniencia no estándar para ejecutar múltiples "
#~ "sentencias SQL a la vez. Primero emite una declaración ``COMMIT``, luego "
#~ "ejecuta el script SQL que obtiene como parámetro. Este método ignora :"
#~ "attr:`isolation_level`; cualquier control de transacción debe agregarse a "
#~ "*sql_script*."

#~ msgid ""
#~ "Fetches the next row of a query result set, returning a single sequence, "
#~ "or :const:`None` when no more data is available."
#~ msgstr ""
#~ "Obtiene la siguiente fila de un conjunto resultado, retorna una única "
#~ "secuencia, o :const:`None` cuando no hay más datos disponibles."

#~ msgid ""
#~ "The number of rows to fetch per call is specified by the *size* "
#~ "parameter. If it is not given, the cursor's arraysize determines the "
#~ "number of rows to be fetched. The method should try to fetch as many rows "
#~ "as indicated by the size parameter. If this is not possible due to the "
#~ "specified number of rows not being available, fewer rows may be returned."
#~ msgstr ""
#~ "El número de filas a obtener por llamado es especificado por el parámetro "
#~ "*size*. Si no es suministrado, el arraysize del cursor determina el "
#~ "número de filas a obtener. El método debería intentar obtener tantas "
#~ "filas como las indicadas por el parámetro size. Si esto no es posible "
#~ "debido a que el número especificado de filas no está disponible, entonces "
#~ "menos filas deberán ser retornadas."

#~ msgid ""
#~ "Fetches all (remaining) rows of a query result, returning a list.  Note "
#~ "that the cursor's arraysize attribute can affect the performance of this "
#~ "operation. An empty list is returned when no rows are available."
#~ msgstr ""
#~ "Obtiene todas las filas (restantes) del resultado de una consulta. Nótese "
#~ "que el atributo arraysize del cursor puede afectar el desempeño de esta "
#~ "operación. Una lista vacía será retornada cuando no hay filas disponibles."

#~ msgid ""
#~ "Although the :class:`Cursor` class of the :mod:`sqlite3` module "
#~ "implements this attribute, the database engine's own support for the "
#~ "determination of \"rows affected\"/\"rows selected\" is quirky."
#~ msgstr ""
#~ "A pesar de que la clase :class:`Cursor` del módulo :mod:`sqlite3` "
#~ "implementa este atributo, el propio soporte del motor de base de datos "
#~ "para la determinación de \"filas afectadas\"/\"filas seleccionadas\" es "
#~ "raro."

#~ msgid ""
#~ "For :meth:`executemany` statements, the number of modifications are "
#~ "summed up into :attr:`rowcount`."
#~ msgstr ""
#~ "Para sentencias :meth:`executemany`, el número de modificaciones se "
#~ "resumen en :attr:`rowcount`."

#~ msgid ""
#~ "As required by the Python DB API Spec, the :attr:`rowcount` attribute "
#~ "\"is -1 in case no ``executeXX()`` has been performed on the cursor or "
#~ "the rowcount of the last operation is not determinable by the "
#~ "interface\". This includes ``SELECT`` statements because we cannot "
#~ "determine the number of rows a query produced until all rows were fetched."
#~ msgstr ""
#~ "Cómo lo requiere la especificación Python DB API, el atributo :attr:"
#~ "`rowcount` \"es -1 en caso de que ``executeXX()`` no haya sido ejecutada "
#~ "en el cursor o en el *rowcount* de la última operación no haya sido "
#~ "determinada por la interface\". Esto incluye sentencias ``SELECT`` porque "
#~ "no podemos determinar el número de filas que una consulta produce hasta "
#~ "que todas las filas sean obtenidas."

#~ msgid ""
#~ "This read-only attribute provides the rowid of the last modified row. It "
#~ "is only set if you issued an ``INSERT`` or a ``REPLACE`` statement using "
#~ "the :meth:`execute` method.  For operations other than ``INSERT`` or "
#~ "``REPLACE`` or when :meth:`executemany` is called, :attr:`lastrowid` is "
#~ "set to :const:`None`."
#~ msgstr ""
#~ "Este atributo de solo lectura provee el rowid de la última fila "
#~ "modificada. Solo se configura si se emite una sentencia ``INSERT`` o "
#~ "``REPLACE`` usando el método :meth:`execute`. Para otras operaciones "
#~ "diferentes a ``INSERT`` o ``REPLACE`` o cuando :meth:`executemany` es "
#~ "llamado, :attr:`lastrowid` es configurado a :const:`None`."

#~ msgid ""
#~ "If the ``INSERT`` or ``REPLACE`` statement failed to insert the previous "
#~ "successful rowid is returned."
#~ msgstr ""
#~ "Si la sentencia ``INSERT`` o ``REPLACE`` no se pudo insertar, se retorna "
#~ "el anterior rowid exitoso."

#~ msgid ""
#~ "A :class:`Row` instance serves as a highly optimized :attr:`~Connection."
#~ "row_factory` for :class:`Connection` objects. It tries to mimic a tuple "
#~ "in most of its features."
#~ msgstr ""
#~ "Una instancia :class:`Row` sirve como una altamente optimizada :attr:"
#~ "`~Connection.row_factory` para objetos :class:`Connection`. Esta trata de "
#~ "imitar una tupla en su mayoría de características."

#~ msgid ""
#~ "It supports mapping access by column name and index, iteration, "
#~ "representation, equality testing and :func:`len`."
#~ msgstr ""
#~ "Soporta acceso mapeado por nombre de columna e índice, iteración, "
#~ "representación, pruebas de igualdad y :func:`len`."

#~ msgid ""
#~ "If two :class:`Row` objects have exactly the same columns and their "
#~ "members are equal, they compare equal."
#~ msgstr ""
#~ "Si dos objetos :class:`Row` tienen exactamente las mismas columnas y sus "
#~ "miembros son iguales, entonces se comparan a igual."

#~ msgid "Let's assume we initialize a table as in the example given above::"
#~ msgstr ""
#~ "Vamos a asumir que se inicializa una tabla como en el ejemplo dado::"

#~ msgid "Now we plug :class:`Row` in::"
#~ msgstr "Ahora conectamos :class:`Row` en::"

#~ msgid "A subclass of :exc:`Exception`."
#~ msgstr "Una subclase de :exc:`Exception`."

#~ msgid "Exception raised for errors that are related to the database."
#~ msgstr ""
#~ "Excepción lanzada para errores que están relacionados con la base de "
#~ "datos."

#~ msgid ""
#~ "Exception raised for programming errors, e.g. table not found or already "
#~ "exists, syntax error in the SQL statement, wrong number of parameters "
#~ "specified, etc.  It is a subclass of :exc:`DatabaseError`."
#~ msgstr ""
#~ "Excepción lanzada por errores de programación, e.g. tabla no encontrada o "
#~ "ya existente, error de sintaxis en la sentencia SQL, número equivocado de "
#~ "parámetros especificados, etc. Es una subclase de :exc:`DatabaseError`."

#~ msgid ""
#~ "Exception raised for errors that are related to the database's operation "
#~ "and not necessarily under the control of the programmer, e.g. an "
#~ "unexpected disconnect occurs, the data source name is not found, a "
#~ "transaction could not be processed, etc.  It is a subclass of :exc:"
#~ "`DatabaseError`."
#~ msgstr ""
#~ "Excepción lanzada por errores relacionados por la operación de la base de "
#~ "datos y no necesariamente bajo el control del programador, por ejemplo "
#~ "ocurre una desconexión inesperada, el nombre de la fuente de datos no es "
#~ "encontrado, una transacción no pudo ser procesada, etc. Es una subclase "
#~ "de :exc:`DatabaseError`."

#~ msgid ""
#~ "Exception raised in case a method or database API was used which is not "
#~ "supported by the database, e.g. calling the :meth:`~Connection.rollback` "
#~ "method on a connection that does not support transaction or has "
#~ "transactions turned off.  It is a subclass of :exc:`DatabaseError`."
#~ msgstr ""
#~ "Excepción lanzada en caso de que un método o API de base de datos fuera "
#~ "usada en una base de datos que no la soporta, e.g. llamando el método :"
#~ "meth:`~Connection.rollback` en una conexión que no soporta la transacción "
#~ "o tiene deshabilitada las transacciones. Es una subclase de :exc:"
#~ "`DatabaseError`."

#~ msgid "Introduction"
#~ msgstr "Introducción"

#~ msgid ":const:`None`"
#~ msgstr ":const:`None`"

#~ msgid "Using adapters to store additional Python types in SQLite databases"
#~ msgstr ""
#~ "Usando adaptadores para almacenar tipos adicionales de Python en bases de "
#~ "datos SQLite"

#~ msgid ""
#~ "As described before, SQLite supports only a limited set of types "
#~ "natively. To use other Python types with SQLite, you must **adapt** them "
#~ "to one of the sqlite3 module's supported types for SQLite: one of "
#~ "NoneType, int, float, str, bytes."
#~ msgstr ""
#~ "Como se describió anteriormente, SQLite soporta solamente un conjunto "
#~ "limitado de tipos de forma nativa. Para usar otros tipos de Python con "
#~ "SQLite, se deben **adaptar** a uno de los tipos de datos soportados por "
#~ "el módulo sqlite3 para SQLite: uno de NoneType, int, float, str, bytes."

#~ msgid ""
#~ "There are two ways to enable the :mod:`sqlite3` module to adapt a custom "
#~ "Python type to one of the supported ones."
#~ msgstr ""
#~ "Hay dos formas de habilitar el módulo :mod:`sqlite3` para adaptar un tipo "
#~ "personalizado de Python a alguno de los admitidos."

#~ msgid "Letting your object adapt itself"
#~ msgstr "Permitiéndole al objeto auto adaptarse"

#~ msgid ""
#~ "This is a good approach if you write the class yourself. Let's suppose "
#~ "you have a class like this::"
#~ msgstr ""
#~ "Este es un buen enfoque si uno mismo escribe la clase. Vamos a suponer "
#~ "que se tiene una clase como esta::"

#~ msgid ""
#~ "Now you want to store the point in a single SQLite column.  First you'll "
#~ "have to choose one of the supported types to be used for representing the "
#~ "point. Let's just use str and separate the coordinates using a semicolon. "
#~ "Then you need to give your class a method ``__conform__(self, protocol)`` "
#~ "which must return the converted value. The parameter *protocol* will be :"
#~ "class:`PrepareProtocol`."
#~ msgstr ""
#~ "Ahora desea almacenar el punto en una sola columna de SQLite. Primero "
#~ "tendrá que elegir uno de los tipos admitidos que se utilizará para "
#~ "representar el punto. Usemos str y separemos las coordenadas usando un "
#~ "punto y coma. Luego, debe darle a su clase un método ``__conform __(self, "
#~ "protocol)`` que debe retornar el valor convertido. El parámetro "
#~ "*protocol* será :class:`PrepareProtocol`."

#~ msgid ""
#~ "The :mod:`sqlite3` module has two default adapters for Python's built-in :"
#~ "class:`datetime.date` and :class:`datetime.datetime` types.  Now let's "
#~ "suppose we want to store :class:`datetime.datetime` objects not in ISO "
#~ "representation, but as a Unix timestamp."
#~ msgstr ""
#~ "El módulo :mod:`sqlite3` tiene dos adaptadores por defecto para las "
#~ "funciones integradas de Python :class:`datetime.date` y tipos :class:"
#~ "`datetime.datetime`. Ahora vamos a suponer que queremos almacenar "
#~ "objetos :class:`datetime.datetime` no en representación ISO, sino como "
#~ "una marca de tiempo Unix."

#~ msgid ""
#~ "Writing an adapter lets you send custom Python types to SQLite. But to "
#~ "make it really useful we need to make the Python to SQLite to Python "
#~ "roundtrip work."
#~ msgstr ""
#~ "Escribir un adaptador permite enviar escritos personalizados de Python a "
#~ "SQLite. Pero para hacer esto realmente útil, tenemos que hace el flujo "
#~ "Python a SQLite a Python."

#~ msgid "Enter converters."
#~ msgstr "Ingresar convertidores."

#~ msgid ""
#~ "Now you need to make the :mod:`sqlite3` module know that what you select "
#~ "from the database is actually a point. There are two ways of doing this:"
#~ msgstr ""
#~ "Ahora se necesita hacer que el módulo :mod:`sqlite3` conozca que lo que "
#~ "tu seleccionaste de la base de datos es de hecho un punto. Hay dos formas "
#~ "de hacer esto:"

#~ msgid "Implicitly via the declared type"
#~ msgstr "Implícitamente vía el tipo declarado"

#~ msgid "Explicitly via the column name"
#~ msgstr "Explícitamente vía el nombre de la columna"

#~ msgid ""
#~ "Both ways are described in section :ref:`sqlite3-module-contents`, in the "
#~ "entries for the constants :const:`PARSE_DECLTYPES` and :const:"
#~ "`PARSE_COLNAMES`."
#~ msgstr ""
#~ "Ambas formas están descritas en la sección :ref:`sqlite3-module-"
#~ "contents`, en las entradas para las constantes :const:`PARSE_DECLTYPES` "
#~ "y :const:`PARSE_COLNAMES`."

#~ msgid "Controlling Transactions"
#~ msgstr "Controlando Transacciones"

#~ msgid ""
#~ "The underlying ``sqlite3`` library operates in ``autocommit`` mode by "
#~ "default, but the Python :mod:`sqlite3` module by default does not."
#~ msgstr ""
#~ "La librería subyacente ``sqlite3`` opera en modo ``autocommit`` por "
#~ "defecto, pero el módulo de Python :mod:`sqlite3` no."

#~ msgid ""
#~ "``autocommit`` mode means that statements that modify the database take "
#~ "effect immediately.  A ``BEGIN`` or ``SAVEPOINT`` statement disables "
#~ "``autocommit`` mode, and a ``COMMIT``, a ``ROLLBACK``, or a ``RELEASE`` "
#~ "that ends the outermost transaction, turns ``autocommit`` mode back on."
#~ msgstr ""
#~ "El modo ``autocommit`` significa que la sentencias que modifican la base "
#~ "de datos toman efecto de forma inmediata. Una sentencia ``BEGIN`` o "
#~ "``SAVEPOINT`` deshabilitan el modo ``autocommit``, y un ``COMMIT``, un "
#~ "``ROLLBACK``, o un ``RELEASE`` que terminan la transacción más externa, "
#~ "habilitan de nuevo el modo ``autocommit``."

#~ msgid ""
#~ "The Python :mod:`sqlite3` module by default issues a ``BEGIN`` statement "
#~ "implicitly before a Data Modification Language (DML) statement (i.e. "
#~ "``INSERT``/``UPDATE``/``DELETE``/``REPLACE``)."
#~ msgstr ""
#~ "El módulo de Python :mod:`sqlite3` emite por defecto una sentencia "
#~ "``BEGIN`` implícita antes de una sentencia tipo Lenguaje Manipulación de "
#~ "Datos (DML) (es decir ``INSERT``/``UPDATE``/``DELETE``/``REPLACE``)."

#~ msgid ""
#~ "You can control which kind of ``BEGIN`` statements :mod:`sqlite3` "
#~ "implicitly executes via the *isolation_level* parameter to the :func:"
#~ "`connect` call, or via the :attr:`isolation_level` property of "
#~ "connections. If you specify no *isolation_level*, a plain ``BEGIN`` is "
#~ "used, which is equivalent to specifying ``DEFERRED``.  Other possible "
#~ "values are ``IMMEDIATE`` and ``EXCLUSIVE``."
#~ msgstr ""
#~ "Se puede controlar en qué tipo de sentencias ``BEGIN`` :mod:`sqlite3` "
#~ "implícitamente ejecuta vía el parámetro *insolation_level* a la función "
#~ "de llamada :func:`connect`, o vía las propiedades de conexión :attr:"
#~ "`isolation_level`. Si no se especifica *isolation_level*, se usa un plano "
#~ "``BEGIN``, el cuál es equivalente a especificar ``DEFERRED``. Otros "
#~ "posibles valores son ``IMMEDIATE`` and ``EXCLUSIVE``."

#~ msgid ""
#~ "You can disable the :mod:`sqlite3` module's implicit transaction "
#~ "management by setting :attr:`isolation_level` to ``None``.  This will "
#~ "leave the underlying ``sqlite3`` library operating in ``autocommit`` "
#~ "mode.  You can then completely control the transaction state by "
#~ "explicitly issuing ``BEGIN``, ``ROLLBACK``, ``SAVEPOINT``, and "
#~ "``RELEASE`` statements in your code."
#~ msgstr ""
#~ "Se puede deshabilitar la gestión implícita de transacciones del módulo :"
#~ "mod:`sqlite3` con la configuración :attr:`isolation_level` a ``None``. "
#~ "Esto dejará la subyacente biblioteca operando en modo ``autocommit``. Se "
#~ "puede controlar completamente el estado de la transacción emitiendo "
#~ "explícitamente sentencias ``BEGIN``, ``ROLLBACK``, ``SAVEPOINT``, y "
#~ "``RELEASE`` en el código."

#~ msgid ""
#~ "Note that :meth:`~Cursor.executescript` disregards :attr:"
#~ "`isolation_level`; any transaction control must be added explicitly."
#~ msgstr ""
#~ "Tenga en cuenta que :meth:`~Cursor.executescript` no tiene en cuenta :"
#~ "attr:`isolation_level`; cualquier control de la transacción debe añadirse "
#~ "explícitamente."

#~ msgid "Using :mod:`sqlite3` efficiently"
#~ msgstr "Usando :mod:`sqlite3` eficientemente"

#~ msgid ""
#~ "Using the nonstandard :meth:`execute`, :meth:`executemany` and :meth:"
#~ "`executescript` methods of the :class:`Connection` object, your code can "
#~ "be written more concisely because you don't have to create the (often "
#~ "superfluous) :class:`Cursor` objects explicitly. Instead, the :class:"
#~ "`Cursor` objects are created implicitly and these shortcut methods return "
#~ "the cursor objects. This way, you can execute a ``SELECT`` statement and "
#~ "iterate over it directly using only a single call on the :class:"
#~ "`Connection` object."
#~ msgstr ""
#~ "Usando los métodos no estándar :meth:`execute`, :meth:`executemany` y :"
#~ "meth:`executescript` del objeto :class:`Connection`, el código puede ser "
#~ "escrito más consistentemente porque no se tienen que crear explícitamente "
#~ "los (a menudo superfluos) objetos :class:`Cursor`. En cambio, los objetos "
#~ "de :class:`Cursor` son creados implícitamente y estos métodos atajo "
#~ "retornan los objetos cursor. De esta forma, se puede ejecutar una "
#~ "sentencia ``SELECT`` e iterar directamente sobre él, solamente usando una "
#~ "única llamada al objeto :class:`Connection`."

#~ msgid "Accessing columns by name instead of by index"
#~ msgstr "Accediendo a las columnas por el nombre en lugar del índice"

#~ msgid ""
#~ "One useful feature of the :mod:`sqlite3` module is the built-in :class:"
#~ "`sqlite3.Row` class designed to be used as a row factory."
#~ msgstr ""
#~ "Una característica útil del módulo :mod:`sqlite3` es la clase incluida :"
#~ "class:`sqlite3.Row` diseñada para ser usada como una fábrica de filas."

#~ msgid ""
#~ "Rows wrapped with this class can be accessed both by index (like tuples) "
#~ "and case-insensitively by name:"
#~ msgstr ""
#~ "Filas envueltas con esta clase pueden ser accedidas tanto por índice (al "
#~ "igual que tuplas) como por nombre insensible a mayúsculas o minúsculas:"

#~ msgid ""
#~ "Connection objects can be used as context managers that automatically "
#~ "commit or rollback transactions.  In the event of an exception, the "
#~ "transaction is rolled back; otherwise, the transaction is committed:"
#~ msgstr ""
#~ "Los objetos de conexión pueden ser usados como administradores de "
#~ "contexto que automáticamente transacciones commit o rollback. En el "
#~ "evento de una excepción, la transacción es retrocedida; de otra forma, la "
#~ "transacción es confirmada:"

#~ msgid "Footnotes"
#~ msgstr "Notas al pie"
