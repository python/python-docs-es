# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-16 21:42+0200\n"
"PO-Revision-Date: 2021-08-15 20:17-0500\n"
"Last-Translator: Héctor Canto <hectorcanto@gmail.com>\n"
"Language-Team: python-doc-es\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"Generated-By: Babel 2.9.1\n"

#: ../Doc/library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- Soporte para *type hints*"

#: ../Doc/library/typing.rst:10
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**Source code:** :source:`Lib/typing.py`"

#: ../Doc/library/typing.rst:14
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr ""
"En tiempo de ejecución, Python no impone las anotaciones de tipado en "
"funciones y variables. Pueden ser utilizadas por herramientas de terceros "
"como validadores de tipado, IDEs, linters, etc."

#: ../Doc/library/typing.rst:20
msgid ""
"This module provides runtime support for type hints as specified by :pep:"
"`484`, :pep:`526`, :pep:`544`, :pep:`586`, :pep:`589`, :pep:`591`, :pep:"
"`612` and :pep:`613`. The most fundamental support consists of the types :"
"data:`Any`, :data:`Union`, :data:`Tuple`, :data:`Callable`, :class:"
"`TypeVar`, and :class:`Generic`.  For full specification please see :pep:"
"`484`.  For a simplified introduction to type hints see :pep:`483`."
msgstr ""
"Este módulo proporciona soporte en tiempo de ejecución para sugerencias de "
"tipo según lo especificado por :pep:`484`, :pep:`526`, :pep:`544`, :pep:"
"`586`, :pep:`589`, :pep:`591`, :pep:`612` y :pep:`613`. El soporte más "
"fundamental consiste en los tipos :data:`Any`, :data:`Union`, :data:"
"`Tuple`, :data:`Callable`, :class:`TypeVar` y :class:`Generic`. Para obtener "
"especificaciones completas, consulte :pep:`484`. Para obtener una "
"introducción simplificada a las sugerencias de tipo, consulte :pep:`483`."

#: ../Doc/library/typing.rst:29
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr ""
"La siguiente función toma y retorna una cadena de texto, que se anota de la "
"siguiente manera::"

#: ../Doc/library/typing.rst:34
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""
"En la función ``greeting``, se espera que el argumento ``name``  sea de "
"tipo :class:`str` y que el tipo retornado sea :class:`str`. Los subtipos "
"también son aceptados como argumento válido."

#: ../Doc/library/typing.rst:41
msgid "Type aliases"
msgstr "Alias de tipo"

#: ../Doc/library/typing.rst:43
msgid ""
"A type alias is defined by assigning the type to the alias. In this example, "
"``Vector`` and ``list[float]`` will be treated as interchangeable synonyms::"
msgstr ""
"Un alias de tipo se define asignando el tipo al alias. En este ejemplo, "
"``Vector`` y ``List[float]`` serán tratados como sinónimos intercambiables::"

#: ../Doc/library/typing.rst:54
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""
"Los alias de tipo son útiles para simplificar indicadores de tipo complejos. "
"Por ejemplo::"

#: ../Doc/library/typing.rst:72
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr ""
"Nótese que ``None`` como indicador de tipo es un caso especial y es "
"substituido por ``type(None)``."

#: ../Doc/library/typing.rst:78
msgid "NewType"
msgstr "NewType"

#: ../Doc/library/typing.rst:80
msgid "Use the :class:`NewType` helper class to create distinct types::"
msgstr "Utilice la clase auxiliar :class:`NewType` para crear tipos distintos:"

#: ../Doc/library/typing.rst:87
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""
"El validador estático de tipos tratará el nuevo tipo como si fuera una "
"subclase del tipo original. Esto es útil para capturar errores lógicos::"

#: ../Doc/library/typing.rst:99
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"Se pueden realizar todas las operaciones de ``int`` en una variable de tipo "
"``UserId``, pero el resultado siempre será de tipo ``int``. Esto permite "
"pasar un ``UserId`` allí donde se espere un ``int``, pero evitará la "
"creación accidental de un ``UserId`` de manera incorrecta::"

#: ../Doc/library/typing.rst:107
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a class that immediately returns whatever parameter you pass it. "
"That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"Tenga en cuenta que estas comprobaciones solo las aplica el verificador de "
"tipo estático. En tiempo de ejecución, la declaración ``Derived = "
"NewType('Derived', Base)`` hará que ``Derived`` sea una clase que retorna "
"inmediatamente cualquier parámetro que le pase. Eso significa que la "
"expresión ``Derived(some_value)`` no crea una nueva clase ni introduce mucha "
"sobrecarga más allá de la de una llamada de función regular."

#: ../Doc/library/typing.rst:113
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"Más concretamente, la expresión ``some_value is Derived(some_value)`` será "
"siempre verdadera en tiempo de ejecución."

#: ../Doc/library/typing.rst:116
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "No es válido crear un subtipo de ``Derived``:"

#: ../Doc/library/typing.rst:125
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"Sin embargo, es posible crear un :class:`NewType` basado en un ``NewType`` "
"'derivado':"

#: ../Doc/library/typing.rst:133
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr ""
"y la comprobación de tipo para ``ProUserId`` funcionará como se espera."

#: ../Doc/library/typing.rst:135
msgid "See :pep:`484` for more details."
msgstr "Véase :pep:`484` para más detalle."

#: ../Doc/library/typing.rst:139
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""
"Recuérdese que el uso de alias de tipo implica que los dos tipos son "
"*equivalentes* entre sí. Haciendo ``Alias = Original`` provocará que el "
"Validador estático de tipos trate ``Alias`` como algo *exactamente "
"equivalente* a ``Original`` en todos los casos. Esto es útil para cuando se "
"quiera simplificar indicadores de tipo complejos."

#: ../Doc/library/typing.rst:144
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"En cambio, ``NewType`` declara un tipo que es *subtipo* de otro. Haciendo "
"``Derived = NewType('Derived', Original)`` hará que el Validador estático de "
"tipos trate ``Derived`` como una *subclase* de ``Original``, lo que implica "
"que un valor de tipo ``Original`` no puede ser usado allí donde se espere un "
"valor de tipo ``Derived``. Esto es útil para prevenir errores lógicos con un "
"coste de ejecución mínimo."

#: ../Doc/library/typing.rst:153
msgid ""
"``NewType`` is now a class rather than a function.  There is some additional "
"runtime cost when calling ``NewType`` over a regular function.  However, "
"this cost will be reduced in 3.11.0."
msgstr ""
"``NewType`` es ahora una clase en lugar de una función. Existe un costo de "
"tiempo de ejecución adicional cuando se llama a ``NewType`` a través de una "
"función normal. Sin embargo, este costo se reducirá en 3.11.0."

#: ../Doc/library/typing.rst:160
msgid "Callable"
msgstr "Callable"

# Aquí frameworks parace indicar un término abierto referiéndose a elementos
# que interactuarán con las llamadas anotadas. Por ello, se escoge el término
# genérico "entidades"
#: ../Doc/library/typing.rst:162
msgid ""
"Frameworks expecting callback functions of specific signatures might be type "
"hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""
"Entidades que esperen llamadas a funciones con interfaces específicas puede "
"ser anotadas usando ``Callable[[Arg1Type, Arg2Type], ReturnType]``."

#: ../Doc/library/typing.rst:165 ../Doc/library/typing.rst:976
#: ../Doc/library/typing.rst:2054
msgid "For example::"
msgstr "Por ejemplo::"

#: ../Doc/library/typing.rst:176
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""
"Es posible declarar el tipo de retorno de un *callable* (invocable) sin "
"especificar tipos en los parámetros substituyendo la lista de argumentos por "
"unos puntos suspensivos (...) en el indicador de tipo: ``Callable[..., "
"ReturnType]``."

#: ../Doc/library/typing.rst:180 ../Doc/library/typing.rst:666
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"Los invocables que toman otros invocables como argumentos pueden indicar que "
"sus tipos de parámetros dependen unos de otros utilizando :class:"
"`ParamSpec`. Además, si ese invocable agrega o elimina argumentos de otros "
"invocables, se puede utilizar el operador :data:`Concatenate`. Toman la "
"forma ``Callable[ParamSpecVariable, ReturnType]`` y "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectivamente."

#: ../Doc/library/typing.rst:188 ../Doc/library/typing.rst:678
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more information."
msgstr ""
"``Callable`` ahora es compatible con :class:`ParamSpec` y :data:"
"`Concatenate`. Consulte :pep:`612` para obtener más información."

#: ../Doc/library/typing.rst:193
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provide "
"examples of usage in ``Callable``."
msgstr ""
"La documentación de :class:`ParamSpec` y :class:`Concatenate` proporciona "
"ejemplos de uso en ``Callable``."

#: ../Doc/library/typing.rst:199
msgid "Generics"
msgstr "Genéricos"

#: ../Doc/library/typing.rst:201
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr ""
"Ya que no es posible inferir estáticamente y de una manera genérica la "
"información de tipo de objetos dentro de contenedores, las clases base "
"abstractas han sido mejoradas para permitir sintaxis de subíndice para "
"denotar los tipos esperados en elementos contenedores."

#: ../Doc/library/typing.rst:212
msgid ""
"Generics can be parameterized by using a new factory available in typing "
"called :class:`TypeVar`."
msgstr ""
"Los genéricos se pueden parametrizar usando una nueva factoría disponible en "
"*typing* llamada :class:`TypeVar`."

#: ../Doc/library/typing.rst:227
msgid "User-defined generic types"
msgstr "Tipos genéricos definidos por el usuario"

#: ../Doc/library/typing.rst:229
msgid "A user-defined class can be defined as a generic class."
msgstr ""
"Una clase definida por el usuario puede ser definida como una clase genérica."

#: ../Doc/library/typing.rst:255
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""
"``Generic[T]`` como clase base define que la clase ``LoggedVar`` toma un "
"solo parámetro ``T``. Esto también implica que ``T`` es un tipo válido "
"dentro del cuerpo de la clase."

# revisar en su contexto
#: ../Doc/library/typing.rst:259
msgid ""
"The :class:`Generic` base class defines :meth:`__class_getitem__` so that "
"``LoggedVar[t]`` is valid as a type::"
msgstr ""
"La clase base :class:`Generic` define :meth:`__class_getitem__` para que "
"``LoggedVar[t]`` sea válido como tipo::"

# revisar constrained y que es una type variable en su contexto
#: ../Doc/library/typing.rst:268
msgid ""
"A generic type can have any number of type variables, and type variables may "
"be constrained::"
msgstr ""
"Un tipo genérico puede tener un número indefinido de variables de tipo, y "
"pueden limitarse a tipos concretos::"

# revisar la relacion argumento-variable-clase
#: ../Doc/library/typing.rst:280
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""
"Cada argumento de variable de tipo en una clase :class:`Generic` debe ser "
"distinto. Así, no será válido::"

#: ../Doc/library/typing.rst:291
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr "Se puede utilizar herencia múltiple con :class:`Generic`::"

#: ../Doc/library/typing.rst:301
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr ""
"Cuando se hereda de clases genéricas, se pueden fijar algunas variables de "
"tipo::"

#: ../Doc/library/typing.rst:311
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "En este caso ``MyDict`` tiene un solo parámetro, ``T``."

#: ../Doc/library/typing.rst:313
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""
"Al usar una clase genérica sin especificar parámetros de tipo se asume :data:"
"`Any` para todas las posiciones. En el siguiente ejemplo, ``MyIterable`` no "
"es genérico pero hereda implícitamente de ``Iterable[Any]``::"

#: ../Doc/library/typing.rst:321
msgid "User defined generic type aliases are also supported. Examples::"
msgstr ""
"Son posibles los alias de tipos genéricos definidos por el usuario. "
"Ejemplos::"

#: ../Doc/library/typing.rst:338
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` ya no posee una metaclase personalizable."

#: ../Doc/library/typing.rst:341
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``Generic[P]``.  The behavior "
"is consistent with type variables' described above as parameter "
"specification variables are treated by the typing module as a specialized "
"type variable.  The one exception to this is that a list of types can be "
"used to substitute a :class:`ParamSpec`::"
msgstr ""
"Los genéricos definidos por el usuario para expresiones de parámetros "
"también se admiten a través de variables de especificación de parámetros con "
"el formato ``Generic[P]``. El comportamiento es coherente con las variables "
"de tipo descritas anteriormente, ya que el módulo typing trata las variables "
"de especificación de parámetros como una variable de tipo especializada. La "
"única excepción a esto es que se puede usar una lista de tipos para "
"sustituir un :class:`ParamSpec`:"

#: ../Doc/library/typing.rst:358
msgid ""
"Furthermore, a generic with only one parameter specification variable will "
"accept parameter lists in the forms ``X[[Type1, Type2, ...]]`` and also "
"``X[Type1, Type2, ...]`` for aesthetic reasons.  Internally, the latter is "
"converted to the former and are thus equivalent::"
msgstr ""
"Además, un genérico con una sola variable de especificación de parámetro "
"aceptará listas de parámetros en los formatos ``X[[Type1, Type2, ...]]`` y "
"también ``X[Type1, Type2, ...]`` por razones estéticas. Internamente, este "
"último se convierte en el primero y, por lo tanto, son equivalentes:"

#: ../Doc/library/typing.rst:370
msgid ""
"Do note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""
"Tenga en cuenta que los genéricos con :class:`ParamSpec` pueden no tener el "
"``__parameters__`` correcto después de la sustitución en algunos casos "
"porque están destinados principalmente a la verificación de tipos estáticos."

#: ../Doc/library/typing.rst:374
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` ahora se puede parametrizar sobre expresiones de "
"parámetros. Consulte :class:`ParamSpec` y :pep:`612` para obtener más "
"detalles."

#: ../Doc/library/typing.rst:378
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are "
"hashable and comparable for equality."
msgstr ""
"Un clase genérica definida por el usuario puede tener clases ABC como clase "
"base sin conflicto de metaclase. Las metaclases genéricas no están "
"permitidas. El resultado de parametrizar clases genéricas se cachea, y la "
"mayoría de los tipos en el módulo *typing* pueden tener un hash y ser "
"comparables por igualdad (*equality*)."

#: ../Doc/library/typing.rst:385
msgid "The :data:`Any` type"
msgstr "El tipo :data:`Any`"

#: ../Doc/library/typing.rst:387
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
"Un caso especial de tipo es :data:`Any`. Un Validador estático de tipos "
"tratará cualquier tipo como compatible con :data:`Any`, y :data:`Any` como "
"compatible con todos los tipos."

#: ../Doc/library/typing.rst:391
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""
"Esto significa que es posible realizar cualquier operación o llamada a un "
"método en un valor de tipo :data:`Any` y asignarlo a cualquier variable::"

#: ../Doc/library/typing.rst:409
msgid ""
"Notice that no typechecking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"Nótese que no se realiza comprobación de tipo cuando se asigna un valor de "
"tipo :data:`Any` a un tipo más preciso. Por ejemplo, el Validador estático "
"de tipos no reportó ningún error cuando se asignó ``a`` a ``s``, aún cuando "
"se declaró ``s`` como de tipo :class:`str` y recibió un valor :class:`int` "
"en tiempo de ejecución!"

#: ../Doc/library/typing.rst:415
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""
"Además, todas las funciones sin un tipo de retorno o tipos en los parámetros "
"serán asignadas implícitamente a :data:`Any` por defecto::"

#: ../Doc/library/typing.rst:428
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""
"Este comportamiento permite que :data:`Any` sea usado como una *vía de "
"escape* cuando es necesario mezclar código tipado estática y dinámicamente."

#: ../Doc/library/typing.rst:431
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
"Compárese el comportamiento de :data:`Any` con el de :class:`object`. De "
"manera similar a :data:`Any`, todo tipo es un subtipo de :class:`object`. "
"Sin embargo, en oposición a :data:`Any`, lo contrario no es cierto: :class:"
"`object` *no* es un subtipo de ningún otro tipo."

#: ../Doc/library/typing.rst:436
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"Esto implica que cuando el tipo de un valor es :class:`object`, un validador "
"de tipos rechazará prácticamente todas las operaciones con él, y al "
"asignarlo a una variable (o usarlo como valor de retorno) de un tipo más "
"preciso será un error de tipo. Por ejemplo::"

#: ../Doc/library/typing.rst:458
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
"Úsese :class:`object` para indicar que un valor puede ser de cualquier tipo "
"de manera segura. Úsese :data:`Any` para indicar que un valor es de tipado "
"dinámico."

#: ../Doc/library/typing.rst:463
msgid "Nominal vs structural subtyping"
msgstr "Subtipado nominal vs estructural"

#: ../Doc/library/typing.rst:465
msgid ""
"Initially :pep:`484` defined Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"Inicialmente, el :pep:`484` definió el sistema de tipado estático de Python "
"como *nominal*. Esto implica que una clase ``A`` será permitida allí donde "
"se espere una clase ``B`` si y solo si ``A`` es una subclase de ``B``."

# Frase ultracompleja, necesitar una revisión fuerte
#: ../Doc/library/typing.rst:469
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"Este requisito también se aplicaba anteriormente a clases base abstractas "
"(ABC), tales como :class:`~collections.abc.Iterable`. El problema con esta "
"estrategia es que una clase debía de ser marcada explícitamente para "
"proporcionar tal funcionalidad, lo que resulta poco *pythónico* (idiomático) "
"y poco ajustado a lo que uno normalmente haría en un código Python tipado "
"dinámicamente. Por ejemplo, esto sí se ajusta al :pep:`484`::"

#: ../Doc/library/typing.rst:482
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
"El :pep:`544` permite resolver este problema al permitir escribir el código "
"anterior sin una clase base explícita en la definición de la clase, "
"permitiendo que el Validador estático de tipo considere implícitamente que "
"``Bucket`` es un subtipo tanto de ``Sized`` como de ``Iterable[int]``. Esto "
"se conoce como tipado *estructural* (o *duck-typing* estático)::"

#: ../Doc/library/typing.rst:498
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""
"Asimismo, creando subclases de la clase especial  :class:`Protocol`, el "
"usuario puede definir nuevos protocolos personalizados y beneficiarse del "
"tipado estructural (véanse los ejemplos de abajo)."

#: ../Doc/library/typing.rst:503
msgid "Module contents"
msgstr "Contenido del módulo"

#: ../Doc/library/typing.rst:505
msgid "The module defines the following classes, functions and decorators."
msgstr "El módulo define las siguientes clases, funciones y decoradores."

#: ../Doc/library/typing.rst:509
msgid ""
"This module defines several types that are subclasses of pre-existing "
"standard library classes which also extend :class:`Generic` to support type "
"variables inside ``[]``. These types became redundant in Python 3.9 when the "
"corresponding pre-existing classes were enhanced to support ``[]``."
msgstr ""
"Este módulo define algunos tipos que son subclases de clases que ya existen "
"en la librería estándar, y que además extienden :class:`Generic` para "
"soportar variables de tipo dentro de ``[]``. Estos tipos se vuelven "
"redundantes en Python 3.9 ya que las clases correspondientes fueron "
"mejoradas para soportar ``[]``."

#: ../Doc/library/typing.rst:515
msgid ""
"The redundant types are deprecated as of Python 3.9 but no deprecation "
"warnings will be issued by the interpreter. It is expected that type "
"checkers will flag the deprecated types when the checked program targets "
"Python 3.9 or newer."
msgstr ""
"Los tipos redundantes están descontinuados con Python 3.9 pero el intérprete "
"no mostrará ninguna advertencia. Se espera que los verificadores de tipo "
"marquen estos tipos como obsoletos cuando el programa a verificar apunte a "
"Python 3.9 o superior."

#: ../Doc/library/typing.rst:520
msgid ""
"The deprecated types will be removed from the :mod:`typing` module in the "
"first Python version released 5 years after the release of Python 3.9.0. See "
"details in :pep:`585`—*Type Hinting Generics In Standard Collections*."
msgstr ""
"Los tipos obsoletos serán removidos del módulo :class:`Generic` en la "
"primera versión de Python que sea lanzada 5 años después del lanzamiento de "
"Python 3.9.0. Véase los detalles en :pep:`585` -- *Sugerencias de tipo "
"genéricas en las Colecciones Estándar*."

#: ../Doc/library/typing.rst:526
msgid "Special typing primitives"
msgstr "Primitivos especiales de tipado"

#: ../Doc/library/typing.rst:529
msgid "Special types"
msgstr "Tipos especiales"

#: ../Doc/library/typing.rst:531
msgid "These can be used as types in annotations and do not support ``[]``."
msgstr ""
"Estos pueden ser usados como tipos en anotaciones y no soportan ``[]``."

#: ../Doc/library/typing.rst:535
msgid "Special type indicating an unconstrained type."
msgstr "Tipo especial que indica un tipo sin restricciones."

#: ../Doc/library/typing.rst:537
msgid "Every type is compatible with :data:`Any`."
msgstr "Todos los tipos son compatibles con :data:`Any`."

#: ../Doc/library/typing.rst:538
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` es compatible con todos los tipos."

# se añade valor para matizar que la funcion retorna (retorna el control) pero
# no de manera normal. En el ejemplo lanza una excepción.
#: ../Doc/library/typing.rst:542
msgid "Special type indicating that a function never returns. For example::"
msgstr ""
"Tipo especial que indica que una función nunca retorna un valor. Por "
"ejemplo::"

#: ../Doc/library/typing.rst:555
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`. For example::"
msgstr ""
"Anotación especial para declarar explícitamente un :ref:`alias de tipo <type-"
"aliases>`. Por ejemplo::"

#: ../Doc/library/typing.rst:562
msgid "See :pep:`613` for more details about explicit type aliases."
msgstr ""
"Consulte :pep:`613` para obtener más detalles sobre los alias de tipos "
"explícitos."

#: ../Doc/library/typing.rst:567
msgid "Special forms"
msgstr "Formas especiales"

#: ../Doc/library/typing.rst:569
msgid ""
"These can be used as types in annotations using ``[]``, each having a unique "
"syntax."
msgstr ""
"Estas se pueden usar como anotaciones de tipo usando ``[]``, cada cual tiene "
"una sintaxis única."

#: ../Doc/library/typing.rst:573
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""
"El tipo Tuple, ``Tuple[X, Y]`` es el tipo de una tupla de dos ítems con el "
"primer ítem de tipo X y el segundo de tipo Y. El tipo de una tupla vacía se "
"puede escribir así: ``Tuple[()]``."

#: ../Doc/library/typing.rst:577
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""
"Ejemplo: ``Tuple[T1, T2]`` es una tupla de dos elementos con sus "
"correspondientes variables de tipo T1 y T2. ``Tuple[int, float, str]`` es un "
"tupla con un número entero, un número de punto flotante y una cadena de "
"texto."

#: ../Doc/library/typing.rst:581
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""
"Para especificar una tupla de longitud variable y tipo homogéneo, se usan "
"puntos suspensivos, p. ej. ``Tuple[int, ...]``. Un simple :data:`Tuple` es "
"equivalente a ``Tuple[Any, ...]`` y, a su vez, a :class:`tuple`."

#: ../Doc/library/typing.rst:585
msgid ""
":class:`builtins.tuple <tuple>` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""
":class:`builtins.tuple <tuple>` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:591
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""
"Tipo de unión; ``Union[X, Y]`` es equivalente a ``X | Y`` y significa X o Y."

#: ../Doc/library/typing.rst:593
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``.  Details:"
msgstr ""
"Para definir una unión, use p. ej. ``Union[int, str]`` o la abreviatura "
"``int | str``. Detalles:"

#: ../Doc/library/typing.rst:595
msgid "The arguments must be types and there must be at least one."
msgstr "Los argumentos deben ser tipos y haber al menos uno."

#: ../Doc/library/typing.rst:597
msgid "Unions of unions are flattened, e.g.::"
msgstr "Las uniones de uniones se simplifican (se aplanan), p. ej.::"

#: ../Doc/library/typing.rst:601
msgid "Unions of a single argument vanish, e.g.::"
msgstr "Las uniones con un solo argumento se eliminan, p. ej.::"

#: ../Doc/library/typing.rst:605
msgid "Redundant arguments are skipped, e.g.::"
msgstr "Argumentos repetidos se omiten, p. ej.::"

#: ../Doc/library/typing.rst:609
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr ""
"Cuando se comparan uniones, el orden de los argumentos se ignoran, p. ej.::"

#: ../Doc/library/typing.rst:613
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "No puede crear una subclase o instanciar un ``Union``."

#: ../Doc/library/typing.rst:615
msgid "You cannot write ``Union[X][Y]``."
msgstr "No es posible escribir ``Union[X][Y]``."

#: ../Doc/library/typing.rst:617
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "No elimina subclases explícitas de una unión en tiempo de ejecución."

#: ../Doc/library/typing.rst:620
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Las uniones ahora se pueden escribir como ``X | Y``. Consulte :ref:`union "
"type expressions<types-union>`."

#: ../Doc/library/typing.rst:626
msgid "Optional type."
msgstr "Tipo Optional."

#: ../Doc/library/typing.rst:628
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr "``Optional[X]`` es equivalente a ``X | None`` (o ``Union[X, None]``)."

#: ../Doc/library/typing.rst:630
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"Nótese que no es lo mismo que un argumento opcional, que es aquel que tiene "
"un valor por defecto. Un argumento opcional con un valor por defecto no "
"necesita el indicador ``Optional`` en su anotación de tipo simplemente por "
"que sea opcional. Por ejemplo::"

#: ../Doc/library/typing.rst:638
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""
"Por otro lado, si se permite un valor ``None``, es apropiado el uso de "
"``Optional``, independientemente de que sea opcional o no. Por ejemplo::"

#: ../Doc/library/typing.rst:645
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Optional ahora se puede escribir como ``X | None``. Consulte :ref:`union "
"type expressions<types-union>`."

#: ../Doc/library/typing.rst:651
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr ""
"Tipo Callable (invocable); ``Callable[[int], str]`` es una función de (int) -"
"> str."

#: ../Doc/library/typing.rst:653
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr ""
"La sintaxis de subscripción (con corchetes *[]*) debe usarse siempre con dos "
"valores: la lista de argumentos y el tipo de retorno. La lista de argumentos "
"debe ser una lista de tipos o unos puntos suspensivos; el tipo de retorno "
"debe ser un único tipo."

#: ../Doc/library/typing.rst:658
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to :class:`collections.abc."
"Callable`."
msgstr ""
"No existe una sintaxis para indicar argumentos opcionales o con clave "
"(*keyword*); tales funciones rara vez se utilizan como tipos para llamadas. "
"``Callable[..., ReturnType]`` (puntos suspensivos) se puede usar para "
"indicar que un *callable* admite un número indeterminado de argumentos y "
"retorna ``ReturnType``. Un simple :data:`Callable` es equivalente a "
"``Callable[..., Any]`` y, a su vez, a :class:`collections.abc.Callable`."

#: ../Doc/library/typing.rst:674
msgid ""
":class:`collections.abc.Callable` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:683
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provide "
"examples of usage with ``Callable``."
msgstr ""
"La documentación de :class:`ParamSpec` y :class:`Concatenate` proporciona "
"ejemplos de uso con ``Callable``."

#: ../Doc/library/typing.rst:688
msgid ""
"Used with :data:`Callable` and :class:`ParamSpec` to type annotate a higher "
"order callable which adds, removes, or transforms parameters of another "
"callable.  Usage is in the form ``Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable]``. ``Concatenate`` is currently only valid when used as "
"the first argument to a :data:`Callable`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec`."
msgstr ""
"Se utiliza con :data:`Callable` y :class:`ParamSpec` para escribir anotar un "
"invocable de orden superior que agrega, elimina o transforma parámetros de "
"otro invocable. El uso tiene el formato ``Concatenate[Arg1Type, "
"Arg2Type, ..., ParamSpecVariable]``. Actualmente, ``Concatenate`` solo es "
"válido cuando se utiliza como primer argumento de un :data:`Callable`. El "
"último parámetro de ``Concatenate`` debe ser un :class:`ParamSpec`."

#: ../Doc/library/typing.rst:695
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""
"Por ejemplo, para anotar un decorador ``with_lock`` que proporciona un :"
"class:`threading.Lock` a la función decorada, ``Concatenate`` puede usarse "
"para indicar que ``with_lock`` espera un invocable que toma un ``Lock`` como "
"primer argumento y retorna un invocable con un tipo de firma diferente. En "
"este caso, el :class:`ParamSpec` indica que los tipos de parámetros de los "
"invocables retornados dependen de los tipos de parámetros de los invocables "
"que se pasan en ::"

#: ../Doc/library/typing.rst:735 ../Doc/library/typing.rst:1155
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)."
msgstr ""
":pep:`612` - Variables de especificación de parámetros (el PEP que introdujo "
"``ParamSpec`` y ``Concatenate``)."

#: ../Doc/library/typing.rst:737
msgid ":class:`ParamSpec` and :class:`Callable`."
msgstr ":class:`ParamSpec` y :class:`Callable`."

#: ../Doc/library/typing.rst:742
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""
"Una variable indicada como ``C`` puede aceptar valores de tipo ``C``. Sin "
"embargo, un variable indicada como ``Type[C]`` puede aceptar valores que son "
"clases en sí mismas -- específicamente, aceptará el *objeto clase* de ``C``. "
"Por ejemplo.::"

#: ../Doc/library/typing.rst:751
msgid "Note that ``Type[C]`` is covariant::"
msgstr "Nótese que ``Type[C]`` es covariante::"

#: ../Doc/library/typing.rst:763
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""
"El hecho de que ``Type[C]`` sea covariante implica que todas las subclases "
"de ``C`` deben implementar la misma interfaz del constructor y las mismas "
"interfaces de los métodos de clase que ``C``. El validador de tipos marcará "
"cualquier incumplimiento de esto, pero permitirá llamadas al constructor que "
"coincida con la llamada al constructor de la clase base indicada. El modo en "
"que el validador de tipos debe gestionar este caso particular podría cambiar "
"en futuras revisiones de :pep:`484`."

#: ../Doc/library/typing.rst:771
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""
"Lo únicos parámetros válidos de :class:`Type` son clases, :data:`Any`, :ref:"
"`type variables <generics>`, y uniones de cualquiera de los tipos "
"anteriores. Por ejemplo::"

#: ../Doc/library/typing.rst:777
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr ""
"``Type[Any]`` es equivalente a ``Type``, que a su vez es equivalente a "
"``type``, que es la raíz de la jerarquía de metaclases de Python."

#: ../Doc/library/typing.rst:782
msgid ""
":class:`builtins.type <type>` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` ahora soporta ``[]``. Véase :pep:`585` y :ref:"
"`types-genericalias`."

#: ../Doc/library/typing.rst:788
msgid ""
"A type that can be used to indicate to type checkers that the corresponding "
"variable or function parameter has a value equivalent to the provided "
"literal (or one of several literals). For example::"
msgstr ""
"Un tipo que puede ser utilizado para indicar a los validadores de tipos que "
"una variable o un parámetro de una función tiene un valor equivalente al "
"valor literal proveído (o uno de los proveídos). Por ejemplo::"

#: ../Doc/library/typing.rst:802
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` no puede ser derivado. En tiempo de ejecución, se permite "
"un valor arbitrario como argumento de tipo de ``Literal[...]``, pero los "
"validadores de tipos pueden imponer sus restricciones. Véase :pep:`585` para "
"más detalles sobre tipos literales."

#: ../Doc/library/typing.rst:808
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` ahora elimina los parámetros duplicados. Las comparaciones de "
"igualdad de los objetos ``Literal`` ya no dependen del orden. Los objetos "
"``Literal`` ahora lanzarán una excepción :exc:`TypeError` durante las "
"comparaciones de igualdad si uno de sus parámetros no es :term:`hashable`."

#: ../Doc/library/typing.rst:816
msgid "Special type construct to mark class variables."
msgstr "Construcción especial para tipado para marcar variables de clase."

# Puede haber una entrada mejor para "As introduced"
#: ../Doc/library/typing.rst:818
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""
"Tal y como introduce :pep:`526`, una anotación de variable rodeada por "
"ClassVar indica que la intención de un atributo dado es ser usado como "
"variable de clase y que no debería ser modificado en las instancias de esa "
"misma clase. Uso::"

# subscribed se substituye por niveles de subindice
#: ../Doc/library/typing.rst:826
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""
":data:`ClassVar` solo acepta tipos y no admite más niveles de subíndices."

#: ../Doc/library/typing.rst:828
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` no es un clase en sí misma, y no debe ser usado con :func:"
"`isinstance` o :func:`issubclass`. :data:`ClassVar` no modifica el "
"comportamiento de Python en tiempo de ejecución pero puede ser utilizado por "
"validadores de terceros. Por ejemplo, un validador de tipos puede marcar el "
"siguiente código como erróneo::"

#: ../Doc/library/typing.rst:842
msgid ""
"A special typing construct to indicate to type checkers that a name cannot "
"be re-assigned or overridden in a subclass. For example::"
msgstr ""
"Un construcción especial para tipado que indica a los validadores de tipo "
"que un nombre no puede ser reasignado o sobrescrito en una subclase. Por "
"ejemplo::"

#: ../Doc/library/typing.rst:854 ../Doc/library/typing.rst:1949
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""
"No hay comprobación en tiempo de ejecución para estas propiedades. Véase :"
"pep:`591` para más detalles."

#: ../Doc/library/typing.rst:861
msgid ""
"A type, introduced in :pep:`593` (``Flexible function and variable "
"annotations``), to decorate existing types with context-specific metadata "
"(possibly multiple pieces of it, as ``Annotated`` is variadic). "
"Specifically, a type ``T`` can be annotated with metadata ``x`` via the "
"typehint ``Annotated[T, x]``. This metadata can be used for either static "
"analysis or at runtime. If a library (or tool) encounters a typehint "
"``Annotated[T, x]`` and has no special logic for metadata ``x``, it should "
"ignore it and simply treat the type as ``T``. Unlike the ``no_type_check`` "
"functionality that currently exists in the ``typing`` module which "
"completely disables typechecking annotations on a function or a class, the "
"``Annotated`` type allows for both static typechecking of ``T`` (e.g., via "
"mypy or Pyre, which can safely ignore ``x``) together with runtime access to "
"``x`` within a specific application."
msgstr ""
"Un tipo introducido en :pep:`593` (``Anotaciones flexibles de función y "
"variable``), para decorar tipos existentes con metadatos específicos del "
"contexto (posiblemente múltiples partes del mismo, ya que ``Annotated`` es "
"variádico). En concreto, un tipo ``T`` puede ser anotado con el metadato "
"``x`` a través del *typehint* ``Annotated[T,x]``. Estos metadatos se pueden "
"utilizar para el análisis estático o en tiempo de ejecución. Si una librería "
"(o herramienta) encuentra un *typehint* ``Annotated[T,x]`` y no encuentra "
"una lógica especial para el metadato ``x``, este debería ignorarlo o "
"simplemente tratar el tipo como ``T``. A diferencia de la funcionalidad "
"``no_type_check``, que actualmente existe en el módulo ``typing``, que "
"deshabilita completamente la comprobación de anotaciones de tipo en una "
"función o clase, el tipo ``Annotated`` permite tanto la comprobación de "
"tipos estático de ``T`` (por ejemplo, *mypy* o *Pyre*, el cuál ignoraría "
"``x`` de forma segura) en conjunto con el acceso a ``x`` en tiempo de "
"ejecución dentro de una aplicación específica."

#: ../Doc/library/typing.rst:875
msgid ""
"Ultimately, the responsibility of how to interpret the annotations (if at "
"all) is the responsibility of the tool or library encountering the "
"``Annotated`` type. A tool or library encountering an ``Annotated`` type can "
"scan through the annotations to determine if they are of interest (e.g., "
"using ``isinstance()``)."
msgstr ""
"En última instancia, la responsabilidad de cómo interpretar las anotaciones "
"(si es que la hay) es de la herramienta o librería que encuentra el tipo "
"``Annotated``. Una herramienta o librería que encuentra un tipo "
"``Annotated`` puede escanear las anotaciones para determinar si son de "
"interés. (por ejemplo, usando ``isinstance()``)."

#: ../Doc/library/typing.rst:881
msgid ""
"When a tool or a library does not support annotations or encounters an "
"unknown annotation it should just ignore it and treat annotated type as the "
"underlying type."
msgstr ""
"Cuando una herramienta o librería no soporta anotaciones o encuentra una "
"anotación desconocida, simplemente debe ignorarla o tratar la anotación como "
"el tipo subyacente."

#: ../Doc/library/typing.rst:885
msgid ""
"It's up to the tool consuming the annotations to decide whether the client "
"is allowed to have several annotations on one type and how to merge those "
"annotations."
msgstr ""
"Depende de la herramienta que consume las anotaciones decidir si el cliente "
"puede tener varias anotaciones en un tipo y cómo combinar esas anotaciones."

#: ../Doc/library/typing.rst:889
msgid ""
"Since the ``Annotated`` type allows you to put several annotations of the "
"same (or different) type(s) on any node, the tools or libraries consuming "
"those annotations are in charge of dealing with potential duplicates. For "
"example, if you are doing value range analysis you might allow this::"
msgstr ""
"Dado que el tipo ``Annotated`` permite colocar varias anotaciones del mismo "
"(o diferente) tipo(s) en cualquier nodo, las herramientas o librerías que "
"consumen dichas anotaciones están a cargo de ocuparse de potenciales "
"duplicados. Por ejemplo, si se está realizando un análisis de rango, esto se "
"debería permitir::"

#: ../Doc/library/typing.rst:898
msgid ""
"Passing ``include_extras=True`` to :func:`get_type_hints` lets one access "
"the extra annotations at runtime."
msgstr ""
"Pasar ``include_extras=True`` a :func:`get_type_hints` permite acceder a las "
"anotaciones extra en tiempo de ejecución."

#: ../Doc/library/typing.rst:901
msgid "The details of the syntax:"
msgstr "Los detalles de la sintaxis:"

#: ../Doc/library/typing.rst:903
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr "El primer argumento en ``Annotated`` debe ser un tipo válido"

#: ../Doc/library/typing.rst:905
msgid ""
"Multiple type annotations are supported (``Annotated`` supports variadic "
"arguments)::"
msgstr ""
"Se permiten varias anotaciones de tipo (``Annotated`` admite argumentos "
"variádicos)::"

#: ../Doc/library/typing.rst:910
msgid ""
"``Annotated`` must be called with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""
"``Annotated`` debe ser llamado con al menos dos argumentos "
"(``Annotated[int]`` no es válido)"

#: ../Doc/library/typing.rst:913
msgid ""
"The order of the annotations is preserved and matters for equality checks::"
msgstr ""
"Se mantiene el orden de las anotaciones y se toma en cuenta para chequeos de "
"igualdad::"

#: ../Doc/library/typing.rst:920
msgid ""
"Nested ``Annotated`` types are flattened, with metadata ordered starting "
"with the innermost annotation::"
msgstr ""
"Los tipos ``Annotated`` anidados son aplanados con los metadatos ordenados "
"empezando por la anotación más interna::"

#: ../Doc/library/typing.rst:927
msgid "Duplicated annotations are not removed::"
msgstr "Anotaciones duplicadas no son removidas::"

#: ../Doc/library/typing.rst:933
msgid "``Annotated`` can be used with nested and generic aliases::"
msgstr "``Anotated`` puede ser usado con alias anidados y genéricos::"

#: ../Doc/library/typing.rst:946
msgid ""
"Special typing form used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""
"Formulario de mecanografía especial utilizado para anotar el tipo de retorno "
"de una función de protección de tipo definida por el usuario. ``TypeGuard`` "
"solo acepta un argumento de tipo único. En tiempo de ejecución, las "
"funciones marcadas de esta manera deberían retornar un booleano."

#: ../Doc/library/typing.rst:950
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""
"``TypeGuard`` tiene como objetivo beneficiar a *type narrowing*, una técnica "
"utilizada por los verificadores de tipo estático para determinar un tipo más "
"preciso de una expresión dentro del flujo de código de un programa. Por lo "
"general, el estrechamiento de tipos se realiza analizando el flujo de código "
"condicional y aplicando el estrechamiento a un bloque de código. La "
"expresión condicional aquí a veces se denomina \"protección de tipo\":"

#: ../Doc/library/typing.rst:965
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""
"A veces sería conveniente utilizar una función booleana definida por el "
"usuario como protección de tipos. Dicha función debería usar "
"``TypeGuard[...]`` como su tipo de retorno para alertar a los verificadores "
"de tipo estático sobre esta intención."

#: ../Doc/library/typing.rst:969
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""
"El uso de ``-> TypeGuard`` le dice al verificador de tipo estático que para "
"una función determinada:"

#: ../Doc/library/typing.rst:972
msgid "The return value is a boolean."
msgstr "El valor de retorno es un booleano."

#: ../Doc/library/typing.rst:973
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""
"Si el valor de retorno es ``True``, el tipo de su argumento es el tipo "
"dentro de ``TypeGuard``."

#: ../Doc/library/typing.rst:990
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""
"Si ``is_str_list`` es un método de clase o instancia, entonces el tipo en "
"``TypeGuard`` se asigna al tipo del segundo parámetro después de ``cls`` o "
"``self``."

#: ../Doc/library/typing.rst:994
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""
"En resumen, la forma ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...`` "
"significa que si ``foo(arg)`` retorna ``True``, entonces ``arg`` se estrecha "
"de ``TypeA`` a ``TypeB``."

#: ../Doc/library/typing.rst:1000
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``List[object]`` "
"to ``List[str]`` even though the latter is not a subtype of the former, "
"since ``List`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""
"No es necesario que ``TypeB`` sea una forma más estrecha de ``TypeA``; "
"incluso puede ser una forma más amplia. La razón principal es permitir cosas "
"como reducir ``List[object]`` a ``List[str]`` aunque este último no sea un "
"subtipo del primero, ya que ``List`` es invariante. La responsabilidad de "
"escribir protecciones de tipo seguro se deja al usuario."

#: ../Doc/library/typing.rst:1006
msgid ""
"``TypeGuard`` also works with type variables.  For more information, see :"
"pep:`647` (User-Defined Type Guards)."
msgstr ""
"``TypeGuard`` también funciona con variables de tipo. Para obtener más "
"información, consulte :pep:`647` (protectores de tipo definidos por el "
"usuario)."

#: ../Doc/library/typing.rst:1013
msgid "Building generic types"
msgstr "Tipos de construcción de genéricos"

#: ../Doc/library/typing.rst:1015
msgid ""
"These are not used in annotations. They are building blocks for creating "
"generic types."
msgstr ""
"Estos no son utilizados en anotaciones. Son utilizados como bloques para "
"crear tipos genéricos."

#: ../Doc/library/typing.rst:1019
msgid "Abstract base class for generic types."
msgstr "Clase base abstracta para tipos genéricos."

#: ../Doc/library/typing.rst:1021
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""
"Un tipo genérico se declara habitualmente heredando de una instancia de esta "
"clase con una o más variables de tipo. Por ejemplo, un tipo de mapeo "
"genérico se podría definir como::"

#: ../Doc/library/typing.rst:1030
msgid "This class can then be used as follows::"
msgstr "Entonces, esta clase se puede usar como sigue::"

#: ../Doc/library/typing.rst:1043
msgid "Type variable."
msgstr "Variable de tipo."

#: ../Doc/library/typing.rst:1045 ../Doc/library/typing.rst:1084
#: ../Doc/library/typing.rst:1261
msgid "Usage::"
msgstr "Uso::"

#: ../Doc/library/typing.rst:1050
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See :class:`Generic` for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""
"Las variables de tipo son principalmente para ayudar a los validadores "
"estáticos de tipos. Sirven tanto como de parámetros para tipos genéricos "
"como para definición de funciones genéricas. Véase :class:`Generic` para más "
"información sobre tipos genéricos. Las funciones genéricas funcionan de la "
"siguiente manera::"

#: ../Doc/library/typing.rst:1063
msgid ""
"The latter example's signature is essentially the overloading of ``(str, "
"str) -> str`` and ``(bytes, bytes) -> bytes``.  Also note that if the "
"arguments are instances of some subclass of :class:`str`, the return type is "
"still plain :class:`str`."
msgstr ""
"La signatura de los ejemplos anteriores es esencialmente la superposición de "
"``(str, str) -> str`` y ``(bytes, bytes) -> bytes``. Nótese también que "
"aunque los argumentos sean instancias de alguna subclase de :class:`str`, el "
"tipo retornado aún será una simple :class:`str`."

#: ../Doc/library/typing.rst:1068
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, :"
"func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""
"En tiempo de ejecución, ``isinstance(x, T)`` lanzará una excepción  :exc:"
"`TypeError`.  En general, :func:`isinstance` y :func:`issubclass` no se "
"deben usar con variables de tipo."

#: ../Doc/library/typing.rst:1071
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default type variables are invariant.  Alternatively, a type "
"variable may specify an upper bound using ``bound=<type>``. This means that "
"an actual type substituted (explicitly or implicitly) for the type variable "
"must be a subclass of the boundary type, see :pep:`484`."
msgstr ""
"Las variables de tipo pueden ser marcadas como covariantes o contravariantes "
"pasando ``covariant=True`` o ``contravariant=True``, respectivamente. Véase :"
"pep:`484` para más detalles. Por defecto, las variables de tipo son "
"invariantes. Opcionalmente, una variable de tipo puede especificar un límite "
"superior usando ``bound=<type>``. Esto significa que el tipo (explícitamente "
"o implícitamente) tiene que ser una subclase del tipo limite, véase :pep:"
"`484`."

#: ../Doc/library/typing.rst:1081
msgid ""
"Parameter specification variable.  A specialized version of :class:`type "
"variables <TypeVar>`."
msgstr ""
"Variable de especificación de parámetros. Una versión especializada de :"
"class:`type variables <TypeVar>`."

#: ../Doc/library/typing.rst:1088
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""
"Las variables de especificación de parámetros existen principalmente para el "
"beneficio de los verificadores de tipo estático. Se utilizan para reenviar "
"los tipos de parámetros de un invocable a otro invocable, un patrón que se "
"encuentra comúnmente en funciones y decoradores de orden superior. Solo son "
"válidos cuando se utilizan en ``Concatenate``, o como primer argumento de "
"``Callable``, o como parámetros para genéricos definidos por el usuario. "
"Consulte :class:`Generic` para obtener más información sobre tipos genéricos."

#: ../Doc/library/typing.rst:1095
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""
"Por ejemplo, para agregar un registro básico a una función, se puede crear "
"un decorador ``add_logging`` para registrar llamadas a funciones. La "
"variable de especificación de parámetros le dice al verificador de tipo que "
"el invocable pasado al decorador y el nuevo invocable retornado por él "
"tienen parámetros de tipo interdependientes:"

#: ../Doc/library/typing.rst:1119
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""
"Sin ``ParamSpec``, la forma más sencilla de anotar esto anteriormente era "
"usar un :class:`TypeVar` con ``Callable[..., Any]`` enlazado. Sin embargo, "
"esto causa dos problemas:"

#: ../Doc/library/typing.rst:1123
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""
"El verificador de tipo no puede verificar la función ``inner`` porque "
"``*args`` y ``**kwargs`` deben escribirse :data:`Any`."

#: ../Doc/library/typing.rst:1125
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""
"Es posible que se requiera :func:`~cast` en el cuerpo del decorador "
"``add_logging`` al retornar la función ``inner``, o se debe indicar al "
"verificador de tipo estático que ignore el ``return inner``."

#: ../Doc/library/typing.rst:1132
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""
"Dado que ``ParamSpec`` captura tanto parámetros posicionales como de "
"palabras clave, ``P.args`` y ``P.kwargs`` se pueden utilizar para dividir un "
"``ParamSpec`` en sus componentes. ``P.args`` representa la tupla de "
"parámetros posicionales en una llamada determinada y solo debe usarse para "
"anotar ``*args``. ``P.kwargs`` representa la asignación de parámetros de "
"palabras clave a sus valores en una llamada determinada y solo debe usarse "
"para anotar ``**kwargs``. Ambos atributos requieren que el parámetro anotado "
"esté dentro del alcance. En tiempo de ejecución, ``P.args`` y ``P.kwargs`` "
"son instancias respectivamente de :class:`ParamSpecArgs` y :class:"
"`ParamSpecKwargs`."

#: ../Doc/library/typing.rst:1142
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""
"Las variables de especificación de parámetros creadas con ``covariant=True`` "
"o ``contravariant=True`` se pueden utilizar para declarar tipos genéricos "
"covariantes o contravariantes. También se acepta el argumento ``bound``, "
"similar a :class:`TypeVar`. Sin embargo, la semántica real de estas palabras "
"clave aún no se ha decidido."

#: ../Doc/library/typing.rst:1151
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""
"Solo las variables de especificación de parámetros definidas en el ámbito "
"global pueden ser serializadas."

#: ../Doc/library/typing.rst:1157
msgid ":class:`Callable` and :class:`Concatenate`."
msgstr ":class:`Callable` y :class:`Concatenate`."

#: ../Doc/library/typing.rst:1162
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""
"Argumentos y atributos de argumentos de palabras clave de un :class:"
"`ParamSpec`. El atributo ``P.args`` de un ``ParamSpec`` es una instancia de "
"``ParamSpecArgs`` y ``P.kwargs`` es una instancia de ``ParamSpecKwargs``. "
"Están pensados para la introspección en tiempo de ejecución y no tienen un "
"significado especial para los verificadores de tipo estático."

#: ../Doc/library/typing.rst:1167
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``::"
msgstr ""
"Llamar a :func:`get_origin` en cualquiera de estos objetos retornará el "
"``ParamSpec`` original:"

#: ../Doc/library/typing.rst:1179
msgid ""
"``AnyStr`` is a type variable defined as ``AnyStr = TypeVar('AnyStr', str, "
"bytes)``."
msgstr ""
"``AnyStr`` es una variable de tipo definida como ``AnyStr = "
"TypeVar('AnyStr', str, bytes)``."

#: ../Doc/library/typing.rst:1182
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr ""
"Su objetivo es ser usada por funciones que pueden aceptar cualquier tipo de "
"cadena de texto sin permitir mezclar diferentes tipos al mismo tiempo. Por "
"ejemplo::"

#: ../Doc/library/typing.rst:1194
msgid ""
"Base class for protocol classes. Protocol classes are defined like this::"
msgstr ""
"Clase base para clases protocolo. Las clases protocolo se definen así::"

#: ../Doc/library/typing.rst:1200
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""
"Tales clases son usadas principalmente con validadores estáticos de tipos "
"que detectan subtipado estructural (*duck-typing* estático), por ejemplo::"

#: ../Doc/library/typing.rst:1212
msgid ""
"See :pep:`544` for details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""
"Véase :pep:`544` para más detalles. Las clases protocolo decoradas con :func:"
"`runtime_checkable` (que se explica más adelante) se comportan como "
"protocolos simplistas en tiempo de ejecución que solo comprueban la "
"presencia de atributos dados, ignorando su firma de tipo."

#: ../Doc/library/typing.rst:1217
msgid "Protocol classes can be generic, for example::"
msgstr "Las clases protocolo pueden ser genéricas, por ejemplo::"

#: ../Doc/library/typing.rst:1227
msgid "Mark a protocol class as a runtime protocol."
msgstr ""
"Marca una clase protocolo como aplicable en tiempo de ejecución (lo "
"convierte en un *runtime protocol*)."

#: ../Doc/library/typing.rst:1229
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick ponies"
"\" in :mod:`collections.abc` such as :class:`~collections.abc.Iterable`.  "
"For example::"
msgstr ""
"Tal protocolo se puede usar con :func:`isinstance` y :func:`issubclass`. "
"Esto lanzará una excepción :exc:`TypeError` cuando se aplique a una clase "
"que no es un protocolo. Esto permite una comprobación estructural simple, "
"muy semejante a \"one trick ponies\" en :mod:`collections.abc` con :class:"
"`Iterable`. Por ejemplo::"

#: ../Doc/library/typing.rst:1242
msgid ""
":func:`runtime_checkable` will check only the presence of the required "
"methods, not their type signatures. For example, :class:`ssl.SSLObject` is a "
"class, therefore it passes an :func:`issubclass` check against :data:"
"`Callable`.  However, the :meth:`ssl.SSLObject.__init__` method exists only "
"to raise a :exc:`TypeError` with a more informative message, therefore "
"making it impossible to call (instantiate) :class:`ssl.SSLObject`."
msgstr ""
":func:`runtime_checkable` verificará solo la presencia de los métodos "
"requeridos, no sus firmas de tipo. Por ejemplo, :class:`ssl.SSLObject` es "
"una clase, por lo que pasa una verificación :func:`issubclass` contra :data:"
"`Callable`. Sin embargo, el método :meth:`ssl.SSLObject.__init__` existe "
"solo para lanzar un :exc:`TypeError` con un mensaje más informativo, por lo "
"que es imposible llamar (instanciar) :class:`ssl.SSLObject`."

#: ../Doc/library/typing.rst:1253
msgid "Other special directives"
msgstr "Otras directivas especiales"

#: ../Doc/library/typing.rst:1255
msgid ""
"These are not used in annotations. They are building blocks for declaring "
"types."
msgstr ""
"Estos no son utilizados en anotaciones. Son utilizados como bloques para "
"crear tipos genéricos."

#: ../Doc/library/typing.rst:1259
msgid "Typed version of :func:`collections.namedtuple`."
msgstr "Versión para anotación de tipos de :func:`collections.namedtuple`."

#: ../Doc/library/typing.rst:1267
msgid "This is equivalent to::"
msgstr "Esto es equivalente a:"

#: ../Doc/library/typing.rst:1271
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""
"Para proporcionar a un campo un valor por defecto se puede asignar en el "
"cuerpo de la clase::"

#: ../Doc/library/typing.rst:1280
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""
"Los campos con un valor por defecto deben ir después de los campos sin valor "
"por defecto."

#: ../Doc/library/typing.rst:1282
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute both of which are part of the namedtuple API.)"
msgstr ""
"La clase resultante tiene un atributo extra ``__annotations__`` que "
"proporciona un diccionario que mapea el nombre de los campos con su tipo. "
"(Lo nombres de los campo están en el atributo ``_fields`` y sus valores por "
"defecto en el atributo ``_field_defaults``, ambos parte de la API de "
"namedtuple.)"

#: ../Doc/library/typing.rst:1288
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr ""
"Las subclases de ``NamedTuple`` también pueden tener *docstrings* y métodos::"

#: ../Doc/library/typing.rst:1298
msgid "Backward-compatible usage::"
msgstr "Uso retrocompatible::"

#: ../Doc/library/typing.rst:1302
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ""
"Soporte añadido para la sintaxis de anotación de variables propuesto en :pep:"
"`526`."

#: ../Doc/library/typing.rst:1305
msgid "Added support for default values, methods, and docstrings."
msgstr "Soporte añadido para valores por defecto, métodos y *docstrings*."

#: ../Doc/library/typing.rst:1308
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"Los atributos ``_field_types`` y ``__annotations__`` son simples "
"diccionarios en vez de instancias de ``OrderedDict``."

#: ../Doc/library/typing.rst:1312
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""
"Se remueve el atributo ``_field_types`` en favor del atributo más estándar "
"``__annotations__`` que tiene la misma información."

#: ../Doc/library/typing.rst:1318
msgid ""
"A helper class to indicate a distinct type to a typechecker, see :ref:"
"`distinct`. At runtime it returns an object that returns its argument when "
"called. Usage::"
msgstr ""
"Una clase auxiliar para indicar un tipo diferenciado a un comprobador de "
"tipos, consulte :ref:`distinct`. En tiempo de ejecución, retorna un objeto "
"que retorna su argumento cuando se llama. Uso::"

#: ../Doc/library/typing.rst:1328
msgid "``NewType`` is now a class rather than a function."
msgstr "``NewType`` es ahora una clase en lugar de una función."

#: ../Doc/library/typing.rst:1333
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""
"Es una construcción especial para añadir indicadores de tipo a un "
"diccionario. En tiempo de ejecución es un :class:`dict` simple."

# sinonimo para imposicion/imponer
#: ../Doc/library/typing.rst:1336
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""
"``TypedDict`` crea un tipo de diccionario que espera que todas sus "
"instancias tenga un cierto conjunto de claves, donde cada clave está "
"asociada con un valor de un tipo determinado. Esta exigencia no se comprueba "
"en tiempo de ejecución y solo es aplicada por validadores de tipo. Uso::"

#: ../Doc/library/typing.rst:1352
msgid ""
"The type info for introspection can be accessed via ``Point2D."
"__annotations__``, ``Point2D.__total__``, ``Point2D.__required_keys__``, and "
"``Point2D.__optional_keys__``. To allow using this feature with older "
"versions of Python that do not support :pep:`526`, ``TypedDict`` supports "
"two additional equivalent syntactic forms::"
msgstr ""
"Se puede acceder a la información de tipo para la introspección a través de "
"``Point2D.__annotations__``, ``Point2D.__total__``, ``Point2D."
"__required_keys__`` y ``Point2D.__optional_keys__``. Para permitir el uso de "
"esta función con versiones anteriores de Python que no son compatibles con :"
"pep:`526`, ``TypedDict`` admite dos formas sintácticas equivalentes "
"adicionales:"

#: ../Doc/library/typing.rst:1362
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"override this by specifying totality. Usage::"
msgstr ""
"De forma predeterminada, todas las claves deben estar presentes en un "
"``TypedDict``. Es posible anular esto especificando la totalidad. Uso::"

#: ../Doc/library/typing.rst:1370
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""
"Esto significa que un ``Point2D`` ``TypedDict`` puede tener cualquiera de "
"las claves omitidas. Solo se espera que un verificador de tipo admita un "
"``False`` literal o ``True`` como valor del argumento ``total``. ``True`` es "
"el predeterminado y hace que todos los elementos definidos en el cuerpo de "
"la clase sean obligatorios."

#: ../Doc/library/typing.rst:1375
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""
"Véase :pep:`589` para más ejemplos y reglas detalladas del uso de "
"``TypedDict``."

#: ../Doc/library/typing.rst:1380
msgid "Generic concrete collections"
msgstr "Colecciones genéricas concretas"

#: ../Doc/library/typing.rst:1383
msgid "Corresponding to built-in types"
msgstr "Correspondientes a tipos integrados"

#: ../Doc/library/typing.rst:1387
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ""
"Una versión genérica de :class:`dict`. Útil para anotar tipos de retorno. "
"Para anotar argumentos es preferible usar un tipo abstracto de colección "
"como :class:`Mapping`."

#: ../Doc/library/typing.rst:1391
msgid "This type can be used as follows::"
msgstr "Este tipo se puede usar de la siguiente manera::"

#: ../Doc/library/typing.rst:1396
msgid ""
":class:`builtins.dict <dict>` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""
":class:`builtins.dict <dict>` ahora soporta ``[]``. Véase :pep:`585` y :ref:"
"`types-genericalias`."

#: ../Doc/library/typing.rst:1402
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ""
"Versión genérica de :class:`list`. Útil para anotar tipos de retorno. Para "
"anotar argumentos es preferible usar un tipo abstracto de colección como  :"
"class:`Sequence` o :class:`Iterable`."

#: ../Doc/library/typing.rst:1407
msgid "This type may be used as follows::"
msgstr "Este tipo se puede usar del siguiente modo::"

#: ../Doc/library/typing.rst:1417
msgid ""
":class:`builtins.list <list>` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` ahora soporta ``[]``. Véase :pep:`585` y :ref:"
"`types-genericalias`."

#: ../Doc/library/typing.rst:1423
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""
"Una versión genérica de :class:`builtins.set <set>`. Útil para anotar tipos "
"de retornos. Para anotar argumentos es preferible usar un tipo abstracto de "
"colección como :class:`AbstractSet`."

#: ../Doc/library/typing.rst:1427
msgid ""
":class:`builtins.set <set>` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""
":class:`builtins.set <set>` ahora soporta ``[]``. Véase :pep:`585` y :ref:"
"`types-genericalias`."

#: ../Doc/library/typing.rst:1433
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr "Una versión genérica de :class:`builtins.frozenset <frozenset>`."

#: ../Doc/library/typing.rst:1435
msgid ""
":class:`builtins.frozenset <frozenset>` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` ahora soporta ``[]``. Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1439
msgid ":data:`Tuple` is a special form."
msgstr ":data:`Tuple` es una forma especial."

#: ../Doc/library/typing.rst:1442
msgid "Corresponding to types in :mod:`collections`"
msgstr "Correspondiente a tipos en :mod:`collections`"

#: ../Doc/library/typing.rst:1446
msgid "A generic version of :class:`collections.defaultdict`."
msgstr "Una versión genérica de :class:`collections.defaultdict`."

#: ../Doc/library/typing.rst:1450
msgid ""
":class:`collections.defaultdict` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1456
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr "Una versión genérica de :class:`collections.OrderedDict`."

#: ../Doc/library/typing.rst:1460
msgid ""
":class:`collections.OrderedDict` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1466
msgid "A generic version of :class:`collections.ChainMap`."
msgstr "Una versión genérica de :class:`collections.ChainMap`."

#: ../Doc/library/typing.rst:1471
msgid ""
":class:`collections.ChainMap` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` ahora soporta ``[]``. Véase :pep:`585` y :ref:"
"`types-genericalias`."

#: ../Doc/library/typing.rst:1477
msgid "A generic version of :class:`collections.Counter`."
msgstr "Una versión genérica de :class:`collections.Counter`."

#: ../Doc/library/typing.rst:1482
msgid ""
":class:`collections.Counter` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""
":class:`collections.Counter` ahora soporta ``[]``. Véase :pep:`585` y :ref:"
"`types-genericalias`."

#: ../Doc/library/typing.rst:1488
msgid "A generic version of :class:`collections.deque`."
msgstr "Una versión genérica de :class:`collections.deque`."

#: ../Doc/library/typing.rst:1493
msgid ""
":class:`collections.deque` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""
":class:`collections.deque` ahora soporta ``[]``. Véase :pep:`585` y :ref:"
"`types-genericalias`."

#: ../Doc/library/typing.rst:1498
msgid "Other concrete types"
msgstr "Otros tipos concretos"

#: ../Doc/library/typing.rst:1504
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""
"El tipo genérico ``IO[AnyStr]`` y sus subclases ``TextIO(IO[str])`` y "
"``BinaryIO(IO[bytes])`` representan los tipos de flujos de E/S como los "
"retornados por :func:`open`."

#: ../Doc/library/typing.rst:1511
msgid ""
"The ``typing.io`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""
"El espacio de nombres ``typing.io`` está obsoleto y se eliminará. En su "
"lugar, estos tipos deben importarse directamente desde ``typing``."

#: ../Doc/library/typing.rst:1516
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``."
msgstr ""
"Estos alias de tipo corresponden a los tipos retornados de :func:`re."
"compile` y :func:`re.match`. Estos tipos (y las funciones correspondientes) "
"son genéricos en ``AnyStr`` y se pueden hacer específicos escribiendo "
"``Pattern[str]``, ``Pattern[bytes]``, ``Match[str]`` o ``Match[bytes]``."

#: ../Doc/library/typing.rst:1526
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""
"El espacio de nombres ``typing.re`` está obsoleto y se eliminará. En su "
"lugar, estos tipos deben importarse directamente desde ``typing``."

#: ../Doc/library/typing.rst:1527
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
"Las clases ``Pattern`` y ``Match`` de :mod:`re` ahora soportan ``[]``. "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1533
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""
"``Text`` es un alias para ``str``. Ésta disponible para proporcionar un "
"mecanismo compatible hacia delante para código en Python 2: en Python 2, "
"``Text`` es un alias de ``unicode``."

#: ../Doc/library/typing.rst:1537
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""
"Úsese ``Text`` para indicar que un valor debe contener una cadena de texto "
"Unicode de manera que sea compatible con Python 2 y Python 3::"

#: ../Doc/library/typing.rst:1546
msgid "Abstract Base Classes"
msgstr "Clase base abstracta para tipos genéricos"

#: ../Doc/library/typing.rst:1549
msgid "Corresponding to collections in :mod:`collections.abc`"
msgstr "Correspondientes a las colecciones en :mod:`collections.abc`"

#: ../Doc/library/typing.rst:1553
msgid "A generic version of :class:`collections.abc.Set`."
msgstr "Una versión genérica de :class:`collections.abc.Set`."

#: ../Doc/library/typing.rst:1555
msgid ""
":class:`collections.abc.Set` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` ahora soporta ``[]``. Véase :pep:`585` y :ref:"
"`types-genericalias`."

#: ../Doc/library/typing.rst:1561
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr "Una versión genérica de :class:`collections.abc.ByteString`."

#: ../Doc/library/typing.rst:1563
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""
"Este tipo representa a los tipos :class:`bytes`, :class:`bytearray`, y :"
"class:`memoryview` de secuencias de bytes."

#: ../Doc/library/typing.rst:1566
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr ""
"Como abreviación para este tipo, :class:`bytes` se puede usar para anotar "
"argumentos de cualquiera de los tipos mencionados arriba."

#: ../Doc/library/typing.rst:1569
msgid ""
":class:`collections.abc.ByteString` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ByteString` ahora soporta ``[]``. Véase :pep:`585` "
"y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1575
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr "Una versión genérica de :class:`collections.abc.Collection`"

#: ../Doc/library/typing.rst:1579
msgid ""
":class:`collections.abc.Collection` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` ahora soporta ``[]``. Véase :pep:`585` "
"y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1585
msgid "A generic version of :class:`collections.abc.Container`."
msgstr "Una versión genérica de :class:`collections.abc.Container`."

#: ../Doc/library/typing.rst:1587
msgid ""
":class:`collections.abc.Container` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1593
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr "Una versión genérica de :class:`collections.abc.ItemsView`."

#: ../Doc/library/typing.rst:1595
msgid ""
":class:`collections.abc.ItemsView` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1601
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr "Una versión genérica de :class:`collections.abc.KeysView`."

#: ../Doc/library/typing.rst:1603
msgid ""
":class:`collections.abc.KeysView` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1609
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used "
"as follows::"
msgstr ""
"Una versión genérica de :class:`collections.abc.Mapping`. Este tipo se puede "
"usar de la siguiente manera::"

#: ../Doc/library/typing.rst:1615
msgid ""
":class:`collections.abc.Mapping` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1621
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr "Una versión genérica de :class:`collections.abc.MappingView`."

#: ../Doc/library/typing.rst:1623
msgid ""
":class:`collections.abc.MappingView` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` ahora soporta ``[]``. Véase :pep:`585` "
"y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1629
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr "Una versión genérica de :class:`collections.abc.MutableMapping`."

#: ../Doc/library/typing.rst:1631
msgid ""
":class:`collections.abc.MutableMapping` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` ahora soporta ``[]``. Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1637
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr "Una versión genérica de :class:`collections.abc.MutableSequence`."

#: ../Doc/library/typing.rst:1639
msgid ""
":class:`collections.abc.MutableSequence` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` ahora soporta ``[]``. Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1645
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr "Una versión genérica de :class:`collections.abc.MutableSet`."

#: ../Doc/library/typing.rst:1647
msgid ""
":class:`collections.abc.MutableSet` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` ahora soporta ``[]``. Véase :pep:`585` "
"y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1653
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr "Una versión genérica de :class:`collections.abc.Sequence`."

#: ../Doc/library/typing.rst:1655
msgid ""
":class:`collections.abc.Sequence` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1661
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr "Una versión genérica de :class:`collections.abc.ValuesView`."

#: ../Doc/library/typing.rst:1663
msgid ""
":class:`collections.abc.ValuesView` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` ahora soporta ``[]``. Véase :pep:`585` "
"y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1668
msgid "Corresponding to other types in :mod:`collections.abc`"
msgstr "Correspondiente a otros tipos en :mod:`collections.abc`"

#: ../Doc/library/typing.rst:1672
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr "Una versión genérica de :class:`collections.abc.Iterable`."

#: ../Doc/library/typing.rst:1674
msgid ""
":class:`collections.abc.Iterable` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1680
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr "Una versión genérica de :class:`collections.abc.Iterator`."

#: ../Doc/library/typing.rst:1682
msgid ""
":class:`collections.abc.Iterator` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1688
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""
"Un generador puede ser anotado con el tipo genérico ``Generator[YieldType, "
"SendType, ReturnType]``. Por ejemplo::"

#: ../Doc/library/typing.rst:1697
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""
"Nótese que en contraste con muchos otros genéricos en el módulo *typing*, el "
"``SendType`` de :class:`Generator` se comporta como contravariante, no "
"covariante ni invariante."

#: ../Doc/library/typing.rst:1701
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""
"Si tu generador solo retornará valores con *yield*, establece ``SendType`` y "
"``ReturnType`` como ``None``::"

#: ../Doc/library/typing.rst:1709
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""
"Opcionalmente, anota tu generador con un tipo de retorno de "
"``Iterable[YieldType]`` o ``Iterator[YieldType]``::"

#: ../Doc/library/typing.rst:1717
msgid ""
":class:`collections.abc.Generator` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1723
msgid "An alias to :class:`collections.abc.Hashable`"
msgstr "Un alias de :class:`collections.abc.Hashable`"

#: ../Doc/library/typing.rst:1727
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr "Una versión genérica de :class:`collections.abc.Reversible`."

#: ../Doc/library/typing.rst:1729
msgid ""
":class:`collections.abc.Reversible` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` ahora soporta ``[]``. Véase :pep:`585` "
"y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1735
msgid "An alias to :class:`collections.abc.Sized`"
msgstr "Un alias de :class:`collections.abc.Sized`"

#: ../Doc/library/typing.rst:1738
msgid "Asynchronous programming"
msgstr "Programación asíncrona"

#: ../Doc/library/typing.rst:1742
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""
"Una versión genérica de :class:`collections.abc.Coroutine`.y orden de las "
"variables de tipo se corresponde con aquellas de :class:`Generator`, por "
"ejemplo::"

#: ../Doc/library/typing.rst:1755
msgid ""
":class:`collections.abc.Coroutine` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1761
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""
"Un generador asíncrono se puede anotar con el tipo genérico "
"``AsyncGenerator[YieldType, SendType]``. Por ejemplo::"

#: ../Doc/library/typing.rst:1770
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""
"A diferencia de los generadores normales, los generadores asíncronos no "
"pueden retornar un valor, por lo que no hay un parámetro de "
"tipo``ReturnType``. Igual que :class:`Generator`, ``SendType`` se comporta "
"como contravariante."

#: ../Doc/library/typing.rst:1774
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""
"Si tu generador solo retornará valores con *yield*,  establece el "
"``SendType`` como ``None``::"

#: ../Doc/library/typing.rst:1782
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""
"Opcionalmente, anota el generador con un tipo de retorno "
"``AsyncIterable[YieldType]`` o ``AsyncIterator[YieldType]``::"

#: ../Doc/library/typing.rst:1792
msgid ""
":class:`collections.abc.AsyncGenerator` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsycGenerator` ahora soporta ``[]``. Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1798
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr "Una versión genérica de :class:`collections.abc.AsyncIterable`."

#: ../Doc/library/typing.rst:1802
msgid ""
":class:`collections.abc.AsyncIterable` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` ahora soporta ``[]``. Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1808
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr "Una versión genérica de :class:`collections.abc.AsyncIterator`."

#: ../Doc/library/typing.rst:1812
msgid ""
":class:`collections.abc.AsyncIterator` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` ahora soporta ``[]``. Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1818
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr "Una versión genérica de :class:`collections.abc.Awaitable`."

#: ../Doc/library/typing.rst:1822
msgid ""
":class:`collections.abc.Awaitable` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` ahora soporta ``[]``. Véase :pep:`585` y :"
"ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1828
msgid "Context manager types"
msgstr "Tipos del administrador de contextos"

#: ../Doc/library/typing.rst:1832
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr "Una versión genérica de :class:`contextlib.AbstractContextManager`."

#: ../Doc/library/typing.rst:1837
msgid ""
":class:`contextlib.AbstractContextManager` now supports ``[]``. See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` ahora soporta ``[]``. Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1843
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""
"Una versión genérica de :class:`contextlib.AbstractAsyncContextManager`."

#: ../Doc/library/typing.rst:1848
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` ahora soporta ``[]``. Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:1853
msgid "Protocols"
msgstr "Protocolos"

#: ../Doc/library/typing.rst:1855
msgid "These protocols are decorated with :func:`runtime_checkable`."
msgstr "Estos protocolos se decoran con :func:`runtime_checkable`."

#: ../Doc/library/typing.rst:1859
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""
"Una ABC con un método abstracto ``__abs__`` que es covariante en su tipo "
"retornado."

#: ../Doc/library/typing.rst:1864
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "Una ABC con un método abstracto ``__bytes__``."

#: ../Doc/library/typing.rst:1868
msgid "An ABC with one abstract method ``__complex__``."
msgstr "Una ABC con un método abstracto ``__complex__``."

#: ../Doc/library/typing.rst:1872
msgid "An ABC with one abstract method ``__float__``."
msgstr "Una ABC con un método abstracto ``__float__``."

#: ../Doc/library/typing.rst:1876
msgid "An ABC with one abstract method ``__index__``."
msgstr "Una ABC con un método abstracto ``__index__``."

#: ../Doc/library/typing.rst:1882
msgid "An ABC with one abstract method ``__int__``."
msgstr "Una ABC con un método abstracto ``__int__``."

#: ../Doc/library/typing.rst:1886
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""
"Una ABC con un método abstracto ``__round__`` que es covariantes en su tipo "
"retornado."

#: ../Doc/library/typing.rst:1890
msgid "Functions and decorators"
msgstr "Funciones y decoradores"

#: ../Doc/library/typing.rst:1894
msgid "Cast a value to a type."
msgstr "Convertir un valor a su tipo."

# el "esto" del final queda muy colgado
#: ../Doc/library/typing.rst:1896
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""
"Esto retorna el valor sin modificar. Para el validador de tipos esto indica "
"que el valor de retorno tiene el tipo señalado pero, de manera intencionada, "
"no se comprobará en tiempo de ejecución (para maximizar la velocidad)."

#: ../Doc/library/typing.rst:1903
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""
"El decorador ``@overload`` permite describir funciones y métodos que "
"soportan diferentes combinaciones de tipos de argumento. A una serie de "
"definiciones decoradas con ``@overload` debe seguir exactamente una "
"definición no decorada con ``@overload`` (para la misma función o método). "
"Las definiciones decoradas con ``@overload`` son solo para beneficio del "
"validador de tipos, ya que serán sobrescritas por la definición no decorada "
"con ``@overload``. Esta última se usa en tiempo de ejecución y debería ser "
"ignorada por el validador de tipos. En tiempo de ejecución, llamar a una "
"función decorada con ``@overload`` lanzará directamente :exc:"
"`NotImplementedError`. Un ejemplo de sobrecarga que proporciona un tipo más "
"preciso se puede expresar con una unión o una variable de tipo::"

#: ../Doc/library/typing.rst:1927
msgid "See :pep:`484` for details and comparison with other typing semantics."
msgstr ""
"Véase :pep:`484` para más detalle, y compárese con otras semánticas de "
"tipado."

#: ../Doc/library/typing.rst:1931
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot be "
"overridden, and the decorated class cannot be subclassed. For example::"
msgstr ""
"Un decorador que indica a los validadores de tipos que el método decorado no "
"se puede sobreescribir, o que la clase decorada no se puede derivar "
"(*subclassed*). Por ejemplo::"

# se extrae del contexto que el decorador elimina la comprobacion de tipo en
# el validador, por lo tanto solo anota/comenta (annotation), no
# indica/sugiere tipo (type hint)
#: ../Doc/library/typing.rst:1956
msgid "Decorator to indicate that annotations are not type hints."
msgstr ""
"Un decorador para indicar que la anotaciones no deben ser comprobadas como "
"indicadores de tipo."

#: ../Doc/library/typing.rst:1958
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies "
"recursively to all methods defined in that class (but not to methods defined "
"in its superclasses or subclasses)."
msgstr ""
"Esto funciona como un :term:`decorator` (decorador) de clase o función. Con "
"una clase, se aplica recursivamente a todos los métodos definidos en dichas "
"clase (pero no a lo métodos definidos en sus superclases y subclases)."

# ver en contexto
#: ../Doc/library/typing.rst:1962
msgid "This mutates the function(s) in place."
msgstr "Esto modifica la función o funciones *in situ*."

#: ../Doc/library/typing.rst:1966
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr ""
"Un decorador que asigna a otro decorador el efecto de :func:`no_type_check` "
"(no comprobar tipo)."

#: ../Doc/library/typing.rst:1968
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""
"Esto hace que el decorador decorado añada el efecto de :func:`no_type_check` "
"a la función decorada."

#: ../Doc/library/typing.rst:1973
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr ""
"Un decorador que marca una clase o función como no disponible en tiempo de "
"ejecución."

#: ../Doc/library/typing.rst:1975
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""
"Este decorador no está disponible en tiempo de ejecución. Existe "
"principalmente para marcar clases que se definen en archivos *stub* para "
"cuando una implementación retorna una instancia de una clase privada::"

#: ../Doc/library/typing.rst:1986
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""
"Nótese que no se recomienda retornar instancias de clases privadas. "
"Normalmente es preferible convertirlas en clases públicas."

#: ../Doc/library/typing.rst:1990
msgid "Introspection helpers"
msgstr "Ayudas de introspección"

#: ../Doc/library/typing.rst:1994
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""
"Retorna un diccionario que contiene indicaciones de tipo para una función, "
"método, módulo o objeto clase."

#: ../Doc/library/typing.rst:1997
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. If necessary, ``Optional[t]`` is "
"added for function and method annotations if a default value equal to "
"``None`` is set. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""
"Habitualmente, esto es lo mismo que ``obj.__annotations__``. Además, las "
"referencias indicadas como cadenas de texto se gestionan evaluándolas en los "
"espacios de nombres``globals`` y ``locals``. Si es necesario, se "
"añade``Optional[t]`` para anotar una función o método, si se establece "
"``None`` como valor por defecto. Para una clase ``C``, se retorna un "
"diccionario construido por la combinación de ``__annotations__`` y ``C."
"__mro``  en orden inverso."

#: ../Doc/library/typing.rst:2005
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example::"
msgstr ""
"La función reemplaza todos los ``Annotated[T, ...]`` con ``T`` de manera "
"recursiva, a menos que ``include_extras`` se defina como ``True`` ( véase :"
"class:`Annotated` para más información). Por ejemplo::"

#: ../Doc/library/typing.rst:2020
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""
":func:`get_type_hints` no funciona con :ref:`alias de tipo <type-aliases>` "
"importados que incluyen referencias hacia adelante. Habilitar la evaluación "
"pospuesta de anotaciones (:pep:`563`) puede eliminar la necesidad de la "
"mayoría de las referencias futuras."

#: ../Doc/library/typing.rst:2025
msgid "Added ``include_extras`` parameter as part of :pep:`593`."
msgstr "Se agregan los parámetros ``include_extras`` como parte de :pep:`593`."

# special forms se refiere a tipado exclusivo de typing (no el nativo como str
# o int): Union, Optional ...
#: ../Doc/library/typing.rst:2031
msgid "Provide basic introspection for generic types and special typing forms."
msgstr ""
"Provee introspección básica para tipos genéricos y construcciones especiales "
"de tipado."

#: ../Doc/library/typing.rst:2033
msgid ""
"For a typing object of the form ``X[Y, Z, ...]`` these functions return "
"``X`` and ``(Y, Z, ...)``. If ``X`` is a generic alias for a builtin or :mod:"
"`collections` class, it gets normalized to the original class. If ``X`` is a "
"union or :class:`Literal` contained in another generic type, the order of "
"``(Y, Z, ...)`` may be different from the order of the original arguments "
"``[Y, Z, ...]`` due to type caching. For unsupported objects return ``None`` "
"and ``()`` correspondingly. Examples::"
msgstr ""
"Para un objeto de escritura de la forma ``X[Y, Z, ...]``, estas funciones "
"retornan ``X`` y ``(Y, Z, ...)``. Si ``X`` es un alias genérico para una "
"clase incorporada o :mod:`collections`, se normaliza a la clase original. Si "
"``X`` es una unión o :class:`Literal` contenido en otro tipo genérico, el "
"orden de ``(Y, Z, ...)`` puede ser diferente del orden de los argumentos "
"originales ``[Y, Z, ...]`` debido al tipo de almacenamiento en caché. Para "
"objetos no admitidos, retorna ``None`` y ``()`` correspondientemente. "
"Ejemplos:"

#: ../Doc/library/typing.rst:2052
msgid "Check if a type is a :class:`TypedDict`."
msgstr "Compruebe si un tipo es :class:`TypedDict`."

#: ../Doc/library/typing.rst:2067
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""
"Una clase utilizada para la representación de escritura interna de "
"referencias de cadena hacia adelante. Por ejemplo, ``List[\"SomeClass\"]`` "
"se transforma implícitamente en ``List[ForwardRef(\"SomeClass\")]``. Esta "
"clase no debe ser instanciada por un usuario, pero puede ser utilizada por "
"herramientas de introspección."

#: ../Doc/library/typing.rst:2073
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""
"Los tipos genéricos de :pep:`585`, como ``list[\"SomeClass\"]``, no se "
"transformarán implícitamente en ``list[ForwardRef(\"SomeClass\")]`` y, por "
"lo tanto, no se resolverán automáticamente en ``list[SomeClass]``."

#: ../Doc/library/typing.rst:2080
msgid "Constant"
msgstr "Constantes"

#: ../Doc/library/typing.rst:2084
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr ""
"Una constante especial que se asume como cierta (``True``) por validadores "
"estáticos de tipos de terceros. Es falsa (``False``) en tiempo de ejecución. "
"Uso::"

#: ../Doc/library/typing.rst:2093
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""
"Nótese que la primera anotación de tipo debe estar rodeada por comillas, "
"convirtiéndola en una \"referencia directa\", para ocultar al intérprete la "
"referencia ``expensive_mod`` en tiempo de ejecución. Las anotaciones de tipo "
"para variables locales no se evalúan, así que la segunda anotación no "
"necesita comillas."

#: ../Doc/library/typing.rst:2100
msgid ""
"If ``from __future__ import annotations`` is used in Python 3.7 or later, "
"annotations are not evaluated at function definition time. Instead, they are "
"stored as strings in ``__annotations__``, This makes it unnecessary to use "
"quotes around the annotation. (see :pep:`563`)."
msgstr ""
"Si ``from __future__ import annotations`` es usado en Python 3.7 o "
"posterior, las anotaciones no son evaluadas en tiempo de definición de "
"funciones. En cambio, son guardadas como cadenas de caracteres en "
"``__annotations__``, esto hace innecesario usar comillas alrededor de la "
"anotación. (véase :pep:`563`)."
