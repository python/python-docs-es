# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-19 11:16+0100\n"
"PO-Revision-Date: 2020-06-29 00:37+0200\n"
"Last-Translator: Cristián Maureira-Fredes <cmaureirafredes@gmail.com>\n"
"Language: es\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../Doc/library/ast.rst:2
msgid ":mod:`ast` --- Abstract Syntax Trees"
msgstr ":mod:`ast` --- Árboles de sintaxis abstracta"

#: ../Doc/library/ast.rst:14
msgid "**Source code:** :source:`Lib/ast.py`"
msgstr "**Código fuente:** :source:`Lib/ast.py`"

#: ../Doc/library/ast.rst:18
msgid ""
"The :mod:`ast` module helps Python applications to process trees of the "
"Python abstract syntax grammar.  The abstract syntax itself might change "
"with each Python release; this module helps to find out programmatically "
"what the current grammar looks like."
msgstr ""
"El módulo :mod:`ast` ayuda a las aplicaciones de Python a procesar árboles "
"de la gramática de sintaxis abstracta de Python. La sintaxis abstracta en sí "
"misma puede cambiar con cada versión de Python; Este módulo ayuda a "
"descubrir mediante programación cómo se ve la gramática actual."

#: ../Doc/library/ast.rst:23
msgid ""
"An abstract syntax tree can be generated by passing :data:`ast."
"PyCF_ONLY_AST` as a flag to the :func:`compile` built-in function, or using "
"the :func:`parse` helper provided in this module.  The result will be a tree "
"of objects whose classes all inherit from :class:`ast.AST`.  An abstract "
"syntax tree can be compiled into a Python code object using the built-in :"
"func:`compile` function."
msgstr ""
"Se puede generar un árbol de sintaxis abstracta pasando :data:`ast."
"PyCF_ONLY_AST` como un indicador de la función incorporada :func:`compile`, "
"o usando el ayudante :func:`parse` provisto en este módulo. El resultado "
"será un árbol de objetos cuyas clases todas heredan de :class:`ast.AST`. Se "
"puede compilar un árbol de sintaxis abstracta en un objeto de código Python "
"utilizando la función incorporada :func:`compile`."

#: ../Doc/library/ast.rst:33
msgid "Abstract Grammar"
msgstr "Gramática abstracta"

#: ../Doc/library/ast.rst:35
msgid "The abstract grammar is currently defined as follows:"
msgstr "La gramática abstracta se define actualmente de la siguiente manera:"

#: ../Doc/library/ast.rst:42
msgid "Node classes"
msgstr "Clases Nodo"

#: ../Doc/library/ast.rst:46
msgid ""
"This is the base of all AST node classes.  The actual node classes are "
"derived from the :file:`Parser/Python.asdl` file, which is reproduced :ref:"
"`below <abstract-grammar>`.  They are defined in the :mod:`_ast` C module "
"and re-exported in :mod:`ast`."
msgstr ""
"Esta es la base de todas las clases de nodo AST. Las clases de nodo reales "
"se derivan del archivo :file:`Parser/Python.asdl`, que se reproduce :ref:"
"`abajo <abstract-grammar>`. Se definen en el módulo :mod:`_ast` C y se "
"reexportan en :mod:`ast`."

#: ../Doc/library/ast.rst:51
msgid ""
"There is one class defined for each left-hand side symbol in the abstract "
"grammar (for example, :class:`ast.stmt` or :class:`ast.expr`).  In addition, "
"there is one class defined for each constructor on the right-hand side; "
"these classes inherit from the classes for the left-hand side trees.  For "
"example, :class:`ast.BinOp` inherits from :class:`ast.expr`.  For production "
"rules with alternatives (aka \"sums\"), the left-hand side class is "
"abstract: only instances of specific constructor nodes are ever created."
msgstr ""
"Hay una clase definida para cada símbolo del lado izquierdo en la gramática "
"abstracta (por ejemplo, :class:`ast.stmt` o :class:`ast.expr`). Además, hay "
"una clase definida para cada constructor en el lado derecho; estas clases "
"heredan de las clases para los árboles del lado izquierdo. Por ejemplo, :"
"class:`ast.BinOp` hereda de :class:`ast.expr`. Para las reglas de producción "
"con alternativas (también conocidas como \"sumas\"), la clase del lado "
"izquierdo es abstracta: solo se crean instancias de nodos de constructor "
"específicos."

#: ../Doc/library/ast.rst:64
msgid ""
"Each concrete class has an attribute :attr:`_fields` which gives the names "
"of all child nodes."
msgstr ""
"Cada clase concreta tiene un atributo :attr:`_fields` que proporciona los "
"nombres de todos los nodos secundarios."

#: ../Doc/library/ast.rst:67
msgid ""
"Each instance of a concrete class has one attribute for each child node, of "
"the type as defined in the grammar.  For example, :class:`ast.BinOp` "
"instances have an attribute :attr:`left` of type :class:`ast.expr`."
msgstr ""
"Cada instancia de una clase concreta tiene un atributo para cada nodo "
"secundario, del tipo definido en la gramática. Por ejemplo, las instancias :"
"class:`ast.BinOp` tienen un atributo :attr:`left` de tipo :class:`ast.expr`."

#: ../Doc/library/ast.rst:71
msgid ""
"If these attributes are marked as optional in the grammar (using a question "
"mark), the value might be ``None``.  If the attributes can have zero-or-more "
"values (marked with an asterisk), the values are represented as Python "
"lists.  All possible attributes must be present and have valid values when "
"compiling an AST with :func:`compile`."
msgstr ""
"Si estos atributos están marcados como opcionales en la gramática (usando un "
"signo de interrogación), el valor podría ser ``None``. Si los atributos "
"pueden tener cero o más valores (marcados con un asterisco), los valores se "
"representan como listas de Python. Todos los atributos posibles deben estar "
"presentes y tener valores válidos al compilar un AST con :func:`compile`."

#: ../Doc/library/ast.rst:82
msgid ""
"Instances of :class:`ast.expr` and :class:`ast.stmt` subclasses have :attr:"
"`lineno`, :attr:`col_offset`, :attr:`lineno`, and :attr:`col_offset` "
"attributes.  The :attr:`lineno` and :attr:`end_lineno` are the first and "
"last line numbers of source text span (1-indexed so the first line is line "
"1) and the :attr:`col_offset` and :attr:`end_col_offset` are the "
"corresponding UTF-8 byte offsets of the first and last tokens that generated "
"the node. The UTF-8 offset is recorded because the parser uses UTF-8 "
"internally."
msgstr ""
"Las instancias de las subclases :class:`ast.expr` y :class:`ast.stmt` tienen "
"atributos :attr:`lineno`, :attr:`col_offset`, :attr:`lineno`, y :attr:"
"`col_offset`. Los :attr:`lineno` y :attr:`end_lineno` son los números de la "
"primera y última línea del intervalo de texto de origen (1 indexado, por lo "
"que la primera línea es la línea 1) y el :attr:`col_offset` y :attr:"
"`end_col_offset` son las correspondientes compensaciones de bytes UTF-8 del "
"primer y último token que generó el nodo. El desplazamiento UTF-8 se "
"registra porque el analizador utiliza UTF-8 internamente."

#: ../Doc/library/ast.rst:90
msgid ""
"Note that the end positions are not required by the compiler and are "
"therefore optional. The end offset is *after* the last symbol, for example "
"one can get the source segment of a one-line expression node using "
"``source_line[node.col_offset : node.end_col_offset]``."
msgstr ""
"Tenga en cuenta que el compilador no requiere las posiciones finales y, por "
"lo tanto, son opcionales. El desplazamiento final es *después* del último "
"símbolo, por ejemplo, uno puede obtener el segmento fuente de un nodo de "
"expresión de una línea usando ``source_line[node.col_offset: node."
"end_col_offset]``."

#: ../Doc/library/ast.rst:95
msgid ""
"The constructor of a class :class:`ast.T` parses its arguments as follows:"
msgstr ""
"El constructor de una clase :class:`ast.T` analiza sus argumentos de la "
"siguiente manera:"

#: ../Doc/library/ast.rst:97
msgid ""
"If there are positional arguments, there must be as many as there are items "
"in :attr:`T._fields`; they will be assigned as attributes of these names."
msgstr ""
"Si hay argumentos posicionales, debe haber tantos como elementos en :attr:`T."
"_fields`; serán asignados como atributos de estos nombres."

#: ../Doc/library/ast.rst:99
msgid ""
"If there are keyword arguments, they will set the attributes of the same "
"names to the given values."
msgstr ""
"Si hay argumentos de palabras clave, establecerán los atributos de los "
"mismos nombres a los valores dados."

#: ../Doc/library/ast.rst:102
msgid ""
"For example, to create and populate an :class:`ast.UnaryOp` node, you could "
"use ::"
msgstr ""
"Por ejemplo, para crear y completar un nodo :class:`ast.UnaryOp`, puede "
"usar ::"

#: ../Doc/library/ast.rst:114
msgid "or the more compact ::"
msgstr "o la más compacta ::"

#: ../Doc/library/ast.rst:121
msgid "Class :class:`ast.Constant` is now used for all constants."
msgstr "La clase :class:`ast.Constant` ahora se usa para todas las constantes."

#: ../Doc/library/ast.rst:125
msgid ""
"Simple indices are represented by their value, extended slices are "
"represented as tuples."
msgstr ""

#: ../Doc/library/ast.rst:130
msgid ""
"Old classes :class:`ast.Num`, :class:`ast.Str`, :class:`ast.Bytes`, :class:"
"`ast.NameConstant` and :class:`ast.Ellipsis` are still available, but they "
"will be removed in future Python releases.  In the meantime, instantiating "
"them will return an instance of a different class."
msgstr ""

#: ../Doc/library/ast.rst:137
msgid ""
"Old classes :class:`ast.Index` and :class:`ast.ExtSlice` are still "
"available, but they will be removed in future Python releases. In the "
"meantime, instantiating them will return an instance of a different class."
msgstr ""

#: ../Doc/library/ast.rst:143
msgid ""
"The descriptions of the specific node classes displayed here were initially "
"adapted from the fantastic `Green Tree Snakes <https://greentreesnakes."
"readthedocs.io/en/latest/>`__ project and all its contributors."
msgstr ""

#: ../Doc/library/ast.rst:149
msgid "Literals"
msgstr ""

#: ../Doc/library/ast.rst:153
msgid ""
"A constant value. The ``value`` attribute of the ``Constant`` literal "
"contains the Python object it represents. The values represented can be "
"simple types such as a number, string or ``None``, but also immutable "
"container types (tuples and frozensets) if all of their elements are "
"constant."
msgstr ""

#: ../Doc/library/ast.rst:167
msgid ""
"Node representing a single formatting field in an f-string. If the string "
"contains a single formatting field and nothing else the node can be isolated "
"otherwise it appears in :class:`JoinedStr`."
msgstr ""

#: ../Doc/library/ast.rst:171
msgid ""
"``value`` is any expression node (such as a literal, a variable, or a "
"function call)."
msgstr ""

#: ../Doc/library/ast.rst:173
msgid "``conversion`` is an integer:"
msgstr ""

#: ../Doc/library/ast.rst:175
msgid "-1: no formatting"
msgstr ""

#: ../Doc/library/ast.rst:176
msgid "115: ``!s`` string formatting"
msgstr ""

#: ../Doc/library/ast.rst:177
msgid "114: ``!r`` repr formatting"
msgstr ""

#: ../Doc/library/ast.rst:178
msgid "97: ``!a`` ascii formatting"
msgstr ""

#: ../Doc/library/ast.rst:180
msgid ""
"``format_spec`` is a :class:`JoinedStr` node representing the formatting of "
"the value, or ``None`` if no format was specified. Both ``conversion`` and "
"``format_spec`` can be set at the same time."
msgstr ""

#: ../Doc/library/ast.rst:187
msgid ""
"An f-string, comprising a series of :class:`FormattedValue` and :class:"
"`Constant` nodes."
msgstr ""

#: ../Doc/library/ast.rst:216
msgid ""
"A list or tuple. ``elts`` holds a list of nodes representing the elements. "
"``ctx`` is :class:`Store` if the container is an assignment target (i.e. "
"``(x,y)=something``), and :class:`Load` otherwise."
msgstr ""

#: ../Doc/library/ast.rst:242
msgid "A set. ``elts`` holds a list of nodes representing the set's elements."
msgstr ""

#: ../Doc/library/ast.rst:257
msgid ""
"A dictionary. ``keys`` and ``values`` hold lists of nodes representing the "
"keys and the values respectively, in matching order (what would be returned "
"when calling :code:`dictionary.keys()` and :code:`dictionary.values()`)."
msgstr ""

#: ../Doc/library/ast.rst:261
msgid ""
"When doing dictionary unpacking using dictionary literals the expression to "
"be expanded goes in the ``values`` list, with a ``None`` at the "
"corresponding position in ``keys``."
msgstr ""

#: ../Doc/library/ast.rst:279
msgid "Variables"
msgstr ""

#: ../Doc/library/ast.rst:283
msgid ""
"A variable name. ``id`` holds the name as a string, and ``ctx`` is one of "
"the following types."
msgstr ""

#: ../Doc/library/ast.rst:291
msgid ""
"Variable references can be used to load the value of a variable, to assign a "
"new value to it, or to delete it. Variable references are given a context to "
"distinguish these cases."
msgstr ""

#: ../Doc/library/ast.rst:324
msgid ""
"A ``*var`` variable reference. ``value`` holds the variable, typically a :"
"class:`Name` node. This type must be used when building a :class:`Call` node "
"with ``*args``."
msgstr ""

#: ../Doc/library/ast.rst:347
msgid "Expressions"
msgstr ""

#: ../Doc/library/ast.rst:351
msgid ""
"When an expression, such as a function call, appears as a statement by "
"itself with its return value not used or stored, it is wrapped in this "
"container. ``value`` holds one of the other nodes in this section, a :class:"
"`Constant`, a :class:`Name`, a :class:`Lambda`, a :class:`Yield` or :class:"
"`YieldFrom` node."
msgstr ""

#: ../Doc/library/ast.rst:370
msgid ""
"A unary operation. ``op`` is the operator, and ``operand`` any expression "
"node."
msgstr ""

#: ../Doc/library/ast.rst:379
msgid ""
"Unary operator tokens. :class:`Not` is the ``not`` keyword, :class:`Invert` "
"is the ``~`` operator."
msgstr ""

#: ../Doc/library/ast.rst:393
msgid ""
"A binary operation (like addition or division). ``op`` is the operator, and "
"``left`` and ``right`` are any expression nodes."
msgstr ""

#: ../Doc/library/ast.rst:420
msgid "Binary operator tokens."
msgstr ""

#: ../Doc/library/ast.rst:425
msgid ""
"A boolean operation, 'or' or 'and'. ``op`` is :class:`Or` or :class:`And`. "
"``values`` are the values involved. Consecutive operations with the same "
"operator, such as ``a or b or c``, are collapsed into one node with several "
"values."
msgstr ""

#: ../Doc/library/ast.rst:430
msgid "This doesn't include ``not``, which is a :class:`UnaryOp`."
msgstr ""

#: ../Doc/library/ast.rst:446
msgid "Boolean operator tokens."
msgstr ""

#: ../Doc/library/ast.rst:451
msgid ""
"A comparison of two or more values. ``left`` is the first value in the "
"comparison, ``ops`` the list of operators, and ``comparators`` the list of "
"values after the first element in the comparison."
msgstr ""

#: ../Doc/library/ast.rst:480
msgid "Comparison operator tokens."
msgstr ""

#: ../Doc/library/ast.rst:485
msgid ""
"A function call. ``func`` is the function, which will often be a :class:"
"`Name` or :class:`Attribute` object. Of the arguments:"
msgstr ""

#: ../Doc/library/ast.rst:488
msgid "``args`` holds a list of the arguments passed by position."
msgstr ""

#: ../Doc/library/ast.rst:489
msgid ""
"``keywords`` holds a list of :class:`keyword` objects representing arguments "
"passed by keyword."
msgstr ""

#: ../Doc/library/ast.rst:492
msgid ""
"When creating a ``Call`` node, ``args`` and ``keywords`` are required, but "
"they can be empty lists. ``starargs`` and ``kwargs`` are optional."
msgstr ""

#: ../Doc/library/ast.rst:516
msgid ""
"A keyword argument to a function call or class definition. ``arg`` is a raw "
"string of the parameter name, ``value`` is a node to pass in."
msgstr ""

#: ../Doc/library/ast.rst:522
msgid ""
"An expression such as ``a if b else c``. Each field holds a single node, so "
"in the following example, all three are :class:`Name` nodes."
msgstr ""

#: ../Doc/library/ast.rst:537
msgid ""
"Attribute access, e.g. ``d.keys``. ``value`` is a node, typically a :class:"
"`Name`. ``attr`` is a bare string giving the name of the attribute, and "
"``ctx`` is :class:`Load`, :class:`Store` or :class:`Del` according to how "
"the attribute is acted on."
msgstr ""

#: ../Doc/library/ast.rst:554
msgid ""
"A named expression. This AST node is produced by the assignment expressions "
"operator (also known as the walrus operator). As opposed to the :class:"
"`Assign` node in which the first argument can be multiple nodes, in this "
"case both ``target`` and ``value`` must be single nodes."
msgstr ""

#: ../Doc/library/ast.rst:569
msgid "Subscripting"
msgstr ""

#: ../Doc/library/ast.rst:573
msgid ""
"A subscript, such as ``l[1]``. ``value`` is the subscripted object (usually "
"sequence or mapping). ``slice`` is an index, slice or key. It can be a :"
"class:`Tuple` and contain a :class:`Slice`. ``ctx`` is :class:`Load`, :class:"
"`Store` or :class:`Del` according to the action performed with the subscript."
msgstr ""

#: ../Doc/library/ast.rst:597
msgid ""
"Regular slicing (on the form ``lower:upper`` or ``lower:upper:step``). Can "
"occur only inside the *slice* field of :class:`Subscript`, either directly "
"or as an element of :class:`Tuple`."
msgstr ""

#: ../Doc/library/ast.rst:614
msgid "Comprehensions"
msgstr ""

#: ../Doc/library/ast.rst:621
msgid ""
"List and set comprehensions, generator expressions, and dictionary "
"comprehensions. ``elt`` (or ``key`` and ``value``) is a single node "
"representing the part that will be evaluated for each item."
msgstr ""

#: ../Doc/library/ast.rst:625
msgid "``generators`` is a list of :class:`comprehension` nodes."
msgstr ""

#: ../Doc/library/ast.rst:667
msgid ""
"One ``for`` clause in a comprehension. ``target`` is the reference to use "
"for each element - typically a :class:`Name` or :class:`Tuple` node. "
"``iter`` is the object to iterate over. ``ifs`` is a list of test "
"expressions: each ``for`` clause can have multiple ``ifs``."
msgstr ""

#: ../Doc/library/ast.rst:672
msgid ""
"``is_async`` indicates a comprehension is asynchronous (using an ``async "
"for`` instead of ``for``). The value is an integer (0 or 1)."
msgstr ""

#: ../Doc/library/ast.rst:738
msgid "Statements"
msgstr ""

#: ../Doc/library/ast.rst:742
msgid ""
"An assignment. ``targets`` is a list of nodes, and ``value`` is a single "
"node."
msgstr ""

#: ../Doc/library/ast.rst:744
msgid ""
"Multiple nodes in ``targets`` represents assigning the same value to each. "
"Unpacking is represented by putting a :class:`Tuple` or :class:`List` within "
"``targets``."
msgstr ""

#: ../Doc/library/ast.rst:750 ../Doc/library/ast.rst:1037
#: ../Doc/library/ast.rst:1210 ../Doc/library/ast.rst:1263
msgid ""
"``type_comment`` is an optional string with the type annotation as a comment."
msgstr ""

#: ../Doc/library/ast.rst:780
msgid ""
"An assignment with a type annotation. ``target`` is a single node and can be "
"a :class:`Name`, a :class:`Attribute` or a :class:`Subscript`. "
"``annotation`` is the annotation, such as a :class:`Constant` or :class:"
"`Name` node. ``value`` is a single optional node. ``simple`` is a boolean "
"integer set to True for a :class:`Name` node in ``target`` that do not "
"appear in between parenthesis and are hence pure names and not expressions."
msgstr ""

#: ../Doc/library/ast.rst:835
msgid ""
"Augmented assignment, such as ``a += 1``. In the following example, "
"``target`` is a :class:`Name` node for ``x`` (with the :class:`Store` "
"context), ``op`` is :class:`Add`, and ``value`` is a :class:`Constant` with "
"value for 1."
msgstr ""

#: ../Doc/library/ast.rst:840
msgid ""
"The ``target`` attribute connot be of class :class:`Tuple` or :class:`List`, "
"unlike the targets of :class:`Assign`."
msgstr ""

#: ../Doc/library/ast.rst:857
msgid ""
"A ``raise`` statement. ``exc`` is the exception object to be raised, "
"normally a :class:`Call` or :class:`Name`, or ``None`` for a standalone "
"``raise``. ``cause`` is the optional part for ``y`` in ``raise x from y``."
msgstr ""

#: ../Doc/library/ast.rst:874
msgid ""
"An assertion. ``test`` holds the condition, such as a :class:`Compare` node. "
"``msg`` holds the failure message."
msgstr ""

#: ../Doc/library/ast.rst:890
msgid ""
"Represents a ``del`` statement. ``targets`` is a list of nodes, such as :"
"class:`Name`, :class:`Attribute` or :class:`Subscript` nodes."
msgstr ""

#: ../Doc/library/ast.rst:908
msgid "A ``pass`` statement."
msgstr ""

#: ../Doc/library/ast.rst:919
msgid ""
"Other statements which are only applicable inside functions or loops are "
"described in other sections."
msgstr ""

#: ../Doc/library/ast.rst:923
msgid "Imports"
msgstr ""

#: ../Doc/library/ast.rst:927
msgid "An import statement. ``names`` is a list of :class:`alias` nodes."
msgstr ""

#: ../Doc/library/ast.rst:944
msgid ""
"Represents ``from x import y``. ``module`` is a raw string of the 'from' "
"name, without any leading dots, or ``None`` for statements such as ``from . "
"import foo``. ``level`` is an integer holding the level of the relative "
"import (0 means absolute import)."
msgstr ""

#: ../Doc/library/ast.rst:966
msgid ""
"Both parameters are raw strings of the names. ``asname`` can be ``None`` if "
"the regular name is to be used."
msgstr ""

#: ../Doc/library/ast.rst:983
msgid "Control flow"
msgstr ""

#: ../Doc/library/ast.rst:986
msgid ""
"Optional clauses such as ``else`` are stored as an empty list if they're not "
"present."
msgstr ""

#: ../Doc/library/ast.rst:991
msgid ""
"An ``if`` statement. ``test`` holds a single node, such as a :class:"
"`Compare` node. ``body`` and ``orelse`` each hold a list of nodes."
msgstr ""

#: ../Doc/library/ast.rst:994
msgid ""
"``elif`` clauses don't have a special representation in the AST, but rather "
"appear as extra :class:`If` nodes within the ``orelse`` section of the "
"previous one."
msgstr ""

#: ../Doc/library/ast.rst:1029
msgid ""
"A ``for`` loop. ``target`` holds the variable(s) the loop assigns to, as a "
"single :class:`Name`, :class:`Tuple` or :class:`List` node. ``iter`` holds "
"the item to be looped over, again as a single node. ``body`` and ``orelse`` "
"contain lists of nodes to execute. Those in ``orelse`` are executed if the "
"loop finishes normally, rather than via a ``break`` statement."
msgstr ""

#: ../Doc/library/ast.rst:1063
msgid ""
"A ``while`` loop. ``test`` holds the condition, such as a :class:`Compare` "
"node."
msgstr ""

#: ../Doc/library/ast.rst:1090
msgid "The ``break`` and ``continue`` statements."
msgstr ""

#: ../Doc/library/ast.rst:1125
msgid ""
"``try`` blocks. All attributes are list of nodes to execute, except for "
"``handlers``, which is a list of :class:`ExceptHandler` nodes."
msgstr ""

#: ../Doc/library/ast.rst:1171
msgid ""
"A single ``except`` clause. ``type`` is the exception type it will match, "
"typically a :class:`Name` node (or ``None`` for a catch-all ``except:`` "
"clause). ``name`` is a raw string for the name to hold the exception, or "
"``None`` if the clause doesn't have ``as foo``. ``body`` is a list of nodes."
msgstr ""

#: ../Doc/library/ast.rst:1205
msgid ""
"A ``with`` block. ``items`` is a list of :class:`withitem` nodes "
"representing the context managers, and ``body`` is the indented block inside "
"the context."
msgstr ""

#: ../Doc/library/ast.rst:1215
msgid ""
"A single context manager in a ``with`` block. ``context_expr`` is the "
"context manager, often a :class:`Call` node. ``optional_vars`` is a :class:"
"`Name`, :class:`Tuple` or :class:`List` for the ``as foo`` part, or ``None`` "
"if that isn't used."
msgstr ""

#: ../Doc/library/ast.rst:1248
msgid "Function and class definitions"
msgstr ""

#: ../Doc/library/ast.rst:1252
msgid "A function definition."
msgstr ""

#: ../Doc/library/ast.rst:1254
msgid "``name`` is a raw string of the function name."
msgstr ""

#: ../Doc/library/ast.rst:1255
msgid "``args`` is a :class:`arguments` node."
msgstr ""

#: ../Doc/library/ast.rst:1256
msgid "``body`` is the list of nodes inside the function."
msgstr ""

#: ../Doc/library/ast.rst:1257
msgid ""
"``decorator_list`` is the list of decorators to be applied, stored outermost "
"first (i.e. the first in the list will be applied last)."
msgstr ""

#: ../Doc/library/ast.rst:1259
msgid "``returns`` is the return annotation."
msgstr ""

#: ../Doc/library/ast.rst:1268
msgid ""
"``lambda`` is a minimal function definition that can be used inside an "
"expression. Unlike :class:`FunctionDef`, ``body`` holds a single node."
msgstr ""

#: ../Doc/library/ast.rst:1292
msgid "The arguments for a function."
msgstr ""

#: ../Doc/library/ast.rst:1294
msgid ""
"``posonlyargs``, ``args`` and ``kwonlyargs`` are lists of :class:`arg` nodes."
msgstr ""

#: ../Doc/library/ast.rst:1295
msgid ""
"``vararg`` and ``kwarg`` are single :class:`arg` nodes, referring to the "
"``*args, **kwargs`` parameters."
msgstr ""

#: ../Doc/library/ast.rst:1297
msgid ""
"``kw_defaults`` is a list of default values for keyword-only arguments. If "
"one is ``None``, the corresponding argument is required."
msgstr ""

#: ../Doc/library/ast.rst:1299
msgid ""
"``defaults`` is a list of default values for arguments that can be passed "
"positionally. If there are fewer defaults, they correspond to the last n "
"arguments."
msgstr ""

#: ../Doc/library/ast.rst:1306
msgid ""
"A single argument in a list. ``arg`` is a raw string of the argument name, "
"``annotation`` is its annotation, such as a :class:`Str` or :class:`Name` "
"node."
msgstr ""

#: ../Doc/library/ast.rst:1312
msgid ""
"``type_comment`` is an optional string with the type annotation as a comment"
msgstr ""

#: ../Doc/library/ast.rst:1356
msgid "A ``return`` statement."
msgstr ""

#: ../Doc/library/ast.rst:1371
msgid ""
"A ``yield`` or ``yield from`` expression. Because these are expressions, "
"they must be wrapped in a :class:`Expr` node if the value sent back is not "
"used."
msgstr ""

#: ../Doc/library/ast.rst:1396
msgid ""
"``global`` and ``nonlocal`` statements. ``names`` is a list of raw strings."
msgstr ""

#: ../Doc/library/ast.rst:1423
msgid "A class definition."
msgstr ""

#: ../Doc/library/ast.rst:1425
msgid "``name`` is a raw string for the class name"
msgstr ""

#: ../Doc/library/ast.rst:1426
msgid "``bases`` is a list of nodes for explicitly specified base classes."
msgstr ""

#: ../Doc/library/ast.rst:1427
msgid ""
"``keywords`` is a list of :class:`keyword` nodes, principally for "
"'metaclass'. Other keywords will be passed to the metaclass, as per "
"`PEP-3115 <http://www.python.org/dev/peps/pep-3115/>`_."
msgstr ""

#: ../Doc/library/ast.rst:1430
msgid ""
"``starargs`` and ``kwargs`` are each a single node, as in a function call. "
"starargs will be expanded to join the list of base classes, and kwargs will "
"be passed to the metaclass."
msgstr ""

#: ../Doc/library/ast.rst:1433
msgid ""
"``body`` is a list of nodes representing the code within the class "
"definition."
msgstr ""

#: ../Doc/library/ast.rst:1435
msgid "``decorator_list`` is a list of nodes, as in :class:`FunctionDef`."
msgstr ""

#: ../Doc/library/ast.rst:1464
msgid "Async and await"
msgstr ""

#: ../Doc/library/ast.rst:1468
msgid ""
"An ``async def`` function definition. Has the same fields as :class:"
"`FunctionDef`."
msgstr ""

#: ../Doc/library/ast.rst:1474
msgid ""
"An ``await`` expression. ``value`` is what it waits for. Only valid in the "
"body of an :class:`AsyncFunctionDef`."
msgstr ""

#: ../Doc/library/ast.rst:1507
msgid ""
"``async for`` loops and ``async with`` context managers. They have the same "
"fields as :class:`For` and :class:`With`, respectively. Only valid in the "
"body of an :class:`AsyncFunctionDef`."
msgstr ""

#: ../Doc/library/ast.rst:1512
msgid ""
"When a string is parsed by :func:`ast.parse`, operator nodes (subclasses of :"
"class:`ast.operator`, :class:`ast.unaryop`, :class:`ast.cmpop`, :class:`ast."
"boolop` and :class:`ast.expr_context`) on the returned tree will be "
"singletons. Changes to one will be reflected in all other occurrences of the "
"same value (e.g. :class:`ast.Add`)."
msgstr ""

#: ../Doc/library/ast.rst:1520
msgid ":mod:`ast` Helpers"
msgstr "Ayudantes de :mod:`ast`"

#: ../Doc/library/ast.rst:1522
msgid ""
"Apart from the node classes, the :mod:`ast` module defines these utility "
"functions and classes for traversing abstract syntax trees:"
msgstr ""
"Además de las clases de nodo, el módulo :mod:`ast` define estas funciones y "
"clases de utilidad para atravesar árboles de sintaxis abstracta:"

#: ../Doc/library/ast.rst:1527
msgid ""
"Parse the source into an AST node.  Equivalent to ``compile(source, "
"filename, mode, ast.PyCF_ONLY_AST)``."
msgstr ""
"Analiza la fuente en un nodo AST. Equivalente a ``compile(source, filename, "
"mode, ast.PyCF_ONLY_AST)``."

#: ../Doc/library/ast.rst:1530
msgid ""
"If ``type_comments=True`` is given, the parser is modified to check and "
"return type comments as specified by :pep:`484` and :pep:`526`. This is "
"equivalent to adding :data:`ast.PyCF_TYPE_COMMENTS` to the flags passed to :"
"func:`compile()`.  This will report syntax errors for misplaced type "
"comments.  Without this flag, type comments will be ignored, and the "
"``type_comment`` field on selected AST nodes will always be ``None``.  In "
"addition, the locations of ``# type: ignore`` comments will be returned as "
"the ``type_ignores`` attribute of :class:`Module` (otherwise it is always an "
"empty list)."
msgstr ""
"Si se proporciona ``type_comments=True``, el analizador se modifica para "
"verificar y retornar los comentarios de tipo según lo especificado por :pep:"
"`484` y :pep:`526`. Esto es equivalente a agregar :data:`ast."
"PyCF_TYPE_COMMENTS` a los flags pasados a :func:`compile()`. Esto informará "
"errores de sintaxis para comentarios de tipo fuera de lugar. Sin este flag, "
"los comentarios de tipo se ignorarán y el campo ``type_comment`` en los "
"nodos AST seleccionados siempre será ``None``. Además, las ubicaciones de "
"los comentarios ``# type: ignore`` se retornarán como el atributo "
"``type_ignores`` de :class:`Module` (de lo contrario, siempre es una lista "
"vacía)."

#: ../Doc/library/ast.rst:1540
msgid ""
"In addition, if ``mode`` is ``'func_type'``, the input syntax is modified to "
"correspond to :pep:`484` \"signature type comments\", e.g. ``(str, int) -> "
"List[str]``."
msgstr ""
"Además, si ``modo`` es ``'func_type'``, la sintaxis de entrada se modifica "
"para corresponder a :pep:`484` \"comentarios de tipo de firma\", por ejemplo "
"``(str, int) -> List[str]``."

#: ../Doc/library/ast.rst:1544
msgid ""
"Also, setting ``feature_version`` to a tuple ``(major, minor)`` will attempt "
"to parse using that Python version's grammar. Currently ``major`` must equal "
"to ``3``.  For example, setting ``feature_version=(3, 4)`` will allow the "
"use of ``async`` and ``await`` as variable names.  The lowest supported "
"version is ``(3, 4)``; the highest is ``sys.version_info[0:2]``."
msgstr ""
"Además, establece ``feature_version`` en una tupla ``(major, minor)`` "
"intentará analizar usando la gramática de esa versión de Python. Actualmente "
"``major`` debe ser igual a ``3``. Por ejemplo, establece "
"``feature_version=(3, 4)`` permitirá el uso de ``async`` y ``await`` como "
"nombres de variables. La versión más baja admitida es ``(3, 4)``; la más "
"alto es ``sys.version_info[0:2]``."

#: ../Doc/library/ast.rst:1552 ../Doc/library/ast.rst:1591
msgid ""
"It is possible to crash the Python interpreter with a sufficiently large/"
"complex string due to stack depth limitations in Python's AST compiler."
msgstr ""
"Es posible bloquear el intérprete de Python con una cadena de caracteres "
"suficientemente grande/compleja debido a las limitaciones de profundidad de "
"pila en el compilador AST de Python."

#: ../Doc/library/ast.rst:1556
msgid "Added ``type_comments``, ``mode='func_type'`` and ``feature_version``."
msgstr ""
"Se agregaron ``type_comments``, ``mode='func_type'`` y ``feature_version``."

#: ../Doc/library/ast.rst:1562
msgid ""
"Unparse an :class:`ast.AST` object and generate a string with code that "
"would produce an equivalent :class:`ast.AST` object if parsed back with :"
"func:`ast.parse`."
msgstr ""

#: ../Doc/library/ast.rst:1567
msgid ""
"The produced code string will not necessarily be equal to the original code "
"that generated the :class:`ast.AST` object (without any compiler "
"optimizations, such as constant tuples/frozensets)."
msgstr ""

#: ../Doc/library/ast.rst:1572
msgid ""
"Trying to unparse a highly complex expression would result with :exc:"
"`RecursionError`."
msgstr ""

#: ../Doc/library/ast.rst:1580
msgid ""
"Safely evaluate an expression node or a string containing a Python literal "
"or container display.  The string or node provided may only consist of the "
"following Python literal structures: strings, bytes, numbers, tuples, lists, "
"dicts, sets, booleans, and ``None``."
msgstr ""
"Evalúa de forma segura un nodo de expresión o una cadena de caracteres que "
"contenga un literal de Python o un visualizador de contenedor. La cadena o "
"nodo proporcionado solo puede consistir en las siguientes estructuras "
"literales de Python: cadenas de caracteres, bytes, números, tuplas, listas, "
"diccionarios, conjuntos, booleanos y ``None``."

#: ../Doc/library/ast.rst:1585
msgid ""
"This can be used for safely evaluating strings containing Python values from "
"untrusted sources without the need to parse the values oneself.  It is not "
"capable of evaluating arbitrarily complex expressions, for example involving "
"operators or indexing."
msgstr ""
"Esto se puede usar para evaluar de forma segura las cadenas de caracteres "
"que contienen valores de Python de fuentes no confiables sin la necesidad de "
"analizar los valores uno mismo. No es capaz de evaluar expresiones complejas "
"arbitrariamente, por ejemplo, que involucran operadores o indexación."

#: ../Doc/library/ast.rst:1595
msgid "Now allows bytes and set literals."
msgstr "Ahora permite bytes y establece literales."

#: ../Doc/library/ast.rst:1598
msgid "Now supports creating empty sets with ``'set()'``."
msgstr ""

#: ../Doc/library/ast.rst:1604
msgid ""
"Return the docstring of the given *node* (which must be a :class:"
"`FunctionDef`, :class:`AsyncFunctionDef`, :class:`ClassDef`, or :class:"
"`Module` node), or ``None`` if it has no docstring. If *clean* is true, "
"clean up the docstring's indentation with :func:`inspect.cleandoc`."
msgstr ""
"Retorna la cadena de caracteres de documentación del *node* dado (que debe "
"ser un nodo :class:`FunctionDef`, :class:`AsyncFunctionDef`, :class:"
"`ClassDef`, o :class:`Module`), o ``None`` si no tiene docstring. Si *clean* "
"es verdadero, limpia la sangría del docstring con :func:`inspect.cleandoc`."

#: ../Doc/library/ast.rst:1610
msgid ":class:`AsyncFunctionDef` is now supported."
msgstr ":class:`AsyncFunctionDef` ahora está soportada."

#: ../Doc/library/ast.rst:1616
msgid ""
"Get source code segment of the *source* that generated *node*. If some "
"location information (:attr:`lineno`, :attr:`end_lineno`, :attr:"
"`col_offset`, or :attr:`end_col_offset`) is missing, return ``None``."
msgstr ""
"Obtenga el segmento de código fuente del *source* que generó *node*. Si "
"falta información de ubicación (:attr:`lineno`, :attr:`end_lineno`, :attr:"
"`col_offset`, o :attr:`end_col_offset`), retorna ``None``."

#: ../Doc/library/ast.rst:1620
msgid ""
"If *padded* is ``True``, the first line of a multi-line statement will be "
"padded with spaces to match its original position."
msgstr ""
"Si *padded* es ``True``, la primera línea de una declaración de varias "
"líneas se rellenará con espacios para que coincidan con su posición original."

#: ../Doc/library/ast.rst:1628
msgid ""
"When you compile a node tree with :func:`compile`, the compiler expects :"
"attr:`lineno` and :attr:`col_offset` attributes for every node that supports "
"them.  This is rather tedious to fill in for generated nodes, so this helper "
"adds these attributes recursively where not already set, by setting them to "
"the values of the parent node.  It works recursively starting at *node*."
msgstr ""
"Cuando compila un árbol de nodos con :func:`compile`, el compilador espera "
"los atributos :attr:`lineno` y :attr:`col_offset` para cada nodo que los "
"soporta. Es bastante tedioso completar los nodos generados, por lo que este "
"ayudante agrega estos atributos de forma recursiva donde aún no están "
"establecidos, configurándolos en los valores del nodo principal. Funciona de "
"forma recursiva comenzando en *node*."

#: ../Doc/library/ast.rst:1637
msgid ""
"Increment the line number and end line number of each node in the tree "
"starting at *node* by *n*. This is useful to \"move code\" to a different "
"location in a file."
msgstr ""
"Incremente el número de línea y el número de línea final de cada nodo en el "
"árbol comenzando en *node* por *n*. Esto es útil para \"mover código\" a una "
"ubicación diferente en un archivo."

#: ../Doc/library/ast.rst:1644
msgid ""
"Copy source location (:attr:`lineno`, :attr:`col_offset`, :attr:"
"`end_lineno`, and :attr:`end_col_offset`) from *old_node* to *new_node* if "
"possible, and return *new_node*."
msgstr ""
"Copia la ubicación de origen (:attr:`lineno`, :attr:`col_offset`, :attr:"
"`end_lineno`, y :attr:`end_col_offset`) de *old_node* a *new_node* si es "
"posible, y retorna *new_node*."

#: ../Doc/library/ast.rst:1651
msgid ""
"Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields`` "
"that is present on *node*."
msgstr ""
"Produce (*yield*) una tupla de ``(fieldname, value)`` para cada campo en "
"``node._fields`` que está presente en *node*."

#: ../Doc/library/ast.rst:1657
msgid ""
"Yield all direct child nodes of *node*, that is, all fields that are nodes "
"and all items of fields that are lists of nodes."
msgstr ""
"Cede todos los nodos secundarios directos de *node*, es decir, todos los "
"campos que son nodos y todos los elementos de campos que son listas de nodos."

#: ../Doc/library/ast.rst:1663
msgid ""
"Recursively yield all descendant nodes in the tree starting at *node* "
"(including *node* itself), in no specified order.  This is useful if you "
"only want to modify nodes in place and don't care about the context."
msgstr ""
"Recursivamente produce todos los nodos descendientes en el árbol comenzando "
"en *node* (incluido *node* en sí mismo), en ningún orden especificado. Esto "
"es útil si solo desea modificar los nodos en su lugar y no le importa el "
"contexto."

#: ../Doc/library/ast.rst:1670
msgid ""
"A node visitor base class that walks the abstract syntax tree and calls a "
"visitor function for every node found.  This function may return a value "
"which is forwarded by the :meth:`visit` method."
msgstr ""
"Una clase base de visitante de nodo que recorre el árbol de sintaxis "
"abstracta y llama a una función de visitante para cada nodo encontrado. Esta "
"función puede retornar un valor que se reenvía mediante el método :meth:"
"`visit`."

#: ../Doc/library/ast.rst:1674
msgid ""
"This class is meant to be subclassed, with the subclass adding visitor "
"methods."
msgstr ""
"Esta clase está destinada a ser subclase, con la subclase agregando métodos "
"de visitante."

#: ../Doc/library/ast.rst:1679
msgid ""
"Visit a node.  The default implementation calls the method called :samp:"
"`self.visit_{classname}` where *classname* is the name of the node class, "
"or :meth:`generic_visit` if that method doesn't exist."
msgstr ""
"Visita un nodo. La implementación predeterminada llama al método llamado :"
"samp:`self.visit_{classname}` donde *classname* es el nombre de la clase de "
"nodo, o :meth:`generic_visit` si ese método no existe."

#: ../Doc/library/ast.rst:1685
msgid "This visitor calls :meth:`visit` on all children of the node."
msgstr "Este visitante llama :meth:`visit` en todos los hijos del nodo."

#: ../Doc/library/ast.rst:1687
msgid ""
"Note that child nodes of nodes that have a custom visitor method won't be "
"visited unless the visitor calls :meth:`generic_visit` or visits them itself."
msgstr ""
"Tenga en cuenta que los nodos secundarios de los nodos que tienen un método "
"de visitante personalizado no se visitarán a menos que el visitante llame :"
"meth:`generic_visit` o los visite a sí mismo."

#: ../Doc/library/ast.rst:1691
msgid ""
"Don't use the :class:`NodeVisitor` if you want to apply changes to nodes "
"during traversal.  For this a special visitor exists (:class:"
"`NodeTransformer`) that allows modifications."
msgstr ""
"No use :class:`NodeVisitor` si desea aplicar cambios a los nodos durante el "
"recorrido. Para esto existe un visitante especial (:class:`NodeTransformer`) "
"que permite modificaciones."

#: ../Doc/library/ast.rst:1697
msgid ""
"Methods :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, :meth:"
"`visit_NameConstant` and :meth:`visit_Ellipsis` are deprecated now and will "
"not be called in future Python versions.  Add the :meth:`visit_Constant` "
"method to handle all constant nodes."
msgstr ""
"Los métodos :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, :meth:"
"`visit_NameConstant` y :meth:`visit_Ellipsis` están en desuso ahora y no "
"serán llamados en futuras versiones de Python. Agregue el método :meth:"
"`visit_Constant` para manejar todos los nodos constantes."

#: ../Doc/library/ast.rst:1705
msgid ""
"A :class:`NodeVisitor` subclass that walks the abstract syntax tree and "
"allows modification of nodes."
msgstr ""
"Una subclase de :class:`NodeVisitor` que recorre el árbol de sintaxis "
"abstracta y permite la modificación de nodos."

#: ../Doc/library/ast.rst:1708
msgid ""
"The :class:`NodeTransformer` will walk the AST and use the return value of "
"the visitor methods to replace or remove the old node.  If the return value "
"of the visitor method is ``None``, the node will be removed from its "
"location, otherwise it is replaced with the return value.  The return value "
"may be the original node in which case no replacement takes place."
msgstr ""
"La clase :class:`NodeTransformer` recorrerá el AST y usará el valor de "
"retorno de los métodos del visitante para reemplazar o eliminar el nodo "
"anterior. Si el valor de retorno del método de visitante es ``None``, el "
"nodo se eliminará de su ubicación; de lo contrario, se reemplazará con el "
"valor de retorno. El valor de retorno puede ser el nodo original, en cuyo "
"caso no se realiza ningún reemplazo."

#: ../Doc/library/ast.rst:1714
msgid ""
"Here is an example transformer that rewrites all occurrences of name lookups "
"(``foo``) to ``data['foo']``::"
msgstr ""
"Aquí hay un transformador de ejemplo que reescribe todas las apariciones de "
"búsquedas de nombres (``foo``) en ``data['foo']``::"

#: ../Doc/library/ast.rst:1726
msgid ""
"Keep in mind that if the node you're operating on has child nodes you must "
"either transform the child nodes yourself or call the :meth:`generic_visit` "
"method for the node first."
msgstr ""
"Tenga en cuenta que si el nodo en el que está operando tiene nodos "
"secundarios, debe transformar los nodos secundarios usted mismo o llamar "
"primero al método :meth:`generic_visit` para el nodo."

#: ../Doc/library/ast.rst:1730
msgid ""
"For nodes that were part of a collection of statements (that applies to all "
"statement nodes), the visitor may also return a list of nodes rather than "
"just a single node."
msgstr ""
"Para los nodos que formaban parte de una colección de declaraciones (que se "
"aplica a todos los nodos de declaración), el visitante también puede "
"retornar una lista de nodos en lugar de solo un nodo."

#: ../Doc/library/ast.rst:1734
msgid ""
"If :class:`NodeTransformer` introduces new nodes (that weren't part of "
"original tree) without giving them location information (such as :attr:"
"`lineno`), :func:`fix_missing_locations` should be called with the new sub-"
"tree to recalculate the location information::"
msgstr ""
"Si :class:`NodeTransformer` introduce nuevos nodos (que no eran parte del "
"árbol original) sin darles información de ubicación (como :attr:`lineno`), :"
"func:`fix_missing_locations` debería llamarse con el nuevo sub-árbol para "
"recalcular la información de ubicación ::"

#: ../Doc/library/ast.rst:1742
msgid "Usually you use the transformer like this::"
msgstr "Usualmente usas el transformador así:"

#: ../Doc/library/ast.rst:1749
msgid ""
"Return a formatted dump of the tree in *node*.  This is mainly useful for "
"debugging purposes.  If *annotate_fields* is true (by default), the returned "
"string will show the names and the values for fields. If *annotate_fields* "
"is false, the result string will be more compact by omitting unambiguous "
"field names.  Attributes such as line numbers and column offsets are not "
"dumped by default.  If this is wanted, *include_attributes* can be set to "
"true."
msgstr ""
"Retorna un volcado formateado del árbol en *node*. Esto es principalmente "
"útil para propósitos de depuración. Si *annotate_fields* es verdadero (por "
"defecto), la cadena de caracteres retornada mostrará los nombres y los "
"valores de los campos. Si *annotate_fields* es falso, la cadena de "
"resultados será más compacta omitiendo nombres de campo no ambiguos. Los "
"atributos como los números de línea y las compensaciones de columna no se "
"vuelcan de forma predeterminada. Si esto se desea, *include_attributes* se "
"puede establecer en verdadero."

#: ../Doc/library/ast.rst:1757
msgid ""
"If *indent* is a non-negative integer or string, then the tree will be "
"pretty-printed with that indent level.  An indent level of 0, negative, or ``"
"\"\"`` will only insert newlines.  ``None`` (the default) selects the single "
"line representation. Using a positive integer indent indents that many "
"spaces per level.  If *indent* is a string (such as ``\"\\t\"``), that "
"string is used to indent each level."
msgstr ""

#: ../Doc/library/ast.rst:1764
msgid "Added the *indent* option."
msgstr ""

#: ../Doc/library/ast.rst:1771
msgid "Compiler Flags"
msgstr ""

#: ../Doc/library/ast.rst:1773
msgid ""
"The following flags may be passed to :func:`compile` in order to change "
"effects on the compilation of a program:"
msgstr ""

#: ../Doc/library/ast.rst:1778
msgid ""
"Enables support for top-level ``await``, ``async for``, ``async with`` and "
"async comprehensions."
msgstr ""

#: ../Doc/library/ast.rst:1785
msgid ""
"Generates and returns an abstract syntax tree instead of returning a "
"compiled code object."
msgstr ""

#: ../Doc/library/ast.rst:1790
msgid ""
"Enables support for :pep:`484` and :pep:`526` style type comments (``# type: "
"<type>``, ``# type: ignore <stuff>``)."
msgstr ""

#: ../Doc/library/ast.rst:1799
msgid "Command-Line Usage"
msgstr ""

#: ../Doc/library/ast.rst:1803
msgid ""
"The :mod:`ast` module can be executed as a script from the command line. It "
"is as simple as:"
msgstr ""

#: ../Doc/library/ast.rst:1810
msgid "The following options are accepted:"
msgstr ""

#: ../Doc/library/ast.rst:1816
msgid "Show the help message and exit."
msgstr ""

#: ../Doc/library/ast.rst:1821
msgid ""
"Specify what kind of code must be compiled, like the *mode* argument in :"
"func:`parse`."
msgstr ""

#: ../Doc/library/ast.rst:1826
msgid "Don't parse type comments."
msgstr ""

#: ../Doc/library/ast.rst:1830
msgid "Include attributes such as line numbers and column offsets."
msgstr ""

#: ../Doc/library/ast.rst:1835
msgid "Indentation of nodes in AST (number of spaces)."
msgstr ""

#: ../Doc/library/ast.rst:1837
msgid ""
"If :file:`infile` is specified its contents are parsed to AST and dumped to "
"stdout.  Otherwise, the content is read from stdin."
msgstr ""

#: ../Doc/library/ast.rst:1843
msgid ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, an external "
"documentation resource, has good details on working with Python ASTs."
msgstr ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, un recurso "
"de documentación externo, tiene buenos detalles sobre cómo trabajar con "
"Python AST."

#: ../Doc/library/ast.rst:1846
msgid ""
"`ASTTokens <https://asttokens.readthedocs.io/en/latest/user-guide.html>`_ "
"annotates Python ASTs with the positions of tokens and text in the source "
"code that generated them. This is helpful for tools that make source code "
"transformations."
msgstr ""

#: ../Doc/library/ast.rst:1851
msgid ""
"`leoAst.py <http://leoeditor.com/appendices.html#leoast-py>`_ unifies the "
"token-based and parse-tree-based views of python programs by inserting two-"
"way links between tokens and ast nodes."
msgstr ""

#: ../Doc/library/ast.rst:1855
msgid ""
"`LibCST <https://libcst.readthedocs.io/>`_ parses code as a Concrete Syntax "
"Tree that looks like an ast tree and keeps all formatting details. It's "
"useful for building automated refactoring (codemod) applications and linters."
msgstr ""

#: ../Doc/library/ast.rst:1860
msgid ""
"`Parso <https://parso.readthedocs.io>`_ is a Python parser that supports "
"error recovery and round-trip parsing for different Python versions (in "
"multiple Python versions). Parso is also able to list multiple syntax errors "
"in your python file."
msgstr ""

#~ msgid ""
#~ "Old classes :class:`ast.Num`, :class:`ast.Str`, :class:`ast.Bytes`, :"
#~ "class:`ast.NameConstant` and :class:`ast.Ellipsis` are still available, "
#~ "but they will be removed in future Python releases.  In the meanwhile, "
#~ "instantiating them will return an instance of a different class."
#~ msgstr ""
#~ "Las clases antiguas :class:`ast.Num`, :class:`ast.Str`, :class:`ast."
#~ "Bytes`, :class:`ast.NameConstant` y :class:`ast.Ellipsis` todavía están "
#~ "disponibles, pero se eliminarán en futuras versiones de Python. Mientras "
#~ "tanto, instanciarlos retornará una instancia de una clase diferente."
