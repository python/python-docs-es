# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-05 12:54+0200\n"
"PO-Revision-Date: 2020-09-29 08:55-0300\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language: es_AR\n"
"X-Generator: Poedit 2.4.1\n"

#: ../Doc/library/fractions.rst:2
msgid ":mod:`fractions` --- Rational numbers"
msgstr ":mod:`fractions` --- Números racionales"

#: ../Doc/library/fractions.rst:10
msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**Source code:** :source:`Lib/fractions.py`"

#: ../Doc/library/fractions.rst:14
msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ""
"El módulo :mod:`fractions` provee soporte para aritmética de números "
"racionales."

#: ../Doc/library/fractions.rst:17
msgid ""
"A Fraction instance can be constructed from a pair of integers, from another "
"rational number, or from a string."
msgstr ""
"Una instancia de *Fraction* puede construirse desde dos enteros, desde otro "
"número racional, o desde una cadena de caracteres."

#: ../Doc/library/fractions.rst:26
msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is :const:`0`, it "
"raises a :exc:`ZeroDivisionError`. The second version requires that "
"*other_fraction* is an instance of :class:`numbers.Rational` and returns a :"
"class:`Fraction` instance with the same value.  The next two versions accept "
"either a :class:`float` or a :class:`decimal.Decimal` instance, and return "
"a :class:`Fraction` instance with exactly the same value.  Note that due to "
"the usual issues with binary floating-point (see :ref:`tut-fp-issues`), the "
"argument to ``Fraction(1.1)`` is not exactly equal to 11/10, and so "
"``Fraction(1.1)`` does *not* return ``Fraction(11, 10)`` as one might "
"expect. (But see the documentation for the :meth:`limit_denominator` method "
"below.) The last version of the constructor expects a string or unicode "
"instance. The usual form for this instance is::"
msgstr ""
"La primera versión necesita que *numerator* y *denominator* sean instancias "
"de :class:`numbers.Rational`  y retorna una nueva instancia de :class:"
"`Fraction` con valor ``numerator/denominator``. Si *denominator* es :const:"
"`0`, esto arrojará un error :exc:`ZeroDivisionError`. La segunda versión "
"necesita que *other_fraction* sea una instancia de :class:`numbers.Rational` "
"y retorna una instancia :class:`Fraction`  con el mismo valor. Las restantes "
"dos versiones aceptan igualmente instancias :class:`float` o :class:`decimal."
"Decimal` y retornan una instancia :class:`Fraction` con exactamente el mismo "
"valor. Nota que debido a los problemas usuales con la representación binaria "
"en punto flotante (ver :ref:`tut-fp-issues`), el argumento de "
"``Fraction(1.1)`` no es exactamente igual a 11/10, por lo que "
"``Fraction(1.1)`` no retorna ``Fraction(11, 10)`` como uno esperaría. (Mira "
"la documentación para el método :meth:`limit_denominator` abajo.) La última "
"versión del constructor espera una cadena de caracteres o una instancia "
"Unicode. La forma usual para esta instancia es:"

#: ../Doc/library/fractions.rst:43
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits.  In addition, "
"any string that represents a finite value and is accepted by the :class:"
"`float` constructor is also accepted by the :class:`Fraction` constructor.  "
"In either form the input string may also have leading and/or trailing "
"whitespace. Here are some examples::"
msgstr ""
"donde el ``sign`` opcional puede ser '+' o '-' y ``numerator`` y "
"``denominator`` (si están presentes) son cadenas de caracteres de dígitos "
"decimales. Además, cualquier cadena de caracteres que represente un valor "
"finito y sea aceptado por el constructor de :class:`float` también es "
"aceptado por el constructor de :class:`Fraction`. En cualquier caso, la "
"cadena de caracteres de entrada también puede tener espacios en blanco "
"iniciales y / o finales. Aquí hay unos ejemplos:"

#: ../Doc/library/fractions.rst:77
msgid ""
"The :class:`Fraction` class inherits from the abstract base class :class:"
"`numbers.Rational`, and implements all of the methods and operations from "
"that class.  :class:`Fraction` instances are hashable, and should be treated "
"as immutable.  In addition, :class:`Fraction` has the following properties "
"and methods:"
msgstr ""
"La clase :class:`Fraction` hereda de la clase base abstracta :class:`numbers."
"Rational`, e implementa todos los métodos y operaciones de esa clase. Las "
"instancias :class:`Fraction` son *hashable*, y deben ser tratadas como "
"inmutables. Adicionalmente :class:`Fraction` tiene los siguientes métodos y "
"propiedades:"

#: ../Doc/library/fractions.rst:83
msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and :class:"
"`decimal.Decimal` instances."
msgstr ""
"El constructor de :class:`Fraction` ahora acepta instancias de :class:"
"`float` y :class:`decimal`."

#: ../Doc/library/fractions.rst:90
msgid "Numerator of the Fraction in lowest term."
msgstr "Numerador de la fracción irreducible."

#: ../Doc/library/fractions.rst:94
msgid "Denominator of the Fraction in lowest term."
msgstr "Denominador de la fracción irreducible."

#: ../Doc/library/fractions.rst:99
msgid ""
"Return a tuple of two integers, whose ratio is equal to the Fraction and "
"with a positive denominator."
msgstr ""
"Retorna una tupla de dos enteros, cuyo ratio es igual a la fracción y con un "
"denominador positivo."

#: ../Doc/library/fractions.rst:106
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *flt*, which must be a :class:`float`. Beware that ``Fraction."
"from_float(0.3)`` is not the same value as ``Fraction(3, 10)``."
msgstr ""
"Este método de clase construye una instancia de :class:`Fraction` "
"representando el valor exacto de *flt* que debe ser un :class:`float`. Ten "
"cuidado, observa que ``Fraction.from_float(0.3)`` no es el mismo valor que "
"``Fraction(3, 10)``."

#: ../Doc/library/fractions.rst:112
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`float`."
msgstr ""
"Desde Python 3.2 en adelante, puedes construir una instancia :class:"
"`Fraction` directamente desde :class:`float`."

#: ../Doc/library/fractions.rst:118
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *dec*, which must be a :class:`decimal.Decimal` instance."
msgstr ""
"Este método de clase construye una instancia de :class:`Fraction` "
"representando el valor exacto de *dec*, que debe ser una instancia de :class:"
"`decimal.Decimal`."

#: ../Doc/library/fractions.rst:123
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`decimal.Decimal` instance."
msgstr ""
"Desde Python 3.2 en adelante, puedes construir una instancia :class:"
"`Fraction` directamente desde una instancia :class:`decimal.Decimal`."

#: ../Doc/library/fractions.rst:130
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""
"Busca y retorna la instancia de :class:`Fraction` mas cercana a ``self`` que "
"tenga como denominador *max_denominator*. Este método es útil para encontrar "
"aproximaciones racionales a un número en punto flotante determinado:"

#: ../Doc/library/fractions.rst:138
msgid "or for recovering a rational number that's represented as a float:"
msgstr ""
"o para recuperar un numero racional que esta representado como flotante:"

#: ../Doc/library/fractions.rst:151
msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr ""
"Retorna el máximo :class:`int` ``<= self``. Este método puede accederse "
"también a través de la función :func:`math.floor`:"

#: ../Doc/library/fractions.rst:161
msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr ""
"Retorna el mínimo :class:`int` ``>= self``. Este método puede accederse "
"también a través de la función :func:`math.ceil`."

#: ../Doc/library/fractions.rst:168
msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple of "
"``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again "
"rounding half toward even.  This method can also be accessed through the :"
"func:`round` function."
msgstr ""
"La primera versión retorna el valor :class:`int` mas cercano a ``self`` "
"redondeando mitades al valor par. La segunda versión redondea ``self`` al "
"múltiplo mas cercano de ``Fraction(1, 10**ndigits)`` (lógicamente, si "
"``ndigits`` es negativo), nuevamente redondeando mitades al valor par. Este "
"método también puede accederse a través de la función :func:`round`."

#: ../Doc/library/fractions.rst:177
msgid ""
"Return the greatest common divisor of the integers *a* and *b*.  If either "
"*a* or *b* is nonzero, then the absolute value of ``gcd(a, b)`` is the "
"largest integer that divides both *a* and *b*.  ``gcd(a,b)`` has the same "
"sign as *b* if *b* is nonzero; otherwise it takes the sign of *a*.  ``gcd(0, "
"0)`` returns ``0``."
msgstr ""
"Retorna el máximo común divisor de los enteros *a* y *b*. Si *a* o *b* no "
"son cero, entonces el valor absoluto de ``gcd(a, b)`` es el entero mas "
"grande que divide ambos, *a* y *b*. ``gcd(a,b)`` tiene el mismo signo que "
"*b* si *b* no es cero; sino toma el signo de *a*. ``gcd(0, 0)`` retorna "
"``0``."

#: ../Doc/library/fractions.rst:183
msgid "Use :func:`math.gcd` instead."
msgstr "Usa en cambio la función :func:`math.gcd`."

#: ../Doc/library/fractions.rst:189
msgid "Module :mod:`numbers`"
msgstr "Módulo :mod:`numbers`"

#: ../Doc/library/fractions.rst:190
msgid "The abstract base classes making up the numeric tower."
msgstr "Las clases base abstractas que representan la jerarquía de números."
