# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-19 11:16+0100\n"
"PO-Revision-Date: 2020-05-16 16:48+0200\n"
"Last-Translator: Cristián Maureira-Fredes <cmaureirafredes@gmail.com>\n"
"Language: es\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../Doc/c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "Objetos de números complejos"

#: ../Doc/c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Los objetos de números complejos de Python se implementan como dos tipos "
"distintos cuando se ven desde la API de C: uno es el objeto de Python "
"expuesto a los programas de Python, y el otro es una estructura en C que "
"representa el valor de número complejo real. La API proporciona funciones "
"para trabajar con ambos."

#: ../Doc/c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "Números complejos como estructuras C"

#: ../Doc/c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"Tenga en cuenta que las funciones que aceptan estas estructuras como "
"parámetros y las retornan como resultados lo hacen *por valor* en lugar de "
"desreferenciarlas a través de punteros. Esto es consistente en toda la API."

#: ../Doc/c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr ""
"La estructura C que corresponde a la porción de valor de un objeto de número "
"complejo de Python. La mayoría de las funciones para tratar con objetos de "
"números complejos utilizan estructuras de este tipo como valores de entrada "
"o salida, según corresponda. Se define como::"

#: ../Doc/c-api/complex.rst:39
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Retorna la suma de dos números complejos, utilizando la representación C :c:"
"type:`Py_complex`."

#: ../Doc/c-api/complex.rst:45
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Retorna la diferencia entre dos números complejos, usando la representación "
"C :c:type:`Py_complex`."

#: ../Doc/c-api/complex.rst:51
msgid ""
"Return the negation of the complex number *complex*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Retorna la negación del número complejo *complex*, utilizando la "
"representación C :c:type:`Py_complex`."

#: ../Doc/c-api/complex.rst:57
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Retorna el producto de dos números complejos, usando la representación C :c:"
"type:`Py_complex`."

#: ../Doc/c-api/complex.rst:63
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Retorna el cociente de dos números complejos, utilizando la representación "
"C :c:type:`Py_complex`."

#: ../Doc/c-api/complex.rst:66
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:data:`EDOM`."
msgstr ""
"Si *divisor* es nulo, este método retorna cero y establece :c:data:`errno` "
"en :c:data:`EDOM`."

#: ../Doc/c-api/complex.rst:72
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Retorna la exponenciación de *num* por *exp*, utilizando la representación "
"C :c:type:`Py_complex`."

#: ../Doc/c-api/complex.rst:75
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:data:`EDOM`."
msgstr ""
"Si *num* es nulo y *exp* no es un número real positivo, este método retorna "
"cero y establece :c:data:`errno` a :c:data:`EDOM`."

#: ../Doc/c-api/complex.rst:80
msgid "Complex Numbers as Python Objects"
msgstr "Números complejos como objetos de Python"

#: ../Doc/c-api/complex.rst:85
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr ""
"Este subtipo de :c:type:`PyObject` representa un objeto de número complejo "
"de Python."

#: ../Doc/c-api/complex.rst:90
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"Esta instancia de :c:type:`PyTypeObject` representa el tipo de número "
"complejo de Python. Es el mismo objeto que :class:`complex` en la capa de "
"Python."

#: ../Doc/c-api/complex.rst:96
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Retorna verdadero si su argumento es a :c:type:`PyComplexObject` o un "
"subtipo de :c:type:`PyComplexObject`."

#: ../Doc/c-api/complex.rst:102
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Retorna verdadero si su argumento es un :c:type:`PyComplexObject`, pero no "
"un subtipo de :c:type:`PyComplexObject`."

#: ../Doc/c-api/complex.rst:108
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr ""
"Crea un nuevo objeto de número complejo de Python a partir de un valor C :c:"
"type:`Py_complex`."

#: ../Doc/c-api/complex.rst:113
msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr "Retorna un nuevo objeto :c:type:`PyComplexObject` de *real* e *imag*."

#: ../Doc/c-api/complex.rst:118
msgid "Return the real part of *op* as a C :c:type:`double`."
msgstr "Retorna la parte real de *op* como :c:type:`double` en C."

#: ../Doc/c-api/complex.rst:123
msgid "Return the imaginary part of *op* as a C :c:type:`double`."
msgstr "Retorna la parte imaginaria de *op* como un :c:type:`double` de C."

#: ../Doc/c-api/complex.rst:128
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "Retorna el valor :c:type:`Py_complex` del número complejo *op*."

#: ../Doc/c-api/complex.rst:130
msgid ""
"If *op* is not a Python complex number object but has a :meth:`__complex__` "
"method, this method will first be called to convert *op* to a Python complex "
"number object.  If ``__complex__()`` is not defined then it falls back to :"
"meth:`__float__`.  If ``__float__()`` is not defined then it falls back to :"
"meth:`__index__`.  Upon failure, this method returns ``-1.0`` as a real "
"value."
msgstr ""
"Si *op* no es un objeto de número complejo de Python pero tiene un método :"
"meth:`__complex__`, primero se llamará a este método para convertir *op* en "
"un objeto de número complejo de Python. Si ``__complex__()`` no está "
"definido, vuelve a :meth:`__float__`. Si ``__float__()`` no está definido, "
"entonces recurre a :meth:`__index__`. En caso de falla, este método retorna "
"``-1.0`` como un valor real."

#: ../Doc/c-api/complex.rst:137
msgid "Use :meth:`__index__` if available."
msgstr "Use :meth:`__index__` si está disponible."
