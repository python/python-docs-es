# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-05 12:54+0200\n"
"PO-Revision-Date: 2020-05-16 23:16+0200\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: Cristián Maureira-Fredes <cmaureirafredes@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 2.3\n"

#: ../Doc/c-api/capsule.rst:6
msgid "Capsules"
msgstr "Cápsulas"

#: ../Doc/c-api/capsule.rst:10
msgid ""
"Refer to :ref:`using-capsules` for more information on using these objects."
msgstr ""
"Consulta :ref:`using-capsules` para obtener más información sobre el uso de "
"estos objetos."

#: ../Doc/c-api/capsule.rst:17
msgid ""
"This subtype of :c:type:`PyObject` represents an opaque value, useful for C "
"extension modules who need to pass an opaque value (as a :c:type:`void\\*` "
"pointer) through Python code to other C code.  It is often used to make a C "
"function pointer defined in one module available to other modules, so the "
"regular import mechanism can be used to access C APIs defined in dynamically "
"loaded modules."
msgstr ""
"Este subtipo de :c:type:`PyObject` representa un valor opaco, útil para los "
"módulos de extensión C que necesitan pasar un valor opaco (como un puntero :"
"c:type:`void\\*`) a través del código Python a otro código C . A menudo se "
"usa para hacer que un puntero de función C definido en un módulo esté "
"disponible para otros módulos, por lo que el mecanismo de importación "
"regular se puede usar para acceder a las API C definidas en módulos cargados "
"dinámicamente."

#: ../Doc/c-api/capsule.rst:27
msgid "The type of a destructor callback for a capsule.  Defined as::"
msgstr ""
"El tipo de devolución de llamada de un destructor para una cápsula. Definido "
"como::"

#: ../Doc/c-api/capsule.rst:31
msgid ""
"See :c:func:`PyCapsule_New` for the semantics of PyCapsule_Destructor "
"callbacks."
msgstr ""
"Consulte :c:func:`PyCapsule_New` para conocer la semántica de las "
"devoluciones de llamada de `PyCapsule_Destructor`."

#: ../Doc/c-api/capsule.rst:37
msgid "Return true if its argument is a :c:type:`PyCapsule`."
msgstr "Retorna verdadero si su argumento es a :c:type:`PyCapsule`."

#: ../Doc/c-api/capsule.rst:42
msgid ""
"Create a :c:type:`PyCapsule` encapsulating the *pointer*.  The *pointer* "
"argument may not be ``NULL``."
msgstr ""
"Crea un :c:type:`PyCapsule` encapsulando el *pointer*. El argumento "
"*pointer* puede no ser ``NULL``."

#: ../Doc/c-api/capsule.rst:45
msgid "On failure, set an exception and return ``NULL``."
msgstr "En caso de falla, establece una excepción y retorna ``NULL``."

#: ../Doc/c-api/capsule.rst:47
msgid ""
"The *name* string may either be ``NULL`` or a pointer to a valid C string.  "
"If non-``NULL``, this string must outlive the capsule.  (Though it is "
"permitted to free it inside the *destructor*.)"
msgstr ""
"La cadena de caracteres *name* puede ser ``NULL`` o un puntero a una cadena "
"C válida. Si no es ``NULL``, esta cadena de caracteres debe sobrevivir a la "
"cápsula. (Aunque está permitido liberarlo dentro del *destructor*)."

#: ../Doc/c-api/capsule.rst:51
msgid ""
"If the *destructor* argument is not ``NULL``, it will be called with the "
"capsule as its argument when it is destroyed."
msgstr ""
"Si el argumento *destructor* no es ``NULL``, se llamará con la cápsula como "
"argumento cuando se destruya."

#: ../Doc/c-api/capsule.rst:54
msgid ""
"If this capsule will be stored as an attribute of a module, the *name* "
"should be specified as ``modulename.attributename``.  This will enable other "
"modules to import the capsule using :c:func:`PyCapsule_Import`."
msgstr ""
"Si esta cápsula se almacenará como un atributo de un módulo, el nombre "
"*name* debe especificarse como ``modulename.attributename``. Esto permitirá "
"que otros módulos importen la cápsula usando :c:func:`PyCapsule_Import`."

#: ../Doc/c-api/capsule.rst:61
msgid ""
"Retrieve the *pointer* stored in the capsule.  On failure, set an exception "
"and return ``NULL``."
msgstr ""
"Recupera el *pointer* almacenado en la cápsula. En caso de falla, establece "
"una excepción y retorna  ``NULL``."

#: ../Doc/c-api/capsule.rst:64
msgid ""
"The *name* parameter must compare exactly to the name stored in the capsule. "
"If the name stored in the capsule is ``NULL``, the *name* passed in must "
"also be ``NULL``.  Python uses the C function :c:func:`strcmp` to compare "
"capsule names."
msgstr ""
"El parámetro *name* debe compararse exactamente con el nombre almacenado en "
"la cápsula. Si el nombre almacenado en la cápsula es ``NULL``, el *name* "
"pasado también debe ser ``NULL``. Python usa la función C :c:func:`strcmp` "
"para comparar nombres de cápsulas."

#: ../Doc/c-api/capsule.rst:72
msgid ""
"Return the current destructor stored in the capsule.  On failure, set an "
"exception and return ``NULL``."
msgstr ""
"Retorna el destructor actual almacenado en la cápsula. En caso de falla, "
"establece una excepción y retorna ``NULL``."

#: ../Doc/c-api/capsule.rst:75
msgid ""
"It is legal for a capsule to have a ``NULL`` destructor.  This makes a "
"``NULL`` return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :"
"c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Es legal que una cápsula tenga un destructor ``NULL``. Esto hace que un "
"código de retorno ``NULL`` sea algo ambiguo; use :c:func:`PyCapsule_IsValid` "
"o :c:func:`PyErr_Occurred` para desambiguar."

#: ../Doc/c-api/capsule.rst:82
msgid ""
"Return the current context stored in the capsule.  On failure, set an "
"exception and return ``NULL``."
msgstr ""
"Retorna el contexto actual almacenado en la cápsula. En caso de falla, "
"establece una excepción y retorna ``NULL``."

#: ../Doc/c-api/capsule.rst:85
msgid ""
"It is legal for a capsule to have a ``NULL`` context.  This makes a ``NULL`` "
"return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""
"Es legal que una cápsula tenga un contexto ``NULL``. Esto hace que un código "
"de retorno ``NULL`` sea algo ambiguo; use :c:func:`PyCapsule_IsValid` o :c:"
"func:`PyErr_Occurred` para desambiguar."

#: ../Doc/c-api/capsule.rst:92
msgid ""
"Return the current name stored in the capsule.  On failure, set an exception "
"and return ``NULL``."
msgstr ""
"Retorna el nombre actual almacenado en la cápsula. En caso de falla, "
"establece una excepción y retorna ``NULL``."

#: ../Doc/c-api/capsule.rst:95
msgid ""
"It is legal for a capsule to have a ``NULL`` name.  This makes a ``NULL`` "
"return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""
"Es legal que una cápsula tenga un nombre ``NULL``. Esto hace que un código "
"de retorno ``NULL`` sea algo ambiguo; use :c:func:`PyCapsule_IsValid` o :c:"
"func:`PyErr_Occurred` para desambiguar."

#: ../Doc/c-api/capsule.rst:102
msgid ""
"Import a pointer to a C object from a capsule attribute in a module.  The "
"*name* parameter should specify the full name to the attribute, as in "
"``module.attribute``.  The *name* stored in the capsule must match this "
"string exactly.  If *no_block* is true, import the module without blocking "
"(using :c:func:`PyImport_ImportModuleNoBlock`).  If *no_block* is false, "
"import the module conventionally (using :c:func:`PyImport_ImportModule`)."
msgstr ""
"Importa un puntero a un objeto C desde un atributo cápsula en un módulo. El "
"parámetro *name* debe especificar el nombre completo del atributo, como en "
"``module.attribute``. El nombre *name* almacenado en la cápsula debe "
"coincidir exactamente con esta cadena de caracteres. Si *no_block* es "
"verdadero, importa el módulo sin bloquear (usando :c:func:"
"`PyImport_ImportModuleNoBlock`). Si *no_block* es falso, importa el módulo "
"convencionalmente (usando :c:func:`PyImport_ImportModule`)."

#: ../Doc/c-api/capsule.rst:109
msgid ""
"Return the capsule's internal *pointer* on success.  On failure, set an "
"exception and return ``NULL``."
msgstr ""
"Retorna el puntero *pointer* interno de la cápsula en caso de éxito. En caso "
"de falla, establece una excepción y retorna ``NULL``."

#: ../Doc/c-api/capsule.rst:115
msgid ""
"Determines whether or not *capsule* is a valid capsule.  A valid capsule is "
"non-``NULL``, passes :c:func:`PyCapsule_CheckExact`, has a non-``NULL`` "
"pointer stored in it, and its internal name matches the *name* parameter.  "
"(See :c:func:`PyCapsule_GetPointer` for information on how capsule names are "
"compared.)"
msgstr ""
"Determina si *capsule* es o no una cápsula válida. Una cápsula válida no es "
"``NULL``, pasa :c:func:`PyCapsule_CheckExact`, tiene un puntero no ``NULL`` "
"almacenado y su nombre interno coincide con el parámetro *name*. (Consulte :"
"c:func:`PyCapsule_GetPointer` para obtener información sobre cómo se "
"comparan los nombres de las cápsulas)."

#: ../Doc/c-api/capsule.rst:121
msgid ""
"In other words, if :c:func:`PyCapsule_IsValid` returns a true value, calls "
"to any of the accessors (any function starting with :c:func:`PyCapsule_Get`) "
"are guaranteed to succeed."
msgstr ""
"En otras palabras, si :c:func:`PyCapsule_IsValid` retorna un valor "
"verdadero, las llamadas a cualquiera de las funciones de acceso (cualquier "
"función que comience con :c:func:`PyCapsule_Get`) tienen éxito."

#: ../Doc/c-api/capsule.rst:125
msgid ""
"Return a nonzero value if the object is valid and matches the name passed "
"in. Return ``0`` otherwise.  This function will not fail."
msgstr ""
"Retorna un valor distinto de cero si el objeto es válido y coincide con el "
"nombre pasado. Retorna ``0`` de lo contrario. Esta función no fallará."

#: ../Doc/c-api/capsule.rst:131
msgid "Set the context pointer inside *capsule* to *context*."
msgstr "Establece el puntero de contexto dentro de *capsule* a *context*."

#: ../Doc/c-api/capsule.rst:133 ../Doc/c-api/capsule.rst:140
#: ../Doc/c-api/capsule.rst:149 ../Doc/c-api/capsule.rst:157
msgid ""
"Return ``0`` on success.  Return nonzero and set an exception on failure."
msgstr ""
"Retorna ``0`` en caso de éxito. Retorna distinto de cero y establece una "
"excepción en caso de error."

#: ../Doc/c-api/capsule.rst:138
msgid "Set the destructor inside *capsule* to *destructor*."
msgstr "Establece el destructor dentro de *capsule* en *destructor*."

#: ../Doc/c-api/capsule.rst:145
msgid ""
"Set the name inside *capsule* to *name*.  If non-``NULL``, the name must "
"outlive the capsule.  If the previous *name* stored in the capsule was not "
"``NULL``, no attempt is made to free it."
msgstr ""
"Establece el nombre dentro de *capsule* a *name*. Si no es ``NULL``, el "
"nombre debe sobrevivir a la cápsula. Si el *name* anterior almacenado en la "
"cápsula no era ``NULL``, no se intenta liberarlo."

#: ../Doc/c-api/capsule.rst:154
msgid ""
"Set the void pointer inside *capsule* to *pointer*.  The pointer may not be "
"``NULL``."
msgstr ""
"Establece el puntero vacío dentro de *capsule* a *pointer*. El puntero puede "
"no ser ``NULL``."
