# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-05-09 15:46+0200\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language: es\n"
"X-Generator: Poedit 2.3\n"

#: ../Doc/c-api/iterator.rst:6
msgid "Iterator Objects"
msgstr "Objetos iteradores"

#: ../Doc/c-api/iterator.rst:8
msgid ""
"Python provides two general-purpose iterator objects.  The first, a sequence "
"iterator, works with an arbitrary sequence supporting the :meth:"
"`__getitem__` method.  The second works with a callable object and a "
"sentinel value, calling the callable for each item in the sequence, and "
"ending the iteration when the sentinel value is returned."
msgstr ""
"Python proporciona dos objetos iteradores de propósito general. El primero, "
"un iterador de secuencia, funciona con una secuencia arbitraria que admite "
"el método :meth:`__getitem__`. El segundo funciona con un objeto invocable y "
"un valor centinela, llamando al invocable para cada elemento de la secuencia "
"y finalizando la iteración cuando se retorna el valor centinela."

#: ../Doc/c-api/iterator.rst:17
msgid ""
"Type object for iterator objects returned by :c:func:`PySeqIter_New` and the "
"one-argument form of the :func:`iter` built-in function for built-in "
"sequence types."
msgstr ""
"Objeto tipo para objetos iteradores retornados por :c:func:`PySeqIter_New` y "
"la forma de un argumento de la función incorporada :func:`iter` para los "
"tipos de secuencia incorporados."

#: ../Doc/c-api/iterator.rst:24
msgid "Return true if the type of *op* is :c:data:`PySeqIter_Type`."
msgstr "Retorna verdadero si el tipo de *op* es :c:data:`PySeqIter_Type`."

#: ../Doc/c-api/iterator.rst:29
msgid ""
"Return an iterator that works with a general sequence object, *seq*.  The "
"iteration ends when the sequence raises :exc:`IndexError` for the "
"subscripting operation."
msgstr ""
"Retorna un iterador que funciona con un objeto de secuencia general, *seq*. "
"La iteración termina cuando la secuencia lanza :exc:`IndexError` para la "
"operación de suscripción."

#: ../Doc/c-api/iterator.rst:36
msgid ""
"Type object for iterator objects returned by :c:func:`PyCallIter_New` and "
"the two-argument form of the :func:`iter` built-in function."
msgstr ""
"Objeto tipo para los objetos iteradores retornados por :c:func:"
"`PyCallIter_New` y la forma de dos argumentos de la función incorporada :"
"func:`iter`."

#: ../Doc/c-api/iterator.rst:42
msgid "Return true if the type of *op* is :c:data:`PyCallIter_Type`."
msgstr "Retorna verdadero si el tipo de *op* es :c:data:`PyCallIter_Type`."

#: ../Doc/c-api/iterator.rst:47
msgid ""
"Return a new iterator.  The first parameter, *callable*, can be any Python "
"callable object that can be called with no parameters; each call to it "
"should return the next item in the iteration.  When *callable* returns a "
"value equal to *sentinel*, the iteration will be terminated."
msgstr ""
"Retorna un nuevo iterador. El primer parámetro, *callable*, puede ser "
"cualquier objeto invocable de Python que se pueda invocar sin parámetros; "
"cada llamada debe retornar el siguiente elemento en la iteración. Cuando "
"*callable* retorna un valor igual a *sentinel*, la iteración finalizará."
