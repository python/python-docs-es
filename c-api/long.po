# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-19 11:16+0100\n"
"PO-Revision-Date: 2020-05-21 22:18+0200\n"
"Last-Translator: Cristián Maureira-Fredes <cmaureirafredes@gmail.com>\n"
"Language: es\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../Doc/c-api/long.rst:6
msgid "Integer Objects"
msgstr "Objetos Enteros"

#: ../Doc/c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr ""
"Todos los enteros se implementan como objetos enteros \"largos\" (*long*) de "
"tamaño arbitrario."

#: ../Doc/c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"En caso de error, la mayoría de las API ``PyLong_As*`` retornan ``(tipo de "
"retorno) -1`` que no se puede distinguir de un número. Use :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../Doc/c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""
"Este subtipo de :c:type:`PyObject` representa un objeto entero de Python."

#: ../Doc/c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"Esta instancia de :c:type:`PyTypeObject` representa el tipo entero de "
"Python. Este es el mismo objeto que :class:`int` en la capa de Python."

#: ../Doc/c-api/long.rst:29
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Retorna verdadero si su argumento es un :c:type:`PyLongObject` o un subtipo "
"de :c:type:`PyLongObject`."

#: ../Doc/c-api/long.rst:35
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Retorna verdadero si su argumento es un :c:type:`PyLongObject`, pero no un "
"subtipo de :c:type:`PyLongObject`."

#: ../Doc/c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Retorna un objeto :c:type:`PyLongObject` nuevo desde *v*, o ``NULL`` en caso "
"de error."

#: ../Doc/c-api/long.rst:43
#, fuzzy
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``, when you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""
"La implementación actual mantiene un arreglo de objetos enteros para todos "
"los enteros entre ``-5`` y ``256``, cuando crea un *int* en ese rango, en "
"realidad solo obtiene una referencia al objeto existente. Por lo tanto, "
"debería ser posible cambiar el valor de ``1``. Sospecho que el "
"comportamiento de Python en este caso no está definido. :-)"

#: ../Doc/c-api/long.rst:50
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long`, "
"or ``NULL`` on failure."
msgstr ""
"Retorna un objeto :c:type:`PyLongObject` nuevo desde un C :c:type:`unsigned "
"long`, o ``NULL`` en caso de error."

#: ../Doc/c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"``NULL`` on failure."
msgstr ""
"Retorna un objeto :c:type:`PyLongObject` nuevo desde un C :c:type:"
"`Py_ssize_t`, o ``NULL`` en caso de error."

#: ../Doc/c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"Retorna un objeto :c:type:`PyLongObject` nuevo desde un C :c:type:`size_t`, "
"o ``NULL`` en caso de error."

#: ../Doc/c-api/long.rst:68
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`long long`, or "
"``NULL`` on failure."
msgstr ""
"Retorna un objeto :c:type:`PyLongObject` nuevo desde un C :c:type:`long "
"long`, o ``NULL`` en caso de error."

#: ../Doc/c-api/long.rst:74
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"Retorna un objeto :c:type:`PyLongObject` nuevo desde un C :c:type:`unsigned "
"long long`, o ``NULL`` en caso de error."

#: ../Doc/c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr ""
"Retorna un nuevo objeto :c:type:`PyLongObject` de la parte entera de *v*, o "
"``NULL`` en caso de error."

#: ../Doc/c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is non-"
"``NULL``, *\\*pend* will point to the first character in *str* which follows "
"the representation of the number.  If *base* is ``0``, *str* is interpreted "
"using the :ref:`integers` definition; in this case, leading zeros in a non-"
"zero decimal number raises a :exc:`ValueError`. If *base* is not ``0``, it "
"must be between ``2`` and ``36``, inclusive.  Leading spaces and single "
"underscores after a base specifier and between digits are ignored.  If there "
"are no digits, :exc:`ValueError` will be raised."
msgstr ""
"Retorna un nuevo :c:type:`PyLongObject` basado en el valor de cadena de "
"caracteres en *str*, que se interpreta de acuerdo con la raíz en *base*. Si "
"*pend* no es ``NULL``, *\\* pend* apuntará al primer carácter en *str* que "
"sigue a la representación del número. Si *base* es ``0``, *str* se "
"interpreta utilizando la definición :ref:`integers`; en este caso, los ceros "
"a la izquierda en un número decimal distinto de cero lanzan un :exc:"
"`ValueError`. Si *base* no es ``0``, debe estar entre ``2`` y ``36``, "
"inclusive. Se ignoran los espacios iniciales y los guiones bajos "
"individuales después de un especificador base y entre dígitos. Si no hay "
"dígitos, se lanzará :exc:`ValueError`."

#: ../Doc/c-api/long.rst:99
msgid "Convert a sequence of Unicode digits to a Python integer value."
msgstr ""

#: ../Doc/c-api/long.rst:103
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyLong_FromUnicodeObject`."
msgstr ""
"Parte de la API de viejo estilo :c:type:`Py_UNICODE`; por favor migrar para "
"usar :c:func:`PyLong_FromUnicodeObject`."

#: ../Doc/c-api/long.rst:108
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr ""

#: ../Doc/c-api/long.rst:116
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"Crea un entero de Python desde el puntero *p*. El valor del puntero se puede "
"recuperar del valor resultante usando :c:func:`PyLong_AsVoidPtr`."

#: ../Doc/c-api/long.rst:127 ../Doc/c-api/long.rst:146
msgid ""
"Return a C :c:type:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` or :"
"meth:`__int__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Retorna una representación de C :c:type:`long` de *obj*. Si *obj* no es una "
"instancia de :c:type:`PyLongObject`, primero llama a su método :meth:"
"`__index__` o :meth:`__int__` (si está presente) para convertirlo en un :c:"
"type:`PyLongObject`."

#: ../Doc/c-api/long.rst:132
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"type:`long`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *obj* está fuera de rango para un :"
"c:type:`long`."

#: ../Doc/c-api/long.rst:135 ../Doc/c-api/long.rst:156
#: ../Doc/c-api/long.rst:178 ../Doc/c-api/long.rst:199
#: ../Doc/c-api/long.rst:222
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Retorna ``-1`` en caso de error. Use :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../Doc/c-api/long.rst:137 ../Doc/c-api/long.rst:158
#: ../Doc/c-api/long.rst:180 ../Doc/c-api/long.rst:203
#: ../Doc/c-api/long.rst:288 ../Doc/c-api/long.rst:308
msgid "Use :meth:`__index__` if available."
msgstr "Use :meth:`__index__` si está disponible."

#: ../Doc/c-api/long.rst:140 ../Doc/c-api/long.rst:161
#: ../Doc/c-api/long.rst:183 ../Doc/c-api/long.rst:206
#: ../Doc/c-api/long.rst:291 ../Doc/c-api/long.rst:311
msgid "Using :meth:`__int__` is deprecated."
msgstr "Usar :meth:`__int__` está deprecado."

#: ../Doc/c-api/long.rst:151
msgid ""
"If the value of *obj* is greater than :const:`LONG_MAX` or less than :const:"
"`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and return "
"``-1``; otherwise, set *\\*overflow* to ``0``.  If any other exception "
"occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Si el valor de *obj* es mayor que :const:`LONG_MAX` o menor que :const:"
"`LONG_MIN`, establece *\\*overflow * en ``1`` o ``-1``, respectivamente, y "
"retorna ``-1``; de lo contrario, establece *\\*overflow* en ``0``. Si se "
"produce alguna otra excepción, configura *\\*overflow* en ``0`` y retorna "
"``-1`` como de costumbre."

#: ../Doc/c-api/long.rst:170 ../Doc/c-api/long.rst:189
msgid ""
"Return a C :c:type:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` or :"
"meth:`__int__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Retorna una representación de C :c:type:`long long` de *obj*. Si *obj* no es "
"una instancia de :c:type:`PyLongObject`, primero llama a su método :meth:"
"`__index__` o :meth:`__int__` (si está presente) para convertirlo en un :c:"
"type:`PyLongObject`."

#: ../Doc/c-api/long.rst:175
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"type:`long long`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *obj* está fuera de rango para un :"
"c:type:`long long`."

#: ../Doc/c-api/long.rst:194
#, fuzzy
msgid ""
"If the value of *obj* is greater than :const:`LLONG_MAX` or less than :const:"
"`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and return "
"``-1``; otherwise, set *\\*overflow* to ``0``.  If any other exception "
"occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Si el valor de *obj* es mayor que :const:`LONG_MAX` o menor que :const:"
"`LONG_MIN`, establece *\\*overflow * en ``1`` o ``-1``, respectivamente, y "
"retorna ``-1``; de lo contrario, establece *\\*overflow* en ``0``. Si se "
"produce alguna otra excepción, configura *\\*overflow* en ``0`` y retorna "
"``-1`` como de costumbre."

#: ../Doc/c-api/long.rst:216
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna una representación de C :c:type:`Py_ssize_t` de *pylong*. *pylong* "
"debe ser una instancia de :c:type:`PyLongObject`."

#: ../Doc/c-api/long.rst:219
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *pylong* está fuera de rango para "
"un :c:type:`Py_ssize_t`."

#: ../Doc/c-api/long.rst:231
msgid ""
"Return a C :c:type:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna una representación de C :c:type:`unsigned long` de *pylong*. "
"*pylong* debe ser una instancia de :c:type:`PyLongObject`."

#: ../Doc/c-api/long.rst:234
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`unsigned long`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *pylong* está fuera de rango para "
"un :c:type:`unsigned long`."

#: ../Doc/c-api/long.rst:237
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(unsigned long)-1`` en caso de error. Use :c:func:`PyErr_Occurred` "
"para desambiguar."

#: ../Doc/c-api/long.rst:247
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna una representación de C :c:type:`size_t` de *pylong*. *pylong* debe "
"ser una instancia de :c:type:`PyLongObject`."

#: ../Doc/c-api/long.rst:250
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *pylong* está fuera de rango para "
"un :c:type:`size_t`."

#: ../Doc/c-api/long.rst:253
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(size_t) -1`` en caso de error. Use :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../Doc/c-api/long.rst:262
msgid ""
"Return a C :c:type:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna una representación de C :c:type:`unsigned long long` de *pylong*. "
"*pylong* debe ser una instancia de :c:type:`PyLongObject`."

#: ../Doc/c-api/long.rst:265
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:type:`unsigned long long`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *pylong* está fuera de rango para "
"un :c:type:`unsigned long long`."

#: ../Doc/c-api/long.rst:268
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(unsigned long long) -1`` en caso de error. Use :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../Doc/c-api/long.rst:271
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""
"Ahora un *pylong* negativo lanza un :exc:`OverflowError`, no :exc:"
"`TypeError`."

#: ../Doc/c-api/long.rst:277
msgid ""
"Return a C :c:type:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`__index__` or :"
"meth:`__int__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Retorna una representación de C :c:type:`unsigned long` de *obj*. Si *obj* "
"no es una instancia de :c:type:`PyLongObject`, primero llama a su método :"
"meth:`__index__` o :meth:`__int__` (si está presente) para convertirlo en "
"un :c:type:`PyLongObject`."

#: ../Doc/c-api/long.rst:282
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long`, return "
"the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"Si el valor de *obj* está fuera del rango para :c:type:`unsigned long`, "
"retorna la reducción de ese valor módulo ``ULONG_MAX + 1``."

#: ../Doc/c-api/long.rst:285
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(unsigned long)-1`` en caso de error. Use :c:func:`PyErr_Occurred` "
"para desambiguar."

#: ../Doc/c-api/long.rst:297
msgid ""
"Return a C :c:type:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:"
"`__index__` or :meth:`__int__` method (if present) to convert it to a :c:"
"type:`PyLongObject`."
msgstr ""
"Retorna una representación de C :c:type:`unsigned long long` de *obj*. Si "
"*obj* no es una instancia de :c:type:`PyLongObject`, primero llama a su "
"método :meth:`__index__` o :meth:`__int__` (si está presente) para "
"convertirlo en un :c:type:`PyLongObject`."

#: ../Doc/c-api/long.rst:302
#, fuzzy
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"Si el valor de *obj* está fuera del rango para :c:type:`unsigned long long`, "
"retorna la reducción de ese valor módulo ``PY_ULLONG_MAX + 1``."

#: ../Doc/c-api/long.rst:305
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr ""
"Retorna ``(unsigned long long) -1`` por error. Use :c:func:`PyErr_Occurred` "
"para desambiguar."

#: ../Doc/c-api/long.rst:317
msgid ""
"Return a C :c:type:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna una representación de C :c:type:`double` de *pylong*. *pylong* debe "
"ser una instancia de :c:type:`PyLongObject`."

#: ../Doc/c-api/long.rst:320
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`double`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *pylong* está fuera de rango para "
"un :c:type:`double`."

#: ../Doc/c-api/long.rst:323
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Retorna ``-1.0`` en caso de error. Use :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../Doc/c-api/long.rst:328
msgid ""
"Convert a Python integer *pylong* to a C :c:type:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:type:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""
"Convierte un entero Python *pylong* en un puntero C :c:type:`void`. Si "
"*pylong* no se puede convertir, se generará un :exc:`OverflowError`. Esto "
"solo se garantiza para producir un puntero utilizable :c:type:`void` para "
"valores creados con :c:func:`PyLong_FromVoidPtr`."

#: ../Doc/c-api/long.rst:333
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Retorna ``NULL`` en caso de error. Use :c:func:`PyErr_Occurred` para "
"desambiguar."

#~ msgid ""
#~ "Convert a sequence of Unicode digits to a Python integer value.  The "
#~ "Unicode string is first encoded to a byte string using :c:func:"
#~ "`PyUnicode_EncodeDecimal` and then converted using :c:func:"
#~ "`PyLong_FromString`."
#~ msgstr ""
#~ "Convierte una secuencia de dígitos Unicode en un valor entero de Python. "
#~ "La cadena de caracteres Unicode se codifica primero en una cadena de "
#~ "bytes usando :c:func:`PyUnicode_EncodeDecimal` y luego se convierte "
#~ "usando :c:func:`PyLong_FromString`."

#~ msgid ""
#~ "Convert a sequence of Unicode digits in the string *u* to a Python "
#~ "integer value.  The Unicode string is first encoded to a byte string "
#~ "using :c:func:`PyUnicode_EncodeDecimal` and then converted using :c:func:"
#~ "`PyLong_FromString`."
#~ msgstr ""
#~ "Convierte una secuencia de dígitos Unicode en la cadena de caracteres *u* "
#~ "a un valor entero de Python. La cadena de caracteres Unicode se codifica "
#~ "primero en una cadena de bytes usando :c:func:`PyUnicode_EncodeDecimal` y "
#~ "luego se convierte usando :c:func:`PyLong_FromString`."

#~ msgid ""
#~ "If the value of *obj* is greater than :const:`PY_LLONG_MAX` or less than :"
#~ "const:`PY_LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, "
#~ "and return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
#~ "exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
#~ msgstr ""
#~ "Si el valor de *obj* es mayor que :const:`PY_LLONG_MAX` o menor que :"
#~ "const:`PY_LLONG_MIN`, establece *\\*overflow* en ``1`` o ``-1``, "
#~ "respectivamente, y retorna ``-1``; de lo contrario, establece *"
#~ "\\*overflow* en ``0``. Si se produce alguna otra excepción, configura *"
#~ "\\*overflow* en ``0`` y retorna ``-1`` como de costumbre."
