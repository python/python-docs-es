# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-05-08 01:33+0200\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language: es\n"
"X-Generator: Poedit 2.3\n"

#: ../Doc/c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "Asignación de objetos en el montículo"

#: ../Doc/c-api/allocation.rst:17
msgid ""
"Initialize a newly-allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"Inicializa un objeto *op* recientemente asignado con su tipo y referencia "
"inicial. Retorna el objeto inicializado. Si *type* indica que el objeto "
"participa en el detector de basura cíclico, se agrega al conjunto de objetos "
"observados del detector. Otros campos del objeto no se ven afectados."

#: ../Doc/c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"Esto hace todo lo que :c:func:`PyObject_Init` hace, y también inicializa la "
"información de longitud para un objeto de tamaño variable."

#: ../Doc/c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized; the object's reference count will be one.  The size of "
"the memory allocation is determined from the :c:member:`~PyTypeObject."
"tp_basicsize` field of the type object."
msgstr ""
"Asigna un nuevo objeto Python usando el tipo de estructura de C *TYPE* y el "
"objeto tipo Python *type*. Los campos no definidos por el encabezado del "
"objeto Python no se inicializan;el conteo de referencias del objeto será "
"uno. El tamaño de la asignación de memoria se determina a partir del campo :"
"c:member:`~PyTypeObject.tp_basicsize` del tipo de objeto."

#: ../Doc/c-api/allocation.rst:41
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized.  The allocated memory allows for the *TYPE* structure "
"plus *size* fields of the size given by the :c:member:`~PyTypeObject."
"tp_itemsize` field of *type*.  This is useful for implementing objects like "
"tuples, which are able to determine their size at construction time.  "
"Embedding the array of fields into the same allocation decreases the number "
"of allocations, improving the memory management efficiency."
msgstr ""
"Asigna un nuevo objeto Python usando el tipo de estructura de C *TYPE* y el "
"objeto tipo Python *type*. Los campos no definidos por el encabezado del "
"objeto Python no se inicializan. La memoria asignada permite los campos de "
"la estructura *TYPE* más los campos *size* del tamaño dado por el campo :c:"
"member:`~PyTypeObject.tp_itemsize` de *type*. Esto es útil para implementar "
"objetos como tuplas, que pueden determinar su tamaño en el momento de la "
"construcción. Incrustar el arreglo de campos en la misma asignación "
"disminuye el número de asignaciones, mejorando la eficiencia de la gestión "
"de memoria."

#: ../Doc/c-api/allocation.rst:53
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or :c:"
"func:`PyObject_NewVar`.  This is normally called from the :c:member:"
"`~PyTypeObject.tp_dealloc` handler specified in the object's type.  The "
"fields of the object should not be accessed after this call as the memory is "
"no longer a valid Python object."
msgstr ""
"Libera memoria asignada a un objeto usando :c:func:`PyObject_New` o :c:func:"
"`PyObject_NewVar`. Esto normalmente se llama desde el manejador :c:member:"
"`~PyTypeObject.tp_dealloc` especificado en el tipo de objeto. No se debe "
"acceder a los campos del objeto después de esta llamada, ya que la memoria "
"ya no es un objeto Python válido."

#: ../Doc/c-api/allocation.rst:62
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Objeto que es visible en Python como ``None``. Esto solo se debe acceder "
"utilizando el macro :c:macro:`Py_None`, que se evalúa como un puntero a este "
"objeto."

#: ../Doc/c-api/allocation.rst:69
msgid ":c:func:`PyModule_Create`"
msgstr ":c:func:`PyModule_Create`"

#: ../Doc/c-api/allocation.rst:70
msgid "To allocate and create extension modules."
msgstr "Para asignar y crear módulos de extensión."
