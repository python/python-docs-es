# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-25 19:47+0200\n"
"PO-Revision-Date: 2021-08-16 13:04+0200\n"
"Last-Translator: Cristián Maureira-Fredes <cmaureirafredes@gmail.com>\n"
"Language: es\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../Doc/c-api/code.rst:8
msgid "Code Objects"
msgstr "Objetos Código"

#: ../Doc/c-api/code.rst:12
msgid ""
"Code objects are a low-level detail of the CPython implementation. Each one "
"represents a chunk of executable code that hasn't yet been bound into a "
"function."
msgstr ""
"Los objetos código son un detalle de bajo nivel de la implementación de "
"CPython. Cada uno representa un fragmento de código ejecutable que aún no se "
"ha vinculado a una función."

#: ../Doc/c-api/code.rst:18
msgid ""
"The C structure of the objects used to describe code objects.  The fields of "
"this type are subject to change at any time."
msgstr ""
"La estructura en C de los objetos utilizados para describir objetos código. "
"Los campos de este tipo están sujetos a cambios en cualquier momento."

#: ../Doc/c-api/code.rst:24
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`code` type."
msgstr ""
"Esta es una instancia de :c:type:`PyTypeObject` que representa el tipo "
"Python :class:`code`."

#: ../Doc/c-api/code.rst:30
msgid ""
"Return true if *co* is a :class:`code` object.  This function always "
"succeeds."
msgstr ""
"Retorna verdadero si *co* es un objeto :class:`code`. Esta función siempre "
"finaliza con éxito."

#: ../Doc/c-api/code.rst:34
msgid "Return the number of free variables in *co*."
msgstr "Retorna el número de variables libres en *co*."

#: ../Doc/c-api/code.rst:38
#, fuzzy
msgid ""
"Return a new code object.  If you need a dummy code object to create a "
"frame, use :c:func:`PyCode_NewEmpty` instead.  Calling :c:func:`PyCode_New` "
"directly will bind you to a precise Python version since the definition of "
"the bytecode changes often. The many arguments of this function are inter-"
"dependent in complex ways, meaning that subtle changes to values are likely "
"to result in incorrect execution or VM crashes. Use this function only with "
"extreme care."
msgstr ""
"Retorna un nuevo objeto de código. Si necesita un objeto de código ficticio "
"para crear un marco (*frame*), use :c:func:`PyCode_NewEmpty` en su lugar. "
"Llamando :c:func:`PyCode_New` directamente puede enlazarlo a una versión "
"precisa de Python ya que la definición del código de bytes cambia a menudo."

#: ../Doc/c-api/code.rst:45 ../Doc/c-api/code.rst:55
msgid "Added ``exceptiontable`` parameter."
msgstr ""

#: ../Doc/c-api/code.rst:50
#, fuzzy
msgid ""
"Similar to :c:func:`PyCode_New`, but with an extra \"posonlyargcount\" for "
"positional-only arguments. The same caveats that apply to ``PyCode_New`` "
"also apply to this function."
msgstr ""
"Similar a :c:func:`PyCode_New`, pero con un \"*posonlyargcount*\" adicional "
"para argumentos solo posicionales."

#: ../Doc/c-api/code.rst:60
#, fuzzy
msgid ""
"Return a new empty code object with the specified filename, function name, "
"and first line number. The resulting code object will raise an ``Exception`` "
"if executed."
msgstr ""
"Retorna un nuevo objeto de código vacío con el nombre de archivo "
"especificado, el nombre de la función y el número de la primera línea. Es "
"ilegal utilizar :func:`exec` o :func:`eval` en el objeto de código "
"resultante."

#: ../Doc/c-api/code.rst:66
msgid ""
"Return the line number of the instruction that occurs on or before "
"``byte_offset`` and ends after it. If you just need the line number of a "
"frame, use :c:func:`PyFrame_GetLineNumber` instead."
msgstr ""
"Retorna el número de línea de la instrucción que se produce en o antes de "
"``byte_offset`` y finaliza después. Si solo necesita el número de línea de "
"un marco, use :c:func:`PyFrame_GetLineNumber` en su lugar."

#: ../Doc/c-api/code.rst:69
#, fuzzy
msgid ""
"For efficiently iterating over the line numbers in a code object, use `the "
"API described in PEP 626 <https://peps.python.org/pep-0626/#out-of-process-"
"debuggers-and-profilers>`_."
msgstr ""
"Para iterar de manera eficiente sobre los números de línea en un objeto de "
"código, use `la API descrita en PEP 626 <https://www.python.org/dev/peps/"
"pep-0626/#out-of-process-debuggers-and-profilers>`_."

#: ../Doc/c-api/code.rst:74
msgid ""
"Sets the passed ``int`` pointers to the source code line and column numbers "
"for the instruction at ``byte_offset``. Sets the value to ``0`` when "
"information is not available for any particular element."
msgstr ""

#: ../Doc/c-api/code.rst:78
msgid "Returns ``1`` if the function succeeds and 0 otherwise."
msgstr ""

#: ../Doc/c-api/code.rst:82
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_code')``. Returns a strong "
"reference to a :c:type:`PyBytesObject` representing the bytecode in a code "
"object. On error, ``NULL`` is returned and an exception is raised."
msgstr ""

#: ../Doc/c-api/code.rst:87
msgid ""
"This ``PyBytesObject`` may be created on-demand by the interpreter and does "
"not necessarily represent the bytecode actually executed by CPython. The "
"primary use case for this function is debuggers and profilers."
msgstr ""

#: ../Doc/c-api/code.rst:95
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_varnames')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""

#: ../Doc/c-api/code.rst:104
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_cellvars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables that are referenced by nested functions. On error, ``NULL`` is "
"returned and an exception is raised."
msgstr ""

#: ../Doc/c-api/code.rst:113
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_freevars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the free "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
