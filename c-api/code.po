# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 19:43+0200\n"
"PO-Revision-Date: 2022-10-30 17:20-0300\n"
"Last-Translator: Sofía Denner <sofi.denner@gmail.com>\n"
"Language: es\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.0\n"

#: ../Doc/c-api/code.rst:8
msgid "Code Objects"
msgstr "Objetos código"

#: ../Doc/c-api/code.rst:12
msgid ""
"Code objects are a low-level detail of the CPython implementation. Each one "
"represents a chunk of executable code that hasn't yet been bound into a "
"function."
msgstr ""
"Los objetos código son un detalle de bajo nivel de la implementación de "
"CPython. Cada uno representa un fragmento de código ejecutable que aún no se "
"ha vinculado a una función."

#: ../Doc/c-api/code.rst:18
msgid ""
"The C structure of the objects used to describe code objects.  The fields of "
"this type are subject to change at any time."
msgstr ""
"La estructura en C de los objetos utilizados para describir objetos código. "
"Los campos de este tipo están sujetos a cambios en cualquier momento."

#: ../Doc/c-api/code.rst:24
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`code` type."
msgstr ""
"Esta es una instancia de :c:type:`PyTypeObject` que representa el tipo "
"Python :class:`code`."

#: ../Doc/c-api/code.rst:30
msgid ""
"Return true if *co* is a :class:`code` object.  This function always "
"succeeds."
msgstr ""
"Retorna verdadero si *co* es un objeto :class:`code`. Esta función siempre "
"finaliza con éxito."

#: ../Doc/c-api/code.rst:34
msgid "Return the number of free variables in *co*."
msgstr "Retorna el número de variables libres en *co*."

#: ../Doc/c-api/code.rst:38
msgid ""
"Return a new code object.  If you need a dummy code object to create a "
"frame, use :c:func:`PyCode_NewEmpty` instead."
msgstr ""

#: ../Doc/c-api/code.rst:41
msgid ""
"Since the definition of the bytecode changes often, calling :c:func:"
"`PyUnstable_Code_New` directly can bind you to a precise Python version."
msgstr ""

#: ../Doc/c-api/code.rst:44
#, fuzzy
msgid ""
"The many arguments of this function are inter-dependent in complex ways, "
"meaning that subtle changes to values are likely to result in incorrect "
"execution or VM crashes. Use this function only with extreme care."
msgstr ""
"Retorna un nuevo objeto de código. Si se necesita un objeto de código "
"ficticio para crear un marco (*frame*), usar :c:func:`PyCode_NewEmpty` en su "
"lugar. Llamando :c:func:`PyCode_New` directamente puede enlazarlo a una "
"versión precisa de Python ya que la definición del código de bytes cambia a "
"menudo. Muchos de los argumentos de esta función están relacionados "
"mutuamente de formas complejas, lo cual significa que cambios sutiles en "
"estos valores probablemente resulten en ejecuciones incorrectas o fallas en "
"la VM."

#: ../Doc/c-api/code.rst:48
#, fuzzy
msgid "Added ``qualname`` and ``exceptiontable`` parameters."
msgstr "Se agregó el parámetro ``exceptiontable``."

#: ../Doc/c-api/code.rst:55
msgid ""
"Renamed from ``PyCode_New`` as part of :ref:`unstable-c-api`. The old name "
"is deprecated, but will remain available until the signature changes again."
msgstr ""

#: ../Doc/c-api/code.rst:61
#, fuzzy
msgid ""
"Similar to :c:func:`PyUnstable_Code_New`, but with an extra "
"\"posonlyargcount\" for positional-only arguments. The same caveats that "
"apply to ``PyUnstable_Code_New`` also apply to this function."
msgstr ""
"Similar a :c:func:`PyCode_New`, pero con un \"*posonlyargcount*\" adicional "
"para argumentos solo posicionales. Las mismas advertencias que aplican a "
"``PyCode_New`` también aplican a esta función."

#: ../Doc/c-api/code.rst:66
msgid "as ``PyCode_NewWithPosOnlyArgs``"
msgstr ""

#: ../Doc/c-api/code.rst:68
#, fuzzy
msgid "Added ``qualname`` and  ``exceptiontable`` parameters."
msgstr "Se agregó el parámetro ``exceptiontable``."

#: ../Doc/c-api/code.rst:73
msgid ""
"Renamed to ``PyUnstable_Code_NewWithPosOnlyArgs``. The old name is "
"deprecated, but will remain available until the signature changes again."
msgstr ""

#: ../Doc/c-api/code.rst:79
msgid ""
"Return a new empty code object with the specified filename, function name, "
"and first line number. The resulting code object will raise an ``Exception`` "
"if executed."
msgstr ""
"Retorna un nuevo objeto de código vacío con el nombre de archivo "
"especificado, el nombre de la función y el número de la primera línea. Si el "
"objeto código resultante es ejecutado, lanzará una ``Exception``."

#: ../Doc/c-api/code.rst:85
msgid ""
"Return the line number of the instruction that occurs on or before "
"``byte_offset`` and ends after it. If you just need the line number of a "
"frame, use :c:func:`PyFrame_GetLineNumber` instead."
msgstr ""
"Retorna el número de línea de la instrucción que se produce en o antes de "
"``byte_offset`` y finaliza después. Si solo necesita el número de línea de "
"un marco, use :c:func:`PyFrame_GetLineNumber` en su lugar."

#: ../Doc/c-api/code.rst:88
msgid ""
"For efficiently iterating over the line numbers in a code object, use `the "
"API described in PEP 626 <https://peps.python.org/pep-0626/#out-of-process-"
"debuggers-and-profilers>`_."
msgstr ""
"Para iterar de manera eficiente sobre los números de línea en un objeto de "
"código, use `la API descrita en PEP 626 <https://peps.python.org/pep-0626/"
"#out-of-process-debuggers-and-profilers>`_."

#: ../Doc/c-api/code.rst:93
msgid ""
"Sets the passed ``int`` pointers to the source code line and column numbers "
"for the instruction at ``byte_offset``. Sets the value to ``0`` when "
"information is not available for any particular element."
msgstr ""
"Establece los punteros ``int`` pasados en los números de línea y columna del "
"código fuente para las instrucciones en ``byte_offset``. Establece el valor "
"en ``0`` cuando la información no está disponible para algún elemento en "
"particular."

#: ../Doc/c-api/code.rst:97
msgid "Returns ``1`` if the function succeeds and 0 otherwise."
msgstr "Retorna ``1`` si la función fue exitosa y ``0`` de lo contrario."

#: ../Doc/c-api/code.rst:103
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_code')``. Returns a strong "
"reference to a :c:type:`PyBytesObject` representing the bytecode in a code "
"object. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente al código Python ``getattr(co, 'co_code')``. Retorna una "
"referencia fuerte a un :c:type:`PyBytesObject` representando el bytecode en "
"un objecto código. En caso de error se retorna ``NULL`` y se lanza una "
"excepción."

#: ../Doc/c-api/code.rst:108
msgid ""
"This ``PyBytesObject`` may be created on-demand by the interpreter and does "
"not necessarily represent the bytecode actually executed by CPython. The "
"primary use case for this function is debuggers and profilers."
msgstr ""
"Este ``PyBytesObject`` puede ser creado a pedido del intérprete y no "
"necesariamente representa el bytecode que es realmente ejecutado por "
"CPython. Los casos de uso principales para esta función son depuradores y "
"perfiladores."

#: ../Doc/c-api/code.rst:116
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_varnames')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente al código Python ``getattr(co, 'co_varnames')``. Retorna una "
"nueva referencia a un :c:type:`PyTupleObject` que contiene los nombres de "
"las variables locales. En caso de error, retorna ``NULL`` y lanza una "
"excepción."

#: ../Doc/c-api/code.rst:125
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_cellvars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables that are referenced by nested functions. On error, ``NULL`` is "
"returned and an exception is raised."
msgstr ""
"Equivalente al código Python ``getattr(co, 'co_cellvars')``. Retorna una "
"nueva referencia a un :c:type:`PyTupleObject` que contiene los nombres de "
"las variables locales referenciadas por funciones anidadas. En caso de "
"error, retorna ``NULL`` y lanza una excepción."

#: ../Doc/c-api/code.rst:134
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_freevars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the free "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente al código Python ``getattr(co, 'co_freevars')``. Retorna una "
"nueva referencia a un :c:type:`PyTupleObject` que contiene los nombres de "
"las variables libres. En caso de error, retorna ``NULL`` y lanza una "
"excepción."

#: ../Doc/c-api/code.rst:142
msgid ""
"Register *callback* as a code object watcher for the current interpreter. "
"Return an ID which may be passed to :c:func:`PyCode_ClearWatcher`. In case "
"of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""

#: ../Doc/c-api/code.rst:151
msgid ""
"Clear watcher identified by *watcher_id* previously returned from :c:func:"
"`PyCode_AddWatcher` for the current interpreter. Return ``0`` on success, or "
"``-1`` and set an exception on error (e.g. if the given *watcher_id* was "
"never registered.)"
msgstr ""

#: ../Doc/c-api/code.rst:160
msgid ""
"Enumeration of possible code object watcher events: - "
"``PY_CODE_EVENT_CREATE`` - ``PY_CODE_EVENT_DESTROY``"
msgstr ""

#: ../Doc/c-api/code.rst:168
msgid "Type of a code object watcher callback function."
msgstr ""

#: ../Doc/c-api/code.rst:170
msgid ""
"If *event* is ``PY_CODE_EVENT_CREATE``, then the callback is invoked after "
"`co` has been fully initialized. Otherwise, the callback is invoked before "
"the destruction of *co* takes place, so the prior state of *co* can be "
"inspected."
msgstr ""

#: ../Doc/c-api/code.rst:175
msgid ""
"If *event* is ``PY_CODE_EVENT_DESTROY``, taking a reference in the callback "
"to the about-to-be-destroyed code object will resurrect it and prevent it "
"from being freed at this time. When the resurrected object is destroyed "
"later, any watcher callbacks active at that time will be called again."
msgstr ""

#: ../Doc/c-api/code.rst:180
msgid ""
"Users of this API should not rely on internal runtime implementation "
"details. Such details may include, but are not limited to, the exact order "
"and timing of creation and destruction of code objects. While changes in "
"these details may result in differences observable by watchers (including "
"whether a callback is invoked or not), it does not change the semantics of "
"the Python code being executed."
msgstr ""

#: ../Doc/c-api/code.rst:187
msgid ""
"If the callback sets an exception, it must return ``-1``; this exception "
"will be printed as an unraisable exception using :c:func:"
"`PyErr_WriteUnraisable`. Otherwise it should return ``0``."
msgstr ""

#: ../Doc/c-api/code.rst:191
msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores "
"it before returning."
msgstr ""

#: ../Doc/c-api/code.rst:201
msgid "Extra information"
msgstr ""

#: ../Doc/c-api/code.rst:203
msgid ""
"To support low-level extensions to frame evaluation, such as external just-"
"in-time compilers, it is possible to attach arbitrary extra data to code "
"objects."
msgstr ""

#: ../Doc/c-api/code.rst:207
msgid ""
"These functions are part of the unstable C API tier: this functionality is a "
"CPython implementation detail, and the API may change without deprecation "
"warnings."
msgstr ""

#: ../Doc/c-api/code.rst:213
msgid "Return a new an opaque index value used to adding data to code objects."
msgstr ""

#: ../Doc/c-api/code.rst:215
msgid ""
"You generally call this function once (per interpreter) and use the result "
"with ``PyCode_GetExtra`` and ``PyCode_SetExtra`` to manipulate data on "
"individual code objects."
msgstr ""

#: ../Doc/c-api/code.rst:219
msgid ""
"If *free* is not ``NULL``: when a code object is deallocated, *free* will be "
"called on non-``NULL`` data stored under the new index. Use :c:func:"
"`Py_DecRef` when storing :c:type:`PyObject`."
msgstr ""

#: ../Doc/c-api/code.rst:225
msgid "as ``_PyEval_RequestCodeExtraIndex``"
msgstr ""

#: ../Doc/c-api/code.rst:229
msgid ""
"Renamed to ``PyUnstable_Eval_RequestCodeExtraIndex``. The old private name "
"is deprecated, but will be available until the API changes."
msgstr ""

#: ../Doc/c-api/code.rst:235
msgid ""
"Set *extra* to the extra data stored under the given index. Return 0 on "
"success. Set an exception and return -1 on failure."
msgstr ""

#: ../Doc/c-api/code.rst:238
msgid ""
"If no data was set under the index, set *extra* to ``NULL`` and return 0 "
"without setting an exception."
msgstr ""

#: ../Doc/c-api/code.rst:243
msgid "as ``_PyCode_GetExtra``"
msgstr ""

#: ../Doc/c-api/code.rst:247
msgid ""
"Renamed to ``PyUnstable_Code_GetExtra``. The old private name is deprecated, "
"but will be available until the API changes."
msgstr ""

#: ../Doc/c-api/code.rst:253
msgid ""
"Set the extra data stored under the given index to *extra*. Return 0 on "
"success. Set an exception and return -1 on failure."
msgstr ""

#: ../Doc/c-api/code.rst:258
msgid "as ``_PyCode_SetExtra``"
msgstr ""

#: ../Doc/c-api/code.rst:262
msgid ""
"Renamed to ``PyUnstable_Code_SetExtra``. The old private name is deprecated, "
"but will be available until the API changes."
msgstr ""

#: ../Doc/c-api/code.rst:3
#, fuzzy
msgid "object"
msgstr "Objetos código"

#: ../Doc/c-api/code.rst:3
msgid "code"
msgstr ""

#: ../Doc/c-api/code.rst:3
#, fuzzy
msgid "code object"
msgstr "Objetos código"

#: ../Doc/c-api/code.rst:51
msgid "PyCode_New"
msgstr ""

#: ../Doc/c-api/code.rst:64
msgid "PyCode_NewWithPosOnlyArgs"
msgstr ""

#: ../Doc/c-api/code.rst:223
msgid "_PyEval_RequestCodeExtraIndex"
msgstr ""

#: ../Doc/c-api/code.rst:241
msgid "_PyCode_GetExtra"
msgstr ""

#: ../Doc/c-api/code.rst:256
msgid "_PyCode_SetExtra"
msgstr ""
