# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python en Español
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Python en Español 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-25 19:47+0200\n"
"PO-Revision-Date: 2021-11-16 22:14-0600\n"
"Last-Translator: Erick G. Islas Osuna <erickisos653@gmail.com>\n"
"Language: es\n"
"Language-Team: \n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../Doc/c-api/typehints.rst:6
msgid "Objects for Type Hinting"
msgstr "Objetos para indicaciones de tipado"

#: ../Doc/c-api/typehints.rst:8
msgid ""
"Various built-in types for type hinting are provided.  Currently, two types "
"exist -- :ref:`GenericAlias <types-genericalias>` and :ref:`Union <types-"
"union>`.  Only ``GenericAlias`` is exposed to C."
msgstr ""
"Se proporcionan varios tipos incorporados para indicaciones de tipado. "
"Actualmente existen dos tipos -- :ref:`GenericAlias <types-genericalias>` y :"
"ref:`Union <types-union>`. Solo ``GenericAlias`` es expuesto a C."

#: ../Doc/c-api/typehints.rst:14
#, fuzzy
msgid ""
"Create a :ref:`GenericAlias <types-genericalias>` object. Equivalent to "
"calling the Python class :class:`types.GenericAlias`.  The *origin* and "
"*args* arguments set the ``GenericAlias``\\ 's ``__origin__`` and "
"``__args__`` attributes respectively. *origin* should be a :c:expr:"
"`PyTypeObject*`, and *args* can be a :c:expr:`PyTupleObject*` or any "
"``PyObject*``.  If *args* passed is not a tuple, a 1-tuple is automatically "
"constructed and ``__args__`` is set to ``(args,)``. Minimal checking is done "
"for the arguments, so the function will succeed even if *origin* is not a "
"type. The ``GenericAlias``\\ 's ``__parameters__`` attribute is constructed "
"lazily from ``__args__``.  On failure, an exception is raised and ``NULL`` "
"is returned."
msgstr ""
"Crea un objeto :ref:`GenericAlias <types-genericalias>`. Equivalente a "
"llamar la clase de Python :class:`types.GenericAlias`. Los argumentos "
"*origin* y *args* configuran los atributos ``__origin__`` y ``__args__`` de "
"``GenericAlias`` respectivamente. *origin* debe ser un :c:type:"
"`PyTypeObject*`, y *args* puede ser un :c:type:`PyTupleObject*` o cualquier "
"``PyObject*``. Si el valor de *args* no es una tupla, un 1-tupla es "
"automáticamente construida y ``__args__`` es configurado como ``(args,)``. "
"Para los argumentos se realiza un chequeo mínimo, de esta manera la función "
"tendrá éxito incluso si *origin* no es un tipo. El atributo "
"``__parameters__`` de ``GenericAlias`` es construido de forma diferida a "
"partir de ``__args__``. Si existe una falla, se levantará una excepción y se "
"retornará ``NULL``."

#: ../Doc/c-api/typehints.rst:28
msgid "Here's an example of how to make an extension type generic::"
msgstr "Aquí hay un ejemplo sobre cómo hacer un tipo de extensión genérica::"

#: ../Doc/c-api/typehints.rst:38
msgid "The data model method :meth:`__class_getitem__`."
msgstr "El método del modelo de datos :meth:`__class_getitem__`."

#: ../Doc/c-api/typehints.rst:44
msgid ""
"The C type of the object returned by :c:func:`Py_GenericAlias`. Equivalent "
"to :class:`types.GenericAlias` in Python."
msgstr ""
"El tipo en C del objeto retornado por :c:func:`Py_GenericAlias`. Equivalente "
"a :class:`types.GenericAlias` en Python."
