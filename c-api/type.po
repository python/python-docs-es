# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 19:43+0200\n"
"PO-Revision-Date: 2023-04-12 00:54-0600\n"
"Last-Translator: Gonzalo Martinez <gmtzoliva29@gmail.com>\n"
"Language: es\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.0\n"

#: ../Doc/c-api/type.rst:6
msgid "Type Objects"
msgstr "Objetos tipo"

#: ../Doc/c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr ""
"La estructura C de los objetos utilizados para describir los tipos "
"incorporados."

#: ../Doc/c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""
"Este es el objeto tipo para objetos tipo; es el mismo objeto que :class:"
"`type` en la capa Python."

#: ../Doc/c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return 0 in all other cases. "
"This function always succeeds."
msgstr ""
"Retorna un valor distinto de cero si el objeto *o* es un objeto tipo, "
"incluidas las instancias de tipos derivados del objeto de tipo estándar. "
"Retorna 0 en todos los demás casos. Esta función siempre finaliza con éxito."

#: ../Doc/c-api/type.rst:31
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return 0 in all other cases.  This function always "
"succeeds."
msgstr ""
"Retorna un valor distinto de cero si el objeto *o* es un objeto tipo, pero "
"no un subtipo del objeto tipo estándar. Retorna 0 en todos los demás casos. "
"Esta función siempre finaliza con éxito."

#: ../Doc/c-api/type.rst:38
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""
"Borra la caché de búsqueda interna. Retorna la etiqueta (*tag*) de la "
"versión actual."

#: ../Doc/c-api/type.rst:42
#, fuzzy
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with ``Py_LIMITED_API``; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to :"
"c:member:`~PyTypeObject.tp_flags` itself is not part of the :ref:`limited "
"API <limited-c-api>`."
msgstr ""
"Retorna el miembro :c:member:`~PyTypeObject.tp_flags` de *type*. Esta "
"función está destinada principalmente para su uso con `Py_LIMITED_API`; se "
"garantiza que los bits de bandera individuales serán estables en las "
"versiones de Python, pero el acceso a :c:member:`~PyTypeObject.tp_flags` en "
"sí mismo no forma parte de la API limitada."

#: ../Doc/c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "El tipo de retorno es ahora ``unsigned long`` en vez de ``long``."

#: ../Doc/c-api/type.rst:55
msgid ""
"Return the type object's internal namespace, which is otherwise only exposed "
"via a read-only proxy (``cls.__dict__``).  This is a replacement for "
"accessing :c:member:`~PyTypeObject.tp_dict` directly. The returned "
"dictionary must be treated as read-only."
msgstr ""

#: ../Doc/c-api/type.rst:60
msgid ""
"This function is meant for specific embedding and language-binding cases, "
"where direct access to the dict is necessary and indirect access (e.g. via "
"the proxy or :c:func:`PyObject_GetAttr`) isn't adequate."
msgstr ""

#: ../Doc/c-api/type.rst:64
msgid ""
"Extension modules should continue to use ``tp_dict``, directly or "
"indirectly, when setting up their own types."
msgstr ""

#: ../Doc/c-api/type.rst:72
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""
"Invalida la memoria caché de búsqueda interna para el tipo y todos sus "
"subtipos. Esta función debe llamarse después de cualquier modificación "
"manual de los atributos o clases base del tipo."

#: ../Doc/c-api/type.rst:79
msgid ""
"Register *callback* as a type watcher. Return a non-negative integer ID "
"which must be passed to future calls to :c:func:`PyType_Watch`. In case of "
"error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""

#: ../Doc/c-api/type.rst:89
msgid ""
"Clear watcher identified by *watcher_id* (previously returned from :c:func:"
"`PyType_AddWatcher`). Return ``0`` on success, ``-1`` on error (e.g. if "
"*watcher_id* was never registered.)"
msgstr ""

#: ../Doc/c-api/type.rst:93
msgid ""
"An extension should never call ``PyType_ClearWatcher`` with a *watcher_id* "
"that was not returned to it by a previous call to :c:func:"
"`PyType_AddWatcher`."
msgstr ""

#: ../Doc/c-api/type.rst:102
msgid ""
"Mark *type* as watched. The callback granted *watcher_id* by :c:func:"
"`PyType_AddWatcher` will be called whenever :c:func:`PyType_Modified` "
"reports a change to *type*. (The callback may be called only once for a "
"series of consecutive modifications to *type*, if :c:func:`!_PyType_Lookup` "
"is not called on *type* between the modifications; this is an implementation "
"detail and subject to change.)"
msgstr ""

#: ../Doc/c-api/type.rst:109
msgid ""
"An extension should never call ``PyType_Watch`` with a *watcher_id* that was "
"not returned to it by a previous call to :c:func:`PyType_AddWatcher`."
msgstr ""

#: ../Doc/c-api/type.rst:117
msgid "Type of a type-watcher callback function."
msgstr ""

#: ../Doc/c-api/type.rst:119
msgid ""
"The callback must not modify *type* or cause :c:func:`PyType_Modified` to be "
"called on *type* or any type in its MRO; violating this rule could cause "
"infinite recursion."
msgstr ""

#: ../Doc/c-api/type.rst:128
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr ""
"Retorna un valor distinto de cero si el tipo objeto *o* establece la "
"característica *feature*. Las características de tipo se indican mediante "
"flags de un solo bit."

#: ../Doc/c-api/type.rst:134
#, fuzzy
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :c:macro:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"Retorna verdadero si el objeto tipo incluye soporte para el detector de "
"ciclo; Esto prueba el indicador de tipo :const:`Py_TPFLAGS_HAVE_GC`."

#: ../Doc/c-api/type.rst:140
msgid "Return true if *a* is a subtype of *b*."
msgstr "Retorna verdadero si *a* es un subtipo de *b*."

#: ../Doc/c-api/type.rst:142
msgid ""
"This function only checks for actual subtypes, which means that :meth:"
"`~class.__subclasscheck__` is not called on *b*.  Call :c:func:"
"`PyObject_IsSubclass` to do the same check that :func:`issubclass` would do."
msgstr ""
"Esta función solo busca subtipos reales, lo que significa que :meth:`~class."
"__subclasscheck__` no se llama en *b*. Llama :c:func:`PyObject_IsSubclass` "
"para hacer el mismo chequeo que :func:`issubclass` haría."

#: ../Doc/c-api/type.rst:150
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""
"Controlador genérico para la ranura :c:member:`~PyTypeObject.tp_alloc` de un "
"objeto tipo. Usa el mecanismo de asignación de memoria predeterminado de "
"Python para asignar una nueva instancia e inicializar todo su contenido a "
"``NULL``."

#: ../Doc/c-api/type.rst:156
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's :c:member:`~PyTypeObject."
"tp_alloc` slot."
msgstr ""
"Controlador genérico para la ranura :c:member:`~PyTypeObject.tp_new` de un "
"objeto tipo. Crea una nueva instancia utilizando la ranura del tipo :c:"
"member:`~PyTypeObject.tp_alloc`."

#: ../Doc/c-api/type.rst:161
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"Finalizar un objeto tipo. Se debe llamar a todos los objetos tipo para "
"finalizar su inicialización. Esta función es responsable de agregar ranuras "
"heredadas de la clase base de un tipo. Retorna ``0`` en caso de éxito o "
"retorna ``-1`` y establece una excepción en caso de error."

#: ../Doc/c-api/type.rst:167
#, fuzzy
msgid ""
"If some of the base classes implements the GC protocol and the provided type "
"does not include the :c:macro:`Py_TPFLAGS_HAVE_GC` in its flags, then the GC "
"protocol will be automatically implemented from its parents. On the "
"contrary, if the type being created does include :c:macro:"
"`Py_TPFLAGS_HAVE_GC` in its flags then it **must** implement the GC protocol "
"itself by at least implementing the :c:member:`~PyTypeObject.tp_traverse` "
"handle."
msgstr ""
"Si algunas de las clases base implementan el protocolo GC y el tipo "
"proporcionado no incluye el :const:`Py_TPFLAGS_HAVE_GC` en sus banderas, "
"entonces el protocolo GC se implementará automáticamente desde sus padres. "
"Por el contrario, si el tipo que se está creando incluye :const:"
"`Py_TPFLAGS_HAVE_GC` en sus banderas, entonces **debe** implementar el "
"protocolo GC por sí mismo al implementar al menos el identificador :c:member:"
"`~PyTypeObject.tp_traverse`."

#: ../Doc/c-api/type.rst:177
msgid ""
"Return the type's name. Equivalent to getting the type's ``__name__`` "
"attribute."
msgstr ""
"Retorna el nombre del tipo. Equivalente a obtener el atributo ``__name__`` "
"del tipo."

#: ../Doc/c-api/type.rst:183
msgid ""
"Return the type's qualified name. Equivalent to getting the type's "
"``__qualname__`` attribute."
msgstr ""
"Retorna el nombre adecuado del tipo de objeto. Equivalente a obtener el "
"atributo ``__qualname__`` del objeto tipo."

#: ../Doc/c-api/type.rst:190
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the "
"result pointer into the appropriate function type."
msgstr ""
"Retorna el puntero de función almacenado en la ranura dada. Si el resultado "
"es ``NULL``, esto indica que la ranura es ``NULL`` o que la función se llamó "
"con parámetros no válidos. Las personas que llaman suelen convertir el "
"puntero de resultado en el tipo de función apropiado."

#: ../Doc/c-api/type.rst:196
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr ""
"Consulte :c:member:`PyType_Slot.slot` para conocer los posibles valores del "
"argumento *slot*."

#: ../Doc/c-api/type.rst:200
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""
":c:func:`PyType_GetSlot` ahora puede aceptar todos los tipos. Anteriormente, "
"estaba limitado a :ref:`heap types <heap-types>`."

#: ../Doc/c-api/type.rst:206
msgid ""
"Return the module object associated with the given type when the type was "
"created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""
"Retorna el objeto módulo asociado con el tipo dado cuando se creó el tipo "
"usando :c:func:`PyType_FromModuleAndSpec`."

#: ../Doc/c-api/type.rst:209 ../Doc/c-api/type.rst:229
msgid ""
"If no module is associated with the given type, sets :py:class:`TypeError` "
"and returns ``NULL``."
msgstr ""
"Si no hay ningún módulo asociado con el tipo dado, establece :py:class:"
"`TypeError` y retorna ``NULL``."

#: ../Doc/c-api/type.rst:212
#, fuzzy
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` may "
"not return the intended result. ``Py_TYPE(self)`` may be a *subclass* of the "
"intended class, and subclasses are not necessarily defined in the same "
"module as their superclass. See :c:type:`PyCMethod` to get the class that "
"defines the method. See :c:func:`PyType_GetModuleByDef` for cases when :c:"
"type:`!PyCMethod` cannot be used."
msgstr ""
"Esta función se suele utilizar para obtener el módulo en el que se define un "
"método. Tenga en cuenta que en un método de este tipo, es posible que "
"``PyType_GetModule(Py_TYPE(self))`` no retorne el resultado deseado. "
"``Py_TYPE(self)`` puede ser una *subclass* de la clase deseada, y las "
"subclases no están necesariamente definidas en el mismo módulo que su "
"superclase. Consulte :c:func:`PyCMethod` para obtener la clase que define el "
"método. Ver ::c:func:`PyType_GetModuleByDef` para los casos en los que no se "
"puede usar ``PyCMethod``."

#: ../Doc/c-api/type.rst:225
msgid ""
"Return the state of the module object associated with the given type. This "
"is a shortcut for calling :c:func:`PyModule_GetState()` on the result of :c:"
"func:`PyType_GetModule`."
msgstr ""
"Retorna el estado del objeto de módulo asociado con el tipo dado. Este es un "
"atajo para llamar :c:func:`PyModule_GetState()` en el resultado de :c:func:"
"`PyType_GetModule`."

#: ../Doc/c-api/type.rst:232
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns "
"``NULL`` without setting an exception."
msgstr ""
"Si el tipo *type* tiene un módulo asociado pero su estado es ``NULL``, "
"retorna ``NULL`` sin establecer una excepción."

#: ../Doc/c-api/type.rst:239
msgid ""
"Find the first superclass whose module was created from the given :c:type:"
"`PyModuleDef` *def*, and return that module."
msgstr ""
"Encuentra la primer superclase cuyo módulo fue creado a partir del :c:type:"
"`PyModuleDef` *def* dado, y retorna ese módulo."

#: ../Doc/c-api/type.rst:242
msgid ""
"If no module is found, raises a :py:class:`TypeError` and returns ``NULL``."
msgstr ""
"Si no se encuentra ningún módulo, lanza :py:class:`TypeError` y retorna "
"``NULL``."

#: ../Doc/c-api/type.rst:244
msgid ""
"This function is intended to be used together with :c:func:"
"`PyModule_GetState()` to get module state from slot methods (such as :c:"
"member:`~PyTypeObject.tp_init` or :c:member:`~PyNumberMethods.nb_add`) and "
"other places where a method's defining class cannot be passed using the :c:"
"type:`PyCMethod` calling convention."
msgstr ""
"Esta función está pensada para ser utilizada junto con :c:func:"
"`PyModule_GetState()` para obtener el estado del módulo de los métodos de "
"ranura (como :c:member:`~PyTypeObject.tp_init` o :c:member:`~PyNumberMethods."
"nb_add`) y en otros lugares donde la clase que define a un método no se "
"puede pasar utilizando la convención de llamada :c:type:`PyCMethod`."

#: ../Doc/c-api/type.rst:254
msgid "Attempt to assign a version tag to the given type."
msgstr ""

#: ../Doc/c-api/type.rst:256
msgid ""
"Returns 1 if the type already had a valid version tag or a new one was "
"assigned, or 0 if a new tag could not be assigned."
msgstr ""

#: ../Doc/c-api/type.rst:263
msgid "Creating Heap-Allocated Types"
msgstr "Crear tipos asignados en montículo (*heap*)"

#: ../Doc/c-api/type.rst:265
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr ""
"Las siguientes funciones y estructuras se utilizan para crear :ref:`heap "
"types <heap-types>`."

#: ../Doc/c-api/type.rst:270
#, fuzzy
msgid ""
"Create and return a :ref:`heap type <heap-types>` from the *spec* (see :c:"
"macro:`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""
"Crea y retorna un :ref:`tipo heap <heap-types>` a partir del *spec* (:const:"
"`Py_TPFLAGS_HEAPTYPE`)."

#: ../Doc/c-api/type.rst:273
msgid ""
"The metaclass *metaclass* is used to construct the resulting type object. "
"When *metaclass* is ``NULL``, the metaclass is derived from *bases* (or "
"*Py_tp_base[s]* slots if *bases* is ``NULL``, see below)."
msgstr ""

#: ../Doc/c-api/type.rst:277
msgid ""
"Metaclasses that override :c:member:`~PyTypeObject.tp_new` are not "
"supported, except if ``tp_new`` is ``NULL``. (For backwards compatibility, "
"other ``PyType_From*`` functions allow such metaclasses. They ignore "
"``tp_new``, which may result in incomplete initialization. This is "
"deprecated and in Python 3.14+ such metaclasses will not be supported.)"
msgstr ""

#: ../Doc/c-api/type.rst:284
msgid ""
"The *bases* argument can be used to specify base classes; it can either be "
"only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type "
"derives from :class:`object`."
msgstr ""
"El argumento *bases* se puede utilizar para especificar clases base; puede "
"ser solo una clase o una tupla de clases. Si *bases* es ``NULL``, en su "
"lugar se utiliza la ranura *Py_tp_bases*. Si esa también es ``NULL``, se usa "
"la ranura *Py_tp_base* en su lugar. Si también es ``NULL``, el nuevo tipo se "
"deriva de :class:`object`."

#: ../Doc/c-api/type.rst:290
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not ``NULL``, "
"the module is associated with the new type and can later be retrieved with :"
"c:func:`PyType_GetModule`. The associated module is not inherited by "
"subclasses; it must be specified for each class individually."
msgstr ""
"El argumento *module* se puede utilizar para registrar el módulo en el que "
"se define la nueva clase. Debe ser un objeto de módulo o ``NULL``. Si no es "
"``NULL``, el módulo se asocia con el nuevo tipo y luego se puede recuperar "
"con :c:func:`PyType_GetModule`. El módulo asociado no es heredado por "
"subclases; debe especificarse para cada clase individualmente."

#: ../Doc/c-api/type.rst:297
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "Esta función llama :c:func:`PyType_Ready` en el tipo nuevo."

#: ../Doc/c-api/type.rst:299
msgid ""
"Note that this function does *not* fully match the behavior of calling :py:"
"class:`type() <type>` or using the :keyword:`class` statement. With user-"
"provided base types or metaclasses, prefer :ref:`calling <capi-call>` :py:"
"class:`type` (or the metaclass) over ``PyType_From*`` functions. "
"Specifically:"
msgstr ""

#: ../Doc/c-api/type.rst:306
msgid ""
":py:meth:`~object.__new__` is not called on the new class (and it must be "
"set to ``type.__new__``)."
msgstr ""

#: ../Doc/c-api/type.rst:308
msgid ":py:meth:`~object.__init__` is not called on the new class."
msgstr ""

#: ../Doc/c-api/type.rst:309
msgid ":py:meth:`~object.__init_subclass__` is not called on any bases."
msgstr ""

#: ../Doc/c-api/type.rst:310
msgid ":py:meth:`~object.__set_name__` is not called on new descriptors."
msgstr ""

#: ../Doc/c-api/type.rst:316
#, fuzzy
msgid "Equivalent to ``PyType_FromMetaclass(NULL, module, spec, bases)``."
msgstr "Equivalente a ``PyType_FromModuleAndSpec(NULL, spec, bases)``."

#: ../Doc/c-api/type.rst:322
msgid ""
"The function now accepts a single class as the *bases* argument and ``NULL`` "
"as the ``tp_doc`` slot."
msgstr ""
"La función ahora acepta una sola clase como argumento *bases* y ``NULL`` "
"como ranura ``tp_doc``."

#: ../Doc/c-api/type.rst:327 ../Doc/c-api/type.rst:344
msgid ""
"The function now finds and uses a metaclass corresponding to the provided "
"base classes.  Previously, only :class:`type` instances were returned."
msgstr ""

#: ../Doc/c-api/type.rst:330 ../Doc/c-api/type.rst:347
#: ../Doc/c-api/type.rst:363
msgid ""
"The :c:member:`~PyTypeObject.tp_new` of the metaclass is *ignored*. which "
"may result in incomplete initialization. Creating classes whose metaclass "
"overrides :c:member:`~PyTypeObject.tp_new` is deprecated and in Python 3.14+ "
"it will be no longer allowed."
msgstr ""

#: ../Doc/c-api/type.rst:338
#, fuzzy
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, bases)``."
msgstr "Equivalente a ``PyType_FromModuleAndSpec(NULL, spec, bases)``."

#: ../Doc/c-api/type.rst:355
#, fuzzy
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, NULL)``."
msgstr "Equivalente a ``PyType_FromSpecWithBases(spec, NULL)``."

#: ../Doc/c-api/type.rst:359
msgid ""
"The function now finds and uses a metaclass corresponding to the base "
"classes provided in *Py_tp_base[s]* slots. Previously, only :class:`type` "
"instances were returned."
msgstr ""

#: ../Doc/c-api/type.rst:380
msgid "Structure defining a type's behavior."
msgstr "Estructura que define el comportamiento de un tipo."

#: ../Doc/c-api/type.rst:384
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr ""
"Nombre del tipo, utilizado para establecer :c:member:`PyTypeObject.tp_name`."

#: ../Doc/c-api/type.rst:388
#, fuzzy
msgid ""
"If positive, specifies the size of the instance in bytes. It is used to set :"
"c:member:`PyTypeObject.tp_basicsize`."
msgstr ""
"Tamaño de la instancia en bytes, utilizado para establecer :c:member:"
"`PyTypeObject.tp_basicsize` y :c:member:`PyTypeObject.tp_itemsize`."

#: ../Doc/c-api/type.rst:391
msgid ""
"If zero, specifies that :c:member:`~PyTypeObject.tp_basicsize` should be "
"inherited."
msgstr ""

#: ../Doc/c-api/type.rst:394
msgid ""
"If negative, the absolute value specifies how much space instances of the "
"class need *in addition* to the superclass. Use :c:func:"
"`PyObject_GetTypeData` to get a pointer to subclass-specific memory reserved "
"this way."
msgstr ""

#: ../Doc/c-api/type.rst:401
msgid "Previously, this field could not be negative."
msgstr ""

#: ../Doc/c-api/type.rst:405
#, fuzzy
msgid ""
"Size of one element of a variable-size type, in bytes. Used to set :c:member:"
"`PyTypeObject.tp_itemsize`. See ``tp_itemsize`` documentation for caveats."
msgstr ""
"Tamaño de la instancia en bytes, utilizado para establecer :c:member:"
"`PyTypeObject.tp_basicsize` y :c:member:`PyTypeObject.tp_itemsize`."

#: ../Doc/c-api/type.rst:409
msgid ""
"If zero, :c:member:`~PyTypeObject.tp_itemsize` is inherited. Extending "
"arbitrary variable-sized classes is dangerous, since some types use a fixed "
"offset for variable-sized memory, which can then overlap fixed-sized memory "
"used by a subclass. To help prevent mistakes, inheriting ``itemsize`` is "
"only possible in the following situations:"
msgstr ""

#: ../Doc/c-api/type.rst:416
#, fuzzy
msgid ""
"The base is not variable-sized (its :c:member:`~PyTypeObject.tp_itemsize`)."
msgstr ""
"Nombre del tipo, utilizado para establecer :c:member:`PyTypeObject.tp_name`."

#: ../Doc/c-api/type.rst:418
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is positive, suggesting that "
"the memory layout of the base class is known."
msgstr ""

#: ../Doc/c-api/type.rst:420
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is zero, suggesting that the "
"subclass does not access the instance's memory directly."
msgstr ""

#: ../Doc/c-api/type.rst:423
msgid "With the :c:macro:`Py_TPFLAGS_ITEMS_AT_END` flag."
msgstr ""

#: ../Doc/c-api/type.rst:427
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr ""
"Banderas (*flags*) del tipo, que se usan para establecer :c:member:"
"`PyTypeObject.tp_flags`."

#: ../Doc/c-api/type.rst:429
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, :c:func:"
"`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"Si el indicador ``Py_TPFLAGS_HEAPTYPE`` no está establecido, :c:func:"
"`PyType_FromSpecWithBases` lo establece automáticamente."

#: ../Doc/c-api/type.rst:434
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ""
"Arreglo de estructuras :c:type:`PyType_Slot`. Terminado por el valor de "
"ranura especial ``{0, NULL}``."

#: ../Doc/c-api/type.rst:437
msgid "Each slot ID should be specified at most once."
msgstr ""

#: ../Doc/c-api/type.rst:447
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr ""
"Estructura que define la funcionalidad opcional de un tipo, que contiene una "
"ranura ID y un puntero de valor."

#: ../Doc/c-api/type.rst:452
msgid "A slot ID."
msgstr "Una ranura ID."

#: ../Doc/c-api/type.rst:454
msgid ""
"Slot IDs are named like the field names of the structures :c:type:"
"`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, :c:"
"type:`PyMappingMethods` and :c:type:`PyAsyncMethods` with an added ``Py_`` "
"prefix. For example, use:"
msgstr ""
"Las ranuras IDs se nombran como los nombres de campo de las estructuras :c:"
"type:`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:"
"`PySequenceMethods`, :c:type:`PyMappingMethods` y :c:type:`PyAsyncMethods` "
"con un prefijo ``Py_`` agregado. Por ejemplo, use:"

#: ../Doc/c-api/type.rst:460
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr "``Py_tp_dealloc`` para establecer :c:member:`PyTypeObject.tp_dealloc`"

#: ../Doc/c-api/type.rst:461
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr "``Py_nb_add`` para establecer :c:member:`PyNumberMethods.nb_add`"

#: ../Doc/c-api/type.rst:462
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ""
"``Py_sq_length`` para establecer :c:member:`PySequenceMethods.sq_length`"

#: ../Doc/c-api/type.rst:464
msgid ""
"The following fields cannot be set at all using :c:type:`PyType_Spec` and :c:"
"type:`PyType_Slot`:"
msgstr ""
"Los siguientes campos no se pueden configurar en absoluto usando :c:type:"
"`PyType_Spec` y :c:type:`PyType_Slot`:"

#: ../Doc/c-api/type.rst:467
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ":c:member:`~PyTypeObject.tp_dict`"

#: ../Doc/c-api/type.rst:468
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ":c:member:`~PyTypeObject.tp_mro`"

#: ../Doc/c-api/type.rst:469
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ":c:member:`~PyTypeObject.tp_cache`"

#: ../Doc/c-api/type.rst:470
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ":c:member:`~PyTypeObject.tp_subclasses`"

#: ../Doc/c-api/type.rst:471
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ":c:member:`~PyTypeObject.tp_weaklist`"

#: ../Doc/c-api/type.rst:472
msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
msgstr ":c:member:`~PyTypeObject.tp_vectorcall`"

#: ../Doc/c-api/type.rst:473
#, fuzzy
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (use :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` instead)"
msgstr ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (vea :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"

#: ../Doc/c-api/type.rst:475
#, fuzzy
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (use :c:macro:"
"`Py_TPFLAGS_MANAGED_DICT` instead)"
msgstr ""
":c:member:`~PyTypeObject.tp_dictoffset` (vea :ref:`PyMemberDef <pymemberdef-"
"offsets>`)"

#: ../Doc/c-api/type.rst:477
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (vea :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"

#: ../Doc/c-api/type.rst:480
#, fuzzy
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of :c:func:"
"`PyType_FromSpecWithBases` instead."
msgstr ""
"Estableciendo :c:data:`Py_tp_bases` o :c:data:`Py_tp_base` puede ser "
"problemático en algunas plataformas. Para evitar problemas, use el argumento "
"*bases* de :py:func:`PyType_FromSpecWithBases` en su lugar."

#: ../Doc/c-api/type.rst:487
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr ""
"Las ranuras en :c:type:`PyBufferProcs` se pueden configurar en la API "
"ilimitada."

#: ../Doc/c-api/type.rst:489
#, fuzzy
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and :c:member:`~PyBufferProcs."
"bf_releasebuffer` are now available under the :ref:`limited API <limited-c-"
"api>`."
msgstr ""
":c:member:`~PyBufferProcs.bf_getbuffer` and :c:member:`~PyBufferProcs."
"bf_releasebuffer` ahora están disponibles en la API limitada."

#: ../Doc/c-api/type.rst:496
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr ""
"El valor deseado de la ranura. En la mayoría de los casos, este es un "
"puntero a una función."

#: ../Doc/c-api/type.rst:499
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr "Las ranuras que no sean ``Py_tp_doc`` pueden no ser ``NULL``."

#: ../Doc/c-api/type.rst:8
#, fuzzy
msgid "object"
msgstr "Objetos tipo"

#: ../Doc/c-api/type.rst:8
msgid "type"
msgstr ""
