# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-05-09 16:31+0200\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language: es\n"
"X-Generator: Poedit 2.3\n"

#: ../Doc/c-api/objbuffer.rst:4
msgid "Old Buffer Protocol"
msgstr "Protocolo de búfer antiguo"

#: ../Doc/c-api/objbuffer.rst:8
msgid ""
"These functions were part of the \"old buffer protocol\" API in Python 2. In "
"Python 3, this protocol doesn't exist anymore but the functions are still "
"exposed to ease porting 2.x code.  They act as a compatibility wrapper "
"around the :ref:`new buffer protocol <bufferobjects>`, but they don't give "
"you control over the lifetime of the resources acquired when a buffer is "
"exported."
msgstr ""
"Estas funciones formaban parte de la API del \"antiguo protocolo de búfer\" "
"en Python 2. En Python 3, este protocolo ya no existe, pero las funciones "
"aún están expuestas para facilitar la transferencia del código 2.x. Actúan "
"como una envoltura de compatibilidad alrededor del :ref:`nuevo protocolo de "
"búfer <bufferobjects>`, pero no le dan control sobre la vida útil de los "
"recursos adquiridos cuando se exporta un búfer."

#: ../Doc/c-api/objbuffer.rst:15
msgid ""
"Therefore, it is recommended that you call :c:func:`PyObject_GetBuffer` (or "
"the ``y*`` or ``w*`` :ref:`format codes <arg-parsing>` with the :c:func:"
"`PyArg_ParseTuple` family of functions) to get a buffer view over an object, "
"and :c:func:`PyBuffer_Release` when the buffer view can be released."
msgstr ""
"Por lo tanto, se recomienda que llame :c:func:`PyObject_GetBuffer` (o "
"``y*``o ``w*`` :ref:`format codes <arg-parsing>` con la familia de "
"funciones :c:func:`PyArg_ParseTuple`) para obtener una vista de búfer sobre "
"un objeto, y :c:func:`PyBuffer_Release` cuando se puede liberar la vista de "
"búfer."

#: ../Doc/c-api/objbuffer.rst:23
msgid ""
"Returns a pointer to a read-only memory location usable as character-based "
"input.  The *obj* argument must support the single-segment character buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""
"Retorna un puntero a una ubicación de memoria de solo lectura que se puede "
"usar como entrada basada en caracteres. El argumento *obj* debe admitir la "
"interfaz de búfer de caracteres de segmento único. En caso de éxito, retorna "
"``0``, establece *buffer* en la ubicación de memoria y *buffer_len* en la "
"longitud del búfer. Retorna ``-1`` y lanza :exc:`TypeError` en caso de error."

#: ../Doc/c-api/objbuffer.rst:32
msgid ""
"Returns a pointer to a read-only memory location containing arbitrary data. "
"The *obj* argument must support the single-segment readable buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""
"Retorna un puntero a una ubicación de memoria de solo lectura que contiene "
"datos arbitrarios. El argumento *obj* debe admitir la interfaz de búfer "
"legible de segmento único. En caso de éxito, retorna ``0``, establece "
"*buffer* en la ubicación de memoria y *buffer_len* en la longitud del búfer. "
"Retorna ``-1`` y lanza un :exc:`TypeError` en caso de error."

#: ../Doc/c-api/objbuffer.rst:41
msgid ""
"Returns ``1`` if *o* supports the single-segment readable buffer interface. "
"Otherwise returns ``0``.  This function always succeeds."
msgstr ""
"Retorna ``1`` si *o* admite la interfaz de búfer legible de segmento único. "
"De lo contrario, retorna ``0``. Esta función siempre tiene éxito."

#: ../Doc/c-api/objbuffer.rst:44
msgid ""
"Note that this function tries to get and release a buffer, and exceptions "
"which occur while calling corresponding functions will get suppressed. To "
"get error reporting use :c:func:`PyObject_GetBuffer()` instead."
msgstr ""
"Tenga en cuenta que esta función intenta obtener y liberar un búfer, y las "
"excepciones que se producen al llamar a las funciones correspondientes se "
"suprimirán. Para obtener informes de errores, utilice :c:func:"
"`PyObject_GetBuffer()` en su lugar."

#: ../Doc/c-api/objbuffer.rst:51
msgid ""
"Returns a pointer to a writable memory location.  The *obj* argument must "
"support the single-segment, character buffer interface.  On success, returns "
"``0``, sets *buffer* to the memory location and *buffer_len* to the buffer "
"length.  Returns ``-1`` and sets a :exc:`TypeError` on error."
msgstr ""
"Retorna un puntero a una ubicación de memoria de escritura. El argumento "
"*obj* debe admitir la interfaz de búfer de caracteres de segmento único. En "
"caso de éxito, retorna ``0``, establece *buffer* en la ubicación de memoria "
"y *buffer_len* en la longitud del búfer. Retorna ``-1`` y lanza un :exc:"
"`TypeError` en caso de error."
