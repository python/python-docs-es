# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-19 11:16+0100\n"
"PO-Revision-Date: 2020-05-07 09:39+0200\n"
"Last-Translator: \n"
"Language: es\n"
"Language-Team: python-doc-es (https://mail.python.org/mailman3/lists/docs-es."
"python.org)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../Doc/c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "Objetos de referencia débil"

#: ../Doc/c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"Python soporta *referencias débiles* como objetos de primera clase. Hay dos "
"tipos de objetos específicos que implementan directamente referencias "
"débiles. El primero es un objeto con referencia simple, y el segundo actúa "
"como un proxy del objeto original tanto como pueda."

#: ../Doc/c-api/weakref.rst:16
#, fuzzy
msgid ""
"Return true if *ob* is either a reference or proxy object.  This function "
"always succeeds."
msgstr "Retorna verdad (true) si *ob* es una referencia o un objeto proxy."

#: ../Doc/c-api/weakref.rst:22
#, fuzzy
msgid ""
"Return true if *ob* is a reference object.  This function always succeeds."
msgstr "Retorna verdad (true) si *ob* es un objeto de referencia."

#: ../Doc/c-api/weakref.rst:27
#, fuzzy
msgid "Return true if *ob* is a proxy object.  This function always succeeds."
msgstr "Retorna verdad (true) si *ob* es un objeto proxy."

#: ../Doc/c-api/weakref.rst:32
#, fuzzy
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or ``NULL``.  If *ob* is not a "
"weakly-referencable object, or if *callback* is not callable, ``None``, or "
"``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Retorna un objeto de referencia débil para el objeto *ob*. Esto siempre "
"retornará una nueva referencia, pero no garantiza la creación de un objeto "
"nuevo; un objeto de referencia ya existente puede ser retornado. El segundo "
"parámetro, *callback*, puede ser un objeto invocable que recibe una "
"notificación cuando *ob* es recolectado como basura; debe aceptar un solo "
"parámetro, el cual será el mismo objeto de referencia débil. *callback* "
"también puede ser ``None`` o ``NULL``. Si *ob* no es un objeto que puede ser "
"referido de forma débil, o si *callback* no es invocable, ``None``, o "
"``NULL``, esto retornará ``NULL``  y causará un :exc:`TypeError`."

#: ../Doc/c-api/weakref.rst:44
#, fuzzy
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or ``NULL``.  If "
"*ob* is not a weakly-referencable object, or if *callback* is not callable, "
"``None``, or ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Retorna un objeto proxy de referencia débil para el objeto *ob*. Esto "
"siempre retornará una nueva referencia, pero no garantiza la creación de un "
"objeto nuevo; un objeto proxy de referencia ya existente puede ser "
"retornado. El segundo parámetro, *callback*, puede ser un objeto invocable "
"que recibe una notificación cuando *ob* es recolectado como basura; debe "
"aceptar un solo parámetro, el cual será el mismo objeto de referencia débil. "
"*callback* también puede ser ``None`` o ``NULL``. Si *ob* no es un objeto "
"que puede ser referido de forma débil, o si *callback* no es invocable, "
"``None``, o ``NULL``, esto retornará ``NULL``  y causará un :exc:`TypeError`."

#: ../Doc/c-api/weakref.rst:56
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the referent "
"is no longer live, returns :const:`Py_None`."
msgstr ""
"Retorna el objeto referenciado desde una referencia débil, *ref*. Si el "
"referente no está vivo, retornará :const:`Py_None`."

#: ../Doc/c-api/weakref.rst:61
msgid ""
"This function returns a **borrowed reference** to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except if you know that it cannot be destroyed while you are still using it."
msgstr ""
"Esta función retorna una  *referencia prestada* al objeto referenciado. Esto "
"significa que siempre debes llamar :c:func:`Py_INCREF` en el objeto excepto "
"si sabes que no puede ser destruido mientras lo estés usando."

#: ../Doc/c-api/weakref.rst:69
msgid ""
"Similar to :c:func:`PyWeakref_GetObject`, but implemented as a macro that "
"does no error checking."
msgstr ""
"Similar a :c:func:`PyWeakref_GetObject`, pero implementado como un macro que "
"no verifica errores."
