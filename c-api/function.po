# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-05 12:54+0200\n"
"PO-Revision-Date: 2020-05-10 16:22+0200\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: Cristián Maureira-Fredes <cmaureirafredes@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 2.3\n"

#: ../Doc/c-api/function.rst:6
msgid "Function Objects"
msgstr "Objetos función"

#: ../Doc/c-api/function.rst:10
msgid "There are a few functions specific to Python functions."
msgstr "Hay algunas funciones específicas para las funciones de Python."

#: ../Doc/c-api/function.rst:15
msgid "The C structure used for functions."
msgstr "La estructura C utilizada para las funciones."

#: ../Doc/c-api/function.rst:22
msgid ""
"This is an instance of :c:type:`PyTypeObject` and represents the Python "
"function type.  It is exposed to Python programmers as ``types."
"FunctionType``."
msgstr ""
"Esta es una instancia de :c:type:`PyTypeObject` y representa el tipo función "
"de Python. Está expuesto a los programadores de Python como ``types."
"FunctionType``."

#: ../Doc/c-api/function.rst:28
msgid ""
"Return true if *o* is a function object (has type :c:data:"
"`PyFunction_Type`). The parameter must not be ``NULL``."
msgstr ""
"Retorna verdadero si *o* es un objeto función (tiene tipo :c:data:"
"`PyFunction_Type`). El parámetro no debe ser ``NULL``."

#: ../Doc/c-api/function.rst:34
msgid ""
"Return a new function object associated with the code object *code*. "
"*globals* must be a dictionary with the global variables accessible to the "
"function."
msgstr ""
"Retorna un nuevo objeto función asociado con el objeto código *code*. "
"*globals* debe ser un diccionario con las variables globales accesibles para "
"la función."

#: ../Doc/c-api/function.rst:37
msgid ""
"The function's docstring and name are retrieved from the code object. "
"*__module__* is retrieved from *globals*. The argument defaults, annotations "
"and closure are set to ``NULL``. *__qualname__* is set to the same value as "
"the function's name."
msgstr ""
"El docstring y el nombre de la función se obtiene del objeto código. "
"*__module__* se obtiene de *globals *. El argumento *defaults*, "
"*annotations* y *closure* se establecen en ``NULL``. *__qualname__* se "
"establece en el mismo valor que el nombre de la función."

#: ../Doc/c-api/function.rst:44
msgid ""
"As :c:func:`PyFunction_New`, but also allows setting the function object's "
"``__qualname__`` attribute.  *qualname* should be a unicode object or "
"``NULL``; if ``NULL``, the ``__qualname__`` attribute is set to the same "
"value as its ``__name__`` attribute."
msgstr ""
"Como :c:func:`PyFunction_New`, pero también permite configurar el atributo "
"``__qualname__`` del objeto función. *qualname* debe ser un objeto unicode o "
"``NULL``; si es ``NULL``, el atributo ``__qualname__`` se establece en el "
"mismo valor que su atributo ``__name__``."

#: ../Doc/c-api/function.rst:54
msgid "Return the code object associated with the function object *op*."
msgstr "Retorna el objeto código asociado con el objeto función *op*."

#: ../Doc/c-api/function.rst:59
msgid "Return the globals dictionary associated with the function object *op*."
msgstr "Retorna el diccionario global asociado con el objeto función *op*."

#: ../Doc/c-api/function.rst:64
msgid ""
"Return the *__module__* attribute of the function object *op*. This is "
"normally a string containing the module name, but can be set to any other "
"object by Python code."
msgstr ""
"Retorna el atributo *__module__* del objeto función *op*. Normalmente es una "
"cadena de caracteres que contiene el nombre del módulo, pero se puede "
"establecer en cualquier otro objeto mediante el código Python."

#: ../Doc/c-api/function.rst:71
msgid ""
"Return the argument default values of the function object *op*. This can be "
"a tuple of arguments or ``NULL``."
msgstr ""
"Retorna los valores predeterminados del argumento del objeto función *op*. "
"Esto puede ser una tupla de argumentos o ``NULL``."

#: ../Doc/c-api/function.rst:77
msgid ""
"Set the argument default values for the function object *op*. *defaults* "
"must be ``Py_None`` or a tuple."
msgstr ""
"Establece los valores predeterminados del argumento para el objeto función "
"*op*. *defaults* deben ser ``Py_None`` o una tupla."

#: ../Doc/c-api/function.rst:80 ../Doc/c-api/function.rst:94
#: ../Doc/c-api/function.rst:108
msgid "Raises :exc:`SystemError` and returns ``-1`` on failure."
msgstr "Lanza :exc:`SystemError` y retorna ``-1`` en caso de error."

#: ../Doc/c-api/function.rst:85
msgid ""
"Return the closure associated with the function object *op*. This can be "
"``NULL`` or a tuple of cell objects."
msgstr ""
"Retorna el cierre asociado con el objeto función *op*. Esto puede ser "
"``NULL`` o una tupla de objetos celda."

#: ../Doc/c-api/function.rst:91
msgid ""
"Set the closure associated with the function object *op*. *closure* must be "
"``Py_None`` or a tuple of cell objects."
msgstr ""
"Establece el cierre asociado con el objeto función *op*. *cierre* debe ser "
"``Py_None`` o una tupla de objetos celda."

#: ../Doc/c-api/function.rst:99
msgid ""
"Return the annotations of the function object *op*. This can be a mutable "
"dictionary or ``NULL``."
msgstr ""
"Retorna las anotaciones del objeto función *op*. Este puede ser un "
"diccionario mutable o ``NULL``."

#: ../Doc/c-api/function.rst:105
msgid ""
"Set the annotations for the function object *op*. *annotations* must be a "
"dictionary or ``Py_None``."
msgstr ""
"Establece las anotaciones para el objeto función *op*. *annotations* debe "
"ser un diccionario o ``Py_None``."
