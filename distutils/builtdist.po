# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-05 12:54+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../Doc/distutils/builtdist.rst:5
msgid "Creating Built Distributions"
msgstr ""

#: ../Doc/distutils/_setuptools_disclaimer.rst:3
msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html "
"independently covers all of the relevant information currently included here."
msgstr ""

#: ../Doc/distutils/builtdist.rst:9
msgid ""
"A \"built distribution\" is what you're probably used to thinking of either "
"as a \"binary package\" or an \"installer\" (depending on your background).  "
"It's not necessarily binary, though, because it might contain only Python "
"source code and/or byte-code; and we don't call it a package, because that "
"word is already spoken for in Python.  (And \"installer\" is a term specific "
"to the world of mainstream desktop systems.)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:16
msgid ""
"A built distribution is how you make life as easy as possible for installers "
"of your module distribution: for users of RPM-based Linux systems, it's a "
"binary RPM; for Windows users, it's an executable installer; for Debian-"
"based Linux users, it's a Debian package; and so forth.  Obviously, no one "
"person will be able to create built distributions for every platform under "
"the sun, so the Distutils are designed to enable module developers to "
"concentrate on their specialty---writing code and creating source "
"distributions---while an intermediary species called *packagers* springs up "
"to turn source distributions into built distributions for as many platforms "
"as there are packagers."
msgstr ""

#: ../Doc/distutils/builtdist.rst:26
msgid ""
"Of course, the module developer could be their own packager; or the packager "
"could be a volunteer \"out there\" somewhere who has access to a platform "
"which the original developer does not; or it could be software periodically "
"grabbing new source distributions and turning them into built distributions "
"for as many platforms as the software has access to.  Regardless of who they "
"are, a packager uses the setup script and the :command:`bdist` command "
"family to generate built distributions."
msgstr ""

#: ../Doc/distutils/builtdist.rst:34
msgid ""
"As a simple example, if I run the following command in the Distutils source "
"tree::"
msgstr ""

#: ../Doc/distutils/builtdist.rst:39
msgid ""
"then the Distutils builds my module distribution (the Distutils itself in "
"this case), does a \"fake\" installation (also in the :file:`build` "
"directory), and creates the default type of built distribution for my "
"platform.  The default format for built distributions is a \"dumb\" tar file "
"on Unix, and a simple executable installer on Windows.  (That tar file is "
"considered \"dumb\" because it has to be unpacked in a specific location to "
"work.)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:46
msgid ""
"Thus, the above command on a Unix system creates :file:`Distutils-1.0.{plat}."
"tar.gz`; unpacking this tarball from the right place installs the Distutils "
"just as though you had downloaded the source distribution and run ``python "
"setup.py install``.  (The \"right place\" is either the root of the "
"filesystem or  Python's :file:`{prefix}` directory, depending on the options "
"given to the :command:`bdist_dumb` command; the default is to make dumb "
"distributions relative to :file:`{prefix}`.)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:54
msgid ""
"Obviously, for pure Python distributions, this isn't any simpler than just "
"running ``python setup.py install``\\ ---but for non-pure distributions, "
"which include extensions that would need to be compiled, it can mean the "
"difference between someone being able to use your extensions or not.  And "
"creating \"smart\" built distributions, such as an RPM package or an "
"executable installer for Windows, is far more convenient for users even if "
"your distribution doesn't include any extensions."
msgstr ""

#: ../Doc/distutils/builtdist.rst:62
msgid ""
"The :command:`bdist` command has a :option:`!--formats` option, similar to "
"the :command:`sdist` command, which you can use to select the types of built "
"distribution to generate: for example, ::"
msgstr ""

#: ../Doc/distutils/builtdist.rst:68
msgid ""
"would, when run on a Unix system, create :file:`Distutils-1.0.{plat}.zip`\\ "
"---again, this archive would be unpacked from the root directory to install "
"the Distutils."
msgstr ""

#: ../Doc/distutils/builtdist.rst:72
msgid "The available formats for built distributions are:"
msgstr ""

#: ../Doc/distutils/builtdist.rst:75
msgid "Format"
msgstr ""

#: ../Doc/distutils/builtdist.rst:75
msgid "Description"
msgstr ""

#: ../Doc/distutils/builtdist.rst:75
msgid "Notes"
msgstr ""

#: ../Doc/distutils/builtdist.rst:77
msgid "``gztar``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:77
msgid "gzipped tar file (:file:`.tar.gz`)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:77
msgid "\\(1)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:80
msgid "``bztar``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:80
msgid "bzipped tar file (:file:`.tar.bz2`)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:83
msgid "``xztar``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:83
msgid "xzipped tar file (:file:`.tar.xz`)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:86
msgid "``ztar``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:86
msgid "compressed tar file (:file:`.tar.Z`)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:86
msgid "\\(3)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:89
msgid "``tar``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:89
msgid "tar file (:file:`.tar`)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:91
msgid "``zip``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:91
msgid "zip file (:file:`.zip`)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:91
msgid "(2),(4)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:93
msgid "``rpm``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:93
msgid "RPM"
msgstr ""

#: ../Doc/distutils/builtdist.rst:93
msgid "\\(5)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:95
msgid "``pkgtool``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:95
msgid "Solaris :program:`pkgtool`"
msgstr ""

#: ../Doc/distutils/builtdist.rst:97
msgid "``sdux``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:97
msgid "HP-UX :program:`swinstall`"
msgstr ""

#: ../Doc/distutils/builtdist.rst:99
msgid "``wininst``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:99
msgid "self-extracting ZIP file for Windows"
msgstr ""

#: ../Doc/distutils/builtdist.rst:99
msgid "\\(4)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:102
msgid "``msi``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:102
msgid "Microsoft Installer."
msgstr ""

#: ../Doc/distutils/builtdist.rst:105
msgid "Added support for the ``xztar`` format."
msgstr ""

#: ../Doc/distutils/builtdist.rst:109
msgid "Notes:"
msgstr ""

#: ../Doc/distutils/builtdist.rst:112
msgid "default on Unix"
msgstr ""

#: ../Doc/distutils/builtdist.rst:115
msgid "default on Windows"
msgstr ""

#: ../Doc/distutils/builtdist.rst:118
msgid "requires external :program:`compress` utility."
msgstr ""

#: ../Doc/distutils/builtdist.rst:121
msgid ""
"requires either external :program:`zip` utility or :mod:`zipfile` module "
"(part of the standard Python library since Python 1.6)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:125
msgid ""
"requires external :program:`rpm` utility, version 3.0.4 or better (use ``rpm "
"--version`` to find out which version you have)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:128
msgid ""
"You don't have to use the :command:`bdist` command with the :option:`!--"
"formats` option; you can also use the command that directly implements the "
"format you're interested in.  Some of these :command:`bdist` \"sub-commands"
"\" actually generate several similar formats; for instance, the :command:"
"`bdist_dumb` command generates all the \"dumb\" archive formats (``tar``, "
"``gztar``, ``bztar``, ``xztar``, ``ztar``, and ``zip``), and :command:"
"`bdist_rpm` generates both binary and source RPMs.  The :command:`bdist` sub-"
"commands, and the formats generated by each, are:"
msgstr ""

#: ../Doc/distutils/builtdist.rst:138
msgid "Command"
msgstr ""

#: ../Doc/distutils/builtdist.rst:138
msgid "Formats"
msgstr ""

#: ../Doc/distutils/builtdist.rst:140
msgid ":command:`bdist_dumb`"
msgstr ""

#: ../Doc/distutils/builtdist.rst:140
msgid "tar, gztar, bztar, xztar, ztar, zip"
msgstr ""

#: ../Doc/distutils/builtdist.rst:142
msgid ":command:`bdist_rpm`"
msgstr ""

#: ../Doc/distutils/builtdist.rst:142
msgid "rpm, srpm"
msgstr ""

#: ../Doc/distutils/builtdist.rst:144
msgid ":command:`bdist_wininst`"
msgstr ""

#: ../Doc/distutils/builtdist.rst:144
msgid "wininst"
msgstr ""

#: ../Doc/distutils/builtdist.rst:146
msgid ":command:`bdist_msi`"
msgstr ""

#: ../Doc/distutils/builtdist.rst:146
msgid "msi"
msgstr ""

#: ../Doc/distutils/builtdist.rst:150 ../Doc/distutils/builtdist.rst:305
#: ../Doc/distutils/builtdist.rst:470
msgid "bdist_wininst is deprecated since Python 3.8."
msgstr ""

#: ../Doc/distutils/builtdist.rst:152
msgid ""
"The following sections give details on the individual :command:`bdist_\\*` "
"commands."
msgstr ""

#: ../Doc/distutils/builtdist.rst:168
msgid "Creating RPM packages"
msgstr ""

#: ../Doc/distutils/builtdist.rst:170
msgid ""
"The RPM format is used by many popular Linux distributions, including Red "
"Hat, SuSE, and Mandrake.  If one of these (or any of the other RPM-based "
"Linux distributions) is your usual environment, creating RPM packages for "
"other users of that same distribution is trivial. Depending on the "
"complexity of your module distribution and differences between Linux "
"distributions, you may also be able to create RPMs that work on different "
"RPM-based distributions."
msgstr ""

#: ../Doc/distutils/builtdist.rst:177
msgid ""
"The usual way to create an RPM of your module distribution is to run the :"
"command:`bdist_rpm` command::"
msgstr ""

#: ../Doc/distutils/builtdist.rst:182
msgid "or the :command:`bdist` command with the :option:`!--format` option::"
msgstr ""

#: ../Doc/distutils/builtdist.rst:186
msgid ""
"The former allows you to specify RPM-specific options; the latter allows  "
"you to easily specify multiple formats in one run.  If you need to do both, "
"you can explicitly specify multiple :command:`bdist_\\*` commands and their "
"options::"
msgstr ""

#: ../Doc/distutils/builtdist.rst:193
msgid ""
"Creating RPM packages is driven by a :file:`.spec` file, much as using the "
"Distutils is driven by the setup script.  To make your life easier, the :"
"command:`bdist_rpm` command normally creates a :file:`.spec` file based on "
"the information you supply in the setup script, on the command line, and in "
"any Distutils configuration files.  Various options and sections in the :"
"file:`.spec` file are derived from options in the setup script as follows:"
msgstr ""

#: ../Doc/distutils/builtdist.rst:201 ../Doc/distutils/builtdist.rst:225
msgid "RPM :file:`.spec` file option or section"
msgstr ""

#: ../Doc/distutils/builtdist.rst:201
msgid "Distutils setup script option"
msgstr ""

#: ../Doc/distutils/builtdist.rst:203
msgid "Name"
msgstr ""

#: ../Doc/distutils/builtdist.rst:203
msgid "``name``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:205
msgid "Summary (in preamble)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:205
msgid "``description``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:207
msgid "Version"
msgstr ""

#: ../Doc/distutils/builtdist.rst:207
msgid "``version``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:209 ../Doc/distutils/builtdist.rst:232
msgid "Vendor"
msgstr ""

#: ../Doc/distutils/builtdist.rst:209
msgid ""
"``author`` and ``author_email``, or  --- & ``maintainer`` and "
"``maintainer_email``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:213
msgid "Copyright"
msgstr ""

#: ../Doc/distutils/builtdist.rst:213
msgid "``license``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:215
msgid "Url"
msgstr ""

#: ../Doc/distutils/builtdist.rst:215
msgid "``url``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:217
#, python-format
msgid "%description (section)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:217
msgid "``long_description``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:220
msgid ""
"Additionally, there are many options in :file:`.spec` files that don't have "
"corresponding options in the setup script.  Most of these are handled "
"through options to the :command:`bdist_rpm` command as follows:"
msgstr ""

#: ../Doc/distutils/builtdist.rst:225
msgid ":command:`bdist_rpm` option"
msgstr ""

#: ../Doc/distutils/builtdist.rst:225
msgid "default value"
msgstr ""

#: ../Doc/distutils/builtdist.rst:228
msgid "Release"
msgstr ""

#: ../Doc/distutils/builtdist.rst:228
msgid "``release``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:228
msgid "\"1\""
msgstr ""

#: ../Doc/distutils/builtdist.rst:230
msgid "Group"
msgstr ""

#: ../Doc/distutils/builtdist.rst:230
msgid "``group``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:230
msgid "\"Development/Libraries\""
msgstr ""

#: ../Doc/distutils/builtdist.rst:232
msgid "``vendor``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:232
msgid "(see above)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:234
msgid "Packager"
msgstr ""

#: ../Doc/distutils/builtdist.rst:234
msgid "``packager``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:234 ../Doc/distutils/builtdist.rst:236
#: ../Doc/distutils/builtdist.rst:238 ../Doc/distutils/builtdist.rst:240
#: ../Doc/distutils/builtdist.rst:242 ../Doc/distutils/builtdist.rst:244
#: ../Doc/distutils/builtdist.rst:246 ../Doc/distutils/builtdist.rst:248
msgid "(none)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:236
msgid "Provides"
msgstr ""

#: ../Doc/distutils/builtdist.rst:236
msgid "``provides``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:238
msgid "Requires"
msgstr ""

#: ../Doc/distutils/builtdist.rst:238
msgid "``requires``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:240
msgid "Conflicts"
msgstr ""

#: ../Doc/distutils/builtdist.rst:240
msgid "``conflicts``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:242
msgid "Obsoletes"
msgstr ""

#: ../Doc/distutils/builtdist.rst:242
msgid "``obsoletes``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:244
msgid "Distribution"
msgstr ""

#: ../Doc/distutils/builtdist.rst:244
msgid "``distribution_name``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:246
msgid "BuildRequires"
msgstr ""

#: ../Doc/distutils/builtdist.rst:246
msgid "``build_requires``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:248
msgid "Icon"
msgstr ""

#: ../Doc/distutils/builtdist.rst:248
msgid "``icon``"
msgstr ""

#: ../Doc/distutils/builtdist.rst:251
msgid ""
"Obviously, supplying even a few of these options on the command-line would "
"be tedious and error-prone, so it's usually best to put them in the setup "
"configuration file, :file:`setup.cfg`\\ ---see section :ref:`setup-config`.  "
"If you distribute or package many Python module distributions, you might "
"want to put options that apply to all of them in your personal Distutils "
"configuration file (:file:`~/.pydistutils.cfg`).  If you want to temporarily "
"disable this file, you can pass the :option:`!--no-user-cfg` option to :file:"
"`setup.py`."
msgstr ""

#: ../Doc/distutils/builtdist.rst:259
msgid ""
"There are three steps to building a binary RPM package, all of which are "
"handled automatically by the Distutils:"
msgstr ""

#: ../Doc/distutils/builtdist.rst:262
msgid ""
"create a :file:`.spec` file, which describes the package (analogous  to the "
"Distutils setup script; in fact, much of the information in the  setup "
"script winds up in the :file:`.spec` file)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:266
msgid "create the source RPM"
msgstr ""

#: ../Doc/distutils/builtdist.rst:268
msgid ""
"create the \"binary\" RPM (which may or may not contain binary code, "
"depending on whether your module distribution contains Python extensions)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:271
msgid ""
"Normally, RPM bundles the last two steps together; when you use the "
"Distutils, all three steps are typically bundled together."
msgstr ""

#: ../Doc/distutils/builtdist.rst:274
msgid ""
"If you wish, you can separate these three steps.  You can use the :option:"
"`!--spec-only` option to make :command:`bdist_rpm` just create the :file:`."
"spec` file and exit; in this case, the :file:`.spec` file will be written to "
"the \"distribution directory\"---normally :file:`dist/`, but customizable "
"with the :option:`!--dist-dir` option.  (Normally, the :file:`.spec` file "
"winds up deep in the \"build tree,\" in a temporary directory created by :"
"command:`bdist_rpm`.)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:302
msgid "Creating Windows Installers"
msgstr ""

#: ../Doc/distutils/builtdist.rst:307
msgid ""
"Executable installers are the natural format for binary distributions on "
"Windows.  They display a nice graphical user interface, display some "
"information about the module distribution to be installed taken from the "
"metadata in the setup script, let the user select a few options, and start "
"or cancel the installation."
msgstr ""

#: ../Doc/distutils/builtdist.rst:313
msgid ""
"Since the metadata is taken from the setup script, creating Windows "
"installers is usually as easy as running::"
msgstr ""

#: ../Doc/distutils/builtdist.rst:318
msgid "or the :command:`bdist` command with the :option:`!--formats` option::"
msgstr ""

#: ../Doc/distutils/builtdist.rst:322
msgid ""
"If you have a pure module distribution (only containing pure Python modules "
"and packages), the resulting installer will be version independent and have "
"a name like :file:`foo-1.0.win32.exe`. Note that creating ``wininst`` binary "
"distributions in only supported on Windows systems."
msgstr ""

#: ../Doc/distutils/builtdist.rst:327
msgid ""
"If you have a non-pure distribution, the extensions can only be created on a "
"Windows platform, and will be Python version dependent. The installer "
"filename will reflect this and now has the form :file:`foo-1.0.win32-py2.0."
"exe`.  You have to create a separate installer for every Python version you "
"want to support."
msgstr ""

#: ../Doc/distutils/builtdist.rst:333
msgid ""
"The installer will try to compile pure modules into :term:`bytecode` after "
"installation on the target system in normal and optimizing mode.  If you "
"don't want this to happen for some reason, you can run the :command:"
"`bdist_wininst` command with the :option:`!--no-target-compile` and/or the :"
"option:`!--no-target-optimize` option."
msgstr ""

#: ../Doc/distutils/builtdist.rst:339
msgid ""
"By default the installer will display the cool \"Python Powered\" logo when "
"it is run, but you can also supply your own 152x261 bitmap which must be a "
"Windows :file:`.bmp` file with the :option:`!--bitmap` option."
msgstr ""

#: ../Doc/distutils/builtdist.rst:343
msgid ""
"The installer will also display a large title on the desktop background "
"window when it is run, which is constructed from the name of your "
"distribution and the version number.  This can be changed to another text by "
"using the :option:`!--title` option."
msgstr ""

#: ../Doc/distutils/builtdist.rst:348
msgid ""
"The installer file will be written to the \"distribution directory\" --- "
"normally :file:`dist/`, but customizable with the :option:`!--dist-dir` "
"option."
msgstr ""

#: ../Doc/distutils/builtdist.rst:354
msgid "Cross-compiling on Windows"
msgstr ""

#: ../Doc/distutils/builtdist.rst:356
msgid ""
"Starting with Python 2.6, distutils is capable of cross-compiling between "
"Windows platforms.  In practice, this means that with the correct tools "
"installed, you can use a 32bit version of Windows to create 64bit extensions "
"and vice-versa."
msgstr ""

#: ../Doc/distutils/builtdist.rst:361
msgid ""
"To build for an alternate platform, specify the :option:`!--plat-name` "
"option to the build command.  Valid values are currently 'win32', and  'win-"
"amd64'. For example, on a 32bit version of Windows, you could execute::"
msgstr ""

#: ../Doc/distutils/builtdist.rst:367
msgid ""
"to build a 64bit version of your extension.  The Windows Installers also "
"support this option, so the command::"
msgstr ""

#: ../Doc/distutils/builtdist.rst:372
msgid ""
"would create a 64bit installation executable on your 32bit version of "
"Windows."
msgstr ""

#: ../Doc/distutils/builtdist.rst:374
msgid ""
"To cross-compile, you must download the Python source code and cross-compile "
"Python itself for the platform you are targeting - it is not possible from a "
"binary installation of Python (as the .lib etc file for other platforms are "
"not included.)  In practice, this means the user of a 32 bit operating "
"system will need to use Visual Studio 2008 to open the :file:`PCbuild/"
"PCbuild.sln` solution in the Python source tree and build the \"x64\" "
"configuration of the 'pythoncore' project before cross-compiling extensions "
"is possible."
msgstr ""

#: ../Doc/distutils/builtdist.rst:383
msgid ""
"Note that by default, Visual Studio 2008 does not install 64bit compilers or "
"tools.  You may need to reexecute the Visual Studio setup process and select "
"these tools (using Control Panel->[Add/Remove] Programs is a convenient way "
"to check or modify your existing install.)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:391
msgid "The Postinstallation script"
msgstr ""

#: ../Doc/distutils/builtdist.rst:393
msgid ""
"Starting with Python 2.3, a postinstallation script can be specified with "
"the :option:`!--install-script` option.  The basename of the script must be "
"specified, and the script filename must also be listed in the scripts "
"argument to the setup function."
msgstr ""

#: ../Doc/distutils/builtdist.rst:398
msgid ""
"This script will be run at installation time on the target system after all "
"the files have been copied, with ``argv[1]`` set to :option:`!-install`, and "
"again at uninstallation time before the files are removed with ``argv[1]`` "
"set to :option:`!-remove`."
msgstr ""

#: ../Doc/distutils/builtdist.rst:403
msgid ""
"The installation script runs embedded in the windows installer, every output "
"(``sys.stdout``, ``sys.stderr``) is redirected into a buffer and will be "
"displayed in the GUI after the script has finished."
msgstr ""

#: ../Doc/distutils/builtdist.rst:407
msgid ""
"Some functions especially useful in this context are available as additional "
"built-in functions in the installation script."
msgstr ""

#: ../Doc/distutils/builtdist.rst:414
msgid ""
"These functions should be called when a directory or file is created by the "
"postinstall script at installation time.  It will register *path* with the "
"uninstaller, so that it will be removed when the distribution is "
"uninstalled. To be safe, directories are only removed if they are empty."
msgstr ""

#: ../Doc/distutils/builtdist.rst:422
msgid ""
"This function can be used to retrieve special folder locations on Windows "
"like the Start Menu or the Desktop.  It returns the full path to the folder. "
"*csidl_string* must be one of the following strings::"
msgstr ""

#: ../Doc/distutils/builtdist.rst:442
msgid "If the folder cannot be retrieved, :exc:`OSError` is raised."
msgstr ""

#: ../Doc/distutils/builtdist.rst:444
msgid ""
"Which folders are available depends on the exact Windows version, and "
"probably also the configuration.  For details refer to Microsoft's "
"documentation of the :c:func:`SHGetSpecialFolderPath` function."
msgstr ""

#: ../Doc/distutils/builtdist.rst:451
msgid ""
"This function creates a shortcut. *target* is the path to the program to be "
"started by the shortcut. *description* is the description of the shortcut. "
"*filename* is the title of the shortcut that the user will see. *arguments* "
"specifies the command line arguments, if any. *workdir* is the working "
"directory for the program. *iconpath* is the file containing the icon for "
"the shortcut, and *iconindex* is the index of the icon in the file "
"*iconpath*.  Again, for details consult the Microsoft documentation for the :"
"class:`IShellLink` interface."
msgstr ""

#: ../Doc/distutils/builtdist.rst:462
msgid "Vista User Access Control (UAC)"
msgstr ""

#: ../Doc/distutils/builtdist.rst:464
msgid ""
"Starting with Python 2.6, bdist_wininst supports a :option:`!--user-access-"
"control` option.  The default is 'none' (meaning no UAC handling is done), "
"and other valid values are 'auto' (meaning prompt for UAC elevation if "
"Python was installed for all users) and 'force' (meaning always prompt for "
"elevation)."
msgstr ""
