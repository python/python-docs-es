# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-19 11:16+0100\n"
"PO-Revision-Date: 2020-08-20 15:05+0200\n"
"Last-Translator: Francisco Jesús Sevilla García <fjsevilla.dev@gmail.com>\n"
"Language: es\n"
"Language-Team: python-doc-es\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../Doc/howto/descriptor.rst:5
msgid "Descriptor HowTo Guide"
msgstr "Guía práctica de uso de los descriptores"

#: ../Doc/howto/descriptor.rst
msgid "Author"
msgstr "Autor"

#: ../Doc/howto/descriptor.rst:7
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../Doc/howto/descriptor.rst
msgid "Contact"
msgstr "Contacto"

#: ../Doc/howto/descriptor.rst:8
msgid "<python at rcn dot com>"
msgstr "<python at rcn dot com>"

#: ../Doc/howto/descriptor.rst:11
msgid "Contents"
msgstr "Contenidos"

#: ../Doc/howto/descriptor.rst:13
msgid ""
":term:`Descriptors <descriptor>` let objects customize attribute lookup, "
"storage, and deletion."
msgstr ""

#: ../Doc/howto/descriptor.rst:16
msgid "This guide has four major sections:"
msgstr ""

#: ../Doc/howto/descriptor.rst:18
msgid ""
"The \"primer\" gives a basic overview, moving gently from simple examples, "
"adding one feature at a time.  Start here if you're new to descriptors."
msgstr ""

#: ../Doc/howto/descriptor.rst:21
msgid ""
"The second section shows a complete, practical descriptor example.  If you "
"already know the basics, start there."
msgstr ""

#: ../Doc/howto/descriptor.rst:24
msgid ""
"The third section provides a more technical tutorial that goes into the "
"detailed mechanics of how descriptors work.  Most people don't need this "
"level of detail."
msgstr ""

#: ../Doc/howto/descriptor.rst:28
msgid ""
"The last section has pure Python equivalents for built-in descriptors that "
"are written in C.  Read this if you're curious about how functions turn into "
"bound methods or about the implementation of common tools like :func:"
"`classmethod`, :func:`staticmethod`, :func:`property`, and :term:`__slots__`."
msgstr ""

#: ../Doc/howto/descriptor.rst:36
msgid "Primer"
msgstr ""

#: ../Doc/howto/descriptor.rst:38
msgid ""
"In this primer, we start with the most basic possible example and then we'll "
"add new capabilities one by one."
msgstr ""

#: ../Doc/howto/descriptor.rst:43
msgid "Simple example: A descriptor that returns a constant"
msgstr ""

#: ../Doc/howto/descriptor.rst:45
msgid ""
"The :class:`Ten` class is a descriptor that always returns the constant "
"``10`` from its :meth:`__get__` method:"
msgstr ""

#: ../Doc/howto/descriptor.rst:54
msgid ""
"To use the descriptor, it must be stored as a class variable in another "
"class:"
msgstr ""

#: ../Doc/howto/descriptor.rst:62
msgid ""
"An interactive session shows the difference between normal attribute lookup "
"and descriptor lookup:"
msgstr ""

#: ../Doc/howto/descriptor.rst:73
msgid ""
"In the ``a.x`` attribute lookup, the dot operator finds the key ``x`` and "
"the value ``5`` in the class dictionary.  In the ``a.y`` lookup, the dot "
"operator finds a descriptor instance, recognized by its ``__get__`` method, "
"and calls that method which returns ``10``."
msgstr ""

#: ../Doc/howto/descriptor.rst:78
msgid ""
"Note that the value ``10`` is not stored in either the class dictionary or "
"the instance dictionary.  Instead, the value ``10`` is computed on demand."
msgstr ""

#: ../Doc/howto/descriptor.rst:81
msgid ""
"This example shows how a simple descriptor works, but it isn't very useful. "
"For retrieving constants, normal attribute lookup would be better."
msgstr ""

#: ../Doc/howto/descriptor.rst:84
msgid ""
"In the next section, we'll create something more useful, a dynamic lookup."
msgstr ""

#: ../Doc/howto/descriptor.rst:88
msgid "Dynamic lookups"
msgstr ""

#: ../Doc/howto/descriptor.rst:90
msgid ""
"Interesting descriptors typically run computations instead of returning "
"constants:"
msgstr ""

#: ../Doc/howto/descriptor.rst:109
msgid ""
"An interactive session shows that the lookup is dynamic — it computes "
"different, updated answers each time::"
msgstr ""

#: ../Doc/howto/descriptor.rst:122
msgid ""
"Besides showing how descriptors can run computations, this example also "
"reveals the purpose of the parameters to :meth:`__get__`.  The *self* "
"parameter is *size*, an instance of *DirectorySize*.  The *obj* parameter is "
"either *g* or *s*, an instance of *Directory*.  It is the *obj* parameter "
"that lets the :meth:`__get__` method learn the target directory.  The "
"*objtype* parameter is the class *Directory*."
msgstr ""

#: ../Doc/howto/descriptor.rst:131
msgid "Managed attributes"
msgstr ""

#: ../Doc/howto/descriptor.rst:133
msgid ""
"A popular use for descriptors is managing access to instance data.  The "
"descriptor is assigned to a public attribute in the class dictionary while "
"the actual data is stored as a private attribute in the instance "
"dictionary.  The descriptor's :meth:`__get__` and :meth:`__set__` methods "
"are triggered when the public attribute is accessed."
msgstr ""

#: ../Doc/howto/descriptor.rst:139
msgid ""
"In the following example, *age* is the public attribute and *_age* is the "
"private attribute.  When the public attribute is accessed, the descriptor "
"logs the lookup or update:"
msgstr ""

#: ../Doc/howto/descriptor.rst:172
msgid ""
"An interactive session shows that all access to the managed attribute *age* "
"is logged, but that the regular attribute *name* is not logged:"
msgstr ""

#: ../Doc/howto/descriptor.rst:206
msgid ""
"One major issue with this example is that the private name *_age* is "
"hardwired in the *LoggedAgeAccess* class.  That means that each instance can "
"only have one logged attribute and that its name is unchangeable.  In the "
"next example, we'll fix that problem."
msgstr ""

#: ../Doc/howto/descriptor.rst:213
msgid "Customized names"
msgstr ""

#: ../Doc/howto/descriptor.rst:215
msgid ""
"When a class uses descriptors, it can inform each descriptor about which "
"variable name was used."
msgstr ""

#: ../Doc/howto/descriptor.rst:218
msgid ""
"In this example, the :class:`Person` class has two descriptor instances, "
"*name* and *age*.  When the :class:`Person` class is defined, it makes a "
"callback to :meth:`__set_name__` in *LoggedAccess* so that the field names "
"can be recorded, giving each descriptor its own *public_name* and "
"*private_name*:"
msgstr ""

#: ../Doc/howto/descriptor.rst:256
msgid ""
"An interactive session shows that the :class:`Person` class has called :meth:"
"`__set_name__` so that the field names would be recorded.  Here we call :"
"func:`vars` to look up the descriptor without triggering it:"
msgstr ""

#: ../Doc/howto/descriptor.rst:267
msgid "The new class now logs access to both *name* and *age*:"
msgstr ""

#: ../Doc/howto/descriptor.rst:284
msgid "The two *Person* instances contain only the private names::"
msgstr ""

#: ../Doc/howto/descriptor.rst:293
msgid "Closing thoughts"
msgstr ""

#: ../Doc/howto/descriptor.rst:295
msgid ""
"A :term:`descriptor` is what we call any object that defines :meth:"
"`__get__`, :meth:`__set__`, or :meth:`__delete__`."
msgstr ""

#: ../Doc/howto/descriptor.rst:298
msgid ""
"Optionally, descriptors can have a :meth:`__set_name__` method.  This is "
"only used in cases where a descriptor needs to know either the class where "
"it was created or the name of class variable it was assigned to.  (This "
"method, if present, is called even if the class is not a descriptor.)"
msgstr ""

#: ../Doc/howto/descriptor.rst:303
msgid ""
"Descriptors get invoked by the dot \"operator\" during attribute lookup.  If "
"a descriptor is accessed indirectly with ``vars(some_class)"
"[descriptor_name]``, the descriptor instance is returned without invoking it."
msgstr ""

#: ../Doc/howto/descriptor.rst:307
msgid ""
"Descriptors only work when used as class variables.  When put in instances, "
"they have no effect."
msgstr ""

#: ../Doc/howto/descriptor.rst:310
msgid ""
"The main motivation for descriptors is to provide a hook allowing objects "
"stored in class variables to control what happens during attribute lookup."
msgstr ""

#: ../Doc/howto/descriptor.rst:313
msgid ""
"Traditionally, the calling class controls what happens during lookup. "
"Descriptors invert that relationship and allow the data being looked-up to "
"have a say in the matter."
msgstr ""

#: ../Doc/howto/descriptor.rst:317
msgid ""
"Descriptors are used throughout the language.  It is how functions turn into "
"bound methods.  Common tools like :func:`classmethod`, :func:"
"`staticmethod`, :func:`property`, and :func:`functools.cached_property` are "
"all implemented as descriptors."
msgstr ""

#: ../Doc/howto/descriptor.rst:324
msgid "Complete Practical Example"
msgstr ""

#: ../Doc/howto/descriptor.rst:326
msgid ""
"In this example, we create a practical and powerful tool for locating "
"notoriously hard to find data corruption bugs."
msgstr ""

#: ../Doc/howto/descriptor.rst:331
msgid "Validator class"
msgstr ""

#: ../Doc/howto/descriptor.rst:333
msgid ""
"A validator is a descriptor for managed attribute access.  Prior to storing "
"any data, it verifies that the new value meets various type and range "
"restrictions.  If those restrictions aren't met, it raises an exception to "
"prevent data corruption at its source."
msgstr ""

#: ../Doc/howto/descriptor.rst:338
msgid ""
"This :class:`Validator` class is both an :term:`abstract base class` and a "
"managed attribute descriptor:"
msgstr ""

#: ../Doc/howto/descriptor.rst:361
msgid ""
"Custom validators need to inherit from :class:`Validator` and must supply a :"
"meth:`validate` method to test various restrictions as needed."
msgstr ""

#: ../Doc/howto/descriptor.rst:366
msgid "Custom validators"
msgstr ""

#: ../Doc/howto/descriptor.rst:368
msgid "Here are three practical data validation utilities:"
msgstr ""

#: ../Doc/howto/descriptor.rst:370
msgid ""
":class:`OneOf` verifies that a value is one of a restricted set of options."
msgstr ""

#: ../Doc/howto/descriptor.rst:372
msgid ""
":class:`Number` verifies that a value is either an :class:`int` or :class:"
"`float`.  Optionally, it verifies that a value is between a given minimum or "
"maximum."
msgstr ""

#: ../Doc/howto/descriptor.rst:376
msgid ""
":class:`String` verifies that a value is a :class:`str`.  Optionally, it "
"validates a given minimum or maximum length.  It can validate a user-defined "
"`predicate <https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)>`_ "
"as well."
msgstr ""

#: ../Doc/howto/descriptor.rst:435
msgid "Practical application"
msgstr ""

#: ../Doc/howto/descriptor.rst:437
msgid "Here's how the data validators can be used in a real class:"
msgstr ""

#: ../Doc/howto/descriptor.rst:452
msgid "The descriptors prevent invalid instances from being created:"
msgstr ""

#: ../Doc/howto/descriptor.rst:479
msgid "Technical Tutorial"
msgstr ""

#: ../Doc/howto/descriptor.rst:481
msgid ""
"What follows is a more technical tutorial for the mechanics and details of "
"how descriptors work."
msgstr ""

#: ../Doc/howto/descriptor.rst:486
msgid "Abstract"
msgstr "Resumen"

#: ../Doc/howto/descriptor.rst:488
msgid ""
"Defines descriptors, summarizes the protocol, and shows how descriptors are "
"called.  Provides an example showing how object relational mappings work."
msgstr ""

#: ../Doc/howto/descriptor.rst:491
#, fuzzy
msgid ""
"Learning about descriptors not only provides access to a larger toolset, it "
"creates a deeper understanding of how Python works."
msgstr ""
"Aprender acerca de los descriptores no solo brinda acceso a un conjunto de "
"herramientas mayor, sino que genera una comprensión más profunda de como "
"funciona Python y una apreciación sobre la elegancia de su diseño."

#: ../Doc/howto/descriptor.rst:496
#, fuzzy
msgid "Definition and introduction"
msgstr "Definición e introducción"

#: ../Doc/howto/descriptor.rst:498
msgid ""
"In general, a descriptor is an attribute value that has one of the methods "
"in the descriptor protocol.  Those methods are :meth:`__get__`, :meth:"
"`__set__`, and :meth:`__delete__`.  If any of those methods are defined for "
"an attribute, it is said to be a :term:`descriptor`."
msgstr ""

#: ../Doc/howto/descriptor.rst:503
#, fuzzy
msgid ""
"The default behavior for attribute access is to get, set, or delete the "
"attribute from an object's dictionary.  For instance, ``a.x`` has a lookup "
"chain starting with ``a.__dict__['x']``, then ``type(a).__dict__['x']``, and "
"continuing through the method resolution order of ``type(a)``. If the looked-"
"up value is an object defining one of the descriptor methods, then Python "
"may override the default behavior and invoke the descriptor method instead. "
"Where this occurs in the precedence chain depends on which descriptor "
"methods were defined."
msgstr ""
"El comportamiento predeterminado para el acceso a los atributos es obtener, "
"establecer o eliminar el atributo del diccionario de un objeto. Por ejemplo, "
"``a.x`` tiene una cadena de búsqueda que comienza con ``a.__dict__['x']``, "
"luego ``type(a).__dict__['x']`` y continúa a través de las clases base de "
"``type(a)`` excluyendo metaclases. Si el valor buscado es un objeto que "
"define uno de los métodos del descriptor, entonces Python puede anular el "
"comportamiento predeterminado e invocar el método del descriptor en su "
"lugar. El lugar donde ésto ocurre en la cadena de precedencia depende de qué "
"métodos del descriptor fueron definidos."

#: ../Doc/howto/descriptor.rst:512
msgid ""
"Descriptors are a powerful, general purpose protocol.  They are the "
"mechanism behind properties, methods, static methods, class methods, and :"
"func:`super()`.  They are used throughout Python itself.  Descriptors "
"simplify the underlying C code and offer a flexible set of new tools for "
"everyday Python programs."
msgstr ""

#: ../Doc/howto/descriptor.rst:520
#, fuzzy
msgid "Descriptor protocol"
msgstr "Protocolo descriptor"

#: ../Doc/howto/descriptor.rst:522
msgid "``descr.__get__(self, obj, type=None) -> value``"
msgstr "``descr.__get__(self, obj, type=None) -> value``"

#: ../Doc/howto/descriptor.rst:524
msgid "``descr.__set__(self, obj, value) -> None``"
msgstr "``descr.__set__(self, obj, value) -> None``"

#: ../Doc/howto/descriptor.rst:526
msgid "``descr.__delete__(self, obj) -> None``"
msgstr "``descr.__delete__(self, obj) -> None``"

#: ../Doc/howto/descriptor.rst:528
msgid ""
"That is all there is to it.  Define any of these methods and an object is "
"considered a descriptor and can override default behavior upon being looked "
"up as an attribute."
msgstr ""
"Eso es todo lo que hay que hacer. Si se define cualquiera de estos métodos, "
"el objeto se considera un descriptor y puede anular el comportamiento "
"predeterminado al ser buscado como un atributo."

#: ../Doc/howto/descriptor.rst:532
#, fuzzy
msgid ""
"If an object defines :meth:`__set__` or :meth:`__delete__`, it is considered "
"a data descriptor.  Descriptors that only define :meth:`__get__` are called "
"non-data descriptors (they are often used for methods but other uses are "
"possible)."
msgstr ""
"Si un objeto define :meth:`__set__` o :meth:`__delete__`, se considera un "
"descriptor de datos. Los descriptores que solo definen :meth:`__get__` se "
"denominan descriptores de no-datos (normalmente se utilizan para métodos, "
"pero son posibles otros usos)."

#: ../Doc/howto/descriptor.rst:537
msgid ""
"Data and non-data descriptors differ in how overrides are calculated with "
"respect to entries in an instance's dictionary.  If an instance's dictionary "
"has an entry with the same name as a data descriptor, the data descriptor "
"takes precedence.  If an instance's dictionary has an entry with the same "
"name as a non-data descriptor, the dictionary entry takes precedence."
msgstr ""
"Los descriptores de datos y de no-datos difieren en como se calculan las "
"anulaciones con respecto a las entradas en el diccionario de una instancia. "
"Si el diccionario de una instancia tiene una entrada con el mismo nombre que "
"un descriptor de datos, el descriptor de datos tiene prioridad. Si el "
"diccionario de una instancia tiene una entrada con el mismo nombre que un "
"descriptor de no-datos, la entrada del diccionario tiene prioridad."

#: ../Doc/howto/descriptor.rst:543
msgid ""
"To make a read-only data descriptor, define both :meth:`__get__` and :meth:"
"`__set__` with the :meth:`__set__` raising an :exc:`AttributeError` when "
"called.  Defining the :meth:`__set__` method with an exception raising "
"placeholder is enough to make it a data descriptor."
msgstr ""
"Para crear un descriptor de datos de solo lectura, se define tanto :meth:"
"`__get__` como :meth:`__set__` donde :meth:`__set__` lanza un error :exc:"
"`AttributeError` cuando es llamado. Definir el método :meth:`__set__` de "
"forma que lance una excepción genérica es suficiente para convertirlo en un "
"descriptor de datos."

#: ../Doc/howto/descriptor.rst:550
msgid "Overview of descriptor invocation"
msgstr ""

#: ../Doc/howto/descriptor.rst:552
#, fuzzy
msgid ""
"A descriptor can be called directly with ``desc.__get__(obj)`` or ``desc."
"__get__(None, cls)``."
msgstr ""
"Un descriptor puede ser llamado directamente mediante el nombre de su "
"método. Por ejemplo ``d.__get__(obj)``."

#: ../Doc/howto/descriptor.rst:555
msgid ""
"But it is more common for a descriptor to be invoked automatically from "
"attribute access."
msgstr ""

#: ../Doc/howto/descriptor.rst:558
msgid ""
"The expression ``obj.x`` looks up the attribute ``x`` in the chain of "
"namespaces for ``obj``.  If the search finds a descriptor outside of the "
"instance ``__dict__``, its :meth:`__get__` method is invoked according to "
"the precedence rules listed below."
msgstr ""

#: ../Doc/howto/descriptor.rst:563
#, fuzzy
msgid ""
"The details of invocation depend on whether ``obj`` is an object, class, or "
"instance of super."
msgstr ""
"Los detalles de la invocación dependen de si ``obj`` es un objeto o una "
"clase."

#: ../Doc/howto/descriptor.rst:568
msgid "Invocation from an instance"
msgstr ""

#: ../Doc/howto/descriptor.rst:570
msgid ""
"Instance lookup scans through a chain of namespaces giving data descriptors "
"the highest priority, followed by instance variables, then non-data "
"descriptors, then class variables, and lastly :meth:`__getattr__` if it is "
"provided."
msgstr ""

#: ../Doc/howto/descriptor.rst:575
msgid ""
"If a descriptor is found for ``a.x``, then it is invoked with: ``desc."
"__get__(a, type(a))``."
msgstr ""

#: ../Doc/howto/descriptor.rst:578
msgid ""
"The logic for a dotted lookup is in :meth:`object.__getattribute__`.  Here "
"is a pure Python equivalent:"
msgstr ""

#: ../Doc/howto/descriptor.rst:698
msgid ""
"Interestingly, attribute lookup doesn't call :meth:`object.__getattribute__` "
"directly.  Instead, both the dot operator and the :func:`getattr` function "
"perform attribute lookup by way of a helper function:"
msgstr ""

#: ../Doc/howto/descriptor.rst:713
msgid ""
"So if :meth:`__getattr__` exists, it is called whenever :meth:"
"`__getattribute__` raises :exc:`AttributeError` (either directly or in one "
"of the descriptor calls)."
msgstr ""

#: ../Doc/howto/descriptor.rst:716
msgid ""
"Also, if a user calls :meth:`object.__getattribute__` directly, the :meth:"
"`__getattr__` hook is bypassed entirely."
msgstr ""

#: ../Doc/howto/descriptor.rst:721
#, fuzzy
msgid "Invocation from a class"
msgstr "Llamado desde una clase"

#: ../Doc/howto/descriptor.rst:723
msgid ""
"The logic for a dotted lookup such as ``A.x`` is in :meth:`type."
"__getattribute__`.  The steps are similar to those for :meth:`object."
"__getattribute__` but the instance dictionary lookup is replaced by a search "
"through the class's :term:`method resolution order`."
msgstr ""

#: ../Doc/howto/descriptor.rst:728
msgid "If a descriptor is found, it is invoked with ``desc.__get__(None, A)``."
msgstr ""

#: ../Doc/howto/descriptor.rst:730
msgid ""
"The full C implementation can be found in :c:func:`type_getattro()` and :c:"
"func:`_PyType_Lookup()` in :source:`Objects/typeobject.c`."
msgstr ""

#: ../Doc/howto/descriptor.rst:735
msgid "Invocation from super"
msgstr ""

#: ../Doc/howto/descriptor.rst:737
msgid ""
"The logic for super's dotted lookup is in the :meth:`__getattribute__` "
"method for object returned by :class:`super()`."
msgstr ""

#: ../Doc/howto/descriptor.rst:740
msgid ""
"A dotted lookup such as ``super(A, obj).m`` searches ``obj.__class__."
"__mro__`` for the base class ``B`` immediately following ``A`` and then "
"returns ``B.__dict__['m'].__get__(obj, A)``.  If not a descriptor, ``m`` is "
"returned unchanged."
msgstr ""

#: ../Doc/howto/descriptor.rst:745
#, fuzzy
msgid ""
"The full C implementation can be found in :c:func:`super_getattro()` in :"
"source:`Objects/typeobject.c`.  A pure Python equivalent can be found in "
"`Guido's Tutorial <https://www.python.org/download/releases/2.2.3/descrintro/"
"#cooperation>`_."
msgstr ""
"Los detalles de la implementación están en :c:func:`super_getattro()` en :"
"source:`Objects/typeobject.c` y un equivalente puro de Python se puede "
"encontrar en el `Guido's Tutorial`_."

#: ../Doc/howto/descriptor.rst:752
msgid "Summary of invocation logic"
msgstr ""

#: ../Doc/howto/descriptor.rst:754
msgid ""
"The mechanism for descriptors is embedded in the :meth:`__getattribute__()` "
"methods for :class:`object`, :class:`type`, and :func:`super`."
msgstr ""

#: ../Doc/howto/descriptor.rst:757
msgid "The important points to remember are:"
msgstr "Los puntos importantes a recordar son:"

#: ../Doc/howto/descriptor.rst:759
#, fuzzy
msgid "Descriptors are invoked by the :meth:`__getattribute__` method."
msgstr "los descriptores son invocados por el método :meth:`__getattribute__`"

#: ../Doc/howto/descriptor.rst:761
msgid ""
"Classes inherit this machinery from :class:`object`, :class:`type`, or :func:"
"`super`."
msgstr ""

#: ../Doc/howto/descriptor.rst:764
#, fuzzy
msgid ""
"Overriding :meth:`__getattribute__` prevents automatic descriptor calls "
"because all the descriptor logic is in that method."
msgstr ""
"redefinir :meth:`__getattribute__` evita las llamadas automáticas al "
"descriptor"

#: ../Doc/howto/descriptor.rst:767
#, fuzzy
msgid ""
":meth:`object.__getattribute__` and :meth:`type.__getattribute__` make "
"different calls to :meth:`__get__`.  The first includes the instance and may "
"include the class.  The second puts in ``None`` for the instance and always "
"includes the class."
msgstr ""
":meth:`object.__getattribute__` y :meth:`type.__getattribute__` realizan "
"diferentes llamadas a :meth:`__get__`."

#: ../Doc/howto/descriptor.rst:772
#, fuzzy
msgid "Data descriptors always override instance dictionaries."
msgstr ""
"los descriptores de datos siempre anulan los diccionarios de instancia."

#: ../Doc/howto/descriptor.rst:774
#, fuzzy
msgid "Non-data descriptors may be overridden by instance dictionaries."
msgstr ""
"los descriptores de no-datos pueden ser reemplazados por los diccionarios de "
"instancia."

#: ../Doc/howto/descriptor.rst:778
msgid "Automatic name notification"
msgstr ""

#: ../Doc/howto/descriptor.rst:780
msgid ""
"Sometimes it is desirable for a descriptor to know what class variable name "
"it was assigned to.  When a new class is created, the :class:`type` "
"metaclass scans the dictionary of the new class.  If any of the entries are "
"descriptors and if they define :meth:`__set_name__`, that method is called "
"with two arguments.  The *owner* is the class where the descriptor is used, "
"and the *name* is the class variable the descriptor was assigned to."
msgstr ""

#: ../Doc/howto/descriptor.rst:787
#, fuzzy
msgid ""
"The implementation details are in :c:func:`type_new()` and :c:func:"
"`set_names()` in :source:`Objects/typeobject.c`."
msgstr ""
"Los detalles de la implementación están en :c:func:`super_getattro()` en :"
"source:`Objects/typeobject.c` y un equivalente puro de Python se puede "
"encontrar en el `Guido's Tutorial`_."

#: ../Doc/howto/descriptor.rst:790
msgid ""
"Since the update logic is in :meth:`type.__new__`, notifications only take "
"place at the time of class creation.  If descriptors are added to the class "
"afterwards, :meth:`__set_name__` will need to be called manually."
msgstr ""

#: ../Doc/howto/descriptor.rst:796
#, fuzzy
msgid "ORM example"
msgstr "Ejemplo de descriptor"

#: ../Doc/howto/descriptor.rst:798
#, python-format
msgid ""
"The following code is simplified skeleton showing how data descriptors could "
"be used to implement an `object relational mapping <https://en.wikipedia.org/"
"wiki/Object%E2%80%93relational_mapping>`_."
msgstr ""

#: ../Doc/howto/descriptor.rst:802
msgid ""
"The essential idea is that the data is stored in an external database.  The "
"Python instances only hold keys to the database's tables.  Descriptors take "
"care of lookups or updates:"
msgstr ""

#: ../Doc/howto/descriptor.rst:821
msgid ""
"We can use the :class:`Field` class to define `models <https://en.wikipedia."
"org/wiki/Database_model>`_ that describe the schema for each table in a "
"database:"
msgstr ""

#: ../Doc/howto/descriptor.rst:846
msgid "To use the models, first connect to the database::"
msgstr ""

#: ../Doc/howto/descriptor.rst:851
msgid ""
"An interactive session shows how data is retrieved from the database and how "
"it can be updated:"
msgstr ""

#: ../Doc/howto/descriptor.rst:896
msgid "Pure Python Equivalents"
msgstr ""

#: ../Doc/howto/descriptor.rst:898
msgid ""
"The descriptor protocol is simple and offers exciting possibilities.  "
"Several use cases are so common that they have been prepackaged into built-"
"in tools. Properties, bound methods, static methods, class methods, and \\_"
"\\_slots\\_\\_ are all based on the descriptor protocol."
msgstr ""

#: ../Doc/howto/descriptor.rst:905
msgid "Properties"
msgstr "Propiedades"

#: ../Doc/howto/descriptor.rst:907
#, fuzzy
msgid ""
"Calling :func:`property` is a succinct way of building a data descriptor "
"that triggers a function call upon access to an attribute.  Its signature "
"is::"
msgstr ""
"Llamar a :func:`property` es una forma sucinta de construir un descriptor de "
"datos que desencadena llamadas a funciones al acceder a un atributo. Su "
"firma es::"

#: ../Doc/howto/descriptor.rst:912
#, fuzzy
msgid ""
"The documentation shows a typical use to define a managed attribute ``x``:"
msgstr ""
"La documentación muestra un uso típico para definir un atributo administrado "
"``x``::"

#: ../Doc/howto/descriptor.rst:922
#, fuzzy
msgid ""
"To see how :func:`property` is implemented in terms of the descriptor "
"protocol, here is a pure Python equivalent:"
msgstr ""
"Para ver cómo se implementa :func:`property` en términos del protocolo "
"descriptor, aquí hay un equivalente puro de Python::"

#: ../Doc/howto/descriptor.rst:1015
msgid ""
"The :func:`property` builtin helps whenever a user interface has granted "
"attribute access and then subsequent changes require the intervention of a "
"method."
msgstr ""
"La función incorporada :func:`property` es de ayuda cuando una interfaz de "
"usuario ha otorgado acceso a atributos y luego los cambios posteriores "
"requieren la intervención de un método."

#: ../Doc/howto/descriptor.rst:1019
#, fuzzy
msgid ""
"For instance, a spreadsheet class may grant access to a cell value through "
"``Cell('b10').value``. Subsequent improvements to the program require the "
"cell to be recalculated on every access; however, the programmer does not "
"want to affect existing client code accessing the attribute directly.  The "
"solution is to wrap access to the value attribute in a property data "
"descriptor:"
msgstr ""
"Por ejemplo, una clase de hoja de cálculo puede otorgar acceso al valor de "
"una celda a través de ``Cell('b10').value``. Las mejoras posteriores del "
"programa requieren que la celda se vuelva a calcular en cada acceso; sin "
"embargo, el programador no quiere afectar al código de cliente existente que "
"accede al atributo directamente. La solución es envolver el acceso al valor "
"del atributo en un descriptor de datos mediante una propiedad::"

#: ../Doc/howto/descriptor.rst:1036
msgid ""
"Either the built-in :func:`property` or our :func:`Property` equivalent "
"would work in this example."
msgstr ""

#: ../Doc/howto/descriptor.rst:1041
#, fuzzy
msgid "Functions and methods"
msgstr "Funciones y métodos"

#: ../Doc/howto/descriptor.rst:1043
msgid ""
"Python's object oriented features are built upon a function based "
"environment. Using non-data descriptors, the two are merged seamlessly."
msgstr ""
"Las características orientadas a objetos de Python se basan en un entorno "
"basado en funciones. Usando descriptores de no-datos, ambas se combinan "
"perfectamente."

#: ../Doc/howto/descriptor.rst:1046
msgid ""
"Functions stored in class dictionaries get turned into methods when invoked. "
"Methods only differ from regular functions in that the object instance is "
"prepended to the other arguments.  By convention, the instance is called "
"*self* but could be called *this* or any other variable name."
msgstr ""

#: ../Doc/howto/descriptor.rst:1051
msgid ""
"Methods can be created manually with :class:`types.MethodType` which is "
"roughly equivalent to:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1068
msgid ""
"To support automatic creation of methods, functions include the :meth:"
"`__get__` method for binding methods during attribute access.  This means "
"that functions are non-data descriptors that return bound methods during "
"dotted lookup from an instance.  Here's how it works:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1084
#, fuzzy
msgid ""
"Running the following class in the interpreter shows how the function "
"descriptor works in practice:"
msgstr ""
"Ejecutar el intérprete muestra como funciona el descriptor de función en la "
"práctica::"

#: ../Doc/howto/descriptor.rst:1093
msgid ""
"The function has a :term:`qualified name` attribute to support introspection:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1100
msgid ""
"Accessing the function through the class dictionary does not invoke :meth:"
"`__get__`.  Instead, it just returns the underlying function object::"
msgstr ""

#: ../Doc/howto/descriptor.rst:1106
msgid ""
"Dotted access from a class calls :meth:`__get__` which just returns the "
"underlying function unchanged::"
msgstr ""

#: ../Doc/howto/descriptor.rst:1112
msgid ""
"The interesting behavior occurs during dotted access from an instance.  The "
"dotted lookup calls :meth:`__get__` which returns a bound method object::"
msgstr ""

#: ../Doc/howto/descriptor.rst:1119
msgid ""
"Internally, the bound method stores the underlying function and the bound "
"instance::"
msgstr ""

#: ../Doc/howto/descriptor.rst:1128
msgid ""
"If you have ever wondered where *self* comes from in regular methods or "
"where *cls* comes from in class methods, this is it!"
msgstr ""

#: ../Doc/howto/descriptor.rst:1133
msgid "Other kinds of methods"
msgstr ""

#: ../Doc/howto/descriptor.rst:1135
msgid ""
"Non-data descriptors provide a simple mechanism for variations on the usual "
"patterns of binding functions into methods."
msgstr ""
"Los descriptores de no-datos proporcionan un mecanismo simple para "
"variaciones de los patrones habituales para vincular funciones en métodos."

#: ../Doc/howto/descriptor.rst:1138
#, fuzzy
msgid ""
"To recap, functions have a :meth:`__get__` method so that they can be "
"converted to a method when accessed as attributes.  The non-data descriptor "
"transforms an ``obj.f(*args)`` call into ``f(obj, *args)``.  Calling ``cls."
"f(*args)`` becomes ``f(*args)``."
msgstr ""
"En resumen, las funciones tienen un método :meth:`__get__` para que se "
"puedan convertir en un método cuando se accede a ellas como atributos. El "
"descriptor de no-datos transforma una llamada a ``obj.f(*args)`` en ``f(obj, "
"*args)``. Llamar a ``klass.f(*args)`` se convierte en ``f(*args)``."

#: ../Doc/howto/descriptor.rst:1143
msgid "This chart summarizes the binding and its two most useful variants:"
msgstr ""
"Este cuadro resume el enlace (*binding*) y sus dos variantes más útiles:"

#: ../Doc/howto/descriptor.rst:1146
msgid "Transformation"
msgstr "Transformación"

#: ../Doc/howto/descriptor.rst:1146
#, fuzzy
msgid "Called from an object"
msgstr "Llamado desde un objeto"

#: ../Doc/howto/descriptor.rst:1146
#, fuzzy
msgid "Called from a class"
msgstr "Llamado desde una clase"

#: ../Doc/howto/descriptor.rst:1149
msgid "function"
msgstr "función"

#: ../Doc/howto/descriptor.rst:1149
msgid "f(obj, \\*args)"
msgstr "f(obj, \\*args)"

#: ../Doc/howto/descriptor.rst:1149 ../Doc/howto/descriptor.rst:1151
msgid "f(\\*args)"
msgstr "f(\\*args)"

#: ../Doc/howto/descriptor.rst:1151
msgid "staticmethod"
msgstr "método estático"

#: ../Doc/howto/descriptor.rst:1153
msgid "classmethod"
msgstr "método de clase"

#: ../Doc/howto/descriptor.rst:1153
msgid "f(type(obj), \\*args)"
msgstr "f(type(obj), \\*args)"

#: ../Doc/howto/descriptor.rst:1153
#, fuzzy
msgid "f(cls, \\*args)"
msgstr "f(klass, \\*args)"

#: ../Doc/howto/descriptor.rst:1158
#, fuzzy
msgid "Static methods"
msgstr "método estático"

#: ../Doc/howto/descriptor.rst:1160
msgid ""
"Static methods return the underlying function without changes.  Calling "
"either ``c.f`` or ``C.f`` is the equivalent of a direct lookup into ``object."
"__getattribute__(c, \"f\")`` or ``object.__getattribute__(C, \"f\")``. As a "
"result, the function becomes identically accessible from either an object or "
"a class."
msgstr ""
"Los métodos estáticos devuelven la función subyacente sin cambios. Llamar a "
"``c.f`` o ``C.f`` es equivalente a una búsqueda directa en ``object."
"__getattribute__(c, \"f\")`` o en ``object.__getattribute__(C, \"f\")``. "
"Como resultado, la función se vuelve idénticamente accesible desde un objeto "
"o una clase."

#: ../Doc/howto/descriptor.rst:1166
msgid ""
"Good candidates for static methods are methods that do not reference the "
"``self`` variable."
msgstr ""
"Buenos candidatos para ser métodos estáticos son los métodos que no hacen "
"referencia a la variable ``self``."

#: ../Doc/howto/descriptor.rst:1169
msgid ""
"For instance, a statistics package may include a container class for "
"experimental data.  The class provides normal methods for computing the "
"average, mean, median, and other descriptive statistics that depend on the "
"data. However, there may be useful functions which are conceptually related "
"but do not depend on the data.  For instance, ``erf(x)`` is handy conversion "
"routine that comes up in statistical work but does not directly depend on a "
"particular dataset. It can be called either from an object or the class:  "
"``s.erf(1.5) --> .9332`` or ``Sample.erf(1.5) --> .9332``."
msgstr ""
"Por ejemplo, un paquete de estadística puede incluir una clase contenedora "
"para datos experimentales. La clase proporciona métodos normales para "
"calcular el promedio, la media, la mediana y otras estadísticas descriptivas "
"que dependen de los datos. Sin embargo, puede haber funciones útiles que "
"están relacionadas conceptualmente pero que no dependen de los datos. Por "
"ejemplo, ``erf(x)`` es una práctica rutinaria de conversión que surge en el "
"trabajo estadístico pero que no depende directamente de un conjunto de datos "
"en particular. Se puede llamar desde un objeto o la clase: ``s.erf(1.5) --"
"> .9332`` o ``Sample.erf(1.5) --> .9332``."

#: ../Doc/howto/descriptor.rst:1178
#, fuzzy
msgid ""
"Since static methods return the underlying function with no changes, the "
"example calls are unexciting:"
msgstr ""
"Dado que los métodos estáticos devuelven la función subyacente sin cambios, "
"las llamadas de ejemplo carecen de interés::"

#: ../Doc/howto/descriptor.rst:1195
#, fuzzy
msgid ""
"Using the non-data descriptor protocol, a pure Python version of :func:"
"`staticmethod` would look like this:"
msgstr ""
"Usando el protocolo descriptor de no-datos, una versión pura de Python de :"
"func:`staticmethod` se vería así::"

#: ../Doc/howto/descriptor.rst:1211
#, fuzzy
msgid "Class methods"
msgstr "método de clase"

#: ../Doc/howto/descriptor.rst:1213
#, fuzzy
msgid ""
"Unlike static methods, class methods prepend the class reference to the "
"argument list before calling the function.  This format is the same for "
"whether the caller is an object or a class:"
msgstr ""
"A diferencia de los métodos estáticos, los métodos de clase anteponen la "
"referencia de clase a la lista de argumentos antes de llamar a la función. "
"Este formato es el mismo si quien llama es un objeto o una clase::"

#: ../Doc/howto/descriptor.rst:1231
#, fuzzy
msgid ""
"This behavior is useful whenever the method only needs to have a class "
"reference and does not rely on data stored in a specific instance.  One use "
"for class methods is to create alternate class constructors.  For example, "
"the classmethod :func:`dict.fromkeys` creates a new dictionary from a list "
"of keys.  The pure Python equivalent is:"
msgstr ""
"Este comportamiento es útil siempre que la función solo necesite tener una "
"referencia de clase y no preocuparse por los datos subyacentes. Un uso de "
"los métodos de clase es crear constructores de clase alternativos. En Python "
"2.3, el método de clase :func:`dict.fromkeys` crea un nuevo diccionario a "
"partir de una lista de claves. El equivalente puro de Python es:"

#: ../Doc/howto/descriptor.rst:1248
#, fuzzy
msgid "Now a new dictionary of unique keys can be constructed like this:"
msgstr "Ahora se puede construir un nuevo diccionario de claves únicas así::"

#: ../Doc/howto/descriptor.rst:1258
#, fuzzy
msgid ""
"Using the non-data descriptor protocol, a pure Python version of :func:"
"`classmethod` would look like this:"
msgstr ""
"Usando el protocolo descriptor de no-datos, una implementación pura en "
"Python de :func:`classmethod` se vería así::"

#: ../Doc/howto/descriptor.rst:1296
msgid ""
"The code path for ``hasattr(obj, '__get__')`` was added in Python 3.9 and "
"makes it possible for :func:`classmethod` to support chained decorators. For "
"example, a classmethod and property could be chained together:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1315
msgid "Member objects and __slots__"
msgstr ""

#: ../Doc/howto/descriptor.rst:1317
msgid ""
"When a class defines ``__slots__``, it replaces instance dictionaries with a "
"fixed-length array of slot values.  From a user point of view that has "
"several effects:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1321
msgid ""
"1. Provides immediate detection of bugs due to misspelled attribute "
"assignments.  Only attribute names specified in ``__slots__`` are allowed:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1337
msgid ""
"2. Helps create immutable objects where descriptors manage access to private "
"attributes stored in ``__slots__``:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1372
msgid ""
"3. Saves memory.  On a 64-bit Linux build, an instance with two attributes "
"takes 48 bytes with ``__slots__`` and 152 bytes without.  This `flyweight "
"design pattern <https://en.wikipedia.org/wiki/Flyweight_pattern>`_ likely "
"only matters when a large number of instances are going to be created."
msgstr ""

#: ../Doc/howto/descriptor.rst:1377
msgid ""
"4. Blocks tools like :func:`functools.cached_property` which require an "
"instance dictionary to function correctly:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1399
msgid ""
"It is not possible to create an exact drop-in pure Python version of "
"``__slots__`` because it requires direct access to C structures and control "
"over object memory allocation.  However, we can build a mostly faithful "
"simulation where the actual C structure for slots is emulated by a private "
"``_slotvalues`` list.  Reads and writes to that private structure are "
"managed by member descriptors:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1442
msgid ""
"The :meth:`type.__new__` method takes care of adding member objects to class "
"variables:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1458
msgid ""
"The :meth:`object.__new__` method takes care of creating instances that have "
"slots instead of an instance dictionary.  Here is a rough simulation in pure "
"Python:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1493
msgid ""
"To use the simulation in a real class, just inherit from :class:`Object` and "
"set the :term:`metaclass` to :class:`Type`:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1507
msgid ""
"At this point, the metaclass has loaded member objects for *x* and *y*::"
msgstr ""

#: ../Doc/howto/descriptor.rst:1528
msgid ""
"When instances are created, they have a ``slot_values`` list where the "
"attributes are stored:"
msgstr ""

#: ../Doc/howto/descriptor.rst:1540
msgid "Misspelled or unassigned attributes will raise an exception:"
msgstr ""

#~ msgid ""
#~ "Defines descriptors, summarizes the protocol, and shows how descriptors "
#~ "are called.  Examines a custom descriptor and several built-in Python "
#~ "descriptors including functions, properties, static methods, and class "
#~ "methods.  Shows how each works by giving a pure Python equivalent and a "
#~ "sample application."
#~ msgstr ""
#~ "Definir los descriptores, resumir el protocolo y mostrar como los "
#~ "descriptores son llamados. Estudiar un descriptor personalizado y varios "
#~ "descriptores de Python incorporados, incluidas funciones, propiedades, "
#~ "métodos estáticos y métodos de clase. Mostrar como funciona cada uno "
#~ "proporcionando un equivalente puro de Python y un ejemplo de aplicación."

#~ msgid ""
#~ "In general, a descriptor is an object attribute with \"binding behavior"
#~ "\", one whose attribute access has been overridden by methods in the "
#~ "descriptor protocol.  Those methods are :meth:`__get__`, :meth:`__set__`, "
#~ "and :meth:`__delete__`.  If any of those methods are defined for an "
#~ "object, it is said to be a descriptor."
#~ msgstr ""
#~ "En general, un descriptor es un atributo de objeto con \"comportamiento "
#~ "vinculante\", dónde el acceso al atributo ha sido reemplazado por métodos "
#~ "en el protocolo del descriptor. Esos métodos son :meth:`__get__`, :meth:"
#~ "`__set__` y :meth:`__delete__`. Si alguno de esos métodos está definido "
#~ "para un objeto, se dice que es un descriptor."

#~ msgid ""
#~ "Descriptors are a powerful, general purpose protocol.  They are the "
#~ "mechanism behind properties, methods, static methods, class methods, and :"
#~ "func:`super()`. They are used throughout Python itself to implement the "
#~ "new style classes introduced in version 2.2.  Descriptors simplify the "
#~ "underlying C-code and offer a flexible set of new tools for everyday "
#~ "Python programs."
#~ msgstr ""
#~ "Los descriptores son un potente protocolo de propósito general. Son el "
#~ "mecanismo detrás de las propiedades, métodos, métodos estáticos, métodos "
#~ "de clase y :func:`super()`. Se utilizan en todo Python para implementar "
#~ "las clases de nuevo estilo introducidas en la versión 2.2. Los "
#~ "descriptores simplifican el código C subyacente y ofrecen un conjunto "
#~ "flexible de nuevas herramientas para los programas de Python cotidianos."

#~ msgid "Invoking Descriptors"
#~ msgstr "Invocar descriptores"

#~ msgid ""
#~ "Alternatively, it is more common for a descriptor to be invoked "
#~ "automatically upon attribute access.  For example, ``obj.d`` looks up "
#~ "``d`` in the dictionary of ``obj``.  If ``d`` defines the method :meth:"
#~ "`__get__`, then ``d.__get__(obj)`` is invoked according to the precedence "
#~ "rules listed below."
#~ msgstr ""
#~ "Alternativamente, es más común que un descriptor se invoque "
#~ "automáticamente al acceder a un atributo. Por ejemplo, ``obj.d`` busca "
#~ "``d`` en el diccionario de ``obj``. Si ``d`` define el método :meth:"
#~ "`__get__`, entonces se invoca ``d.__get__(obj)`` de acuerdo con las "
#~ "reglas de precedencia que se enumeran a continuación."

#~ msgid ""
#~ "For objects, the machinery is in :meth:`object.__getattribute__` which "
#~ "transforms ``b.x`` into ``type(b).__dict__['x'].__get__(b, type(b))``.  "
#~ "The implementation works through a precedence chain that gives data "
#~ "descriptors priority over instance variables, instance variables priority "
#~ "over non-data descriptors, and assigns lowest priority to :meth:"
#~ "`__getattr__` if provided. The full C implementation can be found in :c:"
#~ "func:`PyObject_GenericGetAttr()` in :source:`Objects/object.c`."
#~ msgstr ""
#~ "Para los objetos, el mecanismo se encuentra en :meth:`object."
#~ "__getattribute__` que transforma ``b.x`` en ``type(b).__dict__['x']."
#~ "__get__(b, type(b))``. La implementación funciona a través de una cadena "
#~ "de precedencia que da a los descriptores de datos prioridad sobre las "
#~ "variables de instancia, a las variables de instancia prioridad sobre los "
#~ "descriptores de no-datos y asigna la prioridad más baja a :meth:"
#~ "`__getattr__` si se proporciona. La implementación completa en C se puede "
#~ "encontrar en :c:func:`PyObject_GenericGetAttr()` en :source:`Objects/"
#~ "object.c`."

#~ msgid ""
#~ "For classes, the machinery is in :meth:`type.__getattribute__` which "
#~ "transforms ``B.x`` into ``B.__dict__['x'].__get__(None, B)``.  In pure "
#~ "Python, it looks like::"
#~ msgstr ""
#~ "Para clases, el mecanismo se define en :meth:`type.__getattribute__` que "
#~ "transforma ``B.x`` en ``B.__dict__['x'].__get__(None, B)``. En Python "
#~ "puro, quedaría así::"

#~ msgid ""
#~ "The object returned by ``super()`` also has a custom :meth:"
#~ "`__getattribute__` method for invoking descriptors.  The attribute lookup "
#~ "``super(B, obj).m`` searches ``obj.__class__.__mro__`` for the base class "
#~ "``A`` immediately following ``B`` and then returns ``A.__dict__['m']."
#~ "__get__(obj, B)``.  If not a descriptor, ``m`` is returned unchanged.  If "
#~ "not in the dictionary, ``m`` reverts to a search using :meth:`object."
#~ "__getattribute__`."
#~ msgstr ""
#~ "El objeto devuelto por ``super()`` también tiene un método personalizado :"
#~ "meth:`__getattribute__` para poder invocar descriptores. La búsqueda de "
#~ "atributo ``super(B, obj).m`` busca ``obj.__class__.__mro__`` para la "
#~ "clase base ``A`` inmediatamente después de ``B`` y luego devuelve ``A."
#~ "__dict__['m'].__get__(obj, B)``. Si no es un descriptor, se devuelve "
#~ "``m`` sin cambios. Si no está en el diccionario, ``m`` revierte a una "
#~ "búsqueda usando :meth:`object.__getattribute__`."

#~ msgid ""
#~ "The details above show that the mechanism for descriptors is embedded in "
#~ "the :meth:`__getattribute__()` methods for :class:`object`, :class:"
#~ "`type`, and :func:`super`.  Classes inherit this machinery when they "
#~ "derive from :class:`object` or if they have a meta-class providing "
#~ "similar functionality. Likewise, classes can turn-off descriptor "
#~ "invocation by overriding :meth:`__getattribute__()`."
#~ msgstr ""
#~ "Los detalles anteriores muestran que el mecanismo para los descriptores "
#~ "está incrustado en los métodos :meth:`__getattribute__()`  para :class:"
#~ "`object`, :class:`type` y :func:`super`. Las clases heredan este "
#~ "mecanismo cuando derivan de :class:`object` o mediante una metaclase que "
#~ "proporcione funcionalidades similares. Del mismo modo, las clases pueden "
#~ "desactivar la invocación del descriptor redefiniendo :meth:"
#~ "`__getattribute__()`."

#~ msgid ""
#~ "The following code creates a class whose objects are data descriptors "
#~ "which print a message for each get or set.  Overriding :meth:"
#~ "`__getattribute__` is alternate approach that could do this for every "
#~ "attribute.  However, this descriptor is useful for monitoring just a few "
#~ "chosen attributes::"
#~ msgstr ""
#~ "El siguiente código crea una clase cuyos objetos son descriptores de "
#~ "datos que imprimen un mensaje para cada lectura o escritura. Redefinir :"
#~ "meth:`__getattribute__` es un enfoque alternativo que podría hacer esto "
#~ "para cada atributo. Sin embargo, este descriptor es útil para monitorizar "
#~ "solo algunos atributos elegidos::"

#~ msgid ""
#~ "The protocol is simple and offers exciting possibilities.  Several use "
#~ "cases are so common that they have been packaged into individual function "
#~ "calls. Properties, bound methods, static methods, and class methods are "
#~ "all based on the descriptor protocol."
#~ msgstr ""
#~ "El protocolo es simple y ofrece interesantes posibilidades. Varios casos "
#~ "de uso son tan comunes que se han empaquetado en llamadas a funciones "
#~ "individuales. Las propiedades, los métodos vinculados, los métodos "
#~ "estáticos y los métodos de clase se basan en el protocolo descriptor."

#~ msgid ""
#~ "Class dictionaries store methods as functions.  In a class definition, "
#~ "methods are written using :keyword:`def` or :keyword:`lambda`, the usual "
#~ "tools for creating functions.  Methods only differ from regular functions "
#~ "in that the first argument is reserved for the object instance.  By "
#~ "Python convention, the instance reference is called *self* but may be "
#~ "called *this* or any other variable name."
#~ msgstr ""
#~ "Los diccionarios de clase almacenan los métodos como funciones. En una "
#~ "definición de clase, los métodos se escriben usando :keyword:`def` o :"
#~ "keyword:`lambda`, las herramientas habituales para crear funciones. Los "
#~ "métodos solo difieren de las funciones regulares en que el primer "
#~ "argumento está reservado para la instancia del objeto. Por convención en "
#~ "Python, la referencia de instancia se llama *self* pero puede llamarse "
#~ "*this* o cualquier otro nombre de variable."

#~ msgid ""
#~ "To support method calls, functions include the :meth:`__get__` method for "
#~ "binding methods during attribute access.  This means that all functions "
#~ "are non-data descriptors which return bound methods when they are invoked "
#~ "from an object.  In pure Python, it works like this::"
#~ msgstr ""
#~ "Para admitir llamadas a métodos, las funciones incluyen el método :meth:"
#~ "`__get__` para vincular métodos durante el acceso a atributos. Esto "
#~ "significa que todas las funciones son descriptores de no-datos que "
#~ "devuelven métodos enlazados cuando se invocan desde un objeto. En Python "
#~ "puro, funciona así::"

#~ msgid "Static Methods and Class Methods"
#~ msgstr "Métodos estáticos y métodos de clase"
